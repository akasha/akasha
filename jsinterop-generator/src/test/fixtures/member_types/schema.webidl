dictionary MyDictionary {
  any anyValue;
  ArrayBuffer arrayBufferValueValue;
  FrozenArray<boolean> booleanFrozenArrayValue;
  sequence<boolean> booleanSequenceValue;
  boolean booleanValue;
  record<ByteString, ByteString> byteStringRecordValue;
  ByteString byteStringValue;
  byte byteValue;
  DataView dataViewValueValue;
  record<DOMString, DOMString> domStringRecordValue;
  DOMString domStringValue;
  FrozenArray<double> doubleFrozenArrayValue;
  record<DOMString, double> doubleRecordValue;
  sequence<double> doubleSequenceValue;
  double doubleValue;
  Float32Array float32ArrayValue;
  Float64Array float64ArrayValue;
  FrozenArray<float> floatFrozenArrayValue;
  sequence<float> floatSequenceValue;
  float floatValue;
  Int16Array int16ArrayValue;
  Int32Array int32ArrayValue;
  Int8Array int8ArrayValue;
  long long longLongValue;
  long longValue;
  record<DOMString, USVString> mixedStringRecordValue;
  ArrayBuffer? nullableArrayBufferValueValue;
  FrozenArray<boolean>? nullableBooleanFrozenArrayValue;
  sequence<boolean>? nullableBooleanSequenceValue;
  boolean? nullableBooleanValue;
  ByteString? nullableByteStringValue;
  byte? nullableByteValue;
  DOMString? nullableDOMStringValue;
  DataView? nullableDataViewValueValue;
  FrozenArray<double>? nullableDoubleFrozenArrayValue;
  sequence<double>? nullableDoubleSequenceValue;
  double? nullableDoubleValue;
  Float32Array? nullableFloat32ArrayValue;
  Float64Array? nullableFloat64ArrayValue;
  FrozenArray<float>? nullableFloatFrozenArrayValue;
  sequence<float>? nullableFloatSequenceValue;
  float? nullableFloatValue;
  Int16Array? nullableInt16ArrayValue;
  Int32Array? nullableInt32ArrayValue;
  Int8Array? nullableInt8ArrayValue;
  long long? nullableLongLongValue;
  long? nullableLongValue;
  object? nullableObjectValue;
  octet? nullableOctetValue;
  FrozenArray<short>? nullableShortFrozenArrayValue;
  Promise<short?> nullableShortPromiseValue;
  sequence<short>? nullableShortSequenceValue;
  short? nullableShortValue;
  FrozenArray<SomeType>? nullableSomeTypeFrozenArrayValue;
  Promise<SomeType?> nullableSomeTypePromiseValue;
  sequence<SomeType>? nullableSomeTypeSequenceValue;
  SomeType? nullableSomeTypeValue;
  symbol? nullableSymbolValue;
  USVString? nullableUSVStringValue;
  Uint16Array? nullableUint16ArrayValue;
  Uint32Array? nullableUint32ArrayValue;
  Uint8Array? nullableUint8ArrayValue;
  Uint8ClampedArray? nullableUint8ClampedArrayValue;
  unrestricted double? nullableUnrestrictedDoubleValue;
  unrestricted float? nullableUnrestrictedFloatValue;
  unsigned long long? nullableUnsignedLongLongValue;
  unsigned long? nullableUnsignedLongValue;
  unsigned short? nullableUnsignedShortValue;
  object objectValue;
  octet octetValue;
  required any requiredAnyValue;
  required ArrayBuffer requiredArrayBufferValueValue;
  required FrozenArray<boolean> requiredBooleanFrozenArrayValue;
  required sequence<boolean> requiredBooleanSequenceValue;
  required boolean requiredBooleanValue;
  required ByteString requiredByteStringValue;
  required byte requiredByteValue;
  required DOMString requiredDOMStringValue;
  required DataView requiredDataViewValueValue;
  required FrozenArray<double> requiredDoubleFrozenArrayValue;
  required sequence<double> requiredDoubleSequenceValue;
  required double requiredDoubleValue;
  required Float32Array requiredFloat32ArrayValue;
  required Float64Array requiredFloat64ArrayValue;
  required FrozenArray<float> requiredFloatFrozenArrayValue;
  required sequence<float> requiredFloatSequenceValue;
  required float requiredFloatValue;
  required Int16Array requiredInt16ArrayValue;
  required Int32Array requiredInt32ArrayValue;
  required Int8Array requiredInt8ArrayValue;
  required long long requiredLongLongValue;
  required long requiredLongValue;
  required ArrayBuffer? requiredNullableArrayBufferValueValue;
  required FrozenArray<boolean>? requiredNullableBooleanFrozenArrayValue;
  required sequence<boolean>? requiredNullableBooleanSequenceValue;
  required boolean? requiredNullableBooleanValue;
  required ByteString? requiredNullableByteStringValue;
  required byte? requiredNullableByteValue;
  required DOMString? requiredNullableDOMStringValue;
  required DataView? requiredNullableDataViewValueValue;
  required FrozenArray<double>? requiredNullableDoubleFrozenArrayValue;
  required sequence<double>? requiredNullableDoubleSequenceValue;
  required double? requiredNullableDoubleValue;
  required Float32Array? requiredNullableFloat32ArrayValue;
  required Float64Array? requiredNullableFloat64ArrayValue;
  required FrozenArray<float>? requiredNullableFloatFrozenArrayValue;
  required sequence<float>? requiredNullableFloatSequenceValue;
  required float? requiredNullableFloatValue;
  required Int16Array? requiredNullableInt16ArrayValue;
  required Int32Array? requiredNullableInt32ArrayValue;
  required Int8Array? requiredNullableInt8ArrayValue;
  required long long? requiredNullableLongLongValue;
  required long? requiredNullableLongValue;
  required object? requiredNullableObjectValue;
  required octet? requiredNullableOctetValue;
  required FrozenArray<short>? requiredNullableShortFrozenArrayValue;
  required sequence<short>? requiredNullableShortSequenceValue;
  required short? requiredNullableShortValue;
  required FrozenArray<SomeType>? requiredNullableSomeTypeFrozenArrayValue;
  required sequence<SomeType>? requiredNullableSomeTypeSequenceValue;
  required SomeType? requiredNullableSomeTypeValue;
  required symbol? requiredNullableSymbolValue;
  required USVString? requiredNullableUSVStringValue;
  required Uint16Array? requiredNullableUint16ArrayValue;
  required Uint32Array? requiredNullableUint32ArrayValue;
  required Uint8Array? requiredNullableUint8ArrayValue;
  required Uint8ClampedArray? requiredNullableUint8ClampedArrayValue;
  required unrestricted double? requiredNullableUnrestrictedDoubleValue;
  required unrestricted float? requiredNullableUnrestrictedFloatValue;
  required unsigned long long? requiredNullableUnsignedLongLongValue;
  required unsigned long? requiredNullableUnsignedLongValue;
  required unsigned short? requiredNullableUnsignedShortValue;
  required object requiredObjectValue;
  required octet requiredOctetValue;
  required FrozenArray<short> requiredShortFrozenArrayValue;
  required sequence<short> requiredShortSequenceValue;
  required short requiredShortValue;
  required FrozenArray<SomeType> requiredSomeTypeFrozenArrayValue;
  required sequence<SomeType> requiredSomeTypeSequenceValue;
  required SomeType requiredSomeTypeValue;
  required symbol requiredSymbolValue;
  required USVString requiredUSVStringValue;
  required Uint16Array requiredUint16ArrayValue;
  required Uint32Array requiredUint32ArrayValue;
  required Uint8Array requiredUint8ArrayValue;
  required Uint8ClampedArray requiredUint8ClampedArrayValue;
  required unrestricted double requiredUnrestrictedDoubleValue;
  required unrestricted float requiredUnrestrictedFloatValue;
  required unsigned long long requiredUnsignedLongLongValue;
  required unsigned long requiredUnsignedLongValue;
  required unsigned short requiredUnsignedShortValue;
  Promise<sequence<long long>> sequencePromiseValue;
  FrozenArray<short> shortFrozenArrayValue;
  Promise<short> shortPromiseValue;
  sequence<short> shortSequenceValue;
  short shortValue;
  FrozenArray<SomeType> someTypeFrozenArrayValue;
  Promise<SomeType> someTypePromiseValue;
  sequence<SomeType> someTypeSequenceValue;
  SomeType someTypeValue;
  symbol symbolValue;
  record<DOMString, SomeType> typeReferenceRecordValue;
  Uint16Array uint16ArrayValue;
  Uint32Array uint32ArrayValue;
  Uint8Array uint8ArrayValue;
  Uint8ClampedArray uint8ClampedArrayValue;
  unrestricted double unrestrictedDoubleValue;
  unrestricted float unrestrictedFloatValue;
  unsigned long long unsignedLongLongValue;
  unsigned long unsignedLongValue;
  unsigned short unsignedShortValue;
  record<USVString, USVString> usvStringRecordValue;
  USVString usvStringValue;
  Promise<void> voidPromiseValue;
};

[SecureContext, Exposed=(Window,Worker)]
interface MyType1 {
  readonly attribute any readonlyAnyValue;
  readonly attribute ArrayBuffer readonlyArrayBufferValueValue;
  readonly attribute FrozenArray<boolean> readonlyBooleanFrozenArrayValue;
  readonly attribute sequence<boolean> readonlyBooleanSequenceValue;
  readonly attribute boolean readonlyBooleanValue;
  readonly attribute ByteString readonlyByteStringValue;
  readonly attribute byte readonlyByteValue;
  readonly attribute DOMString readonlyDOMStringValue;
  readonly attribute DataView readonlyDataViewValueValue;
  readonly attribute FrozenArray<double> readonlyDoubleFrozenArrayValue;
  readonly attribute sequence<double> readonlyDoubleSequenceValue;
  readonly attribute double readonlyDoubleValue;
  readonly attribute Float32Array readonlyFloat32ArrayValue;
  readonly attribute Float64Array readonlyFloat64ArrayValue;
  readonly attribute FrozenArray<float> readonlyFloatFrozenArrayValue;
  readonly attribute sequence<float> readonlyFloatSequenceValue;
  readonly attribute float readonlyFloatValue;
  readonly attribute Int16Array readonlyInt16ArrayValue;
  readonly attribute Int32Array readonlyInt32ArrayValue;
  readonly attribute Int8Array readonlyInt8ArrayValue;
  readonly attribute long long readonlyLongLongValue;
  readonly attribute long readonlyLongValue;
  readonly attribute ArrayBuffer? readonlyNullableArrayBufferValueValue;
  readonly attribute FrozenArray<boolean>? readonlyNullableBooleanFrozenArrayValue;
  readonly attribute sequence<boolean>? readonlyNullableBooleanSequenceValue;
  readonly attribute boolean? readonlyNullableBooleanValue;
  readonly attribute ByteString? readonlyNullableByteStringValue;
  readonly attribute byte? readonlyNullableByteValue;
  readonly attribute DOMString? readonlyNullableDOMStringValue;
  readonly attribute DataView? readonlyNullableDataViewValueValue;
  readonly attribute FrozenArray<double>? readonlyNullableDoubleFrozenArrayValue;
  readonly attribute sequence<double>? readonlyNullableDoubleSequenceValue;
  readonly attribute double? readonlyNullableDoubleValue;
  readonly attribute Float32Array? readonlyNullableFloat32ArrayValue;
  readonly attribute Float64Array? readonlyNullableFloat64ArrayValue;
  readonly attribute FrozenArray<float>? readonlyNullableFloatFrozenArrayValue;
  readonly attribute sequence<float>? readonlyNullableFloatSequenceValue;
  readonly attribute float? readonlyNullableFloatValue;
  readonly attribute Int16Array? readonlyNullableInt16ArrayValue;
  readonly attribute Int32Array? readonlyNullableInt32ArrayValue;
  readonly attribute Int8Array? readonlyNullableInt8ArrayValue;
  readonly attribute long long? readonlyNullableLongLongValue;
  readonly attribute long? readonlyNullableLongValue;
  readonly attribute object? readonlyNullableObjectValue;
  readonly attribute octet? readonlyNullableOctetValue;
  readonly attribute FrozenArray<short>? readonlyNullableShortFrozenArrayValue;
  readonly attribute Promise<short?> readonlyNullableShortPromiseValue;
  readonly attribute sequence<short>? readonlyNullableShortSequenceValue;
  readonly attribute short? readonlyNullableShortValue;
  readonly attribute FrozenArray<SomeType>? readonlyNullableSomeTypeFrozenArrayValue;
  readonly attribute Promise<SomeType?> readonlyNullableSomeTypePromiseValue;
  readonly attribute sequence<SomeType>? readonlyNullableSomeTypeSequenceValue;
  readonly attribute SomeType? readonlyNullableSomeTypeValue;
  readonly attribute symbol? readonlyNullableSymbolValue;
  readonly attribute USVString? readonlyNullableUSVStringValue;
  readonly attribute Uint16Array? readonlyNullableUint16ArrayValue;
  readonly attribute Uint32Array? readonlyNullableUint32ArrayValue;
  readonly attribute Uint8Array? readonlyNullableUint8ArrayValue;
  readonly attribute Uint8ClampedArray? readonlyNullableUint8ClampedArrayValue;
  readonly attribute unrestricted double? readonlyNullableUnrestrictedDoubleValue;
  readonly attribute unrestricted float? readonlyNullableUnrestrictedFloatValue;
  readonly attribute unsigned long long? readonlyNullableUnsignedLongLongValue;
  readonly attribute unsigned long? readonlyNullableUnsignedLongValue;
  readonly attribute unsigned short? readonlyNullableUnsignedShortValue;
  readonly attribute object readonlyObjectValue;
  readonly attribute octet readonlyOctetValue;
  readonly attribute FrozenArray<short> readonlyShortFrozenArrayValue;
  readonly attribute Promise<short> readonlyShortPromiseValue;
  readonly attribute sequence<short> readonlyShortSequenceValue;
  readonly attribute short readonlyShortValue;
  readonly attribute FrozenArray<SomeType> readonlySomeTypeFrozenArrayValue;
  readonly attribute Promise<SomeType> readonlySomeTypePromiseValue;
  readonly attribute sequence<SomeType> readonlySomeTypeSequenceValue;
  readonly attribute SomeType readonlySomeTypeValue;
  readonly attribute symbol readonlySymbolValue;
  readonly attribute USVString readonlyUSVStringValue;
  readonly attribute Uint16Array readonlyUint16ArrayValue;
  readonly attribute Uint32Array readonlyUint32ArrayValue;
  readonly attribute Uint8Array readonlyUint8ArrayValue;
  readonly attribute Uint8ClampedArray readonlyUint8ClampedArrayValue;
  readonly attribute unrestricted double readonlyUnrestrictedDoubleValue;
  readonly attribute unrestricted float readonlyUnrestrictedFloatValue;
  readonly attribute unsigned long long readonlyUnsignedLongLongValue;
  readonly attribute unsigned long readonlyUnsignedLongValue;
  readonly attribute unsigned short readonlyUnsignedShortValue;
  readonly attribute Promise<void> readonlyVoidPromiseValue;
};

[SecureContext, Exposed=(Window,Worker)]
interface MyType2 {
  attribute any anyValue;
  attribute ArrayBuffer arrayBufferValueValue;
  attribute FrozenArray<boolean> booleanFrozenArrayValue;
  attribute sequence<boolean> booleanSequenceValue;
  attribute boolean booleanValue;
  attribute record<ByteString, ByteString> byteStringRecordValue;
  attribute ByteString byteStringValue;
  attribute byte byteValue;
  attribute DataView dataViewValueValue;
  attribute record<DOMString, DOMString> domStringRecordValue;
  attribute DOMString domStringValue;
  attribute FrozenArray<double> doubleFrozenArrayValue;
  attribute record<DOMString, double> doubleRecordValue;
  attribute sequence<double> doubleSequenceValue;
  attribute double doubleValue;
  attribute Float32Array float32ArrayValue;
  attribute Float64Array float64ArrayValue;
  attribute FrozenArray<float> floatFrozenArrayValue;
  attribute sequence<float> floatSequenceValue;
  attribute float floatValue;
  attribute Int16Array int16ArrayValue;
  attribute Int32Array int32ArrayValue;
  attribute Int8Array int8ArrayValue;
  attribute Promise<sequence<long long>> longLongPromiseValue;
  attribute long long longLongValue;
  attribute long longValue;
  attribute record<DOMString, USVString> mixedStringRecordValue;
  attribute ArrayBuffer? nullableArrayBufferValueValue;
  attribute FrozenArray<boolean>? nullableBooleanFrozenArrayValue;
  attribute sequence<boolean>? nullableBooleanSequenceValue;
  attribute boolean? nullableBooleanValue;
  attribute ByteString? nullableByteStringValue;
  attribute byte? nullableByteValue;
  attribute DOMString? nullableDOMStringValue;
  attribute DataView? nullableDataViewValueValue;
  attribute FrozenArray<double>? nullableDoubleFrozenArrayValue;
  attribute sequence<double>? nullableDoubleSequenceValue;
  attribute double? nullableDoubleValue;
  attribute Float32Array? nullableFloat32ArrayValue;
  attribute Float64Array? nullableFloat64ArrayValue;
  attribute FrozenArray<float>? nullableFloatFrozenArrayValue;
  attribute sequence<float>? nullableFloatSequenceValue;
  attribute float? nullableFloatValue;
  attribute Int16Array? nullableInt16ArrayValue;
  attribute Int32Array? nullableInt32ArrayValue;
  attribute Int8Array? nullableInt8ArrayValue;
  attribute long long? nullableLongLongValue;
  attribute long? nullableLongValue;
  attribute object? nullableObjectValue;
  attribute octet? nullableOctetValue;
  attribute FrozenArray<short>? nullableShortFrozenArrayValue;
  attribute Promise<short?> nullableShortPromiseValue;
  attribute sequence<short>? nullableShortSequenceValue;
  attribute short? nullableShortValue;
  attribute FrozenArray<SomeType>? nullableSomeTypeFrozenArrayValue;
  attribute Promise<SomeType?> nullableSomeTypePromiseValue;
  attribute sequence<SomeType>? nullableSomeTypeSequenceValue;
  attribute SomeType? nullableSomeTypeValue;
  attribute symbol? nullableSymbolValue;
  attribute USVString? nullableUSVStringValue;
  attribute Uint16Array? nullableUint16ArrayValue;
  attribute Uint32Array? nullableUint32ArrayValue;
  attribute Uint8Array? nullableUint8ArrayValue;
  attribute Uint8ClampedArray? nullableUint8ClampedArrayValue;
  attribute unrestricted double? nullableUnrestrictedDoubleValue;
  attribute unrestricted float? nullableUnrestrictedFloatValue;
  attribute unsigned long long? nullableUnsignedLongLongValue;
  attribute unsigned long? nullableUnsignedLongValue;
  attribute unsigned short? nullableUnsignedShortValue;
  attribute object objectValue;
  attribute octet octetValue;
  attribute FrozenArray<short> shortFrozenArrayValue;
  attribute Promise<short> shortPromiseValue;
  attribute sequence<short> shortSequenceValue;
  attribute short shortValue;
  attribute FrozenArray<SomeType> someTypeFrozenArrayValue;
  attribute Promise<SomeType> someTypePromiseValue;
  attribute sequence<SomeType> someTypeSequenceValue;
  attribute SomeType someTypeValue;
  attribute symbol symbolValue;
  attribute record<DOMString, SomeType> typeReferenceRecordValue;
  attribute Uint16Array uint16ArrayValue;
  attribute Uint32Array uint32ArrayValue;
  attribute Uint8Array uint8ArrayValue;
  attribute Uint8ClampedArray uint8ClampedArrayValue;
  attribute unrestricted double unrestrictedDoubleValue;
  attribute unrestricted float unrestrictedFloatValue;
  attribute unsigned long long unsignedLongLongValue;
  attribute unsigned long unsignedLongValue;
  attribute unsigned short unsignedShortValue;
  attribute record<USVString, USVString> usvStringRecordValue;
  attribute USVString usvStringValue;
  attribute Promise<void> voidPromiseValue;
};

[SecureContext, Exposed=(Window,Worker)]
interface MyType3 {
  any anyMethod( any v1, optional any v2 );
  ArrayBuffer arrayBufferValueMethod( ArrayBuffer v1, optional ArrayBuffer v2 );
  FrozenArray<boolean> booleanFrozenArrayMethod( FrozenArray<boolean> v1, optional FrozenArray<boolean> v2 );
  boolean booleanMethod( boolean v1, optional boolean v2 );
  sequence<boolean> booleanSequenceMethod( sequence<boolean> v1, optional sequence<boolean> v2 );
  byte byteMethod( byte v1, optional byte v2 );
  ByteString byteStringMethod( ByteString v1, optional ByteString v2 );
  record<ByteString, ByteString> byteStringRecordMethod( record<ByteString, ByteString> v1, optional record<ByteString, ByteString> v2 );
  DataView dataViewValueMethod( DataView v1, optional DataView v2 );
  DOMString domStringMethod( DOMString v1, optional DOMString v2 );
  record<DOMString, DOMString> domStringRecordMethod( record<DOMString, DOMString> v1, optional record<DOMString, DOMString> v2 );
  FrozenArray<double> doubleFrozenArrayMethod( FrozenArray<double> v1, optional FrozenArray<double> v2 );
  double doubleMethod( double v1, optional double v2 );
  record<DOMString, double> doubleRecordMethod( record<DOMString, double> v1, optional record<DOMString, double> v2 );
  sequence<double> doubleSequenceMethod( sequence<double> v1, optional sequence<double> v2 );
  Float32Array float32ArrayMethod( Float32Array v1, optional Float32Array v2 );
  Float64Array float64ArrayMethod( Float64Array v1, optional Float64Array v2 );
  FrozenArray<float> floatFrozenArrayMethod( FrozenArray<float> v1, optional FrozenArray<float> v2 );
  float floatMethod( float v1, optional float v2 );
  sequence<float> floatSequenceMethod( sequence<float> v1, optional sequence<float> v2 );
  Int16Array int16ArrayMethod( Int16Array v1, optional Int16Array v2 );
  Int32Array int32ArrayMethod( Int32Array v1, optional Int32Array v2 );
  Int8Array int8ArrayMethod( Int8Array v1, optional Int8Array v2 );
  long long longLongMethod( long long v1, optional long long v2 );
  Promise<sequence<long long>> longLongPromiseMethod( Promise<sequence<long long>> v1, optional Promise<sequence<long long>> v2 );
  long longMethod( long v1, optional long v2 );
  record<DOMString, USVString> mixedStringRecordMethod( record<DOMString, USVString> v1, optional record<DOMString, USVString> v2 );
  ArrayBuffer? nullableArrayBufferValueMethod( ArrayBuffer? v1, optional ArrayBuffer? v2 );
  FrozenArray<boolean>? nullableBooleanFrozenArrayMethod( FrozenArray<boolean>? v1, optional FrozenArray<boolean>? v2 );
  boolean? nullableBooleanMethod( boolean? v1, optional boolean? v2 );
  sequence<boolean>? nullableBooleanSequenceMethod( sequence<boolean>? v1, optional sequence<boolean>? v2 );
  byte? nullableByteMethod( byte? v1, optional byte? v2 );
  ByteString? nullableByteStringMethod( ByteString? v1, optional ByteString? v2 );
  DOMString? nullableDOMStringMethod( DOMString? v1, optional DOMString? v2 );
  DataView? nullableDataViewValueMethod( DataView? v1, optional DataView? v2 );
  FrozenArray<double>? nullableDoubleFrozenArrayMethod( FrozenArray<double>? v1, optional FrozenArray<double>? v2 );
  double? nullableDoubleMethod( double? v1, optional double? v2 );
  sequence<double>? nullableDoubleSequenceMethod( sequence<double>? v1, optional sequence<double>? v2 );
  Float32Array? nullableFloat32ArrayMethod( Float32Array? v1, optional Float32Array? v2 );
  Float64Array? nullableFloat64ArrayMethod( Float64Array? v1, optional Float64Array? v2 );
  FrozenArray<float>? nullableFloatFrozenArrayMethod( FrozenArray<float>? v1, optional FrozenArray<float>? v2 );
  float? nullableFloatMethod( float? v1, optional float? v2 );
  sequence<float>? nullableFloatSequenceMethod( sequence<float>? v1, optional sequence<float>? v2 );
  Int16Array? nullableInt16ArrayMethod( Int16Array? v1, optional Int16Array? v2 );
  Int32Array? nullableInt32ArrayMethod( Int32Array? v1, optional Int32Array? v2 );
  Int8Array? nullableInt8ArrayMethod( Int8Array? v1, optional Int8Array? v2 );
  long long? nullableLongLongMethod( long long? v1, optional long long? v2 );
  long? nullableLongMethod( long? v1, optional long? v2 );
  object? nullableObjectMethod( object? v1, optional object? v2 );
  octet? nullableOctetMethod( octet? v1, optional octet? v2 );
  FrozenArray<short>? nullableShortFrozenArrayMethod( FrozenArray<short>? v1, optional FrozenArray<short>? v2 );
  short? nullableShortMethod( short? v1, optional short? v2 );
  Promise<short?> nullableShortPromiseMethod( Promise<short?> v1, optional Promise<short?> v2 );
  sequence<short>? nullableShortSequenceMethod( sequence<short>? v1, optional sequence<short>? v2 );
  FrozenArray<SomeType>? nullableSomeTypeFrozenArrayMethod( FrozenArray<SomeType>? v1, optional FrozenArray<SomeType>? v2 );
  SomeType? nullableSomeTypeMethod( SomeType? v1, optional SomeType? v2 );
  Promise<SomeType?> nullableSomeTypePromiseMethod( Promise<SomeType?> v1, optional Promise<SomeType?> v2 );
  sequence<SomeType>? nullableSomeTypeSequenceMethod( sequence<SomeType>? v1, optional sequence<SomeType>? v2 );
  symbol? nullableSymbolMethod( symbol? v1, optional symbol? v2 );
  USVString? nullableUSVStringMethod( USVString? v1, optional USVString? v2 );
  Uint16Array? nullableUint16ArrayMethod( Uint16Array? v1, optional Uint16Array? v2 );
  Uint32Array? nullableUint32ArrayMethod( Uint32Array? v1, optional Uint32Array? v2 );
  Uint8Array? nullableUint8ArrayMethod( Uint8Array? v1, optional Uint8Array? v2 );
  Uint8ClampedArray? nullableUint8ClampedArrayMethod( Uint8ClampedArray? v1, optional Uint8ClampedArray? v2 );
  unrestricted double? nullableUnrestrictedDoubleMethod( unrestricted double? v1, optional unrestricted double? v2 );
  unrestricted float? nullableUnrestrictedFloatMethod( unrestricted float? v1, optional unrestricted float? v2 );
  unsigned long long? nullableUnsignedLongLongMethod( unsigned long long? v1, optional unsigned long long? v2 );
  unsigned long? nullableUnsignedLongMethod( unsigned long? v1, optional unsigned long? v2 );
  unsigned short? nullableUnsignedShortMethod( unsigned short? v1, optional unsigned short? v2 );
  object objectMethod( object v1, optional object v2 );
  octet octetMethod( octet v1, optional octet v2 );
  FrozenArray<short> shortFrozenArrayMethod( FrozenArray<short> v1, optional FrozenArray<short> v2 );
  short shortMethod( short v1, optional short v2 );
  Promise<short> shortPromiseMethod( Promise<short> v1, optional Promise<short> v2 );
  sequence<short> shortSequenceMethod( sequence<short> v1, optional sequence<short> v2 );
  FrozenArray<SomeType> someTypeFrozenArrayMethod( FrozenArray<SomeType> v1, optional FrozenArray<SomeType> v2 );
  SomeType someTypeMethod( SomeType v1, optional SomeType v2 );
  Promise<SomeType> someTypePromiseMethod( Promise<SomeType> v1, optional Promise<SomeType> v2 );
  sequence<SomeType> someTypeSequenceMethod( sequence<SomeType> v1, optional sequence<SomeType> v2 );
  symbol symbolMethod( symbol v1, optional symbol v2 );
  record<DOMString, SomeType> typeReferenceRecordMethod( record<DOMString, SomeType> v1, optional record<DOMString, SomeType> v2 );
  Uint16Array uint16ArrayMethod( Uint16Array v1, optional Uint16Array v2 );
  Uint32Array uint32ArrayMethod( Uint32Array v1, optional Uint32Array v2 );
  Uint8Array uint8ArrayMethod( Uint8Array v1, optional Uint8Array v2 );
  Uint8ClampedArray uint8ClampedArrayMethod( Uint8ClampedArray v1, optional Uint8ClampedArray v2 );
  unrestricted double unrestrictedDoubleMethod( unrestricted double v1, optional unrestricted double v2 );
  unrestricted float unrestrictedFloatMethod( unrestricted float v1, optional unrestricted float v2 );
  unsigned long long unsignedLongLongMethod( unsigned long long v1, optional unsigned long long v2 );
  unsigned long unsignedLongMethod( unsigned long v1, optional unsigned long v2 );
  unsigned short unsignedShortMethod( unsigned short v1, optional unsigned short v2 );
  USVString usvStringMethod( USVString v1, optional USVString v2 );
  record<USVString, USVString> usvStringRecordMethod( record<USVString, USVString> v1, optional record<USVString, USVString> v2 );
  Promise<void> voidPromiseMethod( Promise<void> v1, optional Promise<void> v2 );
};

[SecureContext, Exposed=(Window,Worker)]
interface MyType4 {
  static any anyMethod( any v1, optional any v2 );
  static ArrayBuffer arrayBufferValueMethod( ArrayBuffer v1, optional ArrayBuffer v2 );
  static FrozenArray<boolean> booleanFrozenArrayMethod( FrozenArray<boolean> v1, optional FrozenArray<boolean> v2 );
  static boolean booleanMethod( boolean v1, optional boolean v2 );
  static sequence<boolean> booleanSequenceMethod( sequence<boolean> v1, optional sequence<boolean> v2 );
  static byte byteMethod( byte v1, optional byte v2 );
  static ByteString byteStringMethod( ByteString v1, optional ByteString v2 );
  static record<ByteString, ByteString> byteStringRecordMethod( record<ByteString, ByteString> v1, optional record<ByteString, ByteString> v2 );
  static DataView dataViewValueMethod( DataView v1, optional DataView v2 );
  static DOMString domStringMethod( DOMString v1, optional DOMString v2 );
  static record<DOMString, DOMString> domStringRecordMethod( record<DOMString, DOMString> v1, optional record<DOMString, DOMString> v2 );
  static FrozenArray<double> doubleFrozenArrayMethod( FrozenArray<double> v1, optional FrozenArray<double> v2 );
  static double doubleMethod( double v1, optional double v2 );
  static record<DOMString, double> doubleRecordMethod( record<DOMString, double> v1, optional record<DOMString, double> v2 );
  static sequence<double> doubleSequenceMethod( sequence<double> v1, optional sequence<double> v2 );
  static Float32Array float32ArrayMethod( Float32Array v1, optional Float32Array v2 );
  static Float64Array float64ArrayMethod( Float64Array v1, optional Float64Array v2 );
  static FrozenArray<float> floatFrozenArrayMethod( FrozenArray<float> v1, optional FrozenArray<float> v2 );
  static float floatMethod( float v1, optional float v2 );
  static sequence<float> floatSequenceMethod( sequence<float> v1, optional sequence<float> v2 );
  static Int16Array int16ArrayMethod( Int16Array v1, optional Int16Array v2 );
  static Int32Array int32ArrayMethod( Int32Array v1, optional Int32Array v2 );
  static Int8Array int8ArrayMethod( Int8Array v1, optional Int8Array v2 );
  static long long longLongMethod( long long v1, optional long long v2 );
  static Promise<sequence<long long>> longLongPromiseMethod( Promise<sequence<long long>> v1, optional Promise<sequence<long long>> v2 );
  static long longMethod( long v1, optional long v2 );
  static record<DOMString, USVString> mixedStringRecordMethod( record<DOMString, USVString> v1, optional record<DOMString, USVString> v2 );
  static ArrayBuffer? nullableArrayBufferValueMethod( ArrayBuffer? v1, optional ArrayBuffer? v2 );
  static FrozenArray<boolean>? nullableBooleanFrozenArrayMethod( FrozenArray<boolean>? v1, optional FrozenArray<boolean>? v2 );
  static boolean? nullableBooleanMethod( boolean? v1, optional boolean? v2 );
  static sequence<boolean>? nullableBooleanSequenceMethod( sequence<boolean>? v1, optional sequence<boolean>? v2 );
  static byte? nullableByteMethod( byte? v1, optional byte? v2 );
  static ByteString? nullableByteStringMethod( ByteString? v1, optional ByteString? v2 );
  static DOMString? nullableDOMStringMethod( DOMString? v1, optional DOMString? v2 );
  static DataView? nullableDataViewValueMethod( DataView? v1, optional DataView? v2 );
  static FrozenArray<double>? nullableDoubleFrozenArrayMethod( FrozenArray<double>? v1, optional FrozenArray<double>? v2 );
  static double? nullableDoubleMethod( double? v1, optional double? v2 );
  static sequence<double>? nullableDoubleSequenceMethod( sequence<double>? v1, optional sequence<double>? v2 );
  static Float32Array? nullableFloat32ArrayMethod( Float32Array? v1, optional Float32Array? v2 );
  static Float64Array? nullableFloat64ArrayMethod( Float64Array? v1, optional Float64Array? v2 );
  static FrozenArray<float>? nullableFloatFrozenArrayMethod( FrozenArray<float>? v1, optional FrozenArray<float>? v2 );
  static float? nullableFloatMethod( float? v1, optional float? v2 );
  static sequence<float>? nullableFloatSequenceMethod( sequence<float>? v1, optional sequence<float>? v2 );
  static Int16Array? nullableInt16ArrayMethod( Int16Array? v1, optional Int16Array? v2 );
  static Int32Array? nullableInt32ArrayMethod( Int32Array? v1, optional Int32Array? v2 );
  static Int8Array? nullableInt8ArrayMethod( Int8Array? v1, optional Int8Array? v2 );
  static long long? nullableLongLongMethod( long long? v1, optional long long? v2 );
  static long? nullableLongMethod( long? v1, optional long? v2 );
  static object? nullableObjectMethod( object? v1, optional object? v2 );
  static octet? nullableOctetMethod( octet? v1, optional octet? v2 );
  static FrozenArray<short>? nullableShortFrozenArrayMethod( FrozenArray<short>? v1, optional FrozenArray<short>? v2 );
  static short? nullableShortMethod( short? v1, optional short? v2 );
  static Promise<short?> nullableShortPromiseMethod( Promise<short?> v1, optional Promise<short?> v2 );
  static sequence<short>? nullableShortSequenceMethod( sequence<short>? v1, optional sequence<short>? v2 );
  static FrozenArray<SomeType>? nullableSomeTypeFrozenArrayMethod( FrozenArray<SomeType>? v1, optional FrozenArray<SomeType>? v2 );
  static SomeType? nullableSomeTypeMethod( SomeType? v1, optional SomeType? v2 );
  static Promise<SomeType?> nullableSomeTypePromiseMethod( Promise<SomeType?> v1, optional Promise<SomeType?> v2 );
  static sequence<SomeType>? nullableSomeTypeSequenceMethod( sequence<SomeType>? v1, optional sequence<SomeType>? v2 );
  static symbol? nullableSymbolMethod( symbol? v1, optional symbol? v2 );
  static USVString? nullableUSVStringMethod( USVString? v1, optional USVString? v2 );
  static Uint16Array? nullableUint16ArrayMethod( Uint16Array? v1, optional Uint16Array? v2 );
  static Uint32Array? nullableUint32ArrayMethod( Uint32Array? v1, optional Uint32Array? v2 );
  static Uint8Array? nullableUint8ArrayMethod( Uint8Array? v1, optional Uint8Array? v2 );
  static Uint8ClampedArray? nullableUint8ClampedArrayMethod( Uint8ClampedArray? v1, optional Uint8ClampedArray? v2 );
  static unrestricted double? nullableUnrestrictedDoubleMethod( unrestricted double? v1, optional unrestricted double? v2 );
  static unrestricted float? nullableUnrestrictedFloatMethod( unrestricted float? v1, optional unrestricted float? v2 );
  static unsigned long long? nullableUnsignedLongLongMethod( unsigned long long? v1, optional unsigned long long? v2 );
  static unsigned long? nullableUnsignedLongMethod( unsigned long? v1, optional unsigned long? v2 );
  static unsigned short? nullableUnsignedShortMethod( unsigned short? v1, optional unsigned short? v2 );
  static object objectMethod( object v1, optional object v2 );
  static octet octetMethod( octet v1, optional octet v2 );
  static FrozenArray<short> shortFrozenArrayMethod( FrozenArray<short> v1, optional FrozenArray<short> v2 );
  static short shortMethod( short v1, optional short v2 );
  static Promise<short> shortPromiseMethod( Promise<short> v1, optional Promise<short> v2 );
  static sequence<short> shortSequenceMethod( sequence<short> v1, optional sequence<short> v2 );
  static FrozenArray<SomeType> someTypeFrozenArrayMethod( FrozenArray<SomeType> v1, optional FrozenArray<SomeType> v2 );
  static SomeType someTypeMethod( SomeType v1, optional SomeType v2 );
  static Promise<SomeType> someTypePromiseMethod( Promise<SomeType> v1, optional Promise<SomeType> v2 );
  static sequence<SomeType> someTypeSequenceMethod( sequence<SomeType> v1, optional sequence<SomeType> v2 );
  static symbol symbolMethod( symbol v1, optional symbol v2 );
  static record<DOMString, SomeType> typeReferenceRecordMethod( record<DOMString, SomeType> v1, optional record<DOMString, SomeType> v2 );
  static Uint16Array uint16ArrayMethod( Uint16Array v1, optional Uint16Array v2 );
  static Uint32Array uint32ArrayMethod( Uint32Array v1, optional Uint32Array v2 );
  static Uint8Array uint8ArrayMethod( Uint8Array v1, optional Uint8Array v2 );
  static Uint8ClampedArray uint8ClampedArrayMethod( Uint8ClampedArray v1, optional Uint8ClampedArray v2 );
  static unrestricted double unrestrictedDoubleMethod( unrestricted double v1, optional unrestricted double v2 );
  static unrestricted float unrestrictedFloatMethod( unrestricted float v1, optional unrestricted float v2 );
  static unsigned long long unsignedLongLongMethod( unsigned long long v1, optional unsigned long long v2 );
  static unsigned long unsignedLongMethod( unsigned long v1, optional unsigned long v2 );
  static unsigned short unsignedShortMethod( unsigned short v1, optional unsigned short v2 );
  static USVString usvStringMethod( USVString v1, optional USVString v2 );
  static record<USVString, USVString> usvStringRecordMethod( record<USVString, USVString> v1, optional record<USVString, USVString> v2 );
  static Promise<void> voidPromiseMethod( Promise<void> v1, optional Promise<void> v2 );
};

[SecureContext, Exposed=(Window,Worker)]
interface SomeType {
};
