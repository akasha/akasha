enum AlignSetting {
  "start",
  "center",
  "end",
  "left",
  "right"
};

enum AnimationPlayState {
  "finished",
  "idle",
  "paused",
  "running"
};

enum AppendMode {
  "segments",
  "sequence"
};

enum AttestationConveyancePreference {
  "none",
  "indirect",
  "direct"
};

enum AudioContextLatencyCategory {
  "balanced",
  "interactive",
  "playback"
};

enum AudioContextState {
  "closed",
  "running",
  "suspended"
};

enum AuthenticatorAttachment {
  "platform",
  "cross-platform"
};

enum AuthenticatorTransport {
  "usb",
  "nfc",
  "ble",
  "internal"
};

enum AutoKeyword {
  "auto"
};

enum AutomationRate {
  "a-rate",
  "k-rate"
};

enum BinaryType {
  "arraybuffer",
  "blob"
};

enum BiquadFilterType {
  "allpass",
  "bandpass",
  "highpass",
  "highshelf",
  "lowpass",
  "lowshelf",
  "notch",
  "peaking"
};

enum BitrateMode {
  "cbr",
  "vbr"
};

enum CanPlayTypeResult {
  "",
  "maybe",
  "probably"
};

enum CanvasDirection {
  "inherit",
  "ltr",
  "rtl"
};

enum CanvasFillRule {
  "evenodd",
  "nonzero"
};

enum CanvasLineCap {
  "butt",
  "round",
  "square"
};

enum CanvasLineJoin {
  "bevel",
  "miter",
  "round"
};

enum CanvasTextAlign {
  "center",
  "end",
  "left",
  "right",
  "start"
};

enum CanvasTextBaseline {
  "alphabetic",
  "bottom",
  "hanging",
  "ideographic",
  "middle",
  "top"
};

enum ChannelCountMode {
  "clamped-max",
  "explicit",
  "max"
};

enum ChannelInterpretation {
  "discrete",
  "speakers"
};

enum ClientType {
  "all",
  "sharedworker",
  "window",
  "worker"
};

enum ColorSpaceConversion {
  "default",
  "none"
};

enum CompositeOperation {
  "accumulate",
  "add",
  "replace"
};

enum CompositeOperationOrAuto {
  "accumulate",
  "add",
  "auto",
  "replace"
};

enum CredentialMediationRequirement {
  "optional",
  "required",
  "silent"
};

enum CursorCaptureConstraint {
  "always",
  "motion",
  "never"
};

enum DOMParserSupportedType {
  "application/xhtml+xml",
  "application/xml",
  "image/svg+xml",
  "text/html",
  "text/xml"
};

enum DevicePermissionState {
  "denied",
  "granted"
};

enum DirectionSetting {
  "",
  "rl",
  "lr"
};

enum DisplayCaptureSurfaceType {
  "application",
  "browser",
  "monitor",
  "window"
};

enum DistanceModelType {
  "exponential",
  "inverse",
  "linear"
};

enum DocumentReadyState {
  "complete",
  "interactive",
  "loading"
};

enum EndOfStreamError {
  "decode",
  "network"
};

enum EndingType {
  "native",
  "transparent"
};

enum FillMode {
  "auto",
  "backwards",
  "both",
  "forwards",
  "none"
};

enum FrameType {
  "auxiliary",
  "nested",
  "none",
  "top-level"
};

enum FullscreenNavigationUI {
  "auto",
  "hide",
  "show"
};

enum GamepadHand {
  "",
  "left",
  "right"
};

enum GamepadHapticActuatorType {
  "vibration"
};

enum GamepadMappingType {
  "",
  "standard"
};

enum IDBCursorDirection {
  "next",
  "nextunique",
  "prev",
  "prevunique"
};

enum IDBRequestReadyState {
  "done",
  "pending"
};

enum IDBTransactionDurability {
  "default",
  "relaxed",
  "strict"
};

enum IDBTransactionMode {
  "readonly",
  "readwrite",
  "versionchange"
};

enum ImageOrientation {
  "flipY",
  "none"
};

enum ImageSmoothingQuality {
  "high",
  "low",
  "medium"
};

enum ImportExportKind {
  "function",
  "global",
  "memory",
  "table"
};

enum IterationCompositeOperation {
  "accumulate",
  "replace"
};

enum KeyFormat {
  "jwk",
  "pkcs8",
  "raw",
  "spki"
};

enum KeyType {
  "private",
  "public",
  "secret"
};

enum KeyUsage {
  "decrypt",
  "deriveBits",
  "deriveKey",
  "encrypt",
  "sign",
  "unwrapKey",
  "verify",
  "wrapKey"
};

enum LineAlignSetting {
  "start",
  "center",
  "end"
};

enum MediaDeviceKind {
  "audioinput",
  "audiooutput",
  "videoinput"
};

enum MediaKeyMessageType {
  "individualization-request",
  "license-release",
  "license-renewal",
  "license-request"
};

enum MediaKeySessionType {
  "persistent-license",
  "temporary"
};

enum MediaKeyStatus {
  "expired",
  "internal-error",
  "output-downscaled",
  "output-restricted",
  "released",
  "status-pending",
  "usable"
};

enum MediaKeysRequirement {
  "not-allowed",
  "optional",
  "required"
};

enum MediaStreamTrackState {
  "ended",
  "live"
};

enum NavigationType {
  "back_forward",
  "navigate",
  "prerender",
  "reload"
};

enum NotificationDirection {
  "auto",
  "ltr",
  "rtl"
};

enum NotificationPermission {
  "default",
  "denied",
  "granted"
};

enum OffscreenRenderingContextId {
  "2d",
  "bitmaprenderer",
  "webgl",
  "webgl2"
};

enum OrientationLockType {
  "any",
  "landscape",
  "landscape-primary",
  "landscape-secondary",
  "natural",
  "portrait",
  "portrait-primary",
  "portrait-secondary"
};

enum OrientationType {
  "landscape-primary",
  "landscape-secondary",
  "portrait-primary",
  "portrait-secondary"
};

enum OscillatorType {
  "custom",
  "sawtooth",
  "sine",
  "square",
  "triangle"
};

enum OverSampleType {
  "2x",
  "4x",
  "none"
};

enum PanningModelType {
  "HRTF",
  "equalpower"
};

enum PermissionName {
  "accelerometer",
  "ambient-light-sensor",
  "background-sync",
  "bluetooth",
  "camera",
  "clipboard",
  "device-info",
  "geolocation",
  "gyroscope",
  "magnetometer",
  "microphone",
  "midi",
  "notifications",
  "persistent-storage",
  "push",
  "speaker"
};

enum PermissionState {
  "denied",
  "granted",
  "prompt"
};

enum PlaybackDirection {
  "alternate",
  "alternate-reverse",
  "normal",
  "reverse"
};

enum PositionAlignSetting {
  "line-left",
  "center",
  "line-right",
  "auto"
};

enum PremultiplyAlpha {
  "default",
  "none",
  "premultiply"
};

enum PresentationStyle {
  "attachment",
  "inline",
  "unspecified"
};

enum PublicKeyCredentialType {
  "public-key"
};

enum PushEncryptionKeyName {
  "auth",
  "p256dh"
};

enum PushPermissionState {
  "denied",
  "granted",
  "prompt"
};

enum RTCBundlePolicy {
  "balanced",
  "max-compat",
  "max-bundle"
};

enum RTCCodecType {
  "encode",
  "decode"
};

enum RTCDataChannelState {
  "connecting",
  "open",
  "closing",
  "closed"
};

enum RTCDtlsTransportState {
  "new",
  "connecting",
  "connected",
  "closed",
  "failed"
};

enum RTCErrorDetailType {
  "data-channel-failure",
  "dtls-failure",
  "fingerprint-failure",
  "sctp-failure",
  "sdp-syntax-error",
  "hardware-encoder-not-available",
  "hardware-encoder-error"
};

enum RTCErrorDetailTypeIdp {
  "idp-bad-script-failure",
  "idp-execution-failure",
  "idp-load-failure",
  "idp-need-login",
  "idp-timeout",
  "idp-tls-failure",
  "idp-token-expired",
  "idp-token-invalid"
};

enum RTCIceCandidateType {
  "host",
  "srflx",
  "prflx",
  "relay"
};

enum RTCIceComponent {
  "rtp",
  "rtcp"
};

enum RTCIceConnectionState {
  "closed",
  "failed",
  "disconnected",
  "new",
  "checking",
  "completed",
  "connected"
};

enum RTCIceCredentialType {
  "password"
};

enum RTCIceGathererState {
  "new",
  "gathering",
  "complete"
};

enum RTCIceGatheringState {
  "new",
  "gathering",
  "complete"
};

enum RTCIceProtocol {
  "udp",
  "tcp"
};

enum RTCIceRole {
  "unknown",
  "controlling",
  "controlled"
};

enum RTCIceTcpCandidateType {
  "active",
  "passive",
  "so"
};

enum RTCIceTransportPolicy {
  "relay",
  "all"
};

enum RTCIceTransportState {
  "new",
  "checking",
  "connected",
  "completed",
  "disconnected",
  "failed",
  "closed"
};

enum RTCPeerConnectionState {
  "closed",
  "failed",
  "disconnected",
  "new",
  "connecting",
  "connected"
};

enum RTCPriorityType {
  "very-low",
  "low",
  "medium",
  "high"
};

enum RTCQualityLimitationReason {
  "none",
  "cpu",
  "bandwidth",
  "other"
};

enum RTCRtcpMuxPolicy {
  "require"
};

enum RTCRtpTransceiverDirection {
  "sendrecv",
  "sendonly",
  "recvonly",
  "inactive",
  "stopped"
};

enum RTCSctpTransportState {
  "connecting",
  "connected",
  "closed"
};

enum RTCSdpType {
  "offer",
  "pranswer",
  "answer",
  "rollback"
};

enum RTCSignalingState {
  "stable",
  "have-local-offer",
  "have-remote-offer",
  "have-local-pranswer",
  "have-remote-pranswer",
  "closed"
};

enum RTCStatsIceCandidatePairState {
  "frozen",
  "waiting",
  "in-progress",
  "failed",
  "succeeded"
};

enum RTCStatsType {
  "codec",
  "inbound-rtp",
  "outbound-rtp",
  "remote-inbound-rtp",
  "remote-outbound-rtp",
  "media-source",
  "csrc",
  "peer-connection",
  "data-channel",
  "stream",
  "track",
  "transceiver",
  "sender",
  "receiver",
  "transport",
  "sctp-transport",
  "candidate-pair",
  "local-candidate",
  "remote-candidate",
  "certificate",
  "ice-server"
};

enum ReadyState {
  "closed",
  "ended",
  "open"
};

enum RecordingState {
  "inactive",
  "recording",
  "paused"
};

enum ReferrerPolicy {
  "",
  "no-referrer",
  "no-referrer-when-downgrade",
  "origin",
  "origin-when-cross-origin",
  "same-origin",
  "strict-origin",
  "strict-origin-when-cross-origin",
  "unsafe-url"
};

enum RequestCache {
  "default",
  "force-cache",
  "no-cache",
  "no-store",
  "only-if-cached",
  "reload"
};

enum RequestCredentials {
  "include",
  "omit",
  "same-origin"
};

enum RequestDestination {
  "",
  "audio",
  "audioworklet",
  "document",
  "embed",
  "font",
  "frame",
  "iframe",
  "image",
  "manifest",
  "object",
  "paintworklet",
  "report",
  "script",
  "sharedworker",
  "style",
  "track",
  "video",
  "worker",
  "xslt"
};

enum RequestMode {
  "cors",
  "navigate",
  "no-cors",
  "same-origin"
};

enum RequestRedirect {
  "error",
  "follow",
  "manual"
};

enum ResizeQuality {
  "high",
  "low",
  "medium",
  "pixelated"
};

enum ResponseType {
  "basic",
  "cors",
  "default",
  "error",
  "opaque",
  "opaqueredirect"
};

enum ScrollBehavior {
  "auto",
  "smooth"
};

enum ScrollLogicalPosition {
  "center",
  "end",
  "nearest",
  "start"
};

enum ScrollRestoration {
  "auto",
  "manual"
};

enum ScrollSetting {
  "",
  "up"
};

enum SecurityPolicyViolationEventDisposition {
  "enforce",
  "report"
};

enum SelectionMode {
  "end",
  "preserve",
  "select",
  "start"
};

enum ServiceWorkerState {
  "activated",
  "activating",
  "installed",
  "installing",
  "parsed",
  "redundant"
};

enum ServiceWorkerUpdateViaCache {
  "all",
  "imports",
  "none"
};

enum ShadowRootMode {
  "closed",
  "open"
};

enum SpeechRecognitionErrorCode {
  "no-speech",
  "aborted",
  "audio-capture",
  "network",
  "not-allowed",
  "service-not-allowed",
  "bad-grammar",
  "language-not-supported"
};

enum SpeechSynthesisErrorCode {
  "canceled",
  "interrupted",
  "audio-busy",
  "audio-hardware",
  "network",
  "synthesis-unavailable",
  "synthesis-failed",
  "language-unavailable",
  "voice-unavailable",
  "text-too-long",
  "invalid-argument",
  "not-allowed"
};

enum TableKind {
  "anyfunc"
};

enum TextTrackKind {
  "captions",
  "chapters",
  "descriptions",
  "metadata",
  "subtitles"
};

enum TextTrackMode {
  "disabled",
  "hidden",
  "showing"
};

enum TokenBindingStatus {
  "present",
  "supported"
};

enum TouchType {
  "direct",
  "stylus"
};

enum UserVerificationRequirement {
  "required",
  "preferred",
  "discouraged"
};

enum ValueType {
  "f32",
  "f64",
  "i32",
  "i64"
};

enum VideoFacingModeEnum {
  "environment",
  "left",
  "right",
  "user"
};

enum VideoResizeModeEnum {
  "crop-and-scale",
  "none"
};

enum VisibilityState {
  "hidden",
  "visible"
};

enum WebGLPowerPreference {
  "default",
  "high-performance",
  "low-power"
};

enum WorkerType {
  "classic",
  "module"
};

enum XMLHttpRequestResponseType {
  "",
  "arraybuffer",
  "blob",
  "document",
  "json",
  "text"
};

enum XREye {
  "left",
  "none",
  "right"
};

enum XRHandedness {
  "left",
  "none",
  "right"
};

enum XRReferenceSpaceType {
  "bounded-floor",
  "local",
  "local-floor",
  "unbounded",
  "viewer"
};

enum XRSessionMode {
  "immersive-vr",
  "inline"
};

enum XRTargetRayMode {
  "gaze",
  "screen",
  "tracked-pointer"
};

enum XRVisibilityState {
  "hidden",
  "visible",
  "visible-blurred"
};

typedef BufferSource AAGUID;

typedef ( object or DOMString ) AlgorithmIdentifier;

typedef ( Int8Array or Int16Array or Int32Array or Uint8Array or Uint16Array or Uint32Array or Uint8ClampedArray or Float32Array or Float64Array or DataView ) ArrayBufferView;

typedef record<DOMString, DOMString> AuthenticationExtensionsAuthenticatorInputs;

typedef sequence<USVString> AuthenticationExtensionsSupported;

typedef sequence<AAGUID> AuthenticatorSelectionList;

typedef Uint8Array BigInteger;

typedef ( BufferSource or Blob or USVString ) BlobPart;

typedef ( DOMString or unsigned long ) BluetoothCharacteristicUUID;

typedef ( DOMString or unsigned long ) BluetoothDescriptorUUID;

typedef ( DOMString or unsigned long ) BluetoothServiceUUID;

typedef ( ReadableStream or XMLHttpRequestBodyInit ) BodyInit;

typedef ( ArrayBufferView or ArrayBuffer ) BufferSource;

typedef long COSEAlgorithmIdentifier;

typedef DOMString CSSOMString;

typedef ( HTMLOrSVGImageElement or HTMLVideoElement or HTMLCanvasElement or ImageBitmap or OffscreenCanvas ) CanvasImageSource;

typedef Promise<ClipboardItemDataType> ClipboardItemData;

typedef ( DOMString or Blob ) ClipboardItemDataType;

typedef sequence<ClipboardItem> ClipboardItems;

typedef ( boolean or ConstrainBooleanParameters ) ConstrainBoolean;

typedef ( DOMString or sequence<DOMString> or ConstrainDOMStringParameters ) ConstrainDOMString;

typedef ( double or ConstrainDoubleRange ) ConstrainDouble;

typedef ( [Clamp] unsigned long or ConstrainULongRange ) ConstrainULong;

typedef double DOMHighResTimeStamp;

typedef unsigned long long DOMTimeStamp;

typedef ( [AllowShared] Float32Array or sequence<GLfloat> ) Float32List;

typedef ( File or USVString ) FormDataEntryValue;

typedef unsigned long GLbitfield;

typedef boolean GLboolean;

typedef byte GLbyte;

typedef unrestricted float GLclampf;

typedef unsigned long GLenum;

typedef unrestricted float GLfloat;

typedef long GLint;

typedef long long GLint64;

typedef long long GLintptr;

typedef short GLshort;

typedef long GLsizei;

typedef long long GLsizeiptr;

typedef octet GLubyte;

typedef unsigned long GLuint;

typedef unsigned long long GLuint64;

typedef unsigned short GLushort;

typedef ( HTMLImageElement or SVGImageElement ) HTMLOrSVGImageElement;

typedef ( HTMLScriptElement or SVGScriptElement ) HTMLOrSVGScriptElement;

typedef AlgorithmIdentifier HashAlgorithmIdentifier;

typedef ( sequence<sequence<ByteString>> or record<ByteString, ByteString> ) HeadersInit;

typedef ( CanvasImageSource or Blob or ImageData ) ImageBitmapSource;

typedef ( [AllowShared] Int32Array or sequence<GLint> ) Int32List;

typedef ( double or AutoKeyword ) LineAndPositionSetting;

typedef ( MediaStream or MediaSource or Blob ) MediaProvider;

typedef object MediaStreamError;

typedef ( WindowProxy or MessagePort or ServiceWorker ) MessageEventSource;

typedef DOMString NamedCurve;

typedef EventHandler? NullableEventHandler;

typedef OnBeforeUnloadEventHandler? NullableOnBeforeUnloadEventHandler;

typedef OnErrorEventHandler? NullableOnErrorEventHandler;

typedef ( OffscreenCanvasRenderingContext2D or ImageBitmapRenderingContext or WebGLRenderingContext or WebGL2RenderingContext ) OffscreenRenderingContext;

typedef ( PasswordCredentialData or HTMLFormElement ) PasswordCredentialInit;

typedef sequence<PerformanceEntry> PerformanceEntryList;

typedef ( BufferSource or USVString ) PushMessageDataInit;

typedef ( CanvasRenderingContext2D or ImageBitmapRenderingContext or WebGLRenderingContext or WebGL2RenderingContext ) RenderingContext;

typedef sequence<Report> ReportList;

typedef ( Request or USVString ) RequestInfo;

typedef ( DOMString or long long ) StringifySpaceUnionType;

typedef ( ImageBitmap or ImageData or HTMLImageElement or HTMLCanvasElement or HTMLVideoElement or OffscreenCanvas ) TexImageSource;

typedef ( DOMString or Function ) TimerHandler;

typedef DOMString UUID;

typedef ( [AllowShared] Uint32Array or sequence<GLuint> ) Uint32List;

typedef sequence<UvmEntry> UvmEntries;

typedef sequence<unsigned long> UvmEntry;

typedef ( unsigned long or sequence<unsigned long> ) VibratePattern;

typedef Window WindowProxy;

typedef ( Blob or BufferSource or FormData or URLSearchParams or USVString ) XMLHttpRequestBodyInit;

typedef ( WebGLRenderingContext or WebGL2RenderingContext ) XRWebGLRenderingContext;

[Exposed=Window]
namespace CSS {
  CSSOMString escape( CSSOMString ident );
  boolean supports( CSSOMString property, CSSOMString value );
  boolean supports( CSSOMString conditionText );
};

/**
 * The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly">WebAssembly - MDN</a>
 */
[Exposed=(Window,Worker,Worklet)]
namespace WebAssembly {
  /**
   * The WebAssembly.compile() function compiles WebAssembly binary code into a WebAssembly.Module object. This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the WebAssembly.instantiate() function should be used).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile">WebAssembly.compile - MDN</a>
   */
  Promise<Module> compile( BufferSource bytes );
  /**
   * The WebAssembly.compileStreaming() function compiles a WebAssembly.Module directly from a streamed underlying source.  This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the WebAssembly.instantiateStreaming() function should be used).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compileStreaming">WebAssembly.compileStreaming - MDN</a>
   */
  Promise<Module> compileStreaming( Promise<Response> source );
  /**
   * The WebAssembly.instantiate() function allows you to compile and instantiate WebAssembly code. This function has two overloads:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate">WebAssembly.instantiate - MDN</a>
   */
  Promise<WebAssemblyInstantiatedSource> instantiate( BufferSource bytes, optional object importObject );
  /**
   * The WebAssembly.instantiate() function allows you to compile and instantiate WebAssembly code. This function has two overloads:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate">WebAssembly.instantiate - MDN</a>
   */
  Promise<Instance> instantiate( Module moduleObject, optional object importObject );
  /**
   * The WebAssembly.instantiateStreaming() function compiles and instantiates a WebAssembly module directly from a streamed underlying source. This is the most efficient, optimized way to load wasm code.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming">WebAssembly.instantiateStreaming - MDN</a>
   */
  Promise<WebAssemblyInstantiatedSource> instantiateStreaming( Promise<Response> source, optional object importObject );
  /**
   * The WebAssembly.validate() function validates a given typed array of WebAssembly binary code, returning whether the bytes form a valid wasm module (true) or not (false).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/validate">WebAssembly.validate - MDN</a>
   */
  boolean validate( BufferSource bytes );
};

/**
 * The console object provides access to the browser's debugging console (e.g. the Web Console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console">console - MDN</a>
 */
[Exposed=(Window,Worker,Worklet)]
namespace console {
  void assert( optional boolean condition = false, any... data );
  /**
   * The console.clear() method clears the console if the environment allows it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/clear">console.clear - MDN</a>
   */
  void clear();
  /**
   * The console.count() method logs the number of times that this particular call to count() has been called.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/count">console.count - MDN</a>
   */
  void count( optional DOMString label = "default" );
  /**
   * The console.countReset() method resets counter used with console.count().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/countReset">console.countReset - MDN</a>
   */
  void countReset( optional DOMString label = "default" );
  /**
   * The console method debug() outputs a message to the web console at the "debug" log level. The message is only displayed to the user if the console is configured to display debug output.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/debug">console.debug - MDN</a>
   */
  void debug( any... data );
  /**
   * The Console method dir() displays an interactive list of the properties of the specified JavaScript object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/dir">console.dir - MDN</a>
   */
  void dir( optional any item, optional object? options );
  /**
   * Displays an interactive tree of the descendant elements of the specified XML/HTML element. If it is not possible to display as an element the JavaScript Object view is shown instead. The output is presented as a hierarchical listing of expandable nodes that let you see the contents of child nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml">console.dirxml - MDN</a>
   */
  void dirxml( any... data );
  /**
   * Outputs an error message to the Web Console.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/error">console.error - MDN</a>
   */
  void error( any... data );
  /**
   * Creates a new inline group in the Web Console log. This indents following console messages by an additional level, until console.groupEnd() is called.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/group">console.group - MDN</a>
   */
  void group( any... data );
  /**
   * Creates a new inline group in the Web Console. Unlike console.group(), however, the new group is created collapsed. The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed">console.groupCollapsed - MDN</a>
   */
  void groupCollapsed( any... data );
  /**
   * Exits the current inline group in the Web Console. See Using groups in the console in the console documentation for details and examples.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/groupEnd">console.groupEnd - MDN</a>
   */
  void groupEnd();
  /**
   * The console.info() method outputs an informational message to the Web Console. In Firefox, a small "i" icon is displayed next to these items in the Web Console's log.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/info">console.info - MDN</a>
   */
  void info( any... data );
  /**
   * The Console method log() outputs a message to the web console.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/log">console.log - MDN</a>
   */
  void log( any... data );
  /**
   * Displays tabular data as a table.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/table">console.table - MDN</a>
   */
  void table( optional any tabularData, optional sequence<DOMString> properties );
  /**
   * Starts a timer you can use to track how long an operation takes. You give each timer a unique name, and may have up to 10,000 timers running on a given page. When you call console.timeEnd() with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/time">console.time - MDN</a>
   */
  void time( optional DOMString label = "default" );
  /**
   * Stops a timer that was previously started by calling console.time().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/timeEnd">console.timeEnd - MDN</a>
   */
  void timeEnd( optional DOMString label = "default" );
  /**
   * Logs the current value of a timer that was previously started by calling console.time() to the console.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog">console.timeLog - MDN</a>
   */
  void timeLog( optional DOMString label = "default", any... data );
  /**
   * The console interface's trace() method outputs a stack trace to the Web Console.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/trace">console.trace - MDN</a>
   */
  void trace( any... data );
  /**
   * Outputs a warning message to the Web Console.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/warn">console.warn - MDN</a>
   */
  void warn( any... data );
};

callback BlobCallback = void ( Blob? blob );

callback ClipboardItemDelayedCallback = ClipboardItemData ();

callback CustomElementConstructor = HTMLElement ();

callback DecodeErrorCallback = void ( DOMException error );

callback DecodeSuccessCallback = void ( AudioBuffer decodedData );

[LegacyTreatNonObjectAsNull]
callback EventHandler = any ( Event event );

callback FrameRequestCallback = void ( DOMHighResTimeStamp time );

callback Function = any ( any... arguments );

callback FunctionStringCallback = void ( DOMString data );

callback GenerateAssertionCallback = Promise<RTCIdentityAssertionResult> ( DOMString contents, DOMString origin, RTCIdentityProviderOptions options );

callback IntersectionObserverCallback = void ( sequence<IntersectionObserverEntry> entries, IntersectionObserver observer );

callback MutationCallback = void ( sequence<MutationRecord> mutations, MutationObserver observer );

callback NotificationPermissionCallback = void ( NotificationPermission permission );

[LegacyTreatNonObjectAsNull]
callback OnBeforeUnloadEventHandler = DOMString? ( Event event );

[LegacyTreatNonObjectAsNull]
callback OnErrorEventHandler = any ( ( Event or DOMString ) event, optional DOMString source, optional unsigned long lineno, optional unsigned long colno, optional any error );

callback ParseReviverFn = any ( DOMString key, any value );

callback PerformanceObserverCallback = void ( PerformanceObserverEntryList entries, PerformanceObserver observer );

callback PositionCallback = void ( Position position );

callback PositionErrorCallback = void ( PositionError positionError );

callback RTCPeerConnectionErrorCallback = void ( DOMException error );

callback RTCSessionDescriptionCallback = void ( RTCSessionDescriptionInit description );

callback ReportingObserverCallback = void ( sequence<Report> reports, ReportingObserver observer );

callback StringifyReplacerFn = any ( DOMString key, any value );

callback ValidateAssertionCallback = Promise<RTCIdentityValidationResult> ( DOMString assertion, DOMString origin );

callback VoidFunction = void ();

callback XRFrameRequestCallback = void ( DOMHighResTimeStamp time, XRFrame frame );

/**
 * The EventListener interface represents an object that can handle an event dispatched by an EventTarget object.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventListener">EventListener - MDN</a>
 */
callback interface EventListener {
  /**
   * The EventListener method handleEvent() method is called by the user agent when an event is sent to the EventListener, in order to handle events that occur on an observed EventTarget.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventListener/handleEvent">EventListener.handleEvent - MDN</a>
   */
  void handleEvent( Event event );
};

/**
 * A NodeFilter interface represents an object used to filter the nodes in a NodeIterator or TreeWalker. A NodeFilter knows nothing about the document or traversing nodes; it only knows how to evaluate a single node against the provided filter.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter">NodeFilter - MDN</a>
 */
[Exposed=Window]
callback interface NodeFilter {
  const unsigned short FILTER_ACCEPT = 1;
  const unsigned short FILTER_REJECT = 2;
  const unsigned short FILTER_SKIP = 3;
  const unsigned long SHOW_ALL = 0xFFFFFFFF;
  const unsigned long SHOW_ATTRIBUTE = 0x2;
  const unsigned long SHOW_CDATA_SECTION = 0x8;
  const unsigned long SHOW_COMMENT = 0x80;
  const unsigned long SHOW_DOCUMENT = 0x100;
  const unsigned long SHOW_DOCUMENT_FRAGMENT = 0x400;
  const unsigned long SHOW_DOCUMENT_TYPE = 0x200;
  const unsigned long SHOW_ELEMENT = 0x1;
  const unsigned long SHOW_ENTITY = 0x20;
  const unsigned long SHOW_ENTITY_REFERENCE = 0x10;
  const unsigned long SHOW_NOTATION = 0x800;
  const unsigned long SHOW_PROCESSING_INSTRUCTION = 0x40;
  const unsigned long SHOW_TEXT = 0x4;
  /**
   * The NodeFilter.acceptNode() method returns an unsigned short that will be used to tell if a given Node must be accepted or not by the NodeIterator or TreeWalker iteration algorithm. This method is expected to be written by the user of a NodeFilter. Possible return values are:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter/acceptNode">NodeFilter.acceptNode - MDN</a>
   */
  unsigned short acceptNode( Node node );
};

/**
 * The XPathNSResolver interface permits prefix strings in an XPath expression to be properly bound to namespace URI strings.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathNSResolver">XPathNSResolver - MDN</a>
 */
callback interface XPathNSResolver {
  /**
   * The lookupNamespaceURI method looks up the namespace URI associated to the given namespace prefix within an XPath expression evaluated by the XPathEvaluator interface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathNSResolver/lookupNamespaceURI">XPathNSResolver.lookupNamespaceURI - MDN</a>
   */
  DOMString? lookupNamespaceURI( DOMString? prefix );
};

dictionary AddEventListenerOptions : EventListenerOptions {
  boolean once = false;
  boolean passive = false;
};

/**
 * The AesCbcParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the AES-CBC algorithm.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AesCbcParams">AesCbcParams - MDN</a>
 */
dictionary AesCbcParams : Algorithm {
  required BufferSource iv;
};

/**
 * The AesCtrParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the AES-CTR algorithm.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AesCtrParams">AesCtrParams - MDN</a>
 */
dictionary AesCtrParams : Algorithm {
  required BufferSource counter;
  required [EnforceRange] octet length;
};

dictionary AesDerivedKeyParams : Algorithm {
  required [EnforceRange] unsigned short length;
};

/**
 * The AesGcmParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the AES-GCM algorithm.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams">AesGcmParams - MDN</a>
 */
dictionary AesGcmParams : Algorithm {
  BufferSource additionalData;
  required BufferSource iv;
  [EnforceRange]
  octet tagLength;
};

dictionary AesKeyAlgorithm : KeyAlgorithm {
  required unsigned short length;
};

/**
 * See the examples for SubtleCrypto.generateKey().
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AesKeyGenParams">AesKeyGenParams - MDN</a>
 */
dictionary AesKeyGenParams : Algorithm {
  required [EnforceRange] unsigned short length;
};

dictionary Algorithm {
  required DOMString name;
};

dictionary AllowedBluetoothDevice {
  required ( DOMString or sequence<UUID> ) allowedServices;
  required DOMString deviceId;
  required boolean mayUseGATT;
};

dictionary AnalyserOptions : AudioNodeOptions {
  unsigned long fftSize = 2048;
  double maxDecibels = -30;
  double minDecibels = -100;
  double smoothingTimeConstant = 0.8;
};

dictionary AnimationEventInit : EventInit {
  CSSOMString animationName = "";
  double elapsedTime = 0.0;
  CSSOMString pseudoElement = "";
};

dictionary AnimationPlaybackEventInit : EventInit {
  double? currentTime = null;
  double? timelineTime = null;
};

dictionary AssignedNodesOptions {
  boolean flatten = false;
};

dictionary AudioBufferOptions {
  required unsigned long length;
  unsigned long numberOfChannels = 1;
  required float sampleRate;
};

dictionary AudioBufferSourceOptions {
  AudioBuffer? buffer;
  float detune = 0;
  boolean loop = false;
  double loopEnd = 0;
  double loopStart = 0;
  float playbackRate = 1;
};

/**
 * The AudioContextOptions dictionary is used to specify configuration options when constructing a new AudioContext object to represent a graph of web audio nodes.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContextOptions">AudioContextOptions - MDN</a>
 */
dictionary AudioContextOptions {
  /**
   * The AudioContextOptions dictionary (used when instantiating an AudioContext) may contain a property named latencyHint, which indicates the preferred maximum latency in seconds for the audio context.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContextOptions/latencyHint">AudioContextOptions.latencyHint - MDN</a>
   */
  ( AudioContextLatencyCategory or double ) latencyHint = "interactive";
  /**
   * The AudioContextOptions dictionary (used when instantiating an AudioContext) may contain a property named sampleRate, which indicates the sample rate to use for the new context.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContextOptions/sampleRate">AudioContextOptions.sampleRate - MDN</a>
   */
  float sampleRate;
};

/**
 * The AudioNodeOptions dictionary of the Web Audio API specifies options that can be used when creating new AudioNode objects.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioNodeOptions">AudioNodeOptions - MDN</a>
 */
dictionary AudioNodeOptions {
  unsigned long channelCount;
  ChannelCountMode channelCountMode;
  ChannelInterpretation channelInterpretation;
};

/**
 * The AudioParamDescriptor dictionary of the Web Audio API specifies properties for an AudioParam objects.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParamDescriptor">AudioParamDescriptor - MDN</a>
 */
dictionary AudioParamDescriptor {
  AutomationRate automationRate = "a-rate";
  float defaultValue = 0;
  float maxValue = 3.4028235e38;
  float minValue = -3.4028235e38;
  required DOMString name;
};

dictionary AudioProcessingEventInit : EventInit {
  required AudioBuffer inputBuffer;
  required AudioBuffer outputBuffer;
  required double playbackTime;
};

dictionary AudioTimestamp {
  double contextTime;
  DOMHighResTimeStamp performanceTime;
};

/**
 * The AudioWorkletNodeOptions dictionary of the Web Audio API is used to specify configuration options when constructing a new AudioWorkletNode object for custom audio processing.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNodeOptions">AudioWorkletNodeOptions - MDN</a>
 */
dictionary AudioWorkletNodeOptions : AudioNodeOptions {
  unsigned long numberOfInputs = 1;
  unsigned long numberOfOutputs = 1;
  sequence<unsigned long> outputChannelCount;
  record<DOMString, double> parameterData;
  object processorOptions;
};

dictionary AuthenticationExtensionsClientInputs {
  USVString appid;
  AuthenticatorSelectionList authnSel;
  boolean exts;
  boolean loc;
  txAuthGenericArg txAuthGeneric;
  USVString txAuthSimple;
  boolean uvi;
  boolean uvm;
};

dictionary AuthenticationExtensionsClientOutputs {
  boolean appid;
  boolean authnSel;
  AuthenticationExtensionsSupported exts;
  Coordinates loc;
  ArrayBuffer txAuthGeneric;
  USVString txAuthSimple;
  ArrayBuffer uvi;
  UvmEntries uvm;
};

dictionary AuthenticatorSelectionCriteria {
  AuthenticatorAttachment authenticatorAttachment;
  boolean requireResidentKey = false;
  UserVerificationRequirement userVerification = "preferred";
};

dictionary BaseComputedKeyframe {
  CompositeOperationOrAuto composite = "auto";
  double computedOffset;
  DOMString easing = "linear";
  double? offset = null;
};

dictionary BaseKeyframe {
  CompositeOperationOrAuto composite = "auto";
  DOMString easing = "linear";
  double? offset = null;
};

dictionary BasePropertyIndexedKeyframe {
  ( CompositeOperationOrAuto or sequence<CompositeOperationOrAuto> ) composite = [];
  ( DOMString or sequence<DOMString> ) easing = [];
  ( double? or sequence<double?> ) offset = [];
};

dictionary BiquadFilterOptions : AudioNodeOptions {
  float Q = 1;
  float detune = 0;
  float frequency = 350;
  float gain = 0;
  BiquadFilterType type = "lowpass";
};

dictionary BlobEventInit {
  required Blob data;
  DOMHighResTimeStamp timecode;
};

dictionary BlobPropertyBag {
  EndingType endings = "transparent";
  DOMString type = "";
};

dictionary BluetoothAdvertisingEventInit : EventInit {
  unsigned short appearance;
  required BluetoothDevice device;
  BluetoothManufacturerDataMap manufacturerData;
  DOMString name;
  byte rssi;
  BluetoothServiceDataMap serviceData;
  byte txPower;
  sequence<( DOMString or unsigned long )> uuids;
};

dictionary BluetoothDataFilterInit {
  BufferSource dataPrefix;
  BufferSource mask;
};

dictionary BluetoothLEScanFilterInit {
  object manufacturerData;
  DOMString name;
  DOMString namePrefix;
  object serviceData;
  sequence<BluetoothServiceUUID> services;
};

dictionary BluetoothPermissionDescriptor : PermissionDescriptor {
  boolean acceptAllDevices = false;
  DOMString deviceId;
  sequence<BluetoothLEScanFilterInit> filters;
  sequence<BluetoothServiceUUID> optionalServices = [];
};

dictionary BluetoothPermissionStorage {
  required sequence<AllowedBluetoothDevice> allowedDevices;
};

dictionary CacheQueryOptions {
  boolean ignoreMethod = false;
  boolean ignoreSearch = false;
  boolean ignoreVary = false;
};

dictionary CanvasRenderingContext2DSettings {
  boolean alpha = true;
  boolean desynchronized = false;
};

dictionary Capabilities {
};

dictionary ChannelMergerOptions : AudioNodeOptions {
  unsigned long numberOfInputs = 6;
};

dictionary ChannelSplitterOptions : AudioNodeOptions {
  unsigned long numberOfOutputs = 6;
};

dictionary ClientQueryOptions {
  boolean includeUncontrolled = false;
  ClientType type = "window";
};

dictionary ClipboardEventInit : EventInit {
  DataTransfer? clipboardData = null;
};

dictionary ClipboardItemOptions {
  PresentationStyle presentationStyle = "unspecified";
};

dictionary ClipboardPermissionDescriptor : PermissionDescriptor {
  boolean allowWithoutGesture = false;
};

dictionary CloseEventInit : EventInit {
  unsigned short code = 0;
  USVString reason = "";
  boolean wasClean = false;
};

dictionary CollectedClientData {
  required DOMString challenge;
  required DOMString origin;
  TokenBinding tokenBinding;
  required DOMString type;
};

dictionary CompositionEventInit : UIEventInit {
  DOMString data = "";
};

dictionary ComputedEffectTiming : EffectTiming {
  unrestricted double activeDuration;
  unrestricted double? currentIteration;
  unrestricted double endTime;
  double? localTime;
  double? progress;
};

dictionary ConstantSourceOptions {
  float offset = 1;
};

/**
 * The ConstrainBoolean dictionary is used to specify a constraint for a property whose value is a Boolean value. You can specify an exact value which must be matched, an ideal value that should be matched if at all possible, and a fallback value to attempt to match once all more specific constraints have been applied.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ConstrainBooleanParameters">ConstrainBooleanParameters - MDN</a>
 */
dictionary ConstrainBooleanParameters {
  boolean exact;
  boolean ideal;
};

/**
 * The ConstrainDOMString dictionary is used to specify a constraint for a property whose value is a string. It allows you to specify one or more exact string values from which one must be the parameter's value, or a set of ideal values which should be used if possible. You can also specify a single string (or an array of strings) which the user agent will do its best to match once all more stringent constraints have been applied.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ConstrainDOMStringParameters">ConstrainDOMStringParameters - MDN</a>
 */
dictionary ConstrainDOMStringParameters {
  ( DOMString or sequence<DOMString> ) exact;
  ( DOMString or sequence<DOMString> ) ideal;
};

dictionary ConstrainDoubleRange : DoubleRange {
  double exact;
  double ideal;
};

dictionary ConstrainULongRange : ULongRange {
  [Clamp]
  unsigned long exact;
  [Clamp]
  unsigned long ideal;
};

dictionary ConstraintSet {
};

dictionary Constraints : ConstraintSet {
  sequence<ConstraintSet> advanced;
};

dictionary ConvolverOptions : AudioNodeOptions {
  AudioBuffer? buffer;
  boolean disableNormalization = false;
};

dictionary CredentialCreationOptions {
  FederatedCredentialInit federated;
  PasswordCredentialInit password;
  PublicKeyCredentialCreationOptions publicKey;
  AbortSignal signal;
};

dictionary CredentialData {
  required USVString id;
};

dictionary CredentialRequestOptions {
  FederatedCredentialRequestOptions federated;
  CredentialMediationRequirement mediation = "optional";
  boolean password = false;
  PublicKeyCredentialRequestOptions publicKey;
  AbortSignal signal;
};

/**
 * The CryptoKeyPair dictionary of the Web Crypto API represents a key pair for an asymmetric cryptography algorithm, also known as a public-key algorithm.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CryptoKeyPair">CryptoKeyPair - MDN</a>
 */
dictionary CryptoKeyPair {
  CryptoKey privateKey;
  CryptoKey publicKey;
};

dictionary CustomEventInit : EventInit {
  any detail = null;
};

dictionary DOMMatrix2DInit {
  unrestricted double a;
  unrestricted double b;
  unrestricted double c;
  unrestricted double d;
  unrestricted double e;
  unrestricted double f;
  unrestricted double m11;
  unrestricted double m12;
  unrestricted double m21;
  unrestricted double m22;
  unrestricted double m41;
  unrestricted double m42;
};

dictionary DOMMatrixInit : DOMMatrix2DInit {
  boolean is2D;
  unrestricted double m13 = 0;
  unrestricted double m14 = 0;
  unrestricted double m23 = 0;
  unrestricted double m24 = 0;
  unrestricted double m31 = 0;
  unrestricted double m32 = 0;
  unrestricted double m33 = 1;
  unrestricted double m34 = 0;
  unrestricted double m43 = 0;
  unrestricted double m44 = 1;
};

/**
 * The DOMPointInit dictionary is used to provide the values of the coordinates and perspective when creating and JSONifying a DOMPoint or DOMPointReadOnly object.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit">DOMPointInit - MDN</a>
 */
dictionary DOMPointInit {
  /**
   * The DOMPointInit dictionary's w property is used to specify the w perspective value of a point in space when either creating or serializing to JSON a DOMPoint or DOMPointReadOnly object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit/w">DOMPointInit.w - MDN</a>
   */
  unrestricted double w = 1;
  /**
   * The DOMPointInit dictionary's x property is used to specify the x component of a point in 2D or 3D space when either creating or serializing a DOMPoint or DOMPointReadOnly.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit/x">DOMPointInit.x - MDN</a>
   */
  unrestricted double x = 0;
  /**
   * The DOMPointInit dictionary's y property is used to specify the y-coordinate of a point in 2D or 3D space when either creating or serializing to JSON a DOMPoint or DOMPointReadOnly object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit/y">DOMPointInit.y - MDN</a>
   */
  unrestricted double y = 0;
  /**
   * The DOMPointInit dictionary's z property is used to specify the z-coordinate of a point in 2D or 3D space when either creating or serializing to JSON a DOMPoint or DOMPointReadOnly object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit/z">DOMPointInit.z - MDN</a>
   */
  unrestricted double z = 0;
};

dictionary DOMQuadInit {
  DOMPointInit p1;
  DOMPointInit p2;
  DOMPointInit p3;
  DOMPointInit p4;
};

dictionary DOMRectInit {
  unrestricted double height = 0;
  unrestricted double width = 0;
  unrestricted double x = 0;
  unrestricted double y = 0;
};

dictionary DelayOptions : AudioNodeOptions {
  double delayTime = 0;
  double maxDelayTime = 1;
};

dictionary DeviceMotionEventAccelerationInit {
  double? x = null;
  double? y = null;
  double? z = null;
};

dictionary DeviceMotionEventInit : EventInit {
  DeviceMotionEventAccelerationInit acceleration;
  DeviceMotionEventAccelerationInit accelerationIncludingGravity;
  double interval = 0;
  DeviceMotionEventRotationRateInit rotationRate;
};

dictionary DeviceMotionEventRotationRateInit {
  double? alpha = null;
  double? beta = null;
  double? gamma = null;
};

dictionary DeviceOrientationEventInit : EventInit {
  boolean absolute = false;
  double? alpha = null;
  double? beta = null;
  double? gamma = null;
};

dictionary DevicePermissionDescriptor : PermissionDescriptor {
  DOMString deviceId;
};

/**
 * The DisplayMediaStreamConstraints dictionary is used to specify whether or not to include video and/or audio tracks in the MediaStream to be returned by getDisplayMedia(), as well as what type of processing must be applied to the tracks.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DisplayMediaStreamConstraints">DisplayMediaStreamConstraints - MDN</a>
 */
dictionary DisplayMediaStreamConstraints {
  /**
   * The DisplayMediaStreamConstraints dictionary's audio property is used to specify whether or not to request that the MediaStream containing screen display contents also include an audio track. This value may simply be a Boolean, where true indicates that an audio track should be included an false (the default) indicates that no audio should be included in the stream.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DisplayMediaStreamConstraints/audio">DisplayMediaStreamConstraints.audio - MDN</a>
   */
  ( boolean or MediaTrackConstraints ) audio = false;
  /**
   * The DisplayMediaStreamConstraints dictionary's video property is used to configure the video track in the stream returned by getDisplayMedia().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DisplayMediaStreamConstraints/video">DisplayMediaStreamConstraints.video - MDN</a>
   */
  ( boolean or MediaTrackConstraints ) video = true;
};

dictionary DocumentTimelineOptions {
  DOMHighResTimeStamp originTime = 0;
};

/**
 * The DoubleRange dictionary is used to define a range of permitted double-precision floating-point values for a property, with either or both a maximum and minimum value specified. The ConstrainDouble dictionary is based on this, augmenting it to support exact and ideal values as well.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DoubleRange">DoubleRange - MDN</a>
 */
dictionary DoubleRange {
  double max;
  double min;
};

dictionary DragEventInit : MouseEventInit {
  DataTransfer? dataTransfer = null;
};

dictionary DynamicsCompressorOptions : AudioNodeOptions {
  float attack = 0.003;
  float knee = 30;
  float ratio = 12;
  float release = 0.25;
  float threshold = -24;
};

dictionary EcKeyAlgorithm : KeyAlgorithm {
  required NamedCurve namedCurve;
};

/**
 * The EcKeyGenParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.generateKey(), when generating any elliptic-curve-based key pair: that is, when the algorithm is identified as either of ECDSA or ECDH.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EcKeyGenParams">EcKeyGenParams - MDN</a>
 */
dictionary EcKeyGenParams : Algorithm {
  required NamedCurve namedCurve;
};

/**
 * See the examples for SubtleCrypto.importKey().
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EcKeyImportParams">EcKeyImportParams - MDN</a>
 */
dictionary EcKeyImportParams : Algorithm {
  required NamedCurve namedCurve;
};

/**
 * The EcdhKeyDeriveParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.deriveKey(),  when using the ECDH algorithm.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EcdhKeyDeriveParams">EcdhKeyDeriveParams - MDN</a>
 */
dictionary EcdhKeyDeriveParams : Algorithm {
  required CryptoKey public;
};

/**
 * The EcdsaParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.sign() or SubtleCrypto.verify() when using the ECDSA algorithm.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EcdsaParams">EcdsaParams - MDN</a>
 */
dictionary EcdsaParams : Algorithm {
  required HashAlgorithmIdentifier hash;
};

/**
 * The EffectTiming dictionary, part of the Web Animations API, is used by Element.animate(), KeyframeEffectReadOnly(), and KeyframeEffect() to describe timing properties for animation effects. These properties are all optional, although without setting a duration the animation will not play.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming">EffectTiming - MDN</a>
 */
dictionary EffectTiming {
  /**
   * The EffectTiming dictionary's delay property in the Web Animations API represents the number of milliseconds to delay the start of the animation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/delay">EffectTiming.delay - MDN</a>
   */
  double delay = 0;
  /**
   * The direction property of the Web Animations API dictionary EffectTiming indicates an animation's playback direction along its timeline, as well as its behavior when it reaches the end of an iteration
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/direction">EffectTiming.direction - MDN</a>
   */
  PlaybackDirection direction = "normal";
  /**
   * The duration property of the dictionary EffectTiming in the Web Animations API specifies the duration in milliseconds that a single iteration (from beginning to end) the animation should take to complete.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/duration">EffectTiming.duration - MDN</a>
   */
  ( unrestricted double or DOMString ) duration = "auto";
  /**
   * The EffectTiming dictionary's easing property in the Web Animations API specifies the timing function used to scale the time to produce easing effects, where easing is the rate of the animation's change over time.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/easing">EffectTiming.easing - MDN</a>
   */
  DOMString easing = "linear";
  /**
   * The endDelay property of the EffectTiming dictionary (part of the Web Animations API) indicates the number of milliseconds to delay after the active period of an animation sequence. The animation's end time—the time at which an iteration is considered to have finished—is the time at which the animation finishes an iteration (its initial delay, AnimationEffectTimingReadOnly.delay, plus its duration,duration, plus its end delay.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/endDelay">EffectTiming.endDelay - MDN</a>
   */
  double endDelay = 0;
  /**
   * The Web Animations API's EffectTiming dictionary's fill property specifies a fill mode, which defines how the element to which the animation is applied should look when the animation sequence is not actively running, such as before the time specified by iterationStart or after animation's end time.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/fill">EffectTiming.fill - MDN</a>
   */
  FillMode fill = "auto";
  /**
   * Web Animations API's EffectTiming dictionary's  iterationStart property specifies the repetition number which repetition the animation begins at and its progress through it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/iterationStart">EffectTiming.iterationStart - MDN</a>
   */
  double iterationStart = 0.0;
  /**
   * The Web Animations API dictionary EffectTiming's iterations property specifies the number of times the animation should repeat. The default value is 1, indicating that it should only play once, but you can set it to any floating-point value (including positive Infinity defaults to 1, and can also take a value of Infinity to make it loop infinitely.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/iterations">EffectTiming.iterations - MDN</a>
   */
  unrestricted double iterations = 1.0;
};

dictionary ElementCreationOptions {
  DOMString is;
};

dictionary ElementDefinitionOptions {
  DOMString extends;
};

dictionary ErrorEventInit : EventInit {
  unsigned long colno = 0;
  any error = null;
  USVString filename = "";
  unsigned long lineno = 0;
  DOMString message = "";
};

dictionary EventInit {
  boolean bubbles = false;
  boolean cancelable = false;
  boolean composed = false;
};

dictionary EventListenerOptions {
  boolean capture = false;
};

dictionary EventModifierInit : UIEventInit {
  boolean altKey = false;
  boolean ctrlKey = false;
  boolean metaKey = false;
  boolean modifierAltGraph = false;
  boolean modifierCapsLock = false;
  boolean modifierFn = false;
  boolean modifierFnLock = false;
  boolean modifierHyper = false;
  boolean modifierNumLock = false;
  boolean modifierScrollLock = false;
  boolean modifierSuper = false;
  boolean modifierSymbol = false;
  boolean modifierSymbolLock = false;
  boolean shiftKey = false;
};

dictionary EventSourceInit {
  boolean withCredentials = false;
};

dictionary ExtendableEventInit : EventInit {
};

dictionary FederatedCredentialInit : CredentialData {
  USVString iconURL;
  USVString name;
  required USVString origin;
  DOMString protocol;
  required USVString provider;
};

dictionary FederatedCredentialRequestOptions {
  sequence<DOMString> protocols;
  sequence<USVString> providers;
};

dictionary FetchEventInit : ExtendableEventInit {
  DOMString clientId = "";
  Promise<void> handled;
  Promise<any> preloadResponse;
  DOMString replacesClientId = "";
  required Request request;
  DOMString resultingClientId = "";
};

dictionary FilePropertyBag : BlobPropertyBag {
  long long lastModified;
};

dictionary FocusEventInit : UIEventInit {
  EventTarget? relatedTarget = null;
};

dictionary FocusOptions {
  boolean preventScroll = false;
};

dictionary FormDataEventInit : EventInit {
  required FormData formData;
};

/**
 * The FullscreenOptions dictionary is used to provide configuration options when calling requestFullscreen() on an element to place that element into full-screen mode.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FullscreenOptions">FullscreenOptions - MDN</a>
 */
dictionary FullscreenOptions {
  /**
   * The FullscreenOptions dictionary's navigationUI property is used when calling requestFullscreen() to specify to what extent the user agent should include its standard user interface while the element is presented in full-screen mode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FullscreenOptions/navigationUI">FullscreenOptions.navigationUI - MDN</a>
   */
  FullscreenNavigationUI navigationUI = "auto";
};

dictionary GainOptions : AudioNodeOptions {
  float gain = 1.0;
};

dictionary GamepadEventInit : EventInit {
  required Gamepad gamepad;
};

dictionary GenerateTestReportParameters {
  DOMString group = "default";
  required DOMString message;
};

dictionary GetNotificationOptions {
  DOMString tag = "";
};

dictionary GetRootNodeOptions {
  boolean composed = false;
};

dictionary GlobalDescriptor {
  boolean mutable = false;
  required ValueType value;
};

dictionary HashChangeEventInit : EventInit {
  USVString newURL = "";
  USVString oldURL = "";
};

/**
 * See the examples for SubtleCrypto.deriveKey().
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams">HkdfParams - MDN</a>
 */
dictionary HkdfParams : Algorithm {
  required HashAlgorithmIdentifier hash;
  required BufferSource info;
  required BufferSource salt;
};

/**
 * The HmacImportParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.importKey() or SubtleCrypto.unwrapKey(), when generating a key for the HMAC algorithm.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HmacImportParams">HmacImportParams - MDN</a>
 */
dictionary HmacImportParams : Algorithm {
  required HashAlgorithmIdentifier hash;
  [EnforceRange]
  unsigned long length;
};

dictionary HmacKeyAlgorithm : KeyAlgorithm {
  required KeyAlgorithm hash;
  required unsigned long length;
};

/**
 * The HmacKeyGenParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.generateKey(), when generating a key for the HMAC algorithm.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HmacKeyGenParams">HmacKeyGenParams - MDN</a>
 */
dictionary HmacKeyGenParams : Algorithm {
  required HashAlgorithmIdentifier hash;
  [EnforceRange]
  unsigned long length;
};

dictionary IDBDatabaseInfo {
  DOMString name;
  unsigned long long version;
};

dictionary IDBIndexParameters {
  boolean multiEntry = false;
  boolean unique = false;
};

dictionary IDBObjectStoreParameters {
  boolean autoIncrement = false;
  ( DOMString or sequence<DOMString> )? keyPath = null;
};

dictionary IDBTransactionOptions {
  IDBTransactionDurability durability = "default";
};

dictionary IDBVersionChangeEventInit : EventInit {
  unsigned long long? newVersion = null;
  unsigned long long oldVersion = 0;
};

dictionary IIRFilterOptions : AudioNodeOptions {
  required sequence<double> feedback;
  required sequence<double> feedforward;
};

dictionary ImageBitmapOptions {
  ColorSpaceConversion colorSpaceConversion = "default";
  ImageOrientation imageOrientation = "none";
  PremultiplyAlpha premultiplyAlpha = "default";
  [EnforceRange]
  unsigned long resizeHeight;
  ResizeQuality resizeQuality = "low";
  [EnforceRange]
  unsigned long resizeWidth;
};

dictionary ImageBitmapRenderingContextSettings {
  boolean alpha = true;
};

dictionary ImageEncodeOptions {
  unrestricted double quality;
  DOMString type = "image/png";
};

dictionary InputEventInit : UIEventInit {
  DOMString? data = "";
  DOMString inputType = "";
  boolean isComposing = false;
};

dictionary IntersectionObserverEntryInit {
  required DOMRectInit boundingClientRect;
  required double intersectionRatio;
  required DOMRectInit intersectionRect;
  required boolean isIntersecting;
  required DOMRectInit? rootBounds;
  required Element target;
  required DOMHighResTimeStamp time;
};

dictionary IntersectionObserverInit {
  Element? root = null;
  DOMString rootMargin = "0px";
  ( double or sequence<double> ) threshold = 0;
};

dictionary JsonWebKey {
  DOMString alg;
  DOMString crv;
  DOMString d;
  DOMString dp;
  DOMString dq;
  DOMString e;
  boolean ext;
  DOMString k;
  sequence<DOMString> key_ops;
  DOMString kty;
  DOMString n;
  sequence<RsaOtherPrimesInfo> oth;
  DOMString p;
  DOMString q;
  DOMString qi;
  DOMString use;
  DOMString x;
  DOMString y;
};

dictionary KeyAlgorithm {
  required DOMString name;
};

dictionary KeyboardEventInit : EventModifierInit {
  DOMString code = "";
  boolean isComposing = false;
  DOMString key = "";
  unsigned long location = 0;
  boolean repeat = false;
};

dictionary KeyframeAnimationOptions : KeyframeEffectOptions {
  DOMString id = "";
};

/**
 * The KeyframeEffectOptions dictionary, part of the Web Animations API, is used by Element.animate(), KeyframeEffectReadOnly() and KeyframeEffect() to describe timing properties for animation effects. These properties are all optional, although without setting a duration the animation will not play.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffectOptions">KeyframeEffectOptions - MDN</a>
 */
dictionary KeyframeEffectOptions : EffectTiming {
  CompositeOperation composite = "replace";
  IterationCompositeOperation iterationComposite = "replace";
};

dictionary MediaElementAudioSourceOptions {
  required HTMLMediaElement mediaElement;
};

dictionary MediaEncryptedEventInit : EventInit {
  ArrayBuffer? initData = null;
  DOMString initDataType = "";
};

dictionary MediaKeyMessageEventInit : EventInit {
  required ArrayBuffer message;
  required MediaKeyMessageType messageType;
};

/**
 * The MediaKeySystemConfiguration dictionary holds configuration information about the media key system in use.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration">MediaKeySystemConfiguration - MDN</a>
 */
dictionary MediaKeySystemConfiguration {
  /**
   * The MediaKeySystemConfiguration.audioCapabilities read-only property returns an array of supported audio type and capability pairs.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration/audioCapabilities">MediaKeySystemConfiguration.audioCapabilities - MDN</a>
   */
  sequence<MediaKeySystemMediaCapability> audioCapabilities = [];
  /**
   * The MediaKeySystemConfiguration.distinctiveIdentifier read-only property indicates whether a persistent distinctive identifier is required.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration/distinctiveIdentifier">MediaKeySystemConfiguration.distinctiveIdentifier - MDN</a>
   */
  MediaKeysRequirement distinctiveIdentifier = "optional";
  /**
   * The MediaKeySystemConfiguration.initDataTypes read-only property returns a list of supported initialization data type names. An initialization data type is a string indicating the format of the initialization data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration/initDataTypes">MediaKeySystemConfiguration.initDataTypes - MDN</a>
   */
  sequence<DOMString> initDataTypes = [];
  DOMString label = "";
  /**
   * The MediaKeySystemConfiguration.persistentState read-only property indicates whether the ability to persist state is required.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration/persistentState">MediaKeySystemConfiguration.persistentState - MDN</a>
   */
  MediaKeysRequirement persistentState = "optional";
  sequence<DOMString> sessionTypes;
  /**
   * The MediaKeySystemConfiguration.videoCapabilities read-only property returns an array of supported video type and capability pairs.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration/videoCapabilities">MediaKeySystemConfiguration.videoCapabilities - MDN</a>
   */
  sequence<MediaKeySystemMediaCapability> videoCapabilities = [];
};

dictionary MediaKeySystemMediaCapability {
  DOMString contentType = "";
  DOMString robustness = "";
};

dictionary MediaQueryListEventInit : EventInit {
  boolean matches = false;
  CSSOMString media = "";
};

dictionary MediaRecorderErrorEventInit : EventInit {
  required DOMException error;
};

dictionary MediaRecorderOptions {
  BitrateMode audioBitrateMode = "vbr";
  unsigned long audioBitsPerSecond;
  unsigned long bitsPerSecond;
  DOMString mimeType = "";
  unsigned long videoBitsPerSecond;
};

/**
 * The MediaStreamAudioSourceOptions dictionary provides configuration options used when creating a MediaStreamAudioSourceNode using its constructor.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceOptions">MediaStreamAudioSourceOptions - MDN</a>
 */
dictionary MediaStreamAudioSourceOptions {
  /**
   * The MediaStreamAudioSourceOptions dictionary's mediaStream property must specify the MediaStream from which to retrieve audio data when instantiating a MediaStreamAudioSourceNode using the MediaStreamAudioSourceNode() constructor.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceOptions/mediaStream">MediaStreamAudioSourceOptions.mediaStream - MDN</a>
   */
  required MediaStream mediaStream;
};

/**
 * The MediaStreamConstraints dictionary is used when calling getUserMedia() to specify what kinds of tracks should be included in the returned MediaStream, and, optionally, to establish constraints for those tracks' settings.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints">MediaStreamConstraints - MDN</a>
 */
dictionary MediaStreamConstraints {
  ( boolean or MediaTrackConstraints ) audio = false;
  DOMString peerIdentity;
  ( boolean or MediaTrackConstraints ) video = false;
};

/**
 * The MediaStreamTrackAudioSourceOptions dictionary is used when specifying options to the MediaStreamTrackAudioSourceNode() constructor.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackAudioSourceOptions">MediaStreamTrackAudioSourceOptions - MDN</a>
 */
dictionary MediaStreamTrackAudioSourceOptions {
  /**
   * The MediaStreamTrackAudioSourceOptions dictionary's mediaStreamTrack property must contain a reference to the MediaStreamTrack from which the MediaStreamTrackAudioSourceNode being created using the MediaStreamTrackAudioSourceNode() constructor.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackAudioSourceOptions/mediaStreamTrack">MediaStreamTrackAudioSourceOptions.mediaStreamTrack - MDN</a>
   */
  required MediaStreamTrack mediaStreamTrack;
};

dictionary MediaStreamTrackEventInit : EventInit {
  required MediaStreamTrack track;
};

dictionary MediaTrackCapabilities {
  DoubleRange aspectRatio;
  sequence<boolean> autoGainControl;
  ULongRange channelCount;
  DOMString deviceId;
  sequence<boolean> echoCancellation;
  sequence<DOMString> facingMode;
  DoubleRange frameRate;
  DOMString groupId;
  ULongRange height;
  DoubleRange latency;
  sequence<boolean> noiseSuppression;
  sequence<DOMString> resizeMode;
  ULongRange sampleRate;
  ULongRange sampleSize;
  ULongRange width;
};

dictionary MediaTrackConstraintSet {
  ConstrainDouble aspectRatio;
  ConstrainBoolean autoGainControl;
  ConstrainULong channelCount;
  ConstrainDOMString cursor;
  ConstrainDOMString deviceId;
  ConstrainDOMString displaySurface;
  ConstrainBoolean echoCancellation;
  ConstrainDOMString facingMode;
  ConstrainDouble frameRate;
  ConstrainDOMString groupId;
  ConstrainULong height;
  ConstrainDouble latency;
  ConstrainBoolean logicalSurface;
  ConstrainBoolean noiseSuppression;
  ConstrainDOMString resizeMode;
  ConstrainBoolean restrictOwnAudio;
  ConstrainULong sampleRate;
  ConstrainULong sampleSize;
  ConstrainULong width;
};

/**
 * The MediaTrackConstraints dictionary is used to describe a set of capabilities and the value or values each can take on. A constraints dictionary is passed into applyConstraints() to allow a script to establish a set of exact (required) values or ranges and/or preferred values or ranges of values for the track, and the most recently-requested set of custom constraints can be retrieved by calling getConstraints().
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints">MediaTrackConstraints - MDN</a>
 */
dictionary MediaTrackConstraints : MediaTrackConstraintSet {
  sequence<MediaTrackConstraintSet> advanced;
};

/**
 * The MediaTrackSettings dictionary is used to return the current values configured for each of a MediaStreamTrack's settings. These values will adhere as closely as possible to any constraints previously described using a MediaTrackConstraints object and set using applyConstraints(), and will adhere to the default constraints for any properties whose constraints haven't been changed, or whose customized constraints couldn't be matched.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings">MediaTrackSettings - MDN</a>
 */
dictionary MediaTrackSettings {
  double aspectRatio;
  boolean autoGainControl;
  long channelCount;
  DOMString cursor;
  DOMString deviceId;
  DOMString displaySurface;
  boolean echoCancellation;
  DOMString facingMode;
  double frameRate;
  DOMString groupId;
  long height;
  double latency;
  boolean logicalSurface;
  boolean noiseSuppression;
  DOMString resizeMode;
  long sampleRate;
  long sampleSize;
  long width;
};

/**
 * The MediaTrackSupportedConstraints dictionary establishes the list of constrainable properties recognized by the user agent or browser in its implementation of the MediaStreamTrack object. An object conforming to MediaTrackSupportedConstraints is returned by MediaDevices.getSupportedConstraints().
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints">MediaTrackSupportedConstraints - MDN</a>
 */
dictionary MediaTrackSupportedConstraints {
  /**
   * The MediaTrackSupportedConstraints dictionary's aspectRatio property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the aspectRatio constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/aspectRatio">MediaTrackSupportedConstraints.aspectRatio - MDN</a>
   */
  boolean aspectRatio = true;
  /**
   * The MediaTrackSupportedConstraints dictionary's autoGainControl property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the autoGainControl constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/autoGainControl">MediaTrackSupportedConstraints.autoGainControl - MDN</a>
   */
  boolean autoGainControl = true;
  /**
   * The MediaTrackSupportedConstraints dictionary's channelCount property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the channelCount constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/channelCount">MediaTrackSupportedConstraints.channelCount - MDN</a>
   */
  boolean channelCount = true;
  boolean cursor = true;
  /**
   * The MediaTrackSupportedConstraints dictionary's deviceId property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the deviceId constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/deviceId">MediaTrackSupportedConstraints.deviceId - MDN</a>
   */
  boolean deviceId = true;
  boolean displaySurface = true;
  /**
   * The MediaTrackSupportedConstraints dictionary's echoCancellation property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the echoCancellation constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/echoCancellation">MediaTrackSupportedConstraints.echoCancellation - MDN</a>
   */
  boolean echoCancellation = true;
  /**
   * The MediaTrackSupportedConstraints dictionary's facingMode property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the facingMode constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/facingMode">MediaTrackSupportedConstraints.facingMode - MDN</a>
   */
  boolean facingMode = true;
  /**
   * The MediaTrackSupportedConstraints dictionary's frameRate property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the frameRate constraint.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/frameRate">MediaTrackSupportedConstraints.frameRate - MDN</a>
   */
  boolean frameRate = true;
  /**
   * The MediaTrackSupportedConstraints dictionary's groupId property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the groupId constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/groupId">MediaTrackSupportedConstraints.groupId - MDN</a>
   */
  boolean groupId = true;
  /**
   * The MediaTrackSupportedConstraints dictionary's height property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the height constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/height">MediaTrackSupportedConstraints.height - MDN</a>
   */
  boolean height = true;
  /**
   * The MediaTrackSupportedConstraints dictionary's latency property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the latency constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/latency">MediaTrackSupportedConstraints.latency - MDN</a>
   */
  boolean latency = true;
  boolean logicalSurface = true;
  /**
   * The MediaTrackSupportedConstraints dictionary's noiseSuppression property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the noiseSuppression constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/noiseSuppression">MediaTrackSupportedConstraints.noiseSuppression - MDN</a>
   */
  boolean noiseSuppression = true;
  boolean resizeMode = true;
  boolean restrictOwnAudio = true;
  /**
   * The MediaTrackSupportedConstraints dictionary's sampleRate property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the sampleRate constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/sampleRate">MediaTrackSupportedConstraints.sampleRate - MDN</a>
   */
  boolean sampleRate = true;
  /**
   * The MediaTrackSupportedConstraints dictionary's sampleSize property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the sampleSize constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/sampleSize">MediaTrackSupportedConstraints.sampleSize - MDN</a>
   */
  boolean sampleSize = true;
  /**
   * The MediaTrackSupportedConstraints dictionary's width property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the width constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/width">MediaTrackSupportedConstraints.width - MDN</a>
   */
  boolean width = true;
};

dictionary MemoryDescriptor {
  required [EnforceRange] unsigned long initial;
  [EnforceRange]
  unsigned long maximum;
};

dictionary MessageEventInit : EventInit {
  any data = null;
  DOMString lastEventId = "";
  USVString origin = "";
  sequence<MessagePort> ports = [];
  MessageEventSource? source = null;
};

dictionary MidiPermissionDescriptor : PermissionDescriptor {
  boolean sysex = false;
};

dictionary ModuleExportDescriptor {
  required ImportExportKind kind;
  required USVString name;
};

dictionary ModuleImportDescriptor {
  required ImportExportKind kind;
  required USVString module;
  required USVString name;
};

dictionary MouseEventInit : EventModifierInit {
  short button = 0;
  unsigned short buttons = 0;
  double clientX = 0.0;
  double clientY = 0.0;
  long movementX = 0;
  long movementY = 0;
  EventTarget? relatedTarget = null;
  double screenX = 0.0;
  double screenY = 0.0;
};

dictionary MultiCacheQueryOptions : CacheQueryOptions {
  DOMString cacheName;
};

/**
 * The MutationObserverInit dictionary describes the configuration of a mutation observer. As such, it's primarily used as the type of the options parameter on the MutationObserver.observe() method.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit">MutationObserverInit - MDN</a>
 */
dictionary MutationObserverInit {
  /**
   * The MutationObserverInit dictionary's optional attributeFilter property is an array of strings specifying the names of the attributes whose values are to be monitored for changes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit/attributeFilter">MutationObserverInit.attributeFilter - MDN</a>
   */
  sequence<DOMString> attributeFilter;
  /**
   * The MutationObserverInit dictionary's optional attributeOldValue property is used to specify whether or not to record the prior value of the altered attribute in MutationRecord objects denoting attribute value changes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit/attributeOldValue">MutationObserverInit.attributeOldValue - MDN</a>
   */
  boolean attributeOldValue;
  /**
   * The MutationObserverInit dictionary's optional attributes property is used to specify whether or not to watch for attribute value changes on the node or nodes being observed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit/attributes">MutationObserverInit.attributes - MDN</a>
   */
  boolean attributes;
  /**
   * The MutationObserverInit dictionary's optional characterData property is used to specify whether or not to monitor the node or nodes being observed for changes to their textual contents.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit/characterData">MutationObserverInit.characterData - MDN</a>
   */
  boolean characterData;
  /**
   * The MutationObserverInit dictionary's optional characterDataOldValue property is used to specify whether or not the MutationRecord.oldValue property for DOM mutations should be set to the previous value of text nodes which changed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit/characterDataOldValue">MutationObserverInit.characterDataOldValue - MDN</a>
   */
  boolean characterDataOldValue;
  /**
   * The MutationObserverInit dictionary's optional childList property indicates whether or not to monitor the specified node or nodes for the addition or removal of new child nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit/childList">MutationObserverInit.childList - MDN</a>
   */
  boolean childList = false;
  /**
   * The MutationObserverInit dictionary's optional subtree property can be set to true to monitor the targeted node and all of its descendants.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit/subtree">MutationObserverInit.subtree - MDN</a>
   */
  boolean subtree = false;
};

dictionary NavigationPreloadState {
  boolean enabled = false;
  ByteString headerValue;
};

/**
 * The NotificationAction interface of the Notifications API is used to represent action buttons the user can click to interact with notifications.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NotificationAction">NotificationAction - MDN</a>
 */
dictionary NotificationAction {
  required DOMString action;
  USVString icon;
  required DOMString title;
};

dictionary NotificationEventInit : ExtendableEventInit {
  DOMString action = "";
  required Notification notification;
};

dictionary NotificationOptions {
  sequence<NotificationAction> actions = [];
  USVString badge;
  DOMString body = "";
  any data = null;
  NotificationDirection dir = "auto";
  USVString icon;
  USVString image;
  DOMString lang = "";
  boolean renotify = false;
  boolean requireInteraction = false;
  boolean silent = false;
  DOMString tag = "";
  DOMTimeStamp timestamp;
  VibratePattern vibrate;
};

dictionary OfflineAudioCompletionEventInit : EventInit {
  required AudioBuffer renderedBuffer;
};

dictionary OfflineAudioContextOptions {
  required unsigned long length;
  unsigned long numberOfChannels = 1;
  required float sampleRate;
};

dictionary OptionalEffectTiming {
  double delay;
  PlaybackDirection direction;
  ( unrestricted double or DOMString ) duration;
  DOMString easing;
  double endDelay;
  FillMode fill;
  double iterationStart;
  unrestricted double iterations;
};

dictionary OscillatorOptions : AudioNodeOptions {
  float detune = 0;
  float frequency = 440;
  PeriodicWave periodicWave;
  OscillatorType type = "sine";
};

dictionary PageTransitionEventInit : EventInit {
  boolean persisted = false;
};

dictionary PannerOptions : AudioNodeOptions {
  double coneInnerAngle = 360;
  double coneOuterAngle = 360;
  double coneOuterGain = 0;
  DistanceModelType distanceModel = "inverse";
  double maxDistance = 10000;
  float orientationX = 1;
  float orientationY = 0;
  float orientationZ = 0;
  PanningModelType panningModel = "equalpower";
  float positionX = 0;
  float positionY = 0;
  float positionZ = 0;
  double refDistance = 1;
  double rolloffFactor = 1;
};

dictionary PasswordCredentialData : CredentialData {
  USVString iconURL;
  USVString name;
  required USVString origin;
  required USVString password;
};

/**
 * The Pbkdf2Params dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.deriveKey(), when using the PBKDF2 algorithm.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Pbkdf2Params">Pbkdf2Params - MDN</a>
 */
dictionary Pbkdf2Params : Algorithm {
  required HashAlgorithmIdentifier hash;
  required [EnforceRange] unsigned long iterations;
  required BufferSource salt;
};

dictionary PerformanceObserverInit {
  boolean buffered;
  sequence<DOMString> entryTypes;
  DOMString type;
};

dictionary PeriodicWaveConstraints {
  boolean disableNormalization = false;
};

dictionary PeriodicWaveOptions : PeriodicWaveConstraints {
  sequence<float> imag;
  sequence<float> real;
};

dictionary PermissionDescriptor {
  required PermissionName name;
};

dictionary PointerEventInit : MouseEventInit {
  double height = 1;
  boolean isPrimary = false;
  long pointerId = 0;
  DOMString pointerType = "";
  float pressure = 0;
  float tangentialPressure = 0;
  long tiltX = 0;
  long tiltY = 0;
  long twist = 0;
  double width = 1;
};

dictionary PopStateEventInit : EventInit {
  any state = null;
};

/**
 * The PositionOptions dictionary describes an object containing option properties to pass as a parameter of Geolocation.getCurrentPosition() and Geolocation.watchPosition().
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions">PositionOptions - MDN</a>
 */
dictionary PositionOptions {
  /**
   * The PositionOptions.enableHighAccuracy property is a Boolean that indicates the application would like to receive the best possible results. If true and if the device is able to provide a more accurate position, it will do so. Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example). On the other hand, if false (the default value), the device can take the liberty to save resources by responding more quickly and/or using less power.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions/enableHighAccuracy">PositionOptions.enableHighAccuracy - MDN</a>
   */
  boolean enableHighAccuracy = false;
  /**
   * The PositionOptions.maximumAge property is a positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return. If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position. If set to Infinity the device must return a cached position regardless of its age.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions/maximumAge">PositionOptions.maximumAge - MDN</a>
   */
  [Clamp]
  unsigned long maximumAge = 0;
  /**
   * The PositionOptions.timeout property is a positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position. The default value is Infinity, meaning that getCurrentPosition() won't return until the position is available.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions/timeout">PositionOptions.timeout - MDN</a>
   */
  [Clamp]
  unsigned long timeout = 0xFFFFFFFF;
};

dictionary PostMessageOptions {
  sequence<object> transfer = [];
};

dictionary ProgressEventInit : EventInit {
  boolean lengthComputable = false;
  unsigned long long loaded = 0;
  unsigned long long total = 0;
};

dictionary PromiseRejectionEventInit : EventInit {
  required Promise<any> promise;
  any reason;
};

/**
 * The PublicKeyCredentialCreationOptions dictionary of the Web Authentication API holds options passed to navigators.credentials.create() in order to create a PublicKeyCredential.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions">PublicKeyCredentialCreationOptions - MDN</a>
 */
dictionary PublicKeyCredentialCreationOptions {
  /**
   * attestation is an optional property of the PublicKeyCredentialCreationOptions dictionary. This is a string whose value indicates the preference regarding the attestation transport, between the authenticator, the client and the relying party.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/attestation">PublicKeyCredentialCreationOptions.attestation - MDN</a>
   */
  AttestationConveyancePreference attestation = "none";
  /**
   * authenticatorSelection, an optional property of the PublicKeyCredentialCreationOptions dictionary, is an object giving criteria to filter out the authenticators to be used for the creation operation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/authenticatorSelection">PublicKeyCredentialCreationOptions.authenticatorSelection - MDN</a>
   */
  AuthenticatorSelectionCriteria authenticatorSelection;
  /**
   * The challenge property of the PublicKeyCredentialCreationOptions dictionary is a BufferSource used as a cryptographic challenge. This is randomly generated then sent from the relying party's server. This value (among other client data) will be signed by the authenticator, using its private key, and must be sent back for verification to the server as part of AuthenticatorAttestationResponse.attestationObject.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/challenge">PublicKeyCredentialCreationOptions.challenge - MDN</a>
   */
  required BufferSource challenge;
  /**
   * excludeCredentials, an optional property of the PublicKeyCredentialCreationOptions dictionary, is an Array whose elements are descriptors for the public keys already existing for a given user. This is provided by the relying party's server if it wants to prevent creation of new credentials for an existing user.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/excludeCredentials">PublicKeyCredentialCreationOptions.excludeCredentials - MDN</a>
   */
  sequence<PublicKeyCredentialDescriptor> excludeCredentials = [];
  /**
   * extensions, an optional property of the PublicKeyCredentialCreationOptions dictionary, is an object providing the client extensions and their input values.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/extensions">PublicKeyCredentialCreationOptions.extensions - MDN</a>
   */
  AuthenticationExtensionsClientInputs extensions;
  /**
   * The pubKeyCredParams property of the PublicKeyCredentialCreationOptions dictionary is an Array whose elements are objects describing the desired features of the credential to be created. These objects define the type of public-key and the algorithm used for cryptographic signature operations.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/pubKeyCredParams">PublicKeyCredentialCreationOptions.pubKeyCredParams - MDN</a>
   */
  required sequence<PublicKeyCredentialParameters> pubKeyCredParams;
  /**
   * The rp property of the PublicKeyCredentialCreationOptions dictionary is an object describing the relying party which requested the credential creation (via navigator.credentials.create()).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/rp">PublicKeyCredentialCreationOptions.rp - MDN</a>
   */
  required PublicKeyCredentialRpEntity rp;
  /**
   * The timeout property, of the PublicKeyCredentialCreationOptions dictionary, represents an hint, given in milliseconds, for the time the script is willing to wait for the completion of the creation operation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/timeout">PublicKeyCredentialCreationOptions.timeout - MDN</a>
   */
  unsigned long timeout;
  /**
   * The user property of the PublicKeyCredentialCreationOptions dictionary is an object describing the user account for which the credentials are generated (via navigator.credentials.create()).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions/user">PublicKeyCredentialCreationOptions.user - MDN</a>
   */
  required PublicKeyCredentialUserEntity user;
};

dictionary PublicKeyCredentialDescriptor {
  required BufferSource id;
  sequence<AuthenticatorTransport> transports;
  required PublicKeyCredentialType type;
};

dictionary PublicKeyCredentialEntity {
  USVString icon;
  required DOMString name;
};

dictionary PublicKeyCredentialParameters {
  required COSEAlgorithmIdentifier alg;
  required PublicKeyCredentialType type;
};

/**
 * The PublicKeyCredentialRequestOptions dictionary of the Web Authentication API holds the options passed to navigator.credentials.get() in order to fetch a given PublicKeyCredential.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions">PublicKeyCredentialRequestOptions - MDN</a>
 */
dictionary PublicKeyCredentialRequestOptions {
  /**
   * allowCredentials is an optional property of the PublicKeyCredentialRequestOptions dictionary which indicates the existing credentials acceptable for retrieval. This is an Array of credential descriptors.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions/allowCredentials">PublicKeyCredentialRequestOptions.allowCredentials - MDN</a>
   */
  sequence<PublicKeyCredentialDescriptor> allowCredentials = [];
  /**
   * The challenge property of the PublicKeyCredentialRequestOptions dictionary is a BufferSource used as a cryptographic challenge. This is randomly generated then sent from the relying party's server. This value (among other client data) will be signed by the authenticator's private key and produce AuthenticatorAssertionResponse.signature which should be sent back to the server as part of the response.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions/challenge">PublicKeyCredentialRequestOptions.challenge - MDN</a>
   */
  required BufferSource challenge;
  /**
   * extensions, an optional property of the PublicKeyCredentialRequestOptions dictionary, is an object providing the client extensions and their input values.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions/extensions">PublicKeyCredentialRequestOptions.extensions - MDN</a>
   */
  AuthenticationExtensionsClientInputs extensions;
  /**
   * The rpId property, of the PublicKeyCredentialRequestOptions dictionary, is an optional property which indicates the relying party's identifier as a USVString. Its value can only be a suffix of the current origin's domain. For example, if you are browsing on foo.example.com, the rpId value may be "example.com" but not "bar.org" or "baz.example.com".
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions/rpId">PublicKeyCredentialRequestOptions.rpId - MDN</a>
   */
  USVString rpId;
  /**
   * The timeout property, of the PublicKeyCredentialRequestOptions dictionary, represents an hint, given in milliseconds, for the time the script is willing to wait for the completion of the retrieval operation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions/timeout">PublicKeyCredentialRequestOptions.timeout - MDN</a>
   */
  unsigned long timeout;
  /**
   * userVerification is an optional property of the PublicKeyCredentialRequestOptions. This is a string which indicates how the user verification should be part of the authentication process.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions/userVerification">PublicKeyCredentialRequestOptions.userVerification - MDN</a>
   */
  UserVerificationRequirement userVerification = "preferred";
};

dictionary PublicKeyCredentialRpEntity : PublicKeyCredentialEntity {
  DOMString id;
};

dictionary PublicKeyCredentialUserEntity : PublicKeyCredentialEntity {
  required DOMString displayName;
  required BufferSource id;
};

dictionary PushEventInit : ExtendableEventInit {
  PushMessageDataInit data;
};

dictionary PushPermissionDescriptor : PermissionDescriptor {
  boolean userVisibleOnly = false;
};

dictionary PushSubscriptionChangeEventInit : ExtendableEventInit {
  PushSubscription newSubscription = null;
  PushSubscription oldSubscription = null;
};

dictionary PushSubscriptionJSON {
  USVString endpoint;
  DOMTimeStamp? expirationTime;
  record<DOMString, USVString> keys;
};

dictionary PushSubscriptionOptionsInit {
  ( BufferSource or DOMString )? applicationServerKey = null;
  boolean userVisibleOnly = false;
};

/**
 * The RTCAnswerOptions dictionary is used to provide optional settings when creating an SDP answer using RTCPeerConnection.createOffer() after receiving an offer from a remote peer.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCAnswerOptions">RTCAnswerOptions - MDN</a>
 */
dictionary RTCAnswerOptions : RTCOfferAnswerOptions {
};

dictionary RTCAudioHandlerStats : RTCMediaHandlerStats {
  double audioLevel;
  double totalAudioEnergy;
  double totalSamplesDuration;
  boolean voiceActivityFlag;
};

dictionary RTCAudioReceiverStats : RTCAudioHandlerStats {
  unsigned long long concealedSamples;
  unsigned long long concealmentEvents;
  DOMHighResTimeStamp estimatedPlayoutTimestamp;
  unsigned long long insertedSamplesForDeceleration;
  double jitterBufferDelay;
  unsigned long long jitterBufferEmittedCount;
  unsigned long long removedSamplesForAcceleration;
  unsigned long long silentConcealedSamples;
  unsigned long long totalSamplesReceived;
};

dictionary RTCAudioSenderStats : RTCAudioHandlerStats {
  double echoReturnLoss;
  double echoReturnLossEnhancement;
  DOMString mediaSourceId;
  unsigned long long totalSamplesSent;
};

dictionary RTCAudioSourceStats : RTCMediaSourceStats {
  double audioLevel;
  double echoReturnLoss;
  double echoReturnLossEnhancement;
  double totalAudioEnergy;
  double totalSamplesDuration;
};

dictionary RTCCertificateExpiration {
  [EnforceRange]
  DOMTimeStamp expires;
};

dictionary RTCCertificateStats : RTCStats {
  required DOMString base64Certificate;
  required DOMString fingerprint;
  required DOMString fingerprintAlgorithm;
  DOMString issuerCertificateId;
};

dictionary RTCCodecStats : RTCStats {
  unsigned long channels;
  unsigned long clockRate;
  RTCCodecType codecType;
  DOMString implementation;
  required DOMString mimeType;
  required unsigned long payloadType;
  DOMString sdpFmtpLine;
  required DOMString transportId;
};

/**
 * The RTCConfiguration dictionary is used to provide configuration options for an RTCPeerConnection. It may be passed into the constructor when instantiating a connection, or used with the RTCPeerConnection.getConfiguration() and RTCPeerConnection.setConfiguration() methods, which allow inspecting and changing the configuration while a connection is established.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCConfiguration">RTCConfiguration - MDN</a>
 */
dictionary RTCConfiguration {
  RTCBundlePolicy bundlePolicy;
  sequence<RTCCertificate> certificates;
  [EnforceRange]
  octet iceCandidatePoolSize = 0;
  sequence<RTCIceServer> iceServers;
  RTCIceTransportPolicy iceTransportPolicy;
  DOMString peerIdentity;
  RTCRtcpMuxPolicy rtcpMuxPolicy;
};

dictionary RTCDTMFToneChangeEventInit : EventInit {
  DOMString tone = "";
};

dictionary RTCDataChannelEventInit : EventInit {
  required RTCDataChannel channel;
};

dictionary RTCDataChannelInit {
  [EnforceRange]
  unsigned short id;
  [EnforceRange]
  unsigned short maxPacketLifeTime;
  [EnforceRange]
  unsigned short maxRetransmits;
  boolean negotiated = false;
  boolean ordered = true;
  RTCPriorityType priority;
  USVString protocol = "";
};

dictionary RTCDataChannelStats : RTCStats {
  unsigned long long bytesReceived;
  unsigned long long bytesSent;
  unsigned short dataChannelIdentifier;
  DOMString label;
  unsigned long messagesReceived;
  unsigned long messagesSent;
  DOMString protocol;
  required RTCDataChannelState state;
  required DOMString transportId;
};

dictionary RTCDtlsFingerprint {
  DOMString algorithm;
  DOMString value;
};

dictionary RTCErrorEventInit : EventInit {
  required RTCError error;
};

dictionary RTCErrorInit {
  required RTCErrorDetailType errorDetail;
  long httpRequestStatusCode;
  unsigned long receivedAlert;
  long sctpCauseCode;
  long sdpLineNumber;
  unsigned long sentAlert;
};

/**
 * The WebRTC API's RTCIceCandidateInit dictionary, which contains the information needed to fundamentally describe an RTCIceCandidate.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateInit">RTCIceCandidateInit - MDN</a>
 */
dictionary RTCIceCandidateInit {
  /**
   * The optional property candidate in the RTCIceCandidateInit dictionary specifies the value of the RTCIceCandidate object's candidate property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateInit/candidate">RTCIceCandidateInit.candidate - MDN</a>
   */
  DOMString candidate = "";
  /**
   * The optional property sdpMLineIndex in the RTCIceCandidateInit dictionary specifies the value of the RTCIceCandidate object's sdpMLineIndex property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateInit/sdpMLineIndex">RTCIceCandidateInit.sdpMLineIndex - MDN</a>
   */
  unsigned short? sdpMLineIndex = null;
  /**
   * The optional property sdpMid in the RTCIceCandidateInit dictionary specifies the value of the RTCIceCandidate object's sdpMid property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateInit/sdpMid">RTCIceCandidateInit.sdpMid - MDN</a>
   */
  DOMString? sdpMid = null;
  /**
   * The optional property usernameFragment in the RTCIceCandidateInit dictionary specifies the value of the RTCIceCandidate object's usernameFragment property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateInit/usernameFragment">RTCIceCandidateInit.usernameFragment - MDN</a>
   */
  DOMString? usernameFragment = null;
};

/**
 * The RTCIceCandidatePair dictionary describes a pair of ICE candidates which together comprise a description of a viable connection between two WebRTC endpoints.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePair">RTCIceCandidatePair - MDN</a>
 */
dictionary RTCIceCandidatePair {
  /**
   * The local property of the RTCIceCandidatePair dictionary specifies the RTCIceCandidate which describes the configuration of the local end of a viable WebRTC connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePair/local">RTCIceCandidatePair.local - MDN</a>
   */
  RTCIceCandidate local;
  /**
   * The remote property of the RTCIceCandidatePair dictionary specifies the RTCIceCandidate describing the configuration of the remote end of a viable WebRTC connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePair/remote">RTCIceCandidatePair.remote - MDN</a>
   */
  RTCIceCandidate remote;
};

/**
 * The WebRTC RTCIceCandidatePairStats dictionary reports statistics which provide insight into the quality and performance of an RTCPeerConnection while connected and configured as described by the specified pair of ICE candidates.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats">RTCIceCandidatePairStats - MDN</a>
 */
dictionary RTCIceCandidatePairStats : RTCStats {
  /**
   * The RTCIceCandidatePairStats property availableIncomingBitrate returns a value indicative of the available inbound capacity of the network connection represented by the candidate pair.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/availableIncomingBitrate">RTCIceCandidatePairStats.availableIncomingBitrate - MDN</a>
   */
  double availableIncomingBitrate;
  /**
   * The RTCIceCandidatePairStats property availableOutgoingBitrate returns a value indicative of the available outbound capacity of the network connection represented by the candidate pair.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/availableOutgoingBitrate">RTCIceCandidatePairStats.availableOutgoingBitrate - MDN</a>
   */
  double availableOutgoingBitrate;
  unsigned long long bytesDiscardedOnSend;
  unsigned long long bytesReceived;
  /**
   * The RTCIceCandidatePairStats property bytesSent indicates the total number of payload bytes—that is, bytes which aren't overhead such as headers or padding—that hve been sent so far on the connection described by the candidate pair.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/bytesSent">RTCIceCandidatePairStats.bytesSent - MDN</a>
   */
  unsigned long long bytesSent;
  /**
   * The RTCIceCandidatePairStats property circuitBreakerTriggerCount indicates the number of times the circuit-breaker has been triggered to indicate a connection timeout or other unexpected connection abort on this specific connection configuration.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/circuitBreakerTriggerCount">RTCIceCandidatePairStats.circuitBreakerTriggerCount - MDN</a>
   */
  unsigned long circuitBreakerTriggerCount;
  /**
   * The RTCIceCandidatePairStats property consentExpiredTimestamp indicates the time at which the most recent STUN binding response expired.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/consentExpiredTimestamp">RTCIceCandidatePairStats.consentExpiredTimestamp - MDN</a>
   */
  DOMHighResTimeStamp consentExpiredTimestamp;
  unsigned long long consentRequestBytesSent;
  /**
   * The RTCIceCandidatePairStats property consentRequestsSent specifies the number of consent requests that have been sent by this peer to the remote peer on the connection described by the pair of candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/consentRequestsSent">RTCIceCandidatePairStats.consentRequestsSent - MDN</a>
   */
  unsigned long long consentRequestsSent;
  /**
   * The RTCIceCandidatePairStats property currentRoundTripTime is a floating-point value indicating the number of seconds it takes for data to be sent by this peer to the remote peer and back over the connection described by this pair of ICE candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/currentRoundTripTime">RTCIceCandidatePairStats.currentRoundTripTime - MDN</a>
   */
  double currentRoundTripTime;
  double currentRtt;
  /**
   * The RTCIceCandidatePairStats property firstRequestTimestamp specifies the time at which the first STUN request was sent on the described candidate pair.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/firstRequestTimestamp">RTCIceCandidatePairStats.firstRequestTimestamp - MDN</a>
   */
  DOMHighResTimeStamp firstRequestTimestamp;
  /**
   * The RTCIceCandidatePairStats property lastPacketReceivedTimestamp indicates the time at which the connection described by the candidate pair last received a packet. STUN packets are not included.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/lastPacketReceivedTimestamp">RTCIceCandidatePairStats.lastPacketReceivedTimestamp - MDN</a>
   */
  DOMHighResTimeStamp lastPacketReceivedTimestamp;
  /**
   * The RTCIceCandidatePairStats property lastPacketSentTimestamp indicates the time at which the connection described by the candidate pair last sent a packet, not including STUN packets.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/lastPacketSentTimestamp">RTCIceCandidatePairStats.lastPacketSentTimestamp - MDN</a>
   */
  DOMHighResTimeStamp lastPacketSentTimestamp;
  /**
   * The RTCIceCandidatePairStats property lastRequestTimestamp indicates the time at which the most recent STUN request was sent on the described candidate pair.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/lastRequestTimestamp">RTCIceCandidatePairStats.lastRequestTimestamp - MDN</a>
   */
  DOMHighResTimeStamp lastRequestTimestamp;
  /**
   * The RTCIceCandidatePairStats property lastResponseTimestamp indicates the time at which the last STUN response was received on the described candidate pair.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/lastResponseTimestamp">RTCIceCandidatePairStats.lastResponseTimestamp - MDN</a>
   */
  DOMHighResTimeStamp lastResponseTimestamp;
  /**
   * The RTCIceCandidatePairStats property localCandidateId is a string that uniquely identifies the local ICE candidate which was analyzed to generate the RTCIceCandidateStats used to compute the statistics for this pair of candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/localCandidateId">RTCIceCandidatePairStats.localCandidateId - MDN</a>
   */
  required DOMString localCandidateId;
  /**
   * The RTCIceCandidatePairStats property nominated specifies whether or not the candidate pair described by the underlying RTCIceCandidatePair has been nominated to be used as the configuration for the WebRTC connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/nominated">RTCIceCandidatePairStats.nominated - MDN</a>
   */
  boolean nominated;
  unsigned long packetsDiscardedOnSend;
  /**
   * The RTCIceCandidatePairStats dictionary's packetsReceived property indicates the total number of packets of any kind that have been received on the connection described by the pair of candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/packetsReceived">RTCIceCandidatePairStats.packetsReceived - MDN</a>
   */
  unsigned long long packetsReceived;
  /**
   * The RTCIceCandidatePairStats dictionary's packetsSent property indicates the total number of packets which have been sent on the connection described by the pair of candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/packetsSent">RTCIceCandidatePairStats.packetsSent - MDN</a>
   */
  unsigned long long packetsSent;
  unsigned long long priority;
  /**
   * The RTCIceCandidatePairStats property remoteCandidateId is a string that uniquely identifies the remote ICE candidate which was analyzed to generate the RTCIceCandidateStats used to compute the statistics for this pair of candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/remoteCandidateId">RTCIceCandidatePairStats.remoteCandidateId - MDN</a>
   */
  required DOMString remoteCandidateId;
  unsigned long long requestBytesSent;
  /**
   * The RTCIceCandidatePairStats dictionary's requestsReceived property indicates the total number of STUN connectivity check requests that have been received so far on the connection described by this pairing of candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/requestsReceived">RTCIceCandidatePairStats.requestsReceived - MDN</a>
   */
  unsigned long long requestsReceived;
  /**
   * The RTCIceCandidatePairStats dictionary's requestsSent property indicates the total number of STUN connectivity check requests that have been sent so far on the connection described by this pair of candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/requestsSent">RTCIceCandidatePairStats.requestsSent - MDN</a>
   */
  unsigned long long requestsSent;
  unsigned long long responseBytesSent;
  /**
   * The responsesReceived property in the RTCIceCandidatePairStats dictionary indicates the total number of STUN connectivity check responses that have been received on the connection described by this pair of candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/responsesReceived">RTCIceCandidatePairStats.responsesReceived - MDN</a>
   */
  unsigned long long responsesReceived;
  /**
   * The RTCIceCandidatePairStats dictionary's responsesSent property indicates the total number of STUN connectivity check responses that have been sent so far on the connection described by this pair of candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/responsesSent">RTCIceCandidatePairStats.responsesSent - MDN</a>
   */
  unsigned long long responsesSent;
  /**
   * The RTCIceCandidatePairStats dictionary's retransmissionsReceived property indicates the total number of STUN connectivity check request retransmissions that have been received so far on the pair of candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/retransmissionsReceived">RTCIceCandidatePairStats.retransmissionsReceived - MDN</a>
   */
  unsigned long long retransmissionsReceived;
  /**
   * The RTCIceCandidatePairStats dictionary's retransmissionsSent property indicates the total number of STUN connectivity check request retransmissions that have been sent so far on the pair of candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/retransmissionsSent">RTCIceCandidatePairStats.retransmissionsSent - MDN</a>
   */
  unsigned long long retransmissionsSent;
  /**
   * The state property in an RTCIceCandidatePairStats object indicates the state of the check list of which the candidate pair is a member.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/state">RTCIceCandidatePairStats.state - MDN</a>
   */
  required RTCStatsIceCandidatePairState state;
  /**
   * The RTCIceCandidatePairStats dictionary's totalRoundTripTime property is the total time that has elapsed between sending STUN requests and receiving the responses, for all such requests that have been made so far on the pair of candidates described by this RTCIceCandidatePairStats object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/totalRoundTripTime">RTCIceCandidatePairStats.totalRoundTripTime - MDN</a>
   */
  double totalRoundTripTime;
  double totalRtt;
  /**
   * The transportId property uniquely identifies the RTCIceTransport that was inspected to obtain the transport-related statistics contained in the RTCIceCandidatePairStats object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/transportId">RTCIceCandidatePairStats.transportId - MDN</a>
   */
  required DOMString transportId;
};

/**
 * The WebRTC API's RTCIceCandidateStats dictionary provides statistics related to an RTCIceCandidate.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats">RTCIceCandidateStats - MDN</a>
 */
dictionary RTCIceCandidateStats : RTCStats {
  /**
   * The address property of the RTCIceCandidateStats dictionary indicates the address of the ICE candidate. While it's preferred that the address be specified as an IPv4 or IPv6 numeric address, a fully-qualified domain name can be used as well.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/address">RTCIceCandidateStats.address - MDN</a>
   */
  DOMString? address;
  /**
   * The RTCIceCandidateStats interface's candidateType property is a string which indicates the type of ICE candidate the object represents.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/candidateType">RTCIceCandidateStats.candidateType - MDN</a>
   */
  required RTCIceCandidateType candidateType;
  /**
   * The RTCIceCandidateStats dictionary's deleted property indicates whether or not the candidate has been deleted or released.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/deleted">RTCIceCandidateStats.deleted - MDN</a>
   */
  boolean deleted = false;
  boolean isRemote;
  /**
   * The RTCIceCandidateStats dictionary's port property specifies the network port used by the candidate.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/port">RTCIceCandidateStats.port - MDN</a>
   */
  long port;
  /**
   * The RTCIceCandidateStats dictionary's priority property is a positive integer value indicating the priority (or desirability) of the described candidate.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/priority">RTCIceCandidateStats.priority - MDN</a>
   */
  long priority;
  /**
   * The RTCIceCandidateStats dictionary's protocol  property specifies the protocol the specified candidate would use for communication with the remote peer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/protocol">RTCIceCandidateStats.protocol - MDN</a>
   */
  DOMString protocol;
  /**
   * The RTCIceCandidateStats dictionary's relayProtocol property specifies the protocol being used by a local ICE candidate to communicate with the TURN server.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/relayProtocol">RTCIceCandidateStats.relayProtocol - MDN</a>
   */
  DOMString relayProtocol;
  /**
   * The RTCIceCandidateStats dictionary's transportId property is a string that uniquely identifies the transport that produced the RTCTransportStats from which information about this candidate was taken.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/transportId">RTCIceCandidateStats.transportId - MDN</a>
   */
  required DOMString transportId;
  /**
   * The RTCIceCandidateStats dictionary's url property specifies the URL of the ICE server from which the described candidate was obtained. This property is only available for local candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats/url">RTCIceCandidateStats.url - MDN</a>
   */
  DOMString url;
};

/**
 * The RTCIceParameters dictionary specifies the username fragment and password assigned to an ICE session.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceParameters">RTCIceParameters - MDN</a>
 */
dictionary RTCIceParameters {
  /**
   * The RTCIceParameters dictionary's password property specifies the ICE password that, in tandem with the usernameFragment, uniquely identifies an ICE session for its entire duration.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceParameters/password">RTCIceParameters.password - MDN</a>
   */
  DOMString password;
  /**
   * The RTCIceParameters dictionary's usernameFragment property specifies the username fragment ("ufrag") that uniquely identifies the corresponding ICE session for the duration of the current ICE session.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceParameters/usernameFragment">RTCIceParameters.usernameFragment - MDN</a>
   */
  DOMString usernameFragment;
};

/**
 * The RTCIceServer dictionary defines how to connect to a single ICE server (such as a STUN or TURN server). It includes both the URL and the necessary credentials, if any, to connect to the server.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer">RTCIceServer - MDN</a>
 */
dictionary RTCIceServer {
  /**
   * The RTCIceServer dictionary's credential property is a string providing the credential to use when connecting to the described server. This is typically a password, key, or other secret.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/credential">RTCIceServer.credential - MDN</a>
   */
  DOMString credential;
  /**
   * The RTCIceServer dictionary's credentialType property is a string value from the RTCIceCredentialType enum which indicates what type of credential the RTCIceServer.credential value is. The default is password.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/credentialType">RTCIceServer.credentialType - MDN</a>
   */
  RTCIceCredentialType credentialType = "password";
  /**
   * The RTCIceServer dictionary's urls property specifies the URL or URLs of the servers to be used for ICE negotiations. These are typically STUN and/or TURN servers.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/urls">RTCIceServer.urls - MDN</a>
   */
  required ( DOMString or sequence<DOMString> ) urls;
  /**
   * The RTCIceServer dictionary's username property is a string which specifies the username to use when authenticating with the ICE server being described.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/username">RTCIceServer.username - MDN</a>
   */
  DOMString username;
};

dictionary RTCIceServerStats : RTCStats {
  long port;
  DOMString relayProtocol;
  unsigned long totalRequestsSent;
  unsigned long totalResponsesReceived;
  double totalRoundTripTime;
  required DOMString url;
};

dictionary RTCIdentityAssertionResult {
  required DOMString assertion;
  required RTCIdentityProviderDetails idp;
};

dictionary RTCIdentityProvider {
  required GenerateAssertionCallback generateAssertion;
  required ValidateAssertionCallback validateAssertion;
};

dictionary RTCIdentityProviderDetails {
  required DOMString domain;
  DOMString protocol = "default";
};

dictionary RTCIdentityProviderOptions {
  DOMString peerIdentity;
  DOMString protocol = "default";
  DOMString usernameHint;
};

dictionary RTCIdentityValidationResult {
  required DOMString contents;
  required DOMString identity;
};

/**
 * The WebRTC API's RTCInboundRtpStreamStats dictionary, based upon RTCReceivedRtpStreamStats and RTCStats, contains statistics related to the receiving end of an RTP stream on the local end of the RTCPeerConnection.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats">RTCInboundRtpStreamStats - MDN</a>
 */
dictionary RTCInboundRtpStreamStats : RTCReceivedRtpStreamStats {
  double audioLevel;
  /**
   * The averageRtcpInterval property of the RTCInboundRtpStreamStats dictionary is a floating-point value indicating the average RTCP transmission interval, in seconds.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/averageRtcpInterval">RTCInboundRtpStreamStats.averageRtcpInterval - MDN</a>
   */
  double averageRtcpInterval;
  /**
   * The RTCInboundRtpStreamStats dictionary's bytesReceived property is an integer value which indicates the total number of bytes received so far from this synchronization source (SSRC).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/bytesReceived">RTCInboundRtpStreamStats.bytesReceived - MDN</a>
   */
  unsigned long long bytesReceived;
  unsigned long long concealedSamples;
  unsigned long long concealmentEvents;
  DOMString decoderImplementation;
  DOMHighResTimeStamp estimatedPlayoutTimestamp;
  /**
   * The fecPacketsDiscarded property of the RTCInboundRtpStreamStats dictionary is a numeric value indicating the number of RTP Forward Error Correction (FEC) packets that have been discarded.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/fecPacketsDiscarded">RTCInboundRtpStreamStats.fecPacketsDiscarded - MDN</a>
   */
  unsigned long long fecPacketsDiscarded;
  /**
   * The fecPacketsReceived property of the RTCInboundRtpStreamStats dictionary indicates how many Forward Error Correction (FEC) packets have been received by this RTP receiver from the remote peer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/fecPacketsReceived">RTCInboundRtpStreamStats.fecPacketsReceived - MDN</a>
   */
  unsigned long long fecPacketsReceived;
  /**
   * The firCount property of the RTCInboundRtpStreamStats dictionary indicates the number of Full Intra Request (FIR) packets have been sent by the receiver to the sender.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/firCount">RTCInboundRtpStreamStats.firCount - MDN</a>
   */
  unsigned long firCount;
  double fractionLost;
  unsigned long frameBitDepth;
  unsigned long frameHeight;
  unsigned long frameWidth;
  /**
   * The framesDecoded property of the RTCInboundRtpStreamStats dictionary indicates the total number of frames which have been decoded successfully for this media source.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/framesDecoded">RTCInboundRtpStreamStats.framesDecoded - MDN</a>
   */
  unsigned long framesDecoded;
  double framesPerSecond;
  unsigned long framesReceived;
  unsigned long long headerBytesReceived;
  unsigned long long insertedSamplesForDeceleration;
  double jitterBufferDelay;
  unsigned long long jitterBufferEmittedCount;
  unsigned long keyFramesDecoded;
  /**
   * The lastPacketReceivedTimestamp property of the RTCInboundRtpStreamStats dictionary indicates the time at which the most recently received packet arrived from this source.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/lastPacketReceivedTimestamp">RTCInboundRtpStreamStats.lastPacketReceivedTimestamp - MDN</a>
   */
  DOMHighResTimeStamp lastPacketReceivedTimestamp;
  /**
   * The nackCount property of the RTCInboundRtpStreamStats dictionary is a numeric value indicating the number of times the receiver sent a NACK packet to the sender.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/nackCount">RTCInboundRtpStreamStats.nackCount - MDN</a>
   */
  unsigned long nackCount;
  /**
   * The packetsDuplicated property of the RTCInboundRtpStreamStats dictionary indicates the total number of packets discarded because they were duplicates of previously-received packets.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/packetsDuplicated">RTCInboundRtpStreamStats.packetsDuplicated - MDN</a>
   */
  unsigned long long packetsDuplicated;
  /**
   * The packetsFailedDecryption property of the RTCInboundRtpStreamStats dictionary indicates the total number of RTP packets which failed to be decrypted successfully after being received by the local end of the connection during this session.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/packetsFailedDecryption">RTCInboundRtpStreamStats.packetsFailedDecryption - MDN</a>
   */
  unsigned long long packetsFailedDecryption;
  /**
   * The perDscpPacketsReceived property of the RTCInboundRtpStreamStats dictionary is a record comprised of key/value pairs in which each key is a string representation of a Differentiated Services Code Point and the value is the number of packets received for that DCSP.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/perDscpPacketsReceived">RTCInboundRtpStreamStats.perDscpPacketsReceived - MDN</a>
   */
  record<USVString, unsigned long long> perDscpPacketsReceived;
  /**
   * The pliCount property of the RTCInboundRtpStreamStats dictionary states the number of times the RTCRtpReceiver described by these statistics sent a Picture Loss Indication (PLI) packet to the sender.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/pliCount">RTCInboundRtpStreamStats.pliCount - MDN</a>
   */
  unsigned long pliCount;
  /**
   * The qpSum property of the RTCInboundRtpStreamStats dictionary is a value generated by adding the Quantization Parameter (QP) values for every frame sent or received to date on the video track corresponding to this RTCInboundRtpStreamStats object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/qpSum">RTCInboundRtpStreamStats.qpSum - MDN</a>
   */
  unsigned long long qpSum;
  /**
   * The receiverId property of the RTCInboundRtpStreamStats dictionary specifies the id of the RTCAudioReceiverStats or RTCVideoReceiverStats object representing the RTCRtpReceiver receiving the stream.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/receiverId">RTCInboundRtpStreamStats.receiverId - MDN</a>
   */
  required DOMString receiverId;
  /**
   * The remoteId property of the RTCInboundRtpStreamStats dictionary specifies the id of the RTCRemoteOutboundRtpStreamStats object representing the remote peer's RTCRtpSender which is sending the media to the local peer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/remoteId">RTCInboundRtpStreamStats.remoteId - MDN</a>
   */
  DOMString remoteId;
  unsigned long long removedSamplesForAcceleration;
  unsigned long long samplesDecodedWithCelt;
  unsigned long long samplesDecodedWithSilk;
  unsigned long long silentConcealedSamples;
  /**
   * The sliCount property of the RTCInboundRtpStreamStats dictionary indicates how many Slice Loss Indication (SLI) packets the RTCRtpReceiver for which this object provdes statistics sent to the remote RTCRtpSender.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/sliCount">RTCInboundRtpStreamStats.sliCount - MDN</a>
   */
  unsigned long sliCount;
  double totalAudioEnergy;
  double totalDecodeTime;
  double totalInterFrameDelay;
  double totalSamplesDuration;
  unsigned long long totalSamplesReceived;
  double totalSquaredInterFrameDelay;
  /**
   * The trackId property of the RTCInboundRtpStreamStats dictionary indicates the id of the RTCReceiverAudioTrackAttachmentStats or RTCReceiverVideoTrackAttachmentStats object representing the MediaStreamTrack which is receiving the incoming media.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats/trackId">RTCInboundRtpStreamStats.trackId - MDN</a>
   */
  DOMString trackId;
  boolean voiceActivityFlag;
};

dictionary RTCLocalSessionDescriptionInit {
  DOMString sdp = "";
  RTCSdpType type;
};

dictionary RTCMediaHandlerStats : RTCStats {
  boolean ended;
  required DOMString kind;
  RTCPriorityType priority;
  boolean remoteSource;
  DOMString trackIdentifier;
};

dictionary RTCMediaSourceStats : RTCStats {
  required DOMString kind;
  boolean relayedSource;
  required DOMString trackIdentifier;
};

dictionary RTCMediaStreamStats : RTCStats {
  DOMString streamIdentifier;
  sequence<DOMString> trackIds;
};

/**
 * The WebRTC API's RTCOfferAnswerOptions dictionary is used to specify options that configure and control the process of creating WebRTC offers or answers.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOfferAnswerOptions">RTCOfferAnswerOptions - MDN</a>
 */
dictionary RTCOfferAnswerOptions {
};

/**
 * The RTCOfferOptions dictionary is used to provide optional settings when creating an RTCPeerConnection offer with the createOffer() method.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOfferOptions">RTCOfferOptions - MDN</a>
 */
dictionary RTCOfferOptions : RTCOfferAnswerOptions {
  /**
   * The iceRestart property of the RTCOfferOptions dictionary is a Boolean value which, when true, tells the RTCPeerConnection to start ICE renegotiation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOfferOptions/iceRestart">RTCOfferOptions.iceRestart - MDN</a>
   */
  boolean iceRestart = false;
  boolean offerToReceiveAudio;
  boolean offerToReceiveVideo;
};

/**
 * The RTCOutboundRtpStreamStats dictionary is the RTCStats-based object which provides metrics and statistics related to an outbound RTP stream being sent by an RTCRtpSender.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats">RTCOutboundRtpStreamStats - MDN</a>
 */
dictionary RTCOutboundRtpStreamStats : RTCSentRtpStreamStats {
  /**
   * The averageRtcpInterval property of the RTCOutboundRtpStreamStats dictionary is a floating-point value indicating the average time that should pass between transmissions of RTCP packets on this stream.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/averageRtcpInterval">RTCOutboundRtpStreamStats.averageRtcpInterval - MDN</a>
   */
  double averageRtcpInterval;
  unsigned long long bytesDiscardedOnSend;
  DOMString encoderImplementation;
  unsigned long fecPacketsSent;
  /**
   * The firCount property of the RTCOutboundRtpStreamStats dictionary indicates the number of Full Intra Request (FIR) that the remote RTCRtpReceiver has sent to this RTCRtpSender.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/firCount">RTCOutboundRtpStreamStats.firCount - MDN</a>
   */
  unsigned long firCount;
  unsigned long frameBitDepth;
  unsigned long frameHeight;
  unsigned long frameWidth;
  unsigned long framesDiscardedOnSend;
  /**
   * The framesEncoded property of the RTCOutboundRtpStreamStats dictionary indicates the total number of frames that have been encoded by this RTCRtpSender for this media source.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/framesEncoded">RTCOutboundRtpStreamStats.framesEncoded - MDN</a>
   */
  unsigned long framesEncoded;
  double framesPerSecond;
  unsigned long framesSent;
  unsigned long long headerBytesSent;
  unsigned long hugeFramesSent;
  unsigned long keyFramesEncoded;
  /**
   * The lastPacketSentTimestamp property of the RTCOutboundRtpStreamStats dictionary indicates the time at which the RTCRtpSender described by this RTCOutboundRtpStreamStats object last transmitted a packet to the remote receiver.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/lastPacketSentTimestamp">RTCOutboundRtpStreamStats.lastPacketSentTimestamp - MDN</a>
   */
  DOMHighResTimeStamp lastPacketSentTimestamp;
  DOMString mediaSourceId;
  /**
   * The nackCount property of the RTCOutboundRtpStreamStats dictionary is a numeric value indicating the number of times the RTCRtpSender described by this object received a NACK packet from the remote receiver.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/nackCount">RTCOutboundRtpStreamStats.nackCount - MDN</a>
   */
  unsigned long nackCount;
  unsigned long packetsDiscardedOnSend;
  /**
   * The perDscpPacketsSent property of the RTCOutboundRtpStreamStats dictionary is a record comprised of key/value pairs in which each key is a string representation of a Differentiated Services Code Point and the value is the number of packets sent for that DCSP.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/perDscpPacketsSent">RTCOutboundRtpStreamStats.perDscpPacketsSent - MDN</a>
   */
  record<USVString, unsigned long long> perDscpPacketsSent;
  /**
   * The pliCount property of the RTCOutboundRtpStreamStats dictionary states the number of times the remote peer's RTCRtpReceiver sent a Picture Loss Indication (PLI) packet to the RTCRtpSender for which this object provides statistics.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/pliCount">RTCOutboundRtpStreamStats.pliCount - MDN</a>
   */
  unsigned long pliCount;
  /**
   * The qpSum property of the RTCOutboundRtpStreamStats dictionary is a value generated by adding the Quantization Parameter (QP) values for every frame this sender has produced to date on the video track corresponding to this RTCOutboundRtpStreamStats object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/qpSum">RTCOutboundRtpStreamStats.qpSum - MDN</a>
   */
  unsigned long long qpSum;
  record<DOMString, double> qualityLimitationDurations;
  /**
   * The qualityLimitationReason property of the RTCOutboundRtpStreamStats dictionary is a string indicating the reason why the media quality in the stream is currently being reduced by the codec during encoding, or none if no quality reduction is being performed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/qualityLimitationReason">RTCOutboundRtpStreamStats.qualityLimitationReason - MDN</a>
   */
  RTCQualityLimitationReason qualityLimitationReason;
  unsigned long qualityLimitationResolutionChanges;
  /**
   * The remoteId property of the RTCOutboundRtpStreamStats dictionary specifies the id of the RTCRemoteInboundRtpStreamStats object representing the remote peer's RTCRtpReceiver which is sending the media to the local peer for this SSRC.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/remoteId">RTCOutboundRtpStreamStats.remoteId - MDN</a>
   */
  DOMString remoteId;
  unsigned long long retransmittedBytesSent;
  unsigned long long retransmittedPacketsSent;
  DOMString rid;
  unsigned long rtxSsrc;
  unsigned long long samplesEncodedWithCelt;
  unsigned long long samplesEncodedWithSilk;
  DOMString senderId;
  /**
   * The sliCount property of the RTCOutboundRtpStreamStats dictionary indicates how many Slice Loss Indication (SLI) packets the RTCRtpSender received from the remote RTCRtpReceiver for the RTP stream described by this object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/sliCount">RTCOutboundRtpStreamStats.sliCount - MDN</a>
   */
  unsigned long sliCount;
  double targetBitrate;
  double totalEncodeTime;
  unsigned long long totalEncodedBytesTarget;
  double totalPacketSendDelay;
  unsigned long long totalSamplesSent;
  /**
   * The trackId property of the RTCOutboundRtpStreamStats dictionary indicates the id of the RTCSenderAudioTrackAttachmentStats or RTCSenderVideoTrackAttachmentStats object representing the MediaStreamTrack which is being sent on this stream.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats/trackId">RTCOutboundRtpStreamStats.trackId - MDN</a>
   */
  DOMString trackId;
  boolean voiceActivityFlag;
};

dictionary RTCPeerConnectionIceErrorEventInit : EventInit {
  DOMString? address;
  required unsigned short errorCode;
  unsigned short? port;
  USVString statusText;
  DOMString url;
};

dictionary RTCPeerConnectionIceEventInit : EventInit {
  RTCIceCandidate? candidate;
  DOMString? url;
};

dictionary RTCPeerConnectionStats : RTCStats {
  unsigned long dataChannelsAccepted;
  unsigned long dataChannelsClosed;
  unsigned long dataChannelsOpened;
  unsigned long dataChannelsRequested;
};

dictionary RTCReceivedRtpStreamStats : RTCRtpStreamStats {
  unsigned long burstDiscardCount;
  double burstDiscardRate;
  unsigned long burstLossCount;
  double burstLossRate;
  unsigned long long burstPacketsDiscarded;
  unsigned long long burstPacketsLost;
  unsigned long framesDropped;
  unsigned long fullFramesLost;
  double gapDiscardRate;
  double gapLossRate;
  double jitter;
  unsigned long long packetsDiscarded;
  long long packetsLost;
  unsigned long long packetsReceived;
  unsigned long long packetsRepaired;
  unsigned long partialFramesLost;
};

dictionary RTCReceiverAudioTrackAttachmentStats : RTCAudioReceiverStats {
};

dictionary RTCReceiverVideoTrackAttachmentStats : RTCVideoReceiverStats {
};

dictionary RTCRemoteInboundRtpStreamStats : RTCReceivedRtpStreamStats {
  double fractionLost;
  DOMString localId;
  unsigned long long reportsReceived;
  double roundTripTime;
  unsigned long long roundTripTimeMeasurements;
  double totalRoundTripTime;
};

/**
 * The WebRTC statistics model's RTCRemoteOutboundRtpStreamStats dictionary extends the underlying RTCSentRtpStreamStats dictionary with properties measuring metrics specific to outgoing RTP streams.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRemoteOutboundRtpStreamStats">RTCRemoteOutboundRtpStreamStats - MDN</a>
 */
dictionary RTCRemoteOutboundRtpStreamStats : RTCSentRtpStreamStats {
  /**
   * The RTCRemoteOutboundRtpStreamStats dictionary's  localId property is a string which can be used to identify the RTCInboundRtpStreamStats object whose remoteId matches this value.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRemoteOutboundRtpStreamStats/localId">RTCRemoteOutboundRtpStreamStats.localId - MDN</a>
   */
  DOMString localId;
  /**
   * The RTCRemoteOutboundRtpStreamStats property remoteTimestamp indicates the timestamp on the remote peer at which these statistics were sent. This differs from timestamp, which indicates the time at which the statistics were generated or received locally.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRemoteOutboundRtpStreamStats/remoteTimestamp">RTCRemoteOutboundRtpStreamStats.remoteTimestamp - MDN</a>
   */
  DOMHighResTimeStamp remoteTimestamp;
  /**
   * The RTCRemoteOutboundRtpStreamStats dictionary's reportsSent property provides the number of Sender Reports (SRs) the remote peer has transmitted to the local peer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRemoteOutboundRtpStreamStats/reportsSent">RTCRemoteOutboundRtpStreamStats.reportsSent - MDN</a>
   */
  unsigned long long reportsSent;
};

dictionary RTCRtcpParameters {
  DOMString cname;
  boolean reducedSize;
};

dictionary RTCRtpCapabilities {
  required sequence<RTCRtpCodecCapability> codecs;
  required sequence<RTCRtpHeaderExtensionCapability> headerExtensions;
};

dictionary RTCRtpCodecCapability {
  unsigned short channels;
  required unsigned long clockRate;
  required DOMString mimeType;
  DOMString sdpFmtpLine;
};

/**
 * The RTCRtpCodecParameters dictionary, part of the WebRTC API, is used to describe the configuration parameters for a single media codec.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpCodecParameters">RTCRtpCodecParameters - MDN</a>
 */
dictionary RTCRtpCodecParameters {
  unsigned short channels;
  required unsigned long clockRate;
  required DOMString mimeType;
  required octet payloadType;
  DOMString sdpFmtpLine;
};

dictionary RTCRtpCodingParameters {
  DOMString rid;
};

/**
 * The RTCRtpContributingSource dictionary of the the WebRTC API is used by getContributingSources() to provide information about a given contributing source (CSRC), including the most recent time a packet that the source contributed was played out.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpContributingSource">RTCRtpContributingSource - MDN</a>
 */
dictionary RTCRtpContributingSource {
  /**
   * The read-only audioLevel property of the RTCRtpContributingSource interface indicates the audio level contained in the last RTP packet played from the described source.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpContributingSource/audioLevel">RTCRtpContributingSource.audioLevel - MDN</a>
   */
  double audioLevel;
  /**
   * The read-only rtpTimestamp property of the RTCRtpContributingSource interface returns a DOMHighResTimeStamp indicating the source-generated time at which the media contained int he packet was first sampled or obtained.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpContributingSource/rtpTimestamp">RTCRtpContributingSource.rtpTimestamp - MDN</a>
   */
  required unsigned long rtpTimestamp;
  /**
   * The read-only source property of the RTCRtpContributingSource interface returns the source identifier of a particular stream of RTP packets.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpContributingSource/source">RTCRtpContributingSource.source - MDN</a>
   */
  required unsigned long source;
  /**
   * The read-only timestamp property of the RTCRtpContributingSource interface returns a DOMHighResTimeStamp indicating the most recent time of playout of an RTP packet from the source.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpContributingSource/timestamp">RTCRtpContributingSource.timestamp - MDN</a>
   */
  required DOMHighResTimeStamp timestamp;
};

dictionary RTCRtpContributingSourceStats : RTCStats {
  double audioLevel;
  required unsigned long contributorSsrc;
  required DOMString inboundRtpStreamId;
  unsigned long packetsContributedTo;
};

dictionary RTCRtpDecodingParameters : RTCRtpCodingParameters {
};

/**
 * An instance of the WebRTC API's RTCRtpEncodingParameters dictionary describes a single configuration of a codec for an RTCRtpSender.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpEncodingParameters">RTCRtpEncodingParameters - MDN</a>
 */
dictionary RTCRtpEncodingParameters : RTCRtpCodingParameters {
  boolean active = true;
  /**
   * The RTCRtpEncodingParameters dictionary's maxBitrate property specifies the maximum number of bits per second to allow a track encoded with this encoding to use.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpEncodingParameters/maxBitrate">RTCRtpEncodingParameters.maxBitrate - MDN</a>
   */
  unsigned long maxBitrate;
  RTCPriorityType networkPriority;
  RTCPriorityType priority;
  /**
   * The RTCRtpEncodingParameters dictionary's scaleResolutionDownBy property can be used to specify a factor by which to reduce the size of a video track during encoding.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpEncodingParameters/scaleResolutionDownBy">RTCRtpEncodingParameters.scaleResolutionDownBy - MDN</a>
   */
  double scaleResolutionDownBy;
};

dictionary RTCRtpHeaderExtensionCapability {
  DOMString uri;
};

dictionary RTCRtpHeaderExtensionParameters {
  boolean encrypted = false;
  required unsigned short id;
  required DOMString uri;
};

dictionary RTCRtpParameters {
  required sequence<RTCRtpCodecParameters> codecs;
  required sequence<RTCRtpHeaderExtensionParameters> headerExtensions;
  required RTCRtcpParameters rtcp;
};

dictionary RTCRtpReceiveParameters : RTCRtpParameters {
};

/**
 * The WebRTC API's RTCRtpSendParameters dictionary is used to specify the parameters for an RTCRtpSender when calling its setParameters() method.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSendParameters">RTCRtpSendParameters - MDN</a>
 */
dictionary RTCRtpSendParameters : RTCRtpParameters {
  required sequence<RTCRtpEncodingParameters> encodings;
  required DOMString transactionId;
};

/**
 * The RTCRtpStreamStats dictionary is returned by the RTCPeerConnection.getStats(), RTCRtpSender.getStats(), and RTCRtpReceiver.getStats() methods to provide detailed statistics about WebRTC connectivity.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpStreamStats">RTCRtpStreamStats - MDN</a>
 */
dictionary RTCRtpStreamStats : RTCStats {
  double averageRTCPInterval;
  DOMString codecId;
  required DOMString kind;
  DOMString mediaType;
  required unsigned long ssrc;
  DOMString transportId;
};

/**
 * The RTCRtpSynchronizationSource dictionary of the the WebRTC API is used by getSynchronizationSources() to describe a particular synchronization source (SSRC).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSynchronizationSource">RTCRtpSynchronizationSource - MDN</a>
 */
dictionary RTCRtpSynchronizationSource : RTCRtpContributingSource {
  /**
   * The read-only voiceActivityFlag property of the RTCRtpSynchronizationSource interface indicates whether or not the most recent RTP packet on the source includes voice activity.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSynchronizationSource/voiceActivityFlag">RTCRtpSynchronizationSource.voiceActivityFlag - MDN</a>
   */
  boolean voiceActivityFlag;
};

/**
 * The RTCRtpTransceiverInit dictionary is used when calling the WebRTC function RTCPeerConnection.addTransceiver() to provide configuration options for the new transceiver.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiverInit">RTCRtpTransceiverInit - MDN</a>
 */
dictionary RTCRtpTransceiverInit {
  RTCRtpTransceiverDirection direction = "sendrecv";
  sequence<RTCRtpEncodingParameters> sendEncodings = [];
  sequence<MediaStream> streams = [];
};

dictionary RTCRtpTransceiverStats : RTCStats {
  DOMString mid;
  required DOMString receiverId;
  required DOMString senderId;
};

dictionary RTCSctpTransportStats : RTCStats {
  unsigned long congestionWindow;
  unsigned long mtu;
  unsigned long receiverWindow;
  double smoothedRoundTripTime;
  unsigned long unackData;
};

dictionary RTCSenderAudioTrackAttachmentStats : RTCAudioSenderStats {
};

dictionary RTCSenderVideoTrackAttachmentStats : RTCVideoSenderStats {
};

dictionary RTCSentRtpStreamStats : RTCRtpStreamStats {
  unsigned long long bytesSent;
  unsigned long packetsSent;
};

dictionary RTCSessionDescriptionInit {
  DOMString sdp = "";
  required RTCSdpType type;
};

/**
 * The RTCStats dictionary is the basic statistics object used by WebRTC's statistics monitoring model, providing the properties required of all statistics data objects.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCStats">RTCStats - MDN</a>
 */
dictionary RTCStats {
  /**
   * The id property of the RTCStats dictionary is a string which uniquely identifies the object for which this RTCStats object provides statistics.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCStats/id">RTCStats.id - MDN</a>
   */
  required DOMString id;
  /**
   * The timestamp property of the RTCStats dictionary is a DOMHighResTimeStamp object specifying the time at which the data in the object was sampled.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCStats/timestamp">RTCStats.timestamp - MDN</a>
   */
  required DOMHighResTimeStamp timestamp;
  /**
   * The RTCStats dictionary's property type is a string which specifies the type of statistic represented by the object, where the permitted values are drawn from the enum type RTCStatsType.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCStats/type">RTCStats.type - MDN</a>
   */
  required RTCStatsType type;
};

/**
 * The WebRTC API's RTCTrackEventInit dictionary is used to provide information describing an RTCTrackEvent when instantiating a new track event using new RTCTrackEvent().
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEventInit">RTCTrackEventInit - MDN</a>
 */
dictionary RTCTrackEventInit : EventInit {
  required RTCRtpReceiver receiver;
  sequence<MediaStream> streams = [];
  required MediaStreamTrack track;
  required RTCRtpTransceiver transceiver;
};

dictionary RTCTransportStats : RTCStats {
  unsigned long long bytesReceived;
  unsigned long long bytesSent;
  DOMString dtlsCipher;
  required RTCDtlsTransportState dtlsState;
  DOMString iceLocalUsernameFragment;
  RTCIceRole iceRole;
  RTCIceTransportState iceState;
  DOMString localCertificateId;
  unsigned long long packetsReceived;
  unsigned long long packetsSent;
  DOMString remoteCertificateId;
  DOMString rtcpTransportStatsId;
  unsigned long selectedCandidatePairChanges;
  DOMString selectedCandidatePairId;
  DOMString srtpCipher;
  DOMString tlsGroup;
  DOMString tlsVersion;
};

dictionary RTCVideoHandlerStats : RTCMediaHandlerStats {
  unsigned long frameHeight;
  unsigned long frameWidth;
  double framesPerSecond;
};

dictionary RTCVideoReceiverStats : RTCVideoHandlerStats {
  DOMHighResTimeStamp estimatedPlayoutTimestamp;
  unsigned long framesDecoded;
  unsigned long framesDropped;
  unsigned long framesReceived;
  unsigned long fullFramesLost;
  double jitterBufferDelay;
  unsigned long long jitterBufferEmittedCount;
  unsigned long keyFramesReceived;
  unsigned long partialFramesLost;
};

dictionary RTCVideoSenderStats : RTCVideoHandlerStats {
  unsigned long framesCaptured;
  unsigned long framesSent;
  unsigned long hugeFramesSent;
  unsigned long keyFramesSent;
  DOMString mediaSourceId;
};

dictionary RTCVideoSourceStats : RTCMediaSourceStats {
  unsigned long bitDepth;
  unsigned long frames;
  double framesPerSecond;
  unsigned long height;
  unsigned long width;
};

dictionary RegistrationOptions {
  USVString scope;
  WorkerType type = "classic";
  ServiceWorkerUpdateViaCache updateViaCache = "imports";
};

/**
 * The ReportingObserverOptions dictionary of the Reporting API allows options to be set in the constructor when creating a ReportingObserver.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserverOptions">ReportingObserverOptions - MDN</a>
 */
dictionary ReportingObserverOptions {
  boolean buffered = false;
  sequence<DOMString> types;
};

dictionary RequestDeviceOptions {
  boolean acceptAllDevices = false;
  sequence<BluetoothLEScanFilterInit> filters;
  sequence<BluetoothServiceUUID> optionalServices = [];
};

dictionary RequestInit {
  BodyInit? body;
  RequestCache cache;
  RequestCredentials credentials;
  HeadersInit headers;
  DOMString integrity;
  boolean keepalive;
  ByteString method;
  RequestMode mode;
  RequestRedirect redirect;
  USVString referrer;
  ReferrerPolicy referrerPolicy;
  AbortSignal? signal;
  any window;
};

dictionary ResponseInit {
  HeadersInit headers;
  unsigned short status = 200;
  ByteString statusText = "";
};

/**
 * The RsaHashedImportParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.importKey() or SubtleCrypto.unwrapKey(), when importing any RSA-based key pair: that is, when the algorithm is identified as any of RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedImportParams">RsaHashedImportParams - MDN</a>
 */
dictionary RsaHashedImportParams : Algorithm {
  required HashAlgorithmIdentifier hash;
};

dictionary RsaHashedKeyAlgorithm : RsaKeyAlgorithm {
  required KeyAlgorithm hash;
};

/**
 * The RsaHashedKeyGenParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.generateKey(), when generating any RSA-based key pair: that is, when the algorithm is identified as any of RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams">RsaHashedKeyGenParams - MDN</a>
 */
dictionary RsaHashedKeyGenParams : RsaKeyGenParams {
  required HashAlgorithmIdentifier hash;
};

dictionary RsaKeyAlgorithm : KeyAlgorithm {
  required unsigned long modulusLength;
  required BigInteger publicExponent;
};

dictionary RsaKeyGenParams : Algorithm {
  required [EnforceRange] unsigned long modulusLength;
  required BigInteger publicExponent;
};

/**
 * The RsaOaepParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the RSA_OAEP algorithm.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RsaOaepParams">RsaOaepParams - MDN</a>
 */
dictionary RsaOaepParams : Algorithm {
  BufferSource label;
};

dictionary RsaOtherPrimesInfo {
  DOMString d;
  DOMString r;
  DOMString t;
};

/**
 * The RsaPssParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.sign() or SubtleCrypto.verify(), when using the RSA-PSS algorithm.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RsaPssParams">RsaPssParams - MDN</a>
 */
dictionary RsaPssParams : Algorithm {
  required [EnforceRange] unsigned long saltLength;
};

dictionary SVGBoundingBoxOptions {
  boolean clipped = false;
  boolean fill = true;
  boolean markers = false;
  boolean stroke = false;
};

dictionary ScrollIntoViewOptions : ScrollOptions {
  ScrollLogicalPosition block = "start";
  ScrollLogicalPosition inline = "nearest";
};

dictionary ScrollOptions {
  ScrollBehavior behavior = "auto";
};

/**
 * The ScrollToOptions dictionary of the CSSOM View spec contains properties specifying where an element should be scrolled to, and whether the scrolling should be smooth.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions">ScrollToOptions - MDN</a>
 */
dictionary ScrollToOptions : ScrollOptions {
  /**
   * A double.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions/left">ScrollToOptions.left - MDN</a>
   */
  unrestricted double left;
  /**
   * A double.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions/top">ScrollToOptions.top - MDN</a>
   */
  unrestricted double top;
};

dictionary SecurityPolicyViolationEventInit : EventInit {
  USVString blockedURL = "";
  unsigned long colno = 0;
  required SecurityPolicyViolationEventDisposition disposition;
  required USVString documentURL;
  required DOMString effectiveDirective;
  unsigned long lineno = 0;
  required DOMString originalPolicy;
  USVString referrer = "";
  DOMString sample = "";
  USVString sourceFile = "";
  required unsigned short statusCode;
};

dictionary Settings {
};

dictionary ShadowRootInit {
  boolean delegatesFocus = false;
  required ShadowRootMode mode;
};

dictionary ShareData {
  sequence<File> files;
  USVString text;
  USVString title;
  USVString url;
};

dictionary SpeechRecognitionErrorEventInit : EventInit {
  required SpeechRecognitionErrorCode error;
  DOMString message = "";
};

dictionary SpeechRecognitionEventInit : EventInit {
  unsigned long resultIndex = 0;
  required SpeechRecognitionResultList results;
};

dictionary SpeechSynthesisErrorEventInit : SpeechSynthesisEventInit {
  required SpeechSynthesisErrorCode error;
};

dictionary SpeechSynthesisEventInit : EventInit {
  unsigned long charIndex = 0;
  unsigned long charLength = 0;
  float elapsedTime = 0;
  DOMString name = "";
  required SpeechSynthesisUtterance utterance;
};

dictionary StaticRangeInit {
  required Node endContainer;
  required unsigned long endOffset;
  required Node startContainer;
  required unsigned long startOffset;
};

dictionary StereoPannerOptions : AudioNodeOptions {
  float pan = 0;
};

/**
 * The StorageEstimate dictionary is used by the StorageManager to provide estimates of the size of a site's or application's data store and how much of it is in use. The estimate() method returns an object that conforms to this dictionary when its Promise resolves.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate">StorageEstimate - MDN</a>
 */
dictionary StorageEstimate {
  /**
   * The StorageEstimate dictionary's quota property is a conservative approximation of how much storage is allotted to the origin or Web app that called StorageManager.estimate(); there may be more space available, but there will not be less. This value is an estimate to help prevent its use for fingerprinting—that is, identifying a device using an amalgamation of the values of seemingly innocuous properties.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate/quota">StorageEstimate.quota - MDN</a>
   */
  unsigned long long quota;
  /**
   * The StorageEstimate dictionary's usage property is a conservative approximation of how much storage is allotted to the origin or Web app that called StorageManager.estimate(); there may be more space available, but there will not be less. The value is an estimate because the user agent may use compression, duplication prevention techniques, and other methods to improve storage efficiency.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate/usage">StorageEstimate.usage - MDN</a>
   */
  unsigned long long usage;
};

dictionary StorageEventInit : EventInit {
  DOMString? key = null;
  DOMString? newValue = null;
  DOMString? oldValue = null;
  Storage? storageArea = null;
  USVString url = "";
};

dictionary SubmitEventInit : EventInit {
  HTMLElement? submitter = null;
};

dictionary SyncEventInit : ExtendableEventInit {
  boolean lastChance = false;
  required DOMString tag;
};

dictionary TableDescriptor {
  required TableKind element;
  required [EnforceRange] unsigned long initial;
  [EnforceRange]
  unsigned long maximum;
};

dictionary TextDecodeOptions {
  boolean stream = false;
};

dictionary TextDecoderOptions {
  boolean fatal = false;
  boolean ignoreBOM = false;
};

dictionary TextEncoderEncodeIntoResult {
  unsigned long long read;
  unsigned long long written;
};

dictionary TokenBinding {
  DOMString id;
  required TokenBindingStatus status;
};

dictionary TouchEventInit : EventModifierInit {
  sequence<Touch> changedTouches = [];
  sequence<Touch> targetTouches = [];
  sequence<Touch> touches = [];
};

dictionary TouchInit {
  double altitudeAngle = 0;
  double azimuthAngle = 0;
  double clientX = 0;
  double clientY = 0;
  float force = 0;
  required long identifier;
  double pageX = 0;
  double pageY = 0;
  float radiusX = 0;
  float radiusY = 0;
  float rotationAngle = 0;
  double screenX = 0;
  double screenY = 0;
  required EventTarget target;
  TouchType touchType = "direct";
};

dictionary TrackEventInit : EventInit {
  ( VideoTrack or AudioTrack or TextTrack )? track = null;
};

dictionary TransitionEventInit : EventInit {
  double elapsedTime = 0.0;
  CSSOMString propertyName = "";
  CSSOMString pseudoElement = "";
};

dictionary UIEventInit : EventInit {
  long detail = 0;
  Window? view = null;
};

/**
 * The ULongRange dictionary is used to define a range of permitted integer values for a property, with either or both a maximum and minimum value specified. The ConstrainULongRange dictionary is based on this, augmenting it to support exact and ideal values as well.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ULongRange">ULongRange - MDN</a>
 */
dictionary ULongRange {
  [Clamp]
  unsigned long max;
  [Clamp]
  unsigned long min;
};

dictionary ValidityStateFlags {
  boolean badInput = false;
  boolean customError = false;
  boolean patternMismatch = false;
  boolean rangeOverflow = false;
  boolean rangeUnderflow = false;
  boolean stepMismatch = false;
  boolean tooLong = false;
  boolean tooShort = false;
  boolean typeMismatch = false;
  boolean valueMissing = false;
};

dictionary ValueEventInit : EventInit {
  any value = null;
};

dictionary WatchAdvertisementsOptions {
  AbortSignal signal;
};

dictionary WaveShaperOptions : AudioNodeOptions {
  sequence<float> curve;
  OverSampleType oversample = "none";
};

dictionary WebAssemblyInstantiatedSource {
  required Instance instance;
  required Module module;
};

dictionary WebGLContextAttributes {
  boolean alpha = true;
  boolean antialias = true;
  boolean depth = true;
  boolean desynchronized = false;
  boolean failIfMajorPerformanceCaveat = false;
  WebGLPowerPreference powerPreference = "default";
  boolean premultipliedAlpha = true;
  boolean preserveDrawingBuffer = false;
  boolean stencil = false;
  boolean xrCompatible = null;
};

dictionary WebGLContextEventInit : EventInit {
  DOMString statusMessage = "";
};

dictionary WheelEventInit : MouseEventInit {
  unsigned long deltaMode = 0;
  double deltaX = 0.0;
  double deltaY = 0.0;
  double deltaZ = 0.0;
};

dictionary WindowPostMessageOptions : PostMessageOptions {
  USVString targetOrigin = "/";
};

dictionary WorkerOptions {
  RequestCredentials credentials = "same-origin";
  DOMString name = "";
  WorkerType type = "classic";
};

dictionary WorkletOptions {
  RequestCredentials credentials = "same-origin";
};

/**
 * The XRInputSourceEventInit dictionary is used when calling the XRInputSourceEvent() constructor to provide configuration options for the newly-created XRInputSourceEvent object to take on.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEventInit">XRInputSourceEventInit - MDN</a>
 */
dictionary XRInputSourceEventInit : EventInit {
  /**
   * The XRInputSourceEventInit dictionary's property frame specifies an XRFrame providing information about the timestamp at which the new input source event took place, as well as access to the XRFrame method getPose() which can be used to map the coordinates of any XRReferenceSpace to the space in which the event took place.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEventInit/frame">XRInputSourceEventInit.frame - MDN</a>
   */
  required XRFrame frame;
  /**
   * The XRInputSourceEventInit dictionary's inputSource property is used when calling the XRInputSourceEvent() constructor to specify the XRInputSource from which the newly-created event is being sent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEventInit/inputSource">XRInputSourceEventInit.inputSource - MDN</a>
   */
  required XRInputSource inputSource;
};

/**
 * The XRInputSourcesChangeEventInit dictionary is used to provide options to the XRInputSourcesChangeEvent() constructor in order to set the initial state of the new XRInputSourcesChangeEvent object.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEventInit">XRInputSourcesChangeEventInit - MDN</a>
 */
dictionary XRInputSourcesChangeEventInit : EventInit {
  /**
   * The XRInputSourcesChangeEventInit property added specifies a list of input sources, each identified using an XRInputSource object, which the represented inputsourceschange event is to indicate are newly available for use.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEventInit/added">XRInputSourcesChangeEventInit.added - MDN</a>
   */
  required FrozenArray<XRInputSource> added;
  /**
   * The XRInputSourcesChangeEventInit property removed is an array of zero or more XRInputSource objects, each representing one input source which has been removed from the XRSession.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEventInit/removed">XRInputSourcesChangeEventInit.removed - MDN</a>
   */
  required FrozenArray<XRInputSource> removed;
  /**
   * The XRInputSourcesChangeEventInit property session specifies the XRSession to which the input source list change event applies.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEventInit/session">XRInputSourcesChangeEventInit.session - MDN</a>
   */
  required XRSession session;
};

/**
 * The XRReferenceSpaceEventInit dictionary is used when calling the XRReferenceSpaceEvent() constructor to provide the values for its properties. Since the properties are read-only, this is the only opportunity available to set their values.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceEventInit">XRReferenceSpaceEventInit - MDN</a>
 */
dictionary XRReferenceSpaceEventInit : EventInit {
  /**
   * The XRReferenceSpaceEventInit property referenceSpace is used to establish the value of a newly-constructed XRReferenceSpaceEvent object when calling the XRReferenceSpaceEvent() constructor.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceEventInit/referenceSpace">XRReferenceSpaceEventInit.referenceSpace - MDN</a>
   */
  required XRReferenceSpace referenceSpace;
  /**
   * The XRReferenceSpaceEventInit property transform indicates the position and orientation of the affected reference space's native origin after the changes the event represents are applied.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceEventInit/transform">XRReferenceSpaceEventInit.transform - MDN</a>
   */
  XRRigidTransform transform;
};

/**
 * The XRRenderStateInit dictionary is a writeable version of the XRRenderState interface, and is used when calling an XRSession's updateRenderState() method to apply changes to the render state prior to rendering the next frame.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRRenderStateInit">XRRenderStateInit - MDN</a>
 */
dictionary XRRenderStateInit {
  XRWebGLLayer? baseLayer;
  double depthFar;
  double depthNear;
  double inlineVerticalFieldOfView;
};

/**
 * The XRSessionEventInit dictionary is used when calling the XRSessionEvent() constructor to provide the new event's initial values.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSessionEventInit">XRSessionEventInit - MDN</a>
 */
dictionary XRSessionEventInit : EventInit {
  /**
   * The XRSessionEventInit dictionary's session property specifies the XRSession for which the event describes a state change.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSessionEventInit/session">XRSessionEventInit.session - MDN</a>
   */
  required XRSession session;
};

/**
 * The WebXR Device API dictionary XRSessionInit specifies required and/or optional features when requesting a new XRSession by calling the navigator.xr.requestSession() method.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSessionInit">XRSessionInit - MDN</a>
 */
dictionary XRSessionInit {
  sequence<any> optionalFeatures;
  sequence<any> requiredFeatures;
};

/**
 * The WebXR Device API's XRWebGLLayerInit dictionary is used to provide configuration options when creating a new XRWebGLLayer object with the XRWebGLLayer() constructor.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayerInit">XRWebGLLayerInit - MDN</a>
 */
dictionary XRWebGLLayerInit {
  /**
   * The alpha property is a Boolean value which, if present and set to true in the XRWebGLLayerInit dictionary passed into the XRWebGLLayer() constructor, specifies that the new layer's color buffer is to include an alpha channel.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayerInit/alpha">XRWebGLLayerInit.alpha - MDN</a>
   */
  boolean alpha = true;
  /**
   * The Boolean antialias property, if present and set to true in the XRWebGLLayerInit object provided as the XRWebGLLayer() constructor's layerInit parameter, requests that the new WebGL rendering layer support anti-aliasing. If this property is missing or is false, anti-aliasing is not desired.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayerInit/antialias">XRWebGLLayerInit.antialias - MDN</a>
   */
  boolean antialias = true;
  /**
   * When using the XRWebGLLayer() constructor to create a new WebGL rendering layer for WebXR, providing as the layerInit parameter an object whose depth property is false will request that the new layer be created without a depth buffer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayerInit/depth">XRWebGLLayerInit.depth - MDN</a>
   */
  boolean depth = true;
  /**
   * The XRWebGLLayerInit dictionary's framebufferScaleFactor property, when specified upon instantiating a new XRWebGLLayer using its constructor, XRWebGLLayer(), specifies the scaling factor to use when determining the size of the frame buffer to use when rendering the scene, relative to the default XR device display resolution.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayerInit/framebufferScaleFactor">XRWebGLLayerInit.framebufferScaleFactor - MDN</a>
   */
  double framebufferScaleFactor = 1.0;
  /**
   * The XRWebGLLayerInit dictionary's Boolean ignoreDepthValues property can be provided in the options passed into the XRWebGLLayer() constructor to indicate that the depth buffer, if it exists, should be ignored while composing the scene.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayerInit/ignoreDepthValues">XRWebGLLayerInit.ignoreDepthValues - MDN</a>
   */
  boolean ignoreDepthValues = false;
  /**
   * When using the XRWebGLLayer() constructor to create a new WebGL rendering layer for WebXR, providing as the layerInit parameter an object whose stencil property is false requests that the new layer be created without a stencil buffer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayerInit/stencil">XRWebGLLayerInit.stencil - MDN</a>
   */
  boolean stencil = false;
};

dictionary authenticatorBiometricPerfBounds {
  float FAR;
  float FRR;
};

dictionary txAuthGenericArg {
  required ArrayBuffer content;
  required USVString contentType;
};

/**
 * The ANGLE_instanced_arrays extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays">ANGLE_instanced_arrays - MDN</a>
 */
[LegacyNoInterfaceObject]
interface ANGLE_instanced_arrays {
  const GLenum VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE;
  void drawArraysInstancedANGLE( GLenum mode, GLint first, GLsizei count, GLsizei primcount );
  void drawElementsInstancedANGLE( GLenum mode, GLsizei count, GLenum type, GLintptr offset, GLsizei primcount );
  void vertexAttribDivisorANGLE( GLuint index, GLuint divisor );
};

/**
 * The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController">AbortController - MDN</a>
 */
[Exposed=(Window,Worker)]
interface AbortController {
  /**
   * The signal read-only property of the AbortController interface returns an AbortSignal object instance, which can be used to communicate with/abort a DOM request as desired.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal">AbortController.signal - MDN</a>
   */
  [SameObject]
  readonly attribute AbortSignal signal;
  /**
   * The AbortController() constructor creates a new AbortController object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController/AbortController">AbortController.AbortController - MDN</a>
   */
  constructor();
  /**
   * The abort() method of the AbortController interface aborts a DOM request (e.g. a Fetch request) before it has completed. This is able to abort fetch requests, consumption of any response Body, and streams.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort">AbortController.abort - MDN</a>
   */
  void abort();
};

/**
 * The AbortSignal interface represents a signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal">AbortSignal - MDN</a>
 */
[Exposed=(Window,Worker)]
interface AbortSignal : EventTarget {
  /**
   * The aborted read-only property returns a Boolean that indicates whether the DOM request(s) the signal is communicating with is/are aborted (true) or not (false).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/aborted">AbortSignal.aborted - MDN</a>
   */
  readonly attribute boolean aborted;
  /**
   * The onabort read-only property of the FetchSignal interface is an event handler Invoked when an abort event fires, i.e. when the fetch request(s) the signal is communicating with is/are aborted.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/onabort">AbortSignal.onabort - MDN</a>
   */
  attribute NullableEventHandler onabort;
  /**
   * The abort event of the Fetch API is fired when a fetch request is aborted, i.e. using AbortController.abort().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/abort_event">abort event - MDN</a>
   */
  event Event abort;
};

/**
 * The AbstractRange abstract interface is the base class upon which all DOM range types are defined. A range is an object that indicates the start and end points of a section of content within the document.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange">AbstractRange - MDN</a>
 */
[Exposed=Window]
interface AbstractRange {
  /**
   * The collapsed read-only property of the AbstractRange interface returns true if the range's start position and end position are the same.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/collapsed">AbstractRange.collapsed - MDN</a>
   */
  readonly attribute boolean collapsed;
  /**
   * The endContainer property of the AbstractRange interface returns the Node in which the end of the range is located.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/endContainer">AbstractRange.endContainer - MDN</a>
   */
  readonly attribute Node endContainer;
  /**
   * The endOffset property of the AbstractRange interface returns the offset into the end node of the range's end position.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/endOffset">AbstractRange.endOffset - MDN</a>
   */
  readonly attribute unsigned long endOffset;
  /**
   * The read-only startContainer property of the AbstractRange interface returns the start Node for the range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/startContainer">AbstractRange.startContainer - MDN</a>
   */
  readonly attribute Node startContainer;
  /**
   * The read-only startOffset property of the AbstractRange interface returns the offset into the start node of the range's start position.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/startOffset">AbstractRange.startOffset - MDN</a>
   */
  readonly attribute unsigned long startOffset;
};

/**
 * The AnalyserNode interface represents a node able to provide real-time frequency and time-domain analysis information. It is an AudioNode that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode">AnalyserNode - MDN</a>
 */
[Exposed=Window]
interface AnalyserNode : AudioNode {
  /**
   * The frequencyBinCount read-only property of the AnalyserNode interface is an unsigned integer half that of the AnalyserNode.fftSize. This generally equates to the number of data values you will have to play with for the visualization.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount">AnalyserNode.frequencyBinCount - MDN</a>
   */
  readonly attribute unsigned long frequencyBinCount;
  /**
   * The fftSize property of the AnalyserNode interface is an unsigned long value and represents the window size in samples that is used when performing a Fast Fourier Transform (FFT) to get frequency domain data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize">AnalyserNode.fftSize - MDN</a>
   */
  attribute unsigned long fftSize;
  /**
   * The maxDecibels property of the AnalyserNode interface is a double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte/float values — basically, this specifies the maximum value for the range of results when using getFloatFrequencyData() or getByteFrequencyData().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/maxDecibels">AnalyserNode.maxDecibels - MDN</a>
   */
  attribute double maxDecibels;
  /**
   * The minDecibels property of the AnalyserNode interface is a double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte/float values — basically, this specifies the minimum value for the range of results when using getFloatFrequencyData() or getByteFrequencyData().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/minDecibels">AnalyserNode.minDecibels - MDN</a>
   */
  attribute double minDecibels;
  /**
   * The smoothingTimeConstant property of the AnalyserNode interface is a double value representing the averaging constant with the last analysis frame. It's basically an average between the current buffer and the last buffer the AnalyserNode processed, and results in a much smoother set of value changes over time.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant">AnalyserNode.smoothingTimeConstant - MDN</a>
   */
  attribute double smoothingTimeConstant;
  /**
   * The AnalyserNode constructor of the Web Audio API creates a new AnalyserNode object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/AnalyserNode">AnalyserNode.AnalyserNode - MDN</a>
   */
  constructor( BaseAudioContext context, optional AnalyserOptions options = {} );
  void getByteFrequencyData( Uint8Array array );
  void getByteTimeDomainData( Uint8Array array );
  /**
   * The getFloatFrequencyData() method of the AnalyserNode Interface copies the current frequency data into a Float32Array array passed into it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatFrequencyData">AnalyserNode.getFloatFrequencyData - MDN</a>
   */
  void getFloatFrequencyData( Float32Array array );
  void getFloatTimeDomainData( Float32Array array );
};

/**
 * The Animation interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Animation">Animation - MDN</a>
 */
[Exposed=Window, LegacyNoInterfaceObject]
interface Animation : EventTarget {
  readonly attribute Promise<Animation> finished;
  readonly attribute boolean pending;
  readonly attribute AnimationPlayState playState;
  readonly attribute Promise<Animation> ready;
  /**
   * The Animation.currentTime property of the Web Animations API returns and sets the current time value of the animation in milliseconds, whether running or paused.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Animation/currentTime">Animation.currentTime - MDN</a>
   */
  attribute double? currentTime;
  attribute AnimationEffect? effect;
  attribute DOMString id;
  attribute NullableEventHandler oncancel;
  attribute NullableEventHandler onfinish;
  attribute double playbackRate;
  attribute double? startTime;
  attribute AnimationTimeline? timeline;
  /**
   * The Animation() constructor of the Web Animations API returns a new Animation object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Animation/Animation">Animation.Animation - MDN</a>
   */
  constructor( optional AnimationEffect? effect = null, optional AnimationTimeline? timeline );
  /**
   * The Web Animations API's cancel() method of the Animation interface clears all KeyframeEffects caused by this animation and aborts its playback.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Animation/cancel">Animation.cancel - MDN</a>
   */
  void cancel();
  void finish();
  void pause();
  void play();
  void reverse();
  void updatePlaybackRate( double playbackRate );
};

/**
 * The AnimationEffect interface of the Web Animations API defines current and future animation effects like KeyframeEffect, which can be passed to Animation objects for playing, and KeyframeEffectReadOnly (which is used by CSS Animations and Transitions).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect">AnimationEffect - MDN</a>
 */
[Exposed=Window]
interface AnimationEffect {
  ComputedEffectTiming getComputedTiming();
  EffectTiming getTiming();
  void updateTiming( optional OptionalEffectTiming timing );
};

/**
 * The AnimationEvent interface represents events providing information related to animations.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent">AnimationEvent - MDN</a>
 */
[Exposed=Window]
interface AnimationEvent : Event {
  /**
   * The AnimationEvent.animationName read-only property is a DOMString containing the value of the animation-name CSS property associated with the transition.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/animationName">AnimationEvent.animationName - MDN</a>
   */
  readonly attribute CSSOMString animationName;
  /**
   * The AnimationEvent.elapsedTime read-only property is a float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/elapsedTime">AnimationEvent.elapsedTime - MDN</a>
   */
  readonly attribute double elapsedTime;
  /**
   * The AnimationEvent.pseudoElement read-only property is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. If the animation doesn't run on a pseudo-element but on the element, an empty string: ''.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/pseudoElement">AnimationEvent.pseudoElement - MDN</a>
   */
  readonly attribute CSSOMString pseudoElement;
  /**
   * The AnimationEvent() constructor returns a newly created AnimationEvent, representing an event in relation with an animation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/AnimationEvent">AnimationEvent.AnimationEvent - MDN</a>
   */
  constructor( CSSOMString type, optional AnimationEventInit animationEventInitDict );
};

/**
 * The AnimationPlaybackEvent interface of the Web Animations API represents animation events.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnimationPlaybackEvent">AnimationPlaybackEvent - MDN</a>
 */
[Exposed=Window]
interface AnimationPlaybackEvent : Event {
  readonly attribute double? currentTime;
  readonly attribute double? timelineTime;
  constructor( DOMString type, optional AnimationPlaybackEventInit eventInitDict );
};

/**
 * The AnimationTimeline interface of the Web Animations API represents the timeline of an animation. This interface exists to define timeline features (inherited by DocumentTimeline and future timeline types) and is not itself directly used by developers. Anywhere you see AnimationTimeline, you should use DocumentTimeline or any other timeline type instead.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline">AnimationTimeline - MDN</a>
 */
[Exposed=Window]
interface AnimationTimeline {
  /**
   * The currentTime read-only property of the Web Animations API's AnimationTimeline interface returns the timeline's current time in milliseconds, or null if the timeline is inactive.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline/currentTime">AnimationTimeline.currentTime - MDN</a>
   */
  readonly attribute double? currentTime;
};

[SecureContext, Exposed=Window]
interface ApplicationCache : EventTarget {
  const unsigned short CHECKING = 2;
  const unsigned short DOWNLOADING = 3;
  const unsigned short IDLE = 1;
  const unsigned short OBSOLETE = 5;
  const unsigned short UNCACHED = 0;
  const unsigned short UPDATEREADY = 4;
  readonly attribute unsigned short status;
  attribute NullableEventHandler oncached;
  attribute NullableEventHandler onchecking;
  attribute NullableEventHandler ondownloading;
  attribute NullableEventHandler onerror;
  attribute NullableEventHandler onnoupdate;
  attribute NullableEventHandler onobsolete;
  attribute NullableEventHandler onprogress;
  attribute NullableEventHandler onupdateready;
  void abort();
  void swapCache();
  void update();
};

/**
 * The Attr interface represents one of a DOM element's attributes as an object. In most DOM methods, you will directly retrieve the attribute as a string (e.g., Element.getAttribute()), but certain functions (e.g., Element.getAttributeNode()) or means of iterating return Attr types.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Attr">Attr - MDN</a>
 */
[Exposed=Window]
interface Attr : Node {
  /**
   * The Attr.localName read-only property returns the local part of the qualified name of an attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Attr/localName">Attr.localName - MDN</a>
   */
  readonly attribute DOMString localName;
  readonly attribute DOMString name;
  /**
   * The Attr.namespaceURI read-only property returns the namespace URI of the attribute, or null if the element is not in a namespace.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Attr/namespaceURI">Attr.namespaceURI - MDN</a>
   */
  readonly attribute DOMString? namespaceURI;
  readonly attribute Element? ownerElement;
  /**
   * The Attr.prefix read-only property returns the namespace prefix of the specified attribute, or null if no prefix is specified.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Attr/prefix">Attr.prefix - MDN</a>
   */
  readonly attribute DOMString? prefix;
  readonly attribute boolean specified;
  [CEReactions]
  attribute DOMString value;
};

/**
 * The AudioBuffer interface represents a short audio asset residing in memory, created from an audio file using the AudioContext.decodeAudioData() method, or from raw data using AudioContext.createBuffer(). Once put into an AudioBuffer, the audio can then be played by being passed into an AudioBufferSourceNode.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer">AudioBuffer - MDN</a>
 */
[Exposed=Window]
interface AudioBuffer {
  /**
   * A double.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/duration">AudioBuffer.duration - MDN</a>
   */
  readonly attribute double duration;
  /**
   * The length property of the AudioBuffer interface returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/length">AudioBuffer.length - MDN</a>
   */
  readonly attribute unsigned long length;
  /**
   * An integer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/numberOfChannels">AudioBuffer.numberOfChannels - MDN</a>
   */
  readonly attribute unsigned long numberOfChannels;
  /**
   * A floating-point value indicating the current sample rate of the buffers data, in samples per second.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/sampleRate">AudioBuffer.sampleRate - MDN</a>
   */
  readonly attribute float sampleRate;
  /**
   * The AudioBuffer constructor of the Web Audio API creates a new AudioBuffer object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/AudioBuffer">AudioBuffer.AudioBuffer - MDN</a>
   */
  constructor( AudioBufferOptions options );
  /**
   * The copyFromChannel() method of the AudioBuffer interface copies the audio sample data from the specified channel of the AudioBuffer to a specified Float32Array.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyFromChannel">AudioBuffer.copyFromChannel - MDN</a>
   */
  void copyFromChannel( Float32Array destination, unsigned long channelNumber, optional unsigned long bufferOffset = 0 );
  /**
   * The copyToChannel() method of the AudioBuffer interface copies the samples to the specified channel of the AudioBuffer, from the source array.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyToChannel">AudioBuffer.copyToChannel - MDN</a>
   */
  void copyToChannel( Float32Array source, unsigned long channelNumber, optional unsigned long bufferOffset = 0 );
  /**
   * The getChannelData() method of the AudioBuffer Interface returns a Float32Array containing the PCM data associated with the channel, defined by the channel parameter (with 0 representing the first channel).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/getChannelData">AudioBuffer.getChannelData - MDN</a>
   */
  Float32Array getChannelData( unsigned long channel );
};

/**
 * The AudioBufferSourceNode interface is an AudioScheduledSourceNode which represents an audio source consisting of in-memory audio data, stored in an AudioBuffer. It's especially useful for playing back audio which has particularly stringent timing accuracy requirements, such as for sounds that must match a specific rhythm and can be kept in memory rather than being played from disk or the network.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode">AudioBufferSourceNode - MDN</a>
 */
[Exposed=Window]
interface AudioBufferSourceNode : AudioScheduledSourceNode {
  /**
   * The detune property of the AudioBufferSourceNode interface is a k-rate AudioParam representing detuning of oscillation in cents.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/detune">AudioBufferSourceNode.detune - MDN</a>
   */
  readonly attribute AudioParam detune;
  /**
   * The playbackRate property of the AudioBufferSourceNode interface Is a k-rate AudioParam that defines the speed at which the audio asset will be played.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/playbackRate">AudioBufferSourceNode.playbackRate - MDN</a>
   */
  readonly attribute AudioParam playbackRate;
  /**
   * The buffer property of the AudioBufferSourceNode interface provides the ability to play back audio using an AudioBuffer as the source of the sound data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/buffer">AudioBufferSourceNode.buffer - MDN</a>
   */
  attribute AudioBuffer? buffer;
  /**
   * The loop property's default value is false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop">AudioBufferSourceNode.loop - MDN</a>
   */
  attribute boolean loop;
  /**
   * A floating-point number indicating the offset, in seconds, into the audio buffer at which each loop will loop return to the beginning of the loop (that is, the current play time gets reset to AudioBufferSourceNode.loopStart). This property is only used if the loop property is true.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd">AudioBufferSourceNode.loopEnd - MDN</a>
   */
  attribute double loopEnd;
  /**
   * The loopStart property of the AudioBufferSourceNode interface is a floating-point value indicating, in seconds, where in the AudioBuffer the restart of the play must happen.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopStart">AudioBufferSourceNode.loopStart - MDN</a>
   */
  attribute double loopStart;
  /**
   * The AudioBufferSourceNode() constructor creates a new AudioBufferSourceNode object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/AudioBufferSourceNode">AudioBufferSourceNode.AudioBufferSourceNode - MDN</a>
   */
  constructor( BaseAudioContext context, optional AudioBufferSourceOptions options = {} );
  /**
   * undefined.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start">AudioBufferSourceNode.start - MDN</a>
   */
  void start( optional double when = 0, optional double offset, optional double duration );
};

/**
 * The AudioContext interface represents an audio-processing graph built from audio modules linked together, each represented by an AudioNode.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext">AudioContext - MDN</a>
 */
[Exposed=Window, LegacyNoInterfaceObject]
interface AudioContext : BaseAudioContext {
  /**
   * The baseLatency read-only property of the AudioContext interface returns a double that represents the number of seconds of processing latency incurred by the AudioContext passing an audio buffer from the AudioDestinationNode — i.e. the end of the audio graph — into the host system's audio subsystem ready for playing.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/baseLatency">AudioContext.baseLatency - MDN</a>
   */
  readonly attribute double baseLatency;
  /**
   * The outputLatency read-only property of the AudioContext Interface provides an estimation of the output latency of the current audio context.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/outputLatency">AudioContext.outputLatency - MDN</a>
   */
  readonly attribute double outputLatency;
  /**
   * The AudioContext() constructor creates a new AudioContext object which represents an audio-processing graph, built from audio modules linked together, each represented by an AudioNode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/AudioContext">AudioContext.AudioContext - MDN</a>
   */
  constructor( optional AudioContextOptions contextOptions = {} );
  /**
   * The close() method of the AudioContext Interface closes the audio context, releasing any system audio resources that it uses.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/close">AudioContext.close - MDN</a>
   */
  Promise<void> close();
  /**
   * For more details about media element audio source nodes, check out the MediaElementAudioSourceNode reference page.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaElementSource">AudioContext.createMediaElementSource - MDN</a>
   */
  MediaElementAudioSourceNode createMediaElementSource( HTMLMediaElement mediaElement );
  /**
   * The MediaStream is created when the node is created and is accessible via the MediaStreamAudioDestinationNode's stream attribute. This stream can be used in a similar way as a MediaStream obtained via navigator.getUserMedia — it can, for example, be sent to a remote peer using the RTCPeerConnection addStream() method.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamDestination">AudioContext.createMediaStreamDestination - MDN</a>
   */
  MediaStreamAudioDestinationNode createMediaStreamDestination();
  /**
   * For more details about media stream audio source nodes, check out the MediaStreamAudioSourceNode reference page.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamSource">AudioContext.createMediaStreamSource - MDN</a>
   */
  MediaStreamAudioSourceNode createMediaStreamSource( MediaStream mediaStream );
  /**
   * A MediaStreamTrackAudioSourceNode object which acts as a source for audio data found in the specified audio track.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamTrackSource">AudioContext.createMediaStreamTrackSource - MDN</a>
   */
  MediaStreamTrackAudioSourceNode createMediaStreamTrackSource( MediaStreamTrack mediaStreamTrack );
  /**
   * The getOutputTimestamp() property of the AudioContext interface returns a new AudioTimestamp object containing two audio timestamp values relating to the current audio context.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/getOutputTimestamp">AudioContext.getOutputTimestamp - MDN</a>
   */
  AudioTimestamp getOutputTimestamp();
  /**
   * The resume() method of the AudioContext interface resumes the progression of time in an audio context that has previously been suspended.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/resume">AudioContext.resume - MDN</a>
   */
  Promise<void> resume();
  /**
   * The suspend() method of the AudioContext Interface suspends the progression of time in the audio context, temporarily halting audio hardware access and reducing CPU/battery usage in the process — this is useful if you want an application to power down the audio hardware when it will not be using an audio context for a while.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/suspend">AudioContext.suspend - MDN</a>
   */
  Promise<void> suspend();
};

/**
 * The AudioDestinationNode interface represents the end destination of an audio graph in a given context — usually the speakers of your device. It can also be the node that will "record" the audio data when used with an OfflineAudioContext.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode">AudioDestinationNode - MDN</a>
 */
[Exposed=Window]
interface AudioDestinationNode : AudioNode {
  /**
   * An unsigned long.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode/maxChannelCount">AudioDestinationNode.maxChannelCount - MDN</a>
   */
  readonly attribute unsigned long maxChannelCount;
};

/**
 * The AudioListener interface represents the position and orientation of the unique person listening to the audio scene, and is used in audio spatialization. All PannerNodes spatialize in relation to the AudioListener stored in the BaseAudioContext.listener attribute.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioListener">AudioListener - MDN</a>
 */
[Exposed=Window]
interface AudioListener {
  readonly attribute AudioParam forwardX;
  readonly attribute AudioParam forwardY;
  readonly attribute AudioParam forwardZ;
  readonly attribute AudioParam positionX;
  readonly attribute AudioParam positionY;
  readonly attribute AudioParam positionZ;
  readonly attribute AudioParam upX;
  readonly attribute AudioParam upY;
  readonly attribute AudioParam upZ;
  /**
   * Void.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/setOrientation">AudioListener.setOrientation - MDN</a>
   */
  void setOrientation( float x, float y, float z, float xUp, float yUp, float zUp );
  /**
   * Void.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/setPosition">AudioListener.setPosition - MDN</a>
   */
  void setPosition( float x, float y, float z );
};

/**
 * The AudioNode interface is a generic interface for representing an audio processing module.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioNode">AudioNode - MDN</a>
 */
[Exposed=Window]
interface AudioNode : EventTarget {
  /**
   * The read-only context property of the AudioNode interface returns the associated BaseAudioContext, that is the object representing the processing graph the node is participating in.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/context">AudioNode.context - MDN</a>
   */
  readonly attribute BaseAudioContext context;
  readonly attribute unsigned long numberOfInputs;
  readonly attribute unsigned long numberOfOutputs;
  attribute unsigned long channelCount;
  attribute ChannelCountMode channelCountMode;
  attribute ChannelInterpretation channelInterpretation;
  /**
   * If the destination is a node, connect() returns a reference to the destination AudioNode object, allowing you to chain multiple connect() calls. In some browsers, older implementations of this interface return undefined.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect">AudioNode.connect - MDN</a>
   */
  AudioNode connect( AudioNode destinationNode, optional unsigned long output = 0, optional unsigned long input = 0 );
  /**
   * If the destination is a node, connect() returns a reference to the destination AudioNode object, allowing you to chain multiple connect() calls. In some browsers, older implementations of this interface return undefined.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect">AudioNode.connect - MDN</a>
   */
  void connect( AudioParam destinationParam, optional unsigned long output = 0 );
  /**
   * undefined
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect">AudioNode.disconnect - MDN</a>
   */
  void disconnect();
  /**
   * undefined
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect">AudioNode.disconnect - MDN</a>
   */
  void disconnect( unsigned long output );
  /**
   * undefined
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect">AudioNode.disconnect - MDN</a>
   */
  void disconnect( AudioNode destinationNode );
  /**
   * undefined
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect">AudioNode.disconnect - MDN</a>
   */
  void disconnect( AudioNode destinationNode, unsigned long output );
  /**
   * undefined
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect">AudioNode.disconnect - MDN</a>
   */
  void disconnect( AudioNode destinationNode, unsigned long output, unsigned long input );
  /**
   * undefined
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect">AudioNode.disconnect - MDN</a>
   */
  void disconnect( AudioParam destinationParam );
  /**
   * undefined
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect">AudioNode.disconnect - MDN</a>
   */
  void disconnect( AudioParam destinationParam, unsigned long output );
};

/**
 * The Web Audio API's AudioParam interface represents an audio-related parameter, usually a parameter of an AudioNode (such as GainNode.gain).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam">AudioParam - MDN</a>
 */
[Exposed=Window]
interface AudioParam {
  /**
   * The defaultValue read-only property of the AudioParam interface represents the initial value of the attributes as defined by the specific AudioNode creating the AudioParam.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/defaultValue">AudioParam.defaultValue - MDN</a>
   */
  readonly attribute float defaultValue;
  /**
   * The maxValue read-only property of the AudioParam interface represents the maximum possible value for the parameter's nominal (effective) range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/maxValue">AudioParam.maxValue - MDN</a>
   */
  readonly attribute float maxValue;
  /**
   * The minValue read-only property of the AudioParam interface represents the minimum possible value for the parameter's nominal (effective) range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/minValue">AudioParam.minValue - MDN</a>
   */
  readonly attribute float minValue;
  attribute AutomationRate automationRate;
  /**
   * The Web Audio API's AudioParam interface property value gets or sets the value of this AudioParam at the current time.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/value">AudioParam.value - MDN</a>
   */
  attribute float value;
  /**
   * The cancelAndHoldAtTime() property of the AudioParam interface cancels all scheduled future changes to the AudioParam but holds its value at a given time until further changes are made using other methods.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/cancelAndHoldAtTime">AudioParam.cancelAndHoldAtTime - MDN</a>
   */
  AudioParam cancelAndHoldAtTime( double cancelTime );
  /**
   * A reference to this AudioParam object. In some older implementations this method returns void.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/cancelScheduledValues">AudioParam.cancelScheduledValues - MDN</a>
   */
  AudioParam cancelScheduledValues( double cancelTime );
  /**
   * A reference to this AudioParam object. In some browsers older implementations of this interface return void.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/exponentialRampToValueAtTime">AudioParam.exponentialRampToValueAtTime - MDN</a>
   */
  AudioParam exponentialRampToValueAtTime( float value, double endTime );
  /**
   * A reference to this AudioParam object. In some browsers older implementations of this interface return void.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/linearRampToValueAtTime">AudioParam.linearRampToValueAtTime - MDN</a>
   */
  AudioParam linearRampToValueAtTime( float value, double endTime );
  /**
   * The setTargetAtTime() method of the AudioParam interface schedules the start of a gradual change to the AudioParam value. This is useful for decay or release portions of ADSR envelopes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setTargetAtTime">AudioParam.setTargetAtTime - MDN</a>
   */
  AudioParam setTargetAtTime( float target, double startTime, float timeConstant );
  /**
   * The setValueAtTime() method of the AudioParam interface schedules an instant change to the AudioParam value at a precise time, as measured against AudioContext.currentTime. The new value is given in the value parameter.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setValueAtTime">AudioParam.setValueAtTime - MDN</a>
   */
  AudioParam setValueAtTime( float value, double startTime );
  /**
   * The setValueCurveAtTime() method of the AudioParam interface schedules the parameter's value to change following a curve defined by a list of values.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setValueCurveAtTime">AudioParam.setValueCurveAtTime - MDN</a>
   */
  AudioParam setValueCurveAtTime( sequence<float> values, double startTime, double duration );
};

/**
 * The Web Audio API interface AudioParamMap represents a set of multiple audio parameters, each described as a mapping of a DOMString identifying the parameter to the AudioParam object representing its value.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParamMap">AudioParamMap - MDN</a>
 */
[Exposed=Window]
interface AudioParamMap {
  readonly maplike<DOMString, AudioParam>;
};

/**
 * The Web Audio API AudioProcessingEvent represents events that occur when a ScriptProcessorNode input buffer is ready to be processed.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioProcessingEvent">AudioProcessingEvent - MDN</a>
 */
[Exposed=Window]
interface AudioProcessingEvent : Event {
  readonly attribute AudioBuffer inputBuffer;
  readonly attribute AudioBuffer outputBuffer;
  readonly attribute double playbackTime;
  constructor( DOMString type, AudioProcessingEventInit eventInitDict );
};

/**
 * The AudioScheduledSourceNode interface—part of the Web Audio API—is a parent interface for several types of audio source node interfaces which share the ability to be started and stopped, optionally at specified times. Specifically, this interface defines the start() and stop() methods, as well as the onended event handler.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode">AudioScheduledSourceNode - MDN</a>
 */
[Exposed=Window]
interface AudioScheduledSourceNode : AudioNode {
  /**
   * The onended event handler for the AudioScheduledSourceNode interface specifies an EventHandler to be executed when the ended event occurs on the node. This event is sent to the node when the concrete interface (such as AudioBufferSourceNode, OscillatorNode, or ConstantSourceNode) determines that it has stopped playing.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/onended">AudioScheduledSourceNode.onended - MDN</a>
   */
  attribute NullableEventHandler onended;
  /**
   * The ended event of the AudioScheduledSourceNode interface is fired when the source node has stopped playing.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/ended_event">ended event - MDN</a>
   */
  event Event ended;
  /**
   * The start() method on AudioScheduledSourceNode schedules a sound to begin playback at the specified time. If no time is specified, then the sound begins playing immediately.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/start">AudioScheduledSourceNode.start - MDN</a>
   */
  void start( optional double when = 0 );
  /**
   * The stop() method on AudioScheduledSourceNode schedules a sound to cease playback at the specified time. If no time is specified, then the sound stops playing immediately.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/stop">AudioScheduledSourceNode.stop - MDN</a>
   */
  void stop( optional double when = 0 );
};

/**
 * The AudioTrack interface represents a single audio track from one of the HTML media elements, audio or video.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack">AudioTrack - MDN</a>
 */
[Exposed=Window]
interface AudioTrack {
  /**
   * The id property contains a string which uniquely identifies the track represented by the AudioTrack.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/id">AudioTrack.id - MDN</a>
   */
  readonly attribute DOMString id;
  /**
   * The kind property contains a string indicating the category of audio contained in the AudioTrack.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/kind">AudioTrack.kind - MDN</a>
   */
  readonly attribute DOMString kind;
  /**
   * The read-only AudioTrack property label returns a string specifying the audio track's human-readable label, if one is available; otherwise, it returns an empty string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/label">AudioTrack.label - MDN</a>
   */
  readonly attribute DOMString label;
  /**
   * The read-only AudioTrack property language returns a string identifying the language used in the audio track.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/language">AudioTrack.language - MDN</a>
   */
  readonly attribute DOMString language;
  /**
   * The read-only AudioTrack property sourceBuffer returns the SourceBuffer that created the track, or null if the track was not created by a SourceBuffer or the SourceBuffer has been removed from the MediaSource.sourceBuffers attribute of its parent media source.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/sourceBuffer">AudioTrack.sourceBuffer - MDN</a>
   */
  readonly attribute SourceBuffer? sourceBuffer;
  /**
   * The AudioTrack property enabled specifies whether or not the described audio track is currently enabled for use. If the track is disabled by setting enabled to false, the track is muted and does not produce audio.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/enabled">AudioTrack.enabled - MDN</a>
   */
  attribute boolean enabled;
};

/**
 * The AudioTrackList interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate AudioTrack object in the list.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList">AudioTrackList - MDN</a>
 */
[Exposed=Window]
interface AudioTrackList : EventTarget {
  /**
   * The read-only AudioTrackList property length returns the number of entries in the AudioTrackList, each of which is an AudioTrack representing one audio track in the media element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/length">AudioTrackList.length - MDN</a>
   */
  readonly attribute unsigned long length;
  /**
   * The AudioTrackList property onaddtrack is an event handler which is called when the addtrack event occurs, indicating that a new audio track has been added to the media element whose audio tracks the AudioTrackList represents.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/onaddtrack">AudioTrackList.onaddtrack - MDN</a>
   */
  attribute NullableEventHandler onaddtrack;
  /**
   * The AudioTrackList property onchange is an event handler which is called when the change event occurs, indicating that one or more of the AudioTracks in the AudioTrackList have been enabled or disabled.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/onchange">AudioTrackList.onchange - MDN</a>
   */
  attribute NullableEventHandler onchange;
  /**
   * The AudioTrackList onremovetrack event handler is called when the removetrack event occurs, indicating that an audio track has been removed from the media element, and therefore also from the AudioTrackList.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/onremovetrack">AudioTrackList.onremovetrack - MDN</a>
   */
  attribute NullableEventHandler onremovetrack;
  /**
   * The addtrack event is fired when a track is added to an AudioTrackList.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/addtrack_event">addtrack event - MDN</a>
   */
  event TrackEvent addtrack;
  /**
   * The change event is fired when an audio track is enabled or disabled, for example by changing the track's enabled property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/change_event">change event - MDN</a>
   */
  event Event change;
  /**
   * The removetrack event is fired when a track is removed from an AudioTrackList.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/removetrack_event">removetrack event - MDN</a>
   */
  event TrackEvent removetrack;
  /**
   * The AudioTrackList method getTrackById() returns the first AudioTrack object from the track list whose id matches the specified string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/getTrackById">AudioTrackList.getTrackById - MDN</a>
   */
  AudioTrack? getTrackById( DOMString id );
  /**
   * The AudioTrackList interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate AudioTrack object in the list.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList">AudioTrackList - MDN</a>
   */
  getter AudioTrack ( unsigned long index );
};

/**
 * The AudioWorklet interface of the Web Audio API is used to supply custom audio processing scripts that execute in a separate thread to provide very low latency audio processing.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioWorklet">AudioWorklet - MDN</a>
 */
[Exposed=Window, SecureContext]
interface AudioWorklet : Worklet {
};

/**
 * The AudioWorkletNode interface of the Web Audio API represents a base class for a user-defined AudioNode, which can be connected to an audio routing graph along with other nodes. It has an associated AudioWorkletProcessor, which does the actual audio processing in a Web Audio rendering thread.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode">AudioWorkletNode - MDN</a>
 */
[Exposed=Window, SecureContext]
interface AudioWorkletNode : AudioNode {
  /**
   * The read-only parameters property of the AudioWorkletNode interface returns the associated AudioParamMap — that is, a Map-like collection of AudioParam objects. They are instantiated during creation of the underlying AudioWorkletProcessor according to its parameterDescriptors static getter.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/parameters">AudioWorkletNode.parameters - MDN</a>
   */
  readonly attribute AudioParamMap parameters;
  /**
   * The read-only port property of the AudioWorkletNode interface returns the associated MessagePort. It can be used to communicate between the node and its associated AudioWorkletProcessor.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/port">AudioWorkletNode.port - MDN</a>
   */
  readonly attribute MessagePort port;
  attribute NullableEventHandler onprocessorerror;
  /**
   * The AudioWorkletNode() constructor creates a new AudioWorkletNode object, which represents an AudioNode that uses a JavaScript function to perform custom audio processing.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/AudioWorkletNode">AudioWorkletNode.AudioWorkletNode - MDN</a>
   */
  constructor( BaseAudioContext context, DOMString name, optional AudioWorkletNodeOptions options = {} );
};

/**
 * The AuthenticatorAssertionResponse interface of the Web Authentication API is returned by CredentialsContainer.get() when a PublicKeyCredential is passed, and provides proof to a service that it has a key pair and that the authentication request is valid and approved.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAssertionResponse">AuthenticatorAssertionResponse - MDN</a>
 */
[SecureContext, Exposed=Window]
interface AuthenticatorAssertionResponse : AuthenticatorResponse {
  /**
   * The authenticatorData property of the AuthenticatorAssertionResponse interface returns an ArrayBuffer containing information from the authenticator such as the Relying Party ID Hash (rpIdHash), a signature counter, test of user presence, user verification flags, and any extensions processed by the authenticator.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAssertionResponse/authenticatorData">AuthenticatorAssertionResponse.authenticatorData - MDN</a>
   */
  [SameObject]
  readonly attribute ArrayBuffer authenticatorData;
  /**
   * The signature read-only property of the AuthenticatorAssertionResponse interface is an ArrayBuffer object which is the signature of the authenticator for both AuthenticatorAssertionResponse.authenticatorData and a SHA-256 hash of the client data (AuthenticatorAssertionResponse.clientDataJSON).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAssertionResponse/signature">AuthenticatorAssertionResponse.signature - MDN</a>
   */
  [SameObject]
  readonly attribute ArrayBuffer signature;
  /**
   * The userHandle read-only property of the AuthenticatorAssertionResponse interface is an ArrayBuffer object which is an opaque identifier for the given user. Such an identifier can be used by the relying party's server to link the user account with its corresponding credentials and other data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAssertionResponse/userHandle">AuthenticatorAssertionResponse.userHandle - MDN</a>
   */
  [SameObject]
  readonly attribute ArrayBuffer? userHandle;
};

/**
 * The AuthenticatorAttestationResponse interface of the Web Authentication API is returned by CredentialsContainer.create() when a PublicKeyCredential is passed, and provides a cryptographic root of trust for the new key pair that has been generated. This response should be sent to the relying party's server to complete the creation of the credential.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAttestationResponse">AuthenticatorAttestationResponse - MDN</a>
 */
[SecureContext, Exposed=Window]
interface AuthenticatorAttestationResponse : AuthenticatorResponse {
  /**
   * The attestationObject property of the AuthenticatorAttestationResponse interface returns an ArrayBuffer containing the new public key, as well as signature over the entire attestationObject with a private key that is stored in the authenticator when it is manufactured.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAttestationResponse/attestationObject">AuthenticatorAttestationResponse.attestationObject - MDN</a>
   */
  [SameObject]
  readonly attribute ArrayBuffer attestationObject;
};

/**
 * The AuthenticatorResponse interface of the Web Authentication API is the base interface for interfaces that provide a cryptographic root of trust for a key pair. The child interfaces include information from the browser such as the challenge origin and either may be returned from PublicKeyCredential.response.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorResponse">AuthenticatorResponse - MDN</a>
 */
[SecureContext, Exposed=Window]
interface AuthenticatorResponse {
  /**
   * The clientDataJSON property of the AuthenticatorResponse interface stores a JSON string in an ArrayBuffer, representing the client data that was passed to CredentialsContainer.create() or CredentialsContainer.get(). This property is only accessed on one of the child objects of AuthenticatorResponse, specifically AuthenticatorAttestationResponse or AuthenticatorAssertionResponse.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorResponse/clientDataJSON">AuthenticatorResponse.clientDataJSON - MDN</a>
   */
  [SameObject]
  readonly attribute ArrayBuffer clientDataJSON;
};

[Exposed=Window]
interface BarProp {
  readonly attribute boolean visible;
};

/**
 * The BaseAudioContext interface of the Web Audio API acts as a base definition for online and offline audio-processing graphs, as represented by AudioContext and OfflineAudioContext respectively.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext">BaseAudioContext - MDN</a>
 */
[Exposed=Window]
interface BaseAudioContext : EventTarget {
  /**
   * The audioWorklet read-only property of the BaseAudioContext interface returns an instance of AudioWorklet that can be used for adding AudioWorkletProcessor-derived classes which implement custom audio processing.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/audioWorklet">BaseAudioContext.audioWorklet - MDN</a>
   */
  [SameObject, SecureContext]
  readonly attribute AudioWorklet audioWorklet;
  /**
   * The currentTime read-only property of the BaseAudioContext interface returns a double representing an ever-increasing hardware timestamp in seconds that can be used for scheduling audio playback, visualizing timelines, etc. It starts at 0.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/currentTime">BaseAudioContext.currentTime - MDN</a>
   */
  readonly attribute double currentTime;
  /**
   * An AudioDestinationNode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/destination">BaseAudioContext.destination - MDN</a>
   */
  readonly attribute AudioDestinationNode destination;
  /**
   * An AudioListener object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/listener">BaseAudioContext.listener - MDN</a>
   */
  readonly attribute AudioListener listener;
  /**
   * The sampleRate property of the BaseAudioContext interface returns a floating point number representing the sample rate, in samples per second, used by all nodes in this audio context.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/sampleRate">BaseAudioContext.sampleRate - MDN</a>
   */
  readonly attribute float sampleRate;
  /**
   * A DOMString. Possible values are:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/state">BaseAudioContext.state - MDN</a>
   */
  readonly attribute AudioContextState state;
  attribute NullableEventHandler onstatechange;
  /**
   * The createAnalyser() method of the BaseAudioContext interface creates an AnalyserNode, which can be used to expose audio time and frequency data and create data visualisations.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createAnalyser">BaseAudioContext.createAnalyser - MDN</a>
   */
  AnalyserNode createAnalyser();
  /**
   * A BiquadFilterNode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBiquadFilter">BaseAudioContext.createBiquadFilter - MDN</a>
   */
  BiquadFilterNode createBiquadFilter();
  AudioBuffer createBuffer( unsigned long numberOfChannels, unsigned long length, float sampleRate );
  AudioBufferSourceNode createBufferSource();
  ChannelMergerNode createChannelMerger( optional unsigned long numberOfInputs = 6 );
  ChannelSplitterNode createChannelSplitter( optional unsigned long numberOfOutputs = 6 );
  ConstantSourceNode createConstantSource();
  ConvolverNode createConvolver();
  DelayNode createDelay( optional double maxDelayTime = 1.0 );
  DynamicsCompressorNode createDynamicsCompressor();
  GainNode createGain();
  IIRFilterNode createIIRFilter( sequence<double> feedforward, sequence<double> feedback );
  OscillatorNode createOscillator();
  PannerNode createPanner();
  PeriodicWave createPeriodicWave( sequence<float> real, sequence<float> imag, optional PeriodicWaveConstraints constraints = {} );
  ScriptProcessorNode createScriptProcessor( optional unsigned long bufferSize = 0, optional unsigned long numberOfInputChannels = 2, optional unsigned long numberOfOutputChannels = 2 );
  StereoPannerNode createStereoPanner();
  WaveShaperNode createWaveShaper();
  Promise<AudioBuffer> decodeAudioData( ArrayBuffer audioData, optional DecodeSuccessCallback? successCallback, optional DecodeErrorCallback? errorCallback );
};

/**
 * The beforeunload event is fired when the window, the document and its resources are about to be unloaded.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent">BeforeUnloadEvent - MDN</a>
 */
[Exposed=Window]
interface BeforeUnloadEvent : Event {
  attribute DOMString returnValue;
};

/**
 * The BiquadFilterNode interface represents a simple low-order filter, and is created using the AudioContext.createBiquadFilter() method. It is an AudioNode that can represent different kinds of filters, tone control devices, and graphic equalizers.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode">BiquadFilterNode - MDN</a>
 */
[Exposed=Window]
interface BiquadFilterNode : AudioNode {
  readonly attribute AudioParam Q;
  readonly attribute AudioParam detune;
  readonly attribute AudioParam frequency;
  readonly attribute AudioParam gain;
  attribute BiquadFilterType type;
  /**
   * The BiquadFilterNode() constructor of the Web Audio API creates a new BiquadFilterNode object, which represents a simple low-order filter, and is created using the AudioContext.createBiquadFilter() method.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/BiquadFilterNode">BiquadFilterNode.BiquadFilterNode - MDN</a>
   */
  constructor( BaseAudioContext context, optional BiquadFilterOptions options = {} );
  /**
   * undefined
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/getFrequencyResponse">BiquadFilterNode.getFrequencyResponse - MDN</a>
   */
  void getFrequencyResponse( Float32Array frequencyHz, Float32Array magResponse, Float32Array phaseResponse );
};

/**
 * The Blob object represents a blob, which is a file-like object of immutable, raw data; they can be read as text or binary data, or converted into a ReadableStream so its methods can be used for processing the data.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob">Blob - MDN</a>
 */
[Exposed=(Window,Worker), Serializable]
interface Blob {
  readonly attribute unsigned long long size;
  readonly attribute DOMString type;
  /**
   * The Blob() constructor returns a new Blob object. The content of the blob consists of the concatenation of the values given in the parameter array.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob">Blob.Blob - MDN</a>
   */
  constructor( optional sequence<BlobPart> blobParts, optional BlobPropertyBag options = {} );
  [NewObject]
  Promise<ArrayBuffer> arrayBuffer();
  Blob slice( optional [Clamp] long long start, optional [Clamp] long long end, optional DOMString contentType );
  [NewObject]
  ReadableStream stream();
  [NewObject]
  Promise<USVString> text();
};

/**
 * The BlobEvent interface represents events associated with a Blob. These blobs are typically, but not necessarily,  associated with media content.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BlobEvent">BlobEvent - MDN</a>
 */
[Exposed=Window]
interface BlobEvent : Event {
  /**
   * The BlobEvent.data read-only property represents a Blob associated with the event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BlobEvent/data">BlobEvent.data - MDN</a>
   */
  [SameObject]
  readonly attribute Blob data;
  /**
   * The timecode readonlyinline property of the BlobEvent interface a DOMHighResTimeStamp indicating the difference between the timestamp of the first chunk in data, and the timestamp of the first chunk in the first BlobEvent produced by this recorder.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BlobEvent/timecode">BlobEvent.timecode - MDN</a>
   */
  readonly attribute DOMHighResTimeStamp timecode;
  /**
   * The BlobEvent() constructor returns a newly created BlobEvent object with an associated Blob.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BlobEvent/BlobEvent">BlobEvent.BlobEvent - MDN</a>
   */
  constructor( DOMString type, BlobEventInit eventInitDict );
};

/**
 * The Bluetooth interface of the Web Bluetooth API returns a Promise to a BluetoothDevice object with the specified options.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth">Bluetooth - MDN</a>
 */
[Exposed=Window, SecureContext]
interface Bluetooth : EventTarget {
  /**
   * The Bluetooth.referringDevice attribute of the Bluetooth interface returns a BluetoothDevice if the current document was opened in response to an instruction sent by this device and null otherwise.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth/referringDevice">Bluetooth.referringDevice - MDN</a>
   */
  [SameObject]
  readonly attribute BluetoothDevice? referringDevice;
  attribute NullableEventHandler onadvertisementreceived;
  /**
   * The onavailabilitychanged property of the Bluetooth interface is an EventHandler that processes availabilitychanged events that fire when the Bluetooth system as a whole becomes available or unavailable to the User Agent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth/onavailabilitychanged">Bluetooth.onavailabilitychanged - MDN</a>
   */
  attribute NullableEventHandler onavailabilitychanged;
  attribute NullableEventHandler oncharacteristicvaluechanged;
  attribute NullableEventHandler ongattserverdisconnected;
  attribute NullableEventHandler onserviceadded;
  attribute NullableEventHandler onservicechanged;
  attribute NullableEventHandler onserviceremoved;
  /**
   * Fired on navigator.bluetooth when the Bluetooth system as a whole becomes available or unavailable to the UA.
   * characteristicvalu
   *
   * @see <a href="https://webbluetoothcg.github.io/web-bluetooth/#eventdef-bluetoothremotegattservice-availabilitychanged">availabilitychanged event - MDN</a>
   */
  event Event availabilitychanged;
  /**
   * The getAvailability() method of Bluetooth interface of Web Bluetooth API interface exposes the Bluetooth capabilities of the current device. For a returns a Boolean which is true if the deveice has a Bluetooth adapter and false otherwise (unless user configured User Agent not to expose a real value).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth/getAvailability">Bluetooth.getAvailability - MDN</a>
   */
  Promise<boolean> getAvailability();
  /**
   * The getDevices() method of Bluetooth interface of Web Bluetooth API exposes the Bluetooth devices this origin is allowed to access. This method does not display any permission prompts.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth/getDevices">Bluetooth.getDevices - MDN</a>
   */
  Promise<sequence<BluetoothDevice>> getDevices();
  /**
   * The Bluetooth.requestDevice() method of the Bluetooth interface returns a Promise to a BluetoothDevice object with the specified options. If there is no chooser UI, this method returns the first device matching the criteria.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth/requestDevice">Bluetooth.requestDevice - MDN</a>
   */
  Promise<BluetoothDevice> requestDevice( optional RequestDeviceOptions options = {} );
};

[Exposed=Window, SecureContext]
interface BluetoothAdvertisingEvent : Event {
  readonly attribute unsigned short? appearance;
  [SameObject]
  readonly attribute BluetoothDevice device;
  [SameObject]
  readonly attribute BluetoothManufacturerDataMap manufacturerData;
  readonly attribute DOMString? name;
  readonly attribute byte? rssi;
  [SameObject]
  readonly attribute BluetoothServiceDataMap serviceData;
  readonly attribute byte? txPower;
  readonly attribute FrozenArray<UUID> uuids;
  constructor( DOMString type, BluetoothAdvertisingEventInit init );
};

/**
 * The BluetoothCharacteristicProperties interface of the the Web Bluetooth API provides the operations that are valid on the given BluetoothRemoteGATTCharacteristic.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties">BluetoothCharacteristicProperties - MDN</a>
 */
[Exposed=Window, SecureContext]
interface BluetoothCharacteristicProperties {
  /**
   * The authenticatedSignedWrites read-only property of the BluetoothCharacteristicProperties interface returns a boolean that is true if signed writing to the characteristic value is permitted.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/authenticatedSignedWrites">BluetoothCharacteristicProperties.authenticatedSignedWrites - MDN</a>
   */
  readonly attribute boolean authenticatedSignedWrites;
  /**
   * The broadcast read-only property of the BluetoothCharacteristicProperties interface returns a boolean that is true if the broadcast of the characteristic value is permitted using the Server Characteristic Configuration Descriptor.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/broadcast">BluetoothCharacteristicProperties.broadcast - MDN</a>
   */
  readonly attribute boolean broadcast;
  /**
   * The indicate read-only property of the BluetoothCharacteristicProperties interface returns a boolean that is true if indications of the characteristic value with acknowledgement is permitted.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/indicate">BluetoothCharacteristicProperties.indicate - MDN</a>
   */
  readonly attribute boolean indicate;
  /**
   * The notify read-only property of the BluetoothCharacteristicProperties interface returns a boolean that is true if notifications of the characteristic value without acknowledgement is permitted.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/notify">BluetoothCharacteristicProperties.notify - MDN</a>
   */
  readonly attribute boolean notify;
  /**
   * The read read-only property of the BluetoothCharacteristicProperties interface returns a boolean that is true if the reading of the characteristic value is permitted.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/read">BluetoothCharacteristicProperties.read - MDN</a>
   */
  readonly attribute boolean read;
  /**
   * The reliableWrite read-only property of the BluetoothCharacteristicProperties interface returns a boolean that is true if reliable writes to the characteristic is permitted.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/reliableWrite">BluetoothCharacteristicProperties.reliableWrite - MDN</a>
   */
  readonly attribute boolean reliableWrite;
  readonly attribute boolean writableAuxiliaries;
  /**
   * The write read-only property of the BluetoothCharacteristicProperties interface returns a boolean that is true if the writing to the characteristic with response is permitted.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties/write">BluetoothCharacteristicProperties.write - MDN</a>
   */
  readonly attribute boolean write;
  readonly attribute boolean writeWithoutResponse;
};

/**
 * The BluetoothDevice interface of the Web Bluetooth API represents a Bluetooth device inside a particular script execution environment.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice">BluetoothDevice - MDN</a>
 */
[Exposed=Window, SecureContext]
interface BluetoothDevice : EventTarget {
  /**
   * The BluetoothDevice.gatt read-only property returns a reference to the device's BluetoothRemoteGATTServer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/gatt">BluetoothDevice.gatt - MDN</a>
   */
  readonly attribute BluetoothRemoteGATTServer? gatt;
  /**
   * The BluetoothDevice.id read-only property returns a DOMString that uniquely identifies a device.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/id">BluetoothDevice.id - MDN</a>
   */
  readonly attribute DOMString id;
  /**
   * The BluetoothDevice.name read-only property returns a DOMString that provides a human-readable name for the device.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/name">BluetoothDevice.name - MDN</a>
   */
  readonly attribute DOMString? name;
  readonly attribute boolean watchingAdvertisements;
  attribute NullableEventHandler onadvertisementreceived;
  attribute NullableEventHandler oncharacteristicvaluechanged;
  attribute NullableEventHandler ongattserverdisconnected;
  attribute NullableEventHandler onserviceadded;
  attribute NullableEventHandler onservicechanged;
  attribute NullableEventHandler onserviceremoved;
  /**
   * Fired on a BluetoothDevice when an advertising event is received from that device.
   *
   * @see <a href="https://webbluetoothcg.github.io/web-bluetooth/#eventdef-bluetoothremotegattservice-advertisementreceived">advertisementreceived event - MDN</a>
   */
  event BluetoothAdvertisingEvent advertisementreceived;
  /**
   * Fired on a BluetoothDevice when an active GATT connection is lost.
   *
   * @see <a href="https://webbluetoothcg.github.io/web-bluetooth/#eventdef-bluetoothremotegattservice-gattserverdisconnected">gattserverdisconnected event - MDN</a>
   */
  event Event gattserverdisconnected;
  Promise<void> watchAdvertisements( optional WatchAdvertisementsOptions options = {} );
};

[Exposed=Window, SecureContext]
interface BluetoothManufacturerDataMap {
  readonly maplike<unsigned short, DataView>;
};

[Exposed=Window]
interface BluetoothPermissionResult : PermissionStatus {
  attribute FrozenArray<BluetoothDevice> devices;
};

/**
 * The BluetoothRemoteGattCharacteristic interface of the Web Bluetooth API represents a GATT Characteristic, which is a basic data element that provides further information about a peripheral’s service.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic">BluetoothRemoteGATTCharacteristic - MDN</a>
 */
[Exposed=Window, SecureContext]
interface BluetoothRemoteGATTCharacteristic : EventTarget {
  /**
   * The BluetoothRemoteGATTCharacteristic.properties read-only property returns a BluetoothCharacteristicProperties instance containing the properties of this characteristic.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/properties">BluetoothRemoteGATTCharacteristic.properties - MDN</a>
   */
  readonly attribute BluetoothCharacteristicProperties properties;
  /**
   * The BluetoothRemoteGATTCharacteristic.service read-only property returns the BluetoothGATTService this characteristic belongs to.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/service">BluetoothRemoteGATTCharacteristic.service - MDN</a>
   */
  [SameObject]
  readonly attribute BluetoothRemoteGATTService service;
  /**
   * The BluetoothRemoteGATTCharacteristic.uuid read-only property returns DOMString containing the UUID of the characteristic, for example '00002a37-0000-1000-8000-00805f9b34fb' for the Heart Rate Measurement characteristic.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/uuid">BluetoothRemoteGATTCharacteristic.uuid - MDN</a>
   */
  readonly attribute UUID uuid;
  /**
   * The BluetoothRemoteGATTCharacteristic.value read-only property returns currently cached characteristic value. This value gets updated when the value of the characteristic is read or updated via a notification or indication.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/value">BluetoothRemoteGATTCharacteristic.value - MDN</a>
   */
  readonly attribute DataView? value;
  attribute NullableEventHandler oncharacteristicvaluechanged;
  /**
   * Fired on a BluetoothRemoteGATTCharacteristic when its value changes, either as a result of a read request , or a value change notification/indication.
   *
   * @see <a href="https://webbluetoothcg.github.io/web-bluetooth/#eventdef-bluetoothremotegattservice-characteristicvaluechanged">characteristicvaluechanged event - MDN</a>
   */
  event ValueEvent characteristicvaluechanged;
  /**
   * The BluetoothRemoteGATTCharacteristic.getDescriptor() method returns a Promise that resolves to the first BluetoothGATTDescriptor for a given descriptor UUID.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/getDescriptor">BluetoothRemoteGATTCharacteristic.getDescriptor - MDN</a>
   */
  Promise<BluetoothRemoteGATTDescriptor> getDescriptor( BluetoothDescriptorUUID descriptor );
  /**
   * The BluetoothRemoteGATTCharacteristic.getDescriptors() method returns a Promise that resolves to an Array of all BluetoothGATTDescriptor objects for a given descriptor UUID.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/getDescriptors">BluetoothRemoteGATTCharacteristic.getDescriptors - MDN</a>
   */
  Promise<sequence<BluetoothRemoteGATTDescriptor>> getDescriptors( optional BluetoothDescriptorUUID descriptor );
  /**
   * The BluetoothRemoteGATTCharacteristic.readValue() method returns a Promise that resolves to a DataView holding a duplicate of the value property if it is available and supported. Otherwise it throws an error.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/readValue">BluetoothRemoteGATTCharacteristic.readValue - MDN</a>
   */
  Promise<DataView> readValue();
  /**
   * The BluetoothRemoteGATTCharacteristic.startNotifications() method returns a Promise to the BluetoothRemoteGATTCharacteristic instance when there is an active notification on it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/startNotifications">BluetoothRemoteGATTCharacteristic.startNotifications - MDN</a>
   */
  Promise<BluetoothRemoteGATTCharacteristic> startNotifications();
  /**
   * The BluetoothRemoteGATTCharacteristic.stopNotifications() method returns a Promise to the BluetoothRemoteGATTCharacteristic instance when there is no longer an active notification on it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/stopNotifications">BluetoothRemoteGATTCharacteristic.stopNotifications - MDN</a>
   */
  Promise<BluetoothRemoteGATTCharacteristic> stopNotifications();
  /**
   * The BluetoothRemoteGATTCharacteristic.writeValue() method sets the value property to the bytes contained in an ArrayBuffer and returns a Promise.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/writeValue">BluetoothRemoteGATTCharacteristic.writeValue - MDN</a>
   */
  Promise<void> writeValue( BufferSource value );
  Promise<void> writeValueWithResponse( BufferSource value );
  Promise<void> writeValueWithoutResponse( BufferSource value );
};

/**
 * The BluetoothRemoteGATTDescriptor interface of the Web Bluetooth API provides a GATT Descriptor, which provides further information about a characteristic’s value.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor">BluetoothRemoteGATTDescriptor - MDN</a>
 */
[Exposed=Window, SecureContext]
interface BluetoothRemoteGATTDescriptor {
  /**
   * The BluetoothRemoteGATTDescriptor.characteristic read-only property returns the BluetoothRemoteGATTCharacteristic this descriptor belongs to.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor/characteristic">BluetoothRemoteGATTDescriptor.characteristic - MDN</a>
   */
  [SameObject]
  readonly attribute BluetoothRemoteGATTCharacteristic characteristic;
  /**
   * The BluetoothRemoteGATTDescriptor.uuid read-only property returns the UUID of the characteristic descriptor, for example '00002902-0000-1000-8000-00805f9b34fb' for theClient Characteristic Configuration descriptor.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor/uuid">BluetoothRemoteGATTDescriptor.uuid - MDN</a>
   */
  readonly attribute UUID uuid;
  /**
   * The BluetoothRemoteGATTDescriptor.value read-only property returns an ArrayBuffer containing the currently cached descriptor value. This value gets updated when the value of the descriptor is read.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor/value">BluetoothRemoteGATTDescriptor.value - MDN</a>
   */
  readonly attribute DataView? value;
  /**
   * The BluetoothRemoteGATTDescriptor.readValue() method returns a Promise that resolves to an ArrayBuffer holding a duplicate  of the value property if it is available and supported. Otherwise it throws an error.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor/readValue">BluetoothRemoteGATTDescriptor.readValue - MDN</a>
   */
  Promise<DataView> readValue();
  /**
   * The BluetoothRemoteGATTDescriptor.writeValue() method sets the value property to the bytes contained in an ArrayBuffer and returns a Promise.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor/writeValue">BluetoothRemoteGATTDescriptor.writeValue - MDN</a>
   */
  Promise<void> writeValue( BufferSource value );
};

/**
 * The BluetoothRemoteGATTServer interface of the Web Bluetooth API represents a GATT Server on a remote device.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer">BluetoothRemoteGATTServer - MDN</a>
 */
[Exposed=Window, SecureContext]
interface BluetoothRemoteGATTServer {
  /**
   * The BluetoothRemoteGATTServer.connected read-only property returns a boolean value that returns true while this script execution environment is connected to this.device. It can be false while the user agent is physically connected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/connected">BluetoothRemoteGATTServer.connected - MDN</a>
   */
  readonly attribute boolean connected;
  /**
   * The BluetoothRemoteGATTServer.device read-only property returns a reference to the BluetoothDevice running the server.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/device">BluetoothRemoteGATTServer.device - MDN</a>
   */
  [SameObject]
  readonly attribute BluetoothDevice device;
  /**
   * The BluetoothRemoteGATTServer.connect() method causes the script execution environment to connect to this.device.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/connect">BluetoothRemoteGATTServer.connect - MDN</a>
   */
  Promise<BluetoothRemoteGATTServer> connect();
  /**
   * The BluetoothRemoteGATTServer.disconnect() method causes the script execution environment to disconnect from this.device.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/disconnect">BluetoothRemoteGATTServer.disconnect - MDN</a>
   */
  void disconnect();
  /**
   * The BluetoothRemoteGATTServer.getPrimaryService() method returns a promise to the primary BluetoothGATTService offered by the bluetooth device for a specified BluetoothServiceUUID.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/getPrimaryService">BluetoothRemoteGATTServer.getPrimaryService - MDN</a>
   */
  Promise<BluetoothRemoteGATTService> getPrimaryService( BluetoothServiceUUID service );
  /**
   * The BluetoothRemoteGATTServer.getPrimaryServices() method returns a promise to a list of primary BluetoothGATTService objects offered by the bluetooth device for a specified BluetoothServiceUUID.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/getPrimaryServices">BluetoothRemoteGATTServer.getPrimaryServices - MDN</a>
   */
  Promise<sequence<BluetoothRemoteGATTService>> getPrimaryServices( optional BluetoothServiceUUID service );
};

/**
 * The BluetoothRemoteGATTService interface of the Web Bluetooth API represents a service provided by a GATT server, including a device, a list of referenced services, and a list of the characteristics of this service.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService">BluetoothRemoteGATTService - MDN</a>
 */
[Exposed=Window, SecureContext]
interface BluetoothRemoteGATTService : EventTarget {
  /**
   * The BluetoothGATTService.device read-only property returns information about a Bluetooth device through an instance of BluetoothDevice.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService/device">BluetoothRemoteGATTService.device - MDN</a>
   */
  [SameObject]
  readonly attribute BluetoothDevice device;
  /**
   * The BluetoothGATTService.isPrimary read-only property returns a Boolean that indicates whether this is a primary service. If it is not a primary service, it is a secondary service.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService/isPrimary">BluetoothRemoteGATTService.isPrimary - MDN</a>
   */
  readonly attribute boolean isPrimary;
  /**
   * The BluetoothGATTService.uuid read-only property returns a DOMString representing the UUID of this service.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService/uuid">BluetoothRemoteGATTService.uuid - MDN</a>
   */
  readonly attribute UUID uuid;
  attribute NullableEventHandler oncharacteristicvaluechanged;
  attribute NullableEventHandler onserviceadded;
  attribute NullableEventHandler onservicechanged;
  attribute NullableEventHandler onserviceremoved;
  /**
   * Fired on a new BluetoothRemoteGATTService when it has been discovered on a remote device, just after it is added to the Bluetooth tree.
   *
   * @see <a href="https://webbluetoothcg.github.io/web-bluetooth/#eventdef-bluetoothremotegattservice-serviceadded">serviceadded event - MDN</a>
   */
  event Event serviceadded;
  /**
   * Fired on a BluetoothRemoteGATTService when its state changes. This involves any characteristics and/or descriptors that get added or removed from the service, as well as Service Changed indications from the remote device.
   *
   * @see <a href="https://webbluetoothcg.github.io/web-bluetooth/#eventdef-bluetoothremotegattservice-servicechanged">servicechanged event - MDN</a>
   */
  event Event servicechanged;
  /**
   * Fired on a BluetoothRemoteGATTService when it has been removed from its device, just before it is removed from the Bluetooth tree.
   *
   * @see <a href="https://webbluetoothcg.github.io/web-bluetooth/#eventdef-bluetoothremotegattservice-serviceremoved">serviceremoved event - MDN</a>
   */
  event Event serviceremoved;
  /**
   * The BluetoothGATTService.getCharacteristic() method returns a Promise to an instance of BluetoothGATTCharacteristic for a given universally unique identifier (UUID).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService/getCharacteristic">BluetoothRemoteGATTService.getCharacteristic - MDN</a>
   */
  Promise<BluetoothRemoteGATTCharacteristic> getCharacteristic( BluetoothCharacteristicUUID characteristic );
  /**
   * The BluetoothGATTService.getCharacteristics() method returns a Promise to a list of BluetoothGATTCharacteristic instances for a given universally unique identifier (UUID).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService/getCharacteristics">BluetoothRemoteGATTService.getCharacteristics - MDN</a>
   */
  Promise<sequence<BluetoothRemoteGATTCharacteristic>> getCharacteristics( optional BluetoothCharacteristicUUID characteristic );
  /**
   * The BluetoothGATTService.getIncludedService() method returns a Promise to an instance of BluetoothGATTService for a given universally unique identifier (UUID).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService/getIncludedService">BluetoothRemoteGATTService.getIncludedService - MDN</a>
   */
  Promise<BluetoothRemoteGATTService> getIncludedService( BluetoothServiceUUID service );
  /**
   * The BluetoothGATTService.getIncludedServices() method returns a Promise to an Array of BluetoothGATTService instances for an optional universally unique identifier (UUID).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService/getIncludedServices">BluetoothRemoteGATTService.getIncludedServices - MDN</a>
   */
  Promise<sequence<BluetoothRemoteGATTService>> getIncludedServices( optional BluetoothServiceUUID service );
};

[Exposed=Window, SecureContext]
interface BluetoothServiceDataMap {
  readonly maplike<UUID, DataView>;
};

[Exposed=Window]
interface BluetoothUUID {
  static UUID canonicalUUID( [EnforceRange] unsigned long alias );
  static UUID getCharacteristic( ( DOMString or unsigned long ) name );
  static UUID getDescriptor( ( DOMString or unsigned long ) name );
  static UUID getService( ( DOMString or unsigned long ) name );
};

/**
 * The BroadcastChannel interface represents a named channel that any browsing context of a given origin can subscribe to. It allows communication between different documents (in different windows, tabs, frames or iframes) of the same origin. Messages are broadcasted via a message event fired at all BroadcastChannel objects listening to the channel.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel">BroadcastChannel - MDN</a>
 */
[Exposed=(Window,Worker)]
interface BroadcastChannel : EventTarget {
  /**
   * The read-only BroadcastChannel.name property returns a DOMString, which uniquely identifies the given channel with its name. This name is passed to the BroadcastChannel() constructor at creation time and is therefore read-only.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/name">BroadcastChannel.name - MDN</a>
   */
  readonly attribute DOMString name;
  /**
   * The BroadcastChannel.onmessage event handler is a property that specifies the function to execute when a message event, of type MessageEvent, is received by this BroadcastChannel. Such an event is sent by the browser with a message broadcasted to the channel.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessage">BroadcastChannel.onmessage - MDN</a>
   */
  attribute NullableEventHandler onmessage;
  /**
   * The onmessageerror event handler of the BroadcastChannel interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the BroadcastChannel instance — that is, when it receives a message that cannot be deserialized.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessageerror">BroadcastChannel.onmessageerror - MDN</a>
   */
  attribute NullableEventHandler onmessageerror;
  /**
   * The message event is fired on a BroadcastChannel object when a message arrives on that channel.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/message_event">message event - MDN</a>
   */
  event MessageEvent message;
  /**
   * The messageerror event is fired on a BroadcastChannel object when a message arrives on the channel that can't be deserialized.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/messageerror_event">messageerror event - MDN</a>
   */
  event MessageEvent messageerror;
  /**
   * The BroadcastChannel() constructor creates a new BroadcastChannel and connects it to the underlying channel.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/BroadcastChannel">BroadcastChannel.BroadcastChannel - MDN</a>
   */
  constructor( DOMString name );
  /**
   * The BroadcastChannel.close() terminates the connection to the underlying channel, allowing the object to be garbage collected. This is a necessary step to perform as there is no other way for a browser to know that this channel is not needed anymore.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/close">BroadcastChannel.close - MDN</a>
   */
  void close();
  /**
   * The BroadcastChannel.postMessage() sends a message, which can be of any kind of Object, to each listener in any browsing context with the same origin. The message is transmitted as a message event targeted at each BroadcastChannel bound to the channel.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/postMessage">BroadcastChannel.postMessage - MDN</a>
   */
  void postMessage( any message );
};

/**
 * The CDATASection interface represents a CDATA section that can be used within XML to include extended portions of unescaped text. The symbols  and & don’t need escaping as they normally do when inside a CDATA section.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CDATASection">CDATASection - MDN</a>
 */
[Exposed=Window]
interface CDATASection : Text {
};

interface CSPViolationReportBody : ReportBody {
  readonly attribute USVString? blockedURL;
  readonly attribute unsigned long? columnNumber;
  readonly attribute SecurityPolicyViolationEventDisposition disposition;
  readonly attribute USVString documentURL;
  readonly attribute DOMString effectiveDirective;
  readonly attribute unsigned long? lineNumber;
  readonly attribute DOMString originalPolicy;
  readonly attribute USVString? referrer;
  readonly attribute DOMString? sample;
  readonly attribute USVString? sourceFile;
  readonly attribute unsigned short statusCode;
};

/**
 * An object implementing the CSSConditionRule interface represents a single condition CSS at-rule, which consists of a condition and a statement block. It is a child of CSSGroupingRule.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSConditionRule">CSSConditionRule - MDN</a>
 */
[Exposed=Window]
interface CSSConditionRule : CSSGroupingRule {
  attribute CSSOMString conditionText;
};

interface CSSFontFaceRule : CSSRule {
  readonly attribute CSSStyleDeclaration style;
};

/**
 * An object implementing the CSSGroupingRule interface represents any CSS at-rule that contains other rules nested within it.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule">CSSGroupingRule - MDN</a>
 */
[Exposed=Window]
interface CSSGroupingRule : CSSRule {
  [SameObject]
  readonly attribute CSSRuleList cssRules;
  void deleteRule( unsigned long index );
  unsigned long insertRule( CSSOMString rule, optional unsigned long index = 0 );
};

[Exposed=Window]
interface CSSImportRule : CSSRule {
  readonly attribute USVString href;
  [SameObject, PutForwards=mediaText]
  readonly attribute MediaList media;
  [SameObject]
  readonly attribute CSSStyleSheet styleSheet;
};

/**
 * The CSSKeyframeRule interface describes an object representing a set of style for a given keyframe. It corresponds to the contains of a single keyframe of a @keyframes at-rule. It implements the CSSRule interface with a type value of 8 (CSSRule.KEYFRAME_RULE).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframeRule">CSSKeyframeRule - MDN</a>
 */
[Exposed=Window]
interface CSSKeyframeRule : CSSRule {
  [SameObject, PutForwards=cssText]
  readonly attribute CSSStyleDeclaration style;
  attribute CSSOMString keyText;
};

/**
 * The CSSKeyframesRule interface describes an object representing a complete set of keyframes for a CSS animation. It corresponds to the contents of a whole @keyframes at-rule. It implements the CSSRule interface with a type value of 7 (CSSRule.KEYFRAMES_RULE).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule">CSSKeyframesRule - MDN</a>
 */
[Exposed=Window]
interface CSSKeyframesRule : CSSRule {
  readonly attribute CSSRuleList cssRules;
  attribute CSSOMString name;
  void appendRule( CSSOMString rule );
  void deleteRule( CSSOMString select );
  CSSKeyframeRule? findRule( CSSOMString select );
};

[Exposed=Window]
interface CSSMarginRule : CSSRule {
  readonly attribute CSSOMString name;
  [SameObject, PutForwards=cssText]
  readonly attribute CSSStyleDeclaration style;
};

/**
 * The CSSMediaRule interface represents a single CSS @media rule. It implements the CSSConditionRule interface, and therefore the CSSGroupingRule and the CSSRule interface with a type value of 4 (CSSRule.MEDIA_RULE).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule">CSSMediaRule - MDN</a>
 */
[Exposed=Window]
interface CSSMediaRule : CSSConditionRule {
  [SameObject, PutForwards=mediaText]
  readonly attribute MediaList media;
};

/**
 * The CSSNamespaceRule interface describes an object representing a single CSS @namespace at-rule. It implements the CSSRule interface, with a type value of 10 (CSSRule.NAMESPACE_RULE).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule">CSSNamespaceRule - MDN</a>
 */
[Exposed=Window]
interface CSSNamespaceRule : CSSRule {
  /**
   * The CSSNamespaceRule.namespaceURI read-only property returns a DOMString containing the text of the URI of the given namespace.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule/namespaceURI">CSSNamespaceRule.namespaceURI - MDN</a>
   */
  readonly attribute CSSOMString namespaceURI;
  /**
   * The CSSNamespaceRule.prefix read-only property returns a DOMString with the name of the prefix associated to this namespace. If there is no such prefix, returns  null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule/prefix">CSSNamespaceRule.prefix - MDN</a>
   */
  readonly attribute CSSOMString prefix;
};

/**
 * CSSPageRule is an interface representing a single CSS @page rule. It implements the CSSRule interface with a type value of 6 (CSSRule.PAGE_RULE).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSPageRule">CSSPageRule - MDN</a>
 */
[Exposed=Window]
interface CSSPageRule : CSSGroupingRule {
  [SameObject, PutForwards=cssText]
  readonly attribute CSSStyleDeclaration style;
  attribute CSSOMString selectorText;
};

/**
 * The CSSPseudoElement interface represents a pseudo-element that may be the target of an event or animated using the Web Animations API. Instances of this interface may be obtained by calling Element.pseudo().
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSPseudoElement">CSSPseudoElement - MDN</a>
 */
[Exposed=Window]
interface CSSPseudoElement : EventTarget {
  /**
   * The element read-only property of the CSSPseudoElement interface returns a reference to the originating element of the pseudo-element, in other words its parent element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSPseudoElement/element">CSSPseudoElement.element - MDN</a>
   */
  readonly attribute Element element;
  /**
   * The type read-only property of the CSSPseudoElement interface returns the type of the pseudo-element as a string, represented in the form of a CSS selector.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSPseudoElement/type">CSSPseudoElement.type - MDN</a>
   */
  readonly attribute CSSOMString type;
  Animation animate( object? keyframes, optional ( unrestricted double or KeyframeAnimationOptions ) options );
  sequence<Animation> getAnimations();
};

/**
 * The CSSRule interface represents a single CSS rule. There are several types of rules, listed in the Type constants section below.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule">CSSRule - MDN</a>
 */
[Exposed=Window]
interface CSSRule {
  const unsigned short CHARSET_RULE = 2;
  const unsigned short FONT_FACE_RULE = 5;
  const unsigned short IMPORT_RULE = 3;
  const unsigned short KEYFRAMES_RULE = 7;
  const unsigned short KEYFRAME_RULE = 8;
  const unsigned short MARGIN_RULE = 9;
  const unsigned short MEDIA_RULE = 4;
  const unsigned short NAMESPACE_RULE = 10;
  const unsigned short PAGE_RULE = 6;
  const unsigned short STYLE_RULE = 1;
  const unsigned short SUPPORTS_RULE = 12;
  readonly attribute CSSRule? parentRule;
  readonly attribute CSSStyleSheet? parentStyleSheet;
  readonly attribute unsigned short type;
  attribute CSSOMString cssText;
};

/**
 * A CSSRuleList is an (indirect-modify only) array-like object containing an ordered collection of CSSRule objects.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList">CSSRuleList - MDN</a>
 */
[Exposed=Window]
interface CSSRuleList {
  readonly attribute unsigned long length;
  getter CSSRule? item( unsigned long index );
};

/**
 * The CSSStyleDeclaration interface represents an object that is a CSS declaration block, and exposes style information and various style-related methods and properties.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration">CSSStyleDeclaration - MDN</a>
 */
[Exposed=Window]
interface CSSStyleDeclaration {
  readonly attribute unsigned long length;
  readonly attribute CSSRule? parentRule;
  [CEReactions]
  attribute [LegacyNullToEmptyString] CSSOMString cssFloat;
  [CEReactions]
  attribute CSSOMString cssText;
  /**
   * The CSSStyleDeclaration.getPropertyPriority() method interface returns a DOMString that provides all explicitly set priorities on the CSS property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/getPropertyPriority">CSSStyleDeclaration.getPropertyPriority - MDN</a>
   */
  CSSOMString getPropertyPriority( CSSOMString property );
  /**
   * The CSSStyleDeclaration.getPropertyValue() method interface returns a DOMString containing the value of a specified CSS property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/getPropertyValue">CSSStyleDeclaration.getPropertyValue - MDN</a>
   */
  CSSOMString getPropertyValue( CSSOMString property );
  /**
   * The CSSStyleDeclaration.removeProperty() method interface removes a property from a CSS style declaration object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/removeProperty">CSSStyleDeclaration.removeProperty - MDN</a>
   */
  [CEReactions]
  CSSOMString removeProperty( CSSOMString property );
  /**
   * The CSSStyleDeclaration.setProperty() method interface sets a new value for a property on a CSS style declaration object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/setProperty">CSSStyleDeclaration.setProperty - MDN</a>
   */
  [CEReactions]
  void setProperty( CSSOMString property, [LegacyNullToEmptyString] CSSOMString value, optional [LegacyNullToEmptyString] CSSOMString priority = "" );
  /**
   * The CSSStyleDeclaration.item() method interface returns a CSS property name from a CSSStyleDeclaration by index
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/item">CSSStyleDeclaration.item - MDN</a>
   */
  getter CSSOMString item( unsigned long index );
};

/**
 * CSSStyleRule represents a single CSS style rule. It implements the CSSRule interface with a type value of 1 (CSSRule.STYLE_RULE).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule">CSSStyleRule - MDN</a>
 */
[Exposed=Window]
interface CSSStyleRule : CSSRule {
  /**
   * The CSSRule.style property is the CSSStyleDeclaration interface for the declaration block of the CSSRule.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule/style">CSSStyleRule.style - MDN</a>
   */
  [SameObject, PutForwards=cssText]
  readonly attribute CSSStyleDeclaration style;
  /**
   * The CSSRule.selectorText property gets the textual representation of the selector for the rule set. This is readonly in some browsers; to set stylesheet rules dynamically cross-browser, see Using dynamic styling information.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule/selectorText">CSSStyleRule.selectorText - MDN</a>
   */
  attribute CSSOMString selectorText;
};

/**
 * The CSSStyleSheet interface represents a single CSS stylesheet, and lets you inspect and modify the list of rules contained in the stylesheet.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet">CSSStyleSheet - MDN</a>
 */
[Exposed=Window]
interface CSSStyleSheet : StyleSheet {
  /**
   * The read-only CSSStyleSheet property cssRules returns a live CSSRuleList which provides a real-time, up-to-date list of every CSS rule which comprises the stylesheet.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/cssRules">CSSStyleSheet.cssRules - MDN</a>
   */
  [SameObject]
  readonly attribute CSSRuleList cssRules;
  /**
   * The read-only CSSStyleSheet property ownerRule returns the CSSImportRule corresponding to the @import at-rule which imported the stylesheet into the document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/ownerRule">CSSStyleSheet.ownerRule - MDN</a>
   */
  readonly attribute CSSRule? ownerRule;
  [SameObject]
  readonly attribute CSSRuleList rules;
  long addRule( optional DOMString selector = "undefined", optional DOMString style = "undefined", optional unsigned long index );
  /**
   * The CSSStyleSheet method deleteRule() removes a rule from the stylesheet object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/deleteRule">CSSStyleSheet.deleteRule - MDN</a>
   */
  void deleteRule( unsigned long index );
  /**
   * The CSSStyleSheet.insertRule() method inserts a new CSS rule into the current style sheet, with some restrictions.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule">CSSStyleSheet.insertRule - MDN</a>
   */
  unsigned long insertRule( CSSOMString rule, optional unsigned long index = 0 );
  void removeRule( optional unsigned long index = 0 );
};

/**
 * The CSSSupportsRule interface describes an object representing a single CSS @supports at-rule. It implements the CSSConditionRule interface, and therefore the CSSRule and CSSGroupingRule interfaces with a type value of 12 (CSSRule.SUPPORTS_RULE).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSSupportsRule">CSSSupportsRule - MDN</a>
 */
[Exposed=Window]
interface CSSSupportsRule : CSSConditionRule {
};

/**
 * The Cache interface provides a storage mechanism for Request / Response object pairs that are cached, for example as part of the ServiceWorker life cycle. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Cache">Cache - MDN</a>
 */
[SecureContext, Exposed=(Window,Worker)]
interface Cache {
  /**
   * The add() method of the Cache interface takes a URL, retrieves it, and adds the resulting response object to the given cache.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Cache/add">Cache.add - MDN</a>
   */
  [NewObject]
  Promise<void> add( RequestInfo request );
  /**
   * The addAll() method of the Cache interface takes an array of URLs, retrieves them, and adds the resulting response objects to the given cache. The request objects created during retrieval become keys to the stored response operations.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Cache/addAll">Cache.addAll - MDN</a>
   */
  [NewObject]
  Promise<void> addAll( sequence<RequestInfo> requests );
  /**
   * The delete() method of the Cache interface finds the Cache entry whose key is the request, and if found, deletes the Cache entry and returns a Promise that resolves to true. If no Cache entry is found, it resolves to false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete">Cache.delete - MDN</a>
   */
  [NewObject]
  Promise<boolean> delete( RequestInfo request, optional CacheQueryOptions options = {} );
  /**
   * The keys() method of the Cache interface returns a Promise that resolves to an array of Cache keys.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Cache/keys">Cache.keys - MDN</a>
   */
  [NewObject]
  Promise<FrozenArray<Request>> keys( optional RequestInfo request, optional CacheQueryOptions options = {} );
  /**
   * The match() method of the Cache interface returns a Promise that resolves to the Response associated with the first matching request in the Cache object. If no match is found, the Promise resolves to undefined.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Cache/match">Cache.match - MDN</a>
   */
  [NewObject]
  Promise<any> match( RequestInfo request, optional CacheQueryOptions options = {} );
  /**
   * The matchAll() method of the Cache interface returns a Promise that resolves to an array of all matching responses in the Cache object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Cache/matchAll">Cache.matchAll - MDN</a>
   */
  [NewObject]
  Promise<FrozenArray<Response>> matchAll( optional RequestInfo request, optional CacheQueryOptions options = {} );
  /**
   * The put() method of the Cache interface allows key/value pairs to be added to the current Cache object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Cache/put">Cache.put - MDN</a>
   */
  [NewObject]
  Promise<void> put( RequestInfo request, Response response );
};

/**
 * The CacheStorage interface represents the storage for Cache objects.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage">CacheStorage - MDN</a>
 */
[SecureContext, Exposed=(Window,Worker)]
interface CacheStorage {
  /**
   * The delete() method of the CacheStorage interface finds the Cache object matching the cacheName, and if found, deletes the Cache object and returns a Promise that resolves to true. If no Cache object is found, it resolves to false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/delete">CacheStorage.delete - MDN</a>
   */
  [NewObject]
  Promise<boolean> delete( DOMString cacheName );
  /**
   * The has() method of the CacheStorage interface returns a Promise that resolves to true if a Cache object matches the cacheName.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/has">CacheStorage.has - MDN</a>
   */
  [NewObject]
  Promise<boolean> has( DOMString cacheName );
  /**
   * The keys() method of the CacheStorage interface returns a Promise that will resolve with an array containing strings corresponding to all of the named Cache objects tracked by the CacheStorage object in the order they were created. Use this method to iterate over a list of all Cache objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/keys">CacheStorage.keys - MDN</a>
   */
  [NewObject]
  Promise<sequence<DOMString>> keys();
  /**
   * The match() method of the CacheStorage interface checks if a given Request or url string is a key for a stored Response. This method returns a Promise for a Response, or a Promise which resolves to undefined if no match is found.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/match">CacheStorage.match - MDN</a>
   */
  [NewObject]
  Promise<any> match( RequestInfo request, optional MultiCacheQueryOptions options = {} );
  /**
   * The open() method of the CacheStorage interface returns a Promise that resolves to the Cache object matching the cacheName.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/open">CacheStorage.open - MDN</a>
   */
  [NewObject]
  Promise<Cache> open( DOMString cacheName );
};

/**
 * The CanvasGradient interface represents an opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient().
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient">CanvasGradient - MDN</a>
 */
[Exposed=(Window,Worker)]
interface CanvasGradient {
  /**
   * The CanvasGradient.addColorStop() method adds a new color stop, defined by an offset and a color, to a given canvas gradient.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient/addColorStop">CanvasGradient.addColorStop - MDN</a>
   */
  void addColorStop( double offset, DOMString color );
};

/**
 * The CanvasPattern interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern">CanvasPattern - MDN</a>
 */
[Exposed=(Window,Worker)]
interface CanvasPattern {
  /**
   * The CanvasPattern.setTransform() method uses an SVGMatrix or DOMMatrix object as the pattern's transformation matrix and invokes it on the pattern.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern/setTransform">CanvasPattern.setTransform - MDN</a>
   */
  void setTransform( optional DOMMatrix2DInit transform = {} );
};

/**
 * The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a canvas element. It is used for drawing shapes, text, images, and other objects.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D">CanvasRenderingContext2D - MDN</a>
 */
[Exposed=Window]
interface CanvasRenderingContext2D {
  readonly attribute HTMLCanvasElement canvas;
  attribute CanvasDirection direction;
  attribute ( DOMString or CanvasGradient or CanvasPattern ) fillStyle;
  attribute DOMString filter;
  attribute DOMString font;
  attribute unrestricted double globalAlpha;
  attribute DOMString globalCompositeOperation;
  attribute boolean imageSmoothingEnabled;
  attribute ImageSmoothingQuality imageSmoothingQuality;
  attribute CanvasLineCap lineCap;
  attribute unrestricted double lineDashOffset;
  attribute CanvasLineJoin lineJoin;
  attribute unrestricted double lineWidth;
  attribute unrestricted double miterLimit;
  attribute unrestricted double shadowBlur;
  attribute DOMString shadowColor;
  attribute unrestricted double shadowOffsetX;
  attribute unrestricted double shadowOffsetY;
  attribute ( DOMString or CanvasGradient or CanvasPattern ) strokeStyle;
  attribute CanvasTextAlign textAlign;
  attribute CanvasTextBaseline textBaseline;
  void arc( unrestricted double x, unrestricted double y, unrestricted double radius, unrestricted double startAngle, unrestricted double endAngle, optional boolean anticlockwise = false );
  void arcTo( unrestricted double x1, unrestricted double y1, unrestricted double x2, unrestricted double y2, unrestricted double radius );
  void beginPath();
  void bezierCurveTo( unrestricted double cp1x, unrestricted double cp1y, unrestricted double cp2x, unrestricted double cp2y, unrestricted double x, unrestricted double y );
  void clearRect( unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h );
  void clip( optional CanvasFillRule fillRule = "nonzero" );
  void clip( Path2D path, optional CanvasFillRule fillRule = "nonzero" );
  void closePath();
  ImageData createImageData( long sw, long sh );
  ImageData createImageData( ImageData imagedata );
  CanvasGradient createLinearGradient( double x0, double y0, double x1, double y1 );
  CanvasPattern? createPattern( CanvasImageSource image, [LegacyNullToEmptyString] DOMString repetition );
  CanvasGradient createRadialGradient( double x0, double y0, double r0, double x1, double y1, double r1 );
  void drawFocusIfNeeded( Element element );
  void drawFocusIfNeeded( Path2D path, Element element );
  void drawImage( CanvasImageSource image, unrestricted double dx, unrestricted double dy );
  void drawImage( CanvasImageSource image, unrestricted double dx, unrestricted double dy, unrestricted double dw, unrestricted double dh );
  void drawImage( CanvasImageSource image, unrestricted double sx, unrestricted double sy, unrestricted double sw, unrestricted double sh, unrestricted double dx, unrestricted double dy, unrestricted double dw, unrestricted double dh );
  void ellipse( unrestricted double x, unrestricted double y, unrestricted double radiusX, unrestricted double radiusY, unrestricted double rotation, unrestricted double startAngle, unrestricted double endAngle, optional boolean anticlockwise = false );
  void fill( optional CanvasFillRule fillRule = "nonzero" );
  void fill( Path2D path, optional CanvasFillRule fillRule = "nonzero" );
  void fillRect( unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h );
  void fillText( DOMString text, unrestricted double x, unrestricted double y, optional unrestricted double maxWidth );
  CanvasRenderingContext2DSettings getContextAttributes();
  ImageData getImageData( long sx, long sy, long sw, long sh );
  sequence<unrestricted double> getLineDash();
  [NewObject]
  DOMMatrix getTransform();
  boolean isPointInPath( unrestricted double x, unrestricted double y, optional CanvasFillRule fillRule = "nonzero" );
  boolean isPointInPath( Path2D path, unrestricted double x, unrestricted double y, optional CanvasFillRule fillRule = "nonzero" );
  boolean isPointInStroke( unrestricted double x, unrestricted double y );
  boolean isPointInStroke( Path2D path, unrestricted double x, unrestricted double y );
  void lineTo( unrestricted double x, unrestricted double y );
  TextMetrics measureText( DOMString text );
  void moveTo( unrestricted double x, unrestricted double y );
  void putImageData( ImageData imagedata, long dx, long dy );
  void putImageData( ImageData imagedata, long dx, long dy, long dirtyX, long dirtyY, long dirtyWidth, long dirtyHeight );
  void quadraticCurveTo( unrestricted double cpx, unrestricted double cpy, unrestricted double x, unrestricted double y );
  void rect( unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h );
  void resetTransform();
  void restore();
  void rotate( unrestricted double angle );
  void save();
  void scale( unrestricted double x, unrestricted double y );
  void scrollPathIntoView();
  void scrollPathIntoView( Path2D path );
  void setLineDash( sequence<unrestricted double> segments );
  void setTransform( unrestricted double a, unrestricted double b, unrestricted double c, unrestricted double d, unrestricted double e, unrestricted double f );
  void setTransform( optional DOMMatrix2DInit transform = {} );
  void stroke();
  void stroke( Path2D path );
  void strokeRect( unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h );
  void strokeText( DOMString text, unrestricted double x, unrestricted double y, optional unrestricted double maxWidth );
  void transform( unrestricted double a, unrestricted double b, unrestricted double c, unrestricted double d, unrestricted double e, unrestricted double f );
  void translate( unrestricted double x, unrestricted double y );
};

/**
 * The CaretPosition interface represents the caret position, an indicator for the text insertion point. You can get a CaretPosition using the document.caretPositionFromPoint method.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition">CaretPosition - MDN</a>
 */
[Exposed=Window]
interface CaretPosition {
  readonly attribute unsigned long offset;
  readonly attribute Node offsetNode;
  [NewObject]
  DOMRect? getClientRect();
};

/**
 * The ChannelMergerNode interface, often used in conjunction with its opposite, ChannelSplitterNode, reunites different mono inputs into a single output. Each input is used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode">ChannelMergerNode - MDN</a>
 */
[Exposed=Window]
interface ChannelMergerNode : AudioNode {
  /**
   * The ChannelMergerNode() constructor creates a new ChannelMergerNode object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode/ChannelMergerNode">ChannelMergerNode.ChannelMergerNode - MDN</a>
   */
  constructor( BaseAudioContext context, optional ChannelMergerOptions options = {} );
};

/**
 * The ChannelSplitterNode interface, often used in conjunction with its opposite, ChannelMergerNode, separates the different channels of an audio source into a set of mono outputs. This is useful for accessing each channel separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode">ChannelSplitterNode - MDN</a>
 */
[Exposed=Window]
interface ChannelSplitterNode : AudioNode {
  /**
   * The ChannelSplitterNode() constructor of the Web Audio API creates a new ChannelSplitterNode object instance, representing a node that splits the input into a separate output for each of the source node's audio channels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode/ChannelSplitterNode">ChannelSplitterNode.ChannelSplitterNode - MDN</a>
   */
  constructor( BaseAudioContext context, optional ChannelSplitterOptions options = {} );
};

/**
 * The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any object of type CharacterData: it is implemented by other interfaces, like Text, Comment, or ProcessingInstruction which aren't abstract.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CharacterData">CharacterData - MDN</a>
 */
[Exposed=Window]
interface CharacterData : Node {
  readonly attribute unsigned long length;
  /**
   * The NonDocumentTypeChildNode.nextElementSibling read-only property returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling">NonDocumentTypeChildNode.nextElementSibling - MDN</a>
   */
  readonly attribute Element? nextElementSibling;
  /**
   * The NonDocumentTypeChildNode.previousElementSibling read-only property returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling">NonDocumentTypeChildNode.previousElementSibling - MDN</a>
   */
  readonly attribute Element? previousElementSibling;
  attribute [LegacyNullToEmptyString] DOMString data;
  /**
   * The ChildNode.after() method inserts a set of Node or DOMString objects in the children list of this ChildNode's parent, just after this ChildNode. DOMString objects are inserted as equivalent Text nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/after">ChildNode.after - MDN</a>
   */
  [CEReactions, Unscopable]
  void after( ( Node or DOMString )... nodes );
  void appendData( DOMString data );
  /**
   * The ChildNode.before() method inserts a set of Node or DOMString objects in the children list of this ChildNode's parent, just before this ChildNode. DOMString objects are inserted as equivalent Text nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/before">ChildNode.before - MDN</a>
   */
  [CEReactions, Unscopable]
  void before( ( Node or DOMString )... nodes );
  void deleteData( unsigned long offset, unsigned long count );
  void insertData( unsigned long offset, DOMString data );
  /**
   * The ChildNode.remove() method removes the object from the tree it belongs to.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove">ChildNode.remove - MDN</a>
   */
  [CEReactions, Unscopable]
  void remove();
  void replaceData( unsigned long offset, unsigned long count, DOMString data );
  /**
   * The ChildNode.replaceWith() method replaces this ChildNode in the children list of its parent with a set of Node or DOMString objects. DOMString objects are inserted as equivalent Text nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith">ChildNode.replaceWith - MDN</a>
   */
  [CEReactions, Unscopable]
  void replaceWith( ( Node or DOMString )... nodes );
  DOMString substringData( unsigned long offset, unsigned long count );
};

/**
 * The Clipboard interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard">Clipboard - MDN</a>
 */
[SecureContext, Exposed=Window]
interface Clipboard : EventTarget {
  /**
   * The read() method of the Clipboard interface requests a copy of the clipboard's contents, delivering the data to the returned Promise when the promise is resolved. Unlike readText(), the read() method can return arbitrary data, such as images. This method can also return text.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/read">Clipboard.read - MDN</a>
   */
  Promise<ClipboardItems> read();
  /**
   * The Clipboard interface's readText() method returns a Promise which resolves with a copy of the textual contents of the system clipboard.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText">Clipboard.readText - MDN</a>
   */
  Promise<DOMString> readText();
  /**
   * The Clipboard method write() writes arbitrary data, such as images, to the clipboard.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/write">Clipboard.write - MDN</a>
   */
  Promise<void> write( ClipboardItems data );
  /**
   * The Clipboard interface's writeText() property writes the specified text string to the system clipboard. Text may be read back using either read() or readText().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/writeText">Clipboard.writeText - MDN</a>
   */
  Promise<void> writeText( DOMString data );
};

/**
 * The ClipboardEvent interface represents events providing information related to modification of the clipboard, that is cut, copy, and paste events.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent">ClipboardEvent - MDN</a>
 */
[Exposed=Window]
interface ClipboardEvent : Event {
  /**
   * The ClipboardEvent.clipboardData property holds a DataTransfer object, which can be used:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent/clipboardData">ClipboardEvent.clipboardData - MDN</a>
   */
  readonly attribute DataTransfer? clipboardData;
  /**
   * The ClipboardEvent() constructor returns a newly created ClipboardEvent, representing an event providing information related to modification of the clipboard, that is cut, copy, and paste events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent/ClipboardEvent">ClipboardEvent.ClipboardEvent - MDN</a>
   */
  constructor( DOMString type, optional ClipboardEventInit eventInitDict = {} );
};

/**
 * The ClipboardItem interface of the Clipboard API represents a single item format, used when reading or writing data via the Clipboard API. That is clipboard.read() and clipboard.write() respectively.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem">ClipboardItem - MDN</a>
 */
[Exposed=Window]
interface ClipboardItem {
  readonly attribute boolean delayed;
  readonly attribute long long lastModified;
  readonly attribute PresentationStyle presentationStyle;
  /**
   * The read-only types property of the ClipboardItem interface returns an Array of MIME types available within the ClipboardItem
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem/types">ClipboardItem.types - MDN</a>
   */
  readonly attribute FrozenArray<DOMString> types;
  static ClipboardItem createDelayed( record<DOMString, ClipboardItemDelayedCallback> items, optional ClipboardItemOptions options = {} );
  constructor( record<DOMString, ClipboardItemData> items, optional ClipboardItemOptions options = {} );
  /**
   * The getType() method of the ClipboardItem interface returns a Promise that resolves with a Blob of the requested  MIME type or an error if the MIME type is not found.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem/getType">ClipboardItem.getType - MDN</a>
   */
  Promise<Blob> getType( DOMString type );
};

/**
 * A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent">CloseEvent - MDN</a>
 */
[Exposed=(Window,Worker)]
interface CloseEvent : Event {
  readonly attribute unsigned short code;
  readonly attribute USVString reason;
  readonly attribute boolean wasClean;
  /**
   * The CloseEvent() constructor creates a new CloseEvent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/CloseEvent">CloseEvent.CloseEvent - MDN</a>
   */
  constructor( DOMString type, optional CloseEventInit eventInitDict = {} );
};

/**
 * The Comment interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Comment">Comment - MDN</a>
 */
[Exposed=Window]
interface Comment : CharacterData {
  /**
   * The Comment() constructor returns a newly created Comment object with the optional DOMString given in parameter as its textual content.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Comment/Comment">Comment.Comment - MDN</a>
   */
  constructor( optional DOMString data = "" );
};

/**
 * The WebAssembly.CompileError object indicates an error during WebAssembly decoding or validation.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/CompileError">WebAssembly.CompileError - MDN</a>
 */
[LegacyNamespace=WebAssembly]
interface CompileError {
};

/**
 * The DOM CompositionEvent represents events that occur due to the user indirectly entering text.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent">CompositionEvent - MDN</a>
 */
[Exposed=Window]
interface CompositionEvent : UIEvent {
  /**
   * The data read-only property of the CompositionEvent interface returns the characters generated by the input method that raised the event; its exact nature varies depending on the type of event that generated the CompositionEvent object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent/data">CompositionEvent.data - MDN</a>
   */
  readonly attribute DOMString data;
  /**
   * The CompositionEvent() constructor creates a new CompositionEvent object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent/CompositionEvent">CompositionEvent.CompositionEvent - MDN</a>
   */
  constructor( DOMString type, optional CompositionEventInit eventInitDict );
};

/**
 * The ConstantSourceNode interface—part of the Web Audio API—represents an audio source (based upon AudioScheduledSourceNode) whose output is single unchanging value. This makes it useful for cases in which you need a constant value coming in from an audio source. In addition, it can be used like a constructible AudioParam by automating the value of its offset or by connecting another node to it; see Controlling multiple parameters with ConstantSourceNode.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode">ConstantSourceNode - MDN</a>
 */
[Exposed=Window]
interface ConstantSourceNode : AudioScheduledSourceNode {
  /**
   * The read-only offset property of the ConstantSourceNode interface returns a AudioParam object indicating the numeric a-rate value which is always returned by the source when asked for the next sample.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode/offset">ConstantSourceNode.offset - MDN</a>
   */
  readonly attribute AudioParam offset;
  /**
   * The ConstantSourceNode() constructor creates a new ConstantSourceNode object instance, representing an audio source which constantly outputs samples whose values are always the same.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode/ConstantSourceNode">ConstantSourceNode.ConstantSourceNode - MDN</a>
   */
  constructor( BaseAudioContext context, optional ConstantSourceOptions options = {} );
};

/**
 * The ConvolverNode interface is an AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect. A ConvolverNode always has exactly one input and one output.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode">ConvolverNode - MDN</a>
 */
[Exposed=Window]
interface ConvolverNode : AudioNode {
  /**
   * An AudioBuffer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/buffer">ConvolverNode.buffer - MDN</a>
   */
  attribute AudioBuffer? buffer;
  /**
   * The normalize property of the ConvolverNode interface is a boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the buffer attribute is set, or not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/normalize">ConvolverNode.normalize - MDN</a>
   */
  attribute boolean normalize;
  /**
   * The ConvolverNode() constructor of the Web Audio API creates a new ConvolverNode object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/ConvolverNode">ConvolverNode.ConvolverNode - MDN</a>
   */
  constructor( BaseAudioContext context, optional ConvolverOptions options = {} );
};

/**
 * The GeolocationCoordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Coordinates">Coordinates - MDN</a>
 */
[LegacyNoInterfaceObject]
interface Coordinates {
  /**
   * The GeolocationCoordinates.accuracy read-only property is a strictly positive double representing the accuracy, with a 95% confidence level, of the GeolocationCoordinates.latitude and GeolocationCoordinates.longitude properties expressed in meters.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Coordinates/accuracy">Coordinates.accuracy - MDN</a>
   */
  readonly attribute double accuracy;
  /**
   * The GeolocationCoordinates.altitude read-only property is a double representing the altitude of the position in meters, relative to sea level. This value is null if the implementation cannot provide this data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Coordinates/altitude">Coordinates.altitude - MDN</a>
   */
  readonly attribute double? altitude;
  /**
   * The GeolocationCoordinates.altitudeAccuracy read-only property is a strictly positive double representing the accuracy, with a 95% confidence level, of the altitude expressed in meters. This value is null if the implementation doesn't support measuring altitude.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Coordinates/altitudeAccuracy">Coordinates.altitudeAccuracy - MDN</a>
   */
  readonly attribute double? altitudeAccuracy;
  /**
   * The GeolocationCoordinates.heading read-only property is a double representing the direction in which the device is traveling. This value, specified in degrees, indicates how far off from heading due north the device is.
   * Zero
   * degrees represents true true north, and the direction is determined clockwise (which means that east is 90 degrees and west is 270 degrees). If GeolocationCoordinates.speed is 0, heading is NaN. If the device is not able to provide heading information, this value is null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Coordinates/heading">Coordinates.heading - MDN</a>
   */
  readonly attribute double? heading;
  /**
   * The GeolocationCoordinates.latitude read-only property is a double representing the latitude of the position in decimal degrees.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Coordinates/latitude">Coordinates.latitude - MDN</a>
   */
  readonly attribute double latitude;
  /**
   * The GeolocationCoordinates interface's read-only longitude property is a double-precision floating point value which represents the longitude of a geographical position, specified in decimal degrees. Together with a DOMTimeStamp indicating a time of measurement, the GeolocationCoordinates object is part of the GeolocationPosition interface, which is the object type returned by Geolocation API functions that obtain and return a geographical position.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Coordinates/longitude">Coordinates.longitude - MDN</a>
   */
  readonly attribute double longitude;
  /**
   * The GeolocationCoordinates.speed read-only property is a double representing the velocity of the device in meters per second. This value is null if the implementation is not able to measure it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Coordinates/speed">Coordinates.speed - MDN</a>
   */
  readonly attribute double? speed;
};

/**
 * The Credential interface of the the Credential Management API provides information about an entity as a prerequisite to a trust decision.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Credential">Credential - MDN</a>
 */
[Exposed=Window, SecureContext]
interface Credential {
  /**
   * The id property of the Credential interface returns a DOMString containing the credential's identifier. This might be any one of a GUID, username, or email address.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Credential/id">Credential.id - MDN</a>
   */
  readonly attribute USVString id;
  /**
   * The type property of the Credential interface returns a DOMString containing the credential's type. Valid values are password, federated and public-key.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Credential/type">Credential.type - MDN</a>
   */
  readonly attribute DOMString type;
};

/**
 * The CredentialsContainer interface of the the Credential Management API exposes methods to request credentials and notify the user agent when events such as successful sign in or sign out happen. This interface is accessible from Navigator.credentials.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer">CredentialsContainer - MDN</a>
 */
[Exposed=Window, SecureContext]
interface CredentialsContainer {
  /**
   * The create() method of the CredentialsContainer interface returns a Promise that resolves with a new Credential instance based on the provided options, or null if no Credential object can be created.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/create">CredentialsContainer.create - MDN</a>
   */
  Promise<Credential?> create( optional CredentialCreationOptions options );
  /**
   * The get() method of the CredentialsContainer interface returns a Promise to a single Credential instance that matches the provided parameters. If no match is found the Promise will resolve to null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/get">CredentialsContainer.get - MDN</a>
   */
  Promise<Credential?> get( optional CredentialRequestOptions options );
  /**
   * The preventSilentAccess() method of the CredentialsContainer interface sets a flag that specifies whether automatic log in is allowed for future visits to the current origin, then returns an empty Promise.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/preventSilentAccess">CredentialsContainer.preventSilentAccess - MDN</a>
   */
  Promise<void> preventSilentAccess();
  /**
   * The store() method of the CredentialsContainer stores a set of credentials for the user inside a Credential instance, returning this in a Promise.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/store">CredentialsContainer.store - MDN</a>
   */
  Promise<Credential> store( Credential credential );
};

/**
 * The Crypto interface represents basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Crypto">Crypto - MDN</a>
 */
[Exposed=(Window,Worker)]
interface Crypto {
  /**
   * The Crypto.subtle read-only property returns a SubtleCrypto which can then be used to perform low-level cryptographic operations.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Crypto/subtle">Crypto.subtle - MDN</a>
   */
  [SecureContext]
  readonly attribute SubtleCrypto subtle;
  /**
   * The Crypto.getRandomValues() method lets you get cryptographically strong random values. The array given as the parameter is filled with random numbers (random in its cryptographic meaning).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues">Crypto.getRandomValues - MDN</a>
   */
  ArrayBufferView getRandomValues( ArrayBufferView array );
};

/**
 * The CryptoKey interface of the Web Crypto API represents a cryptographic key obtained from one of the SubtleCrypto methods generateKey(), deriveKey(), importKey(), or unwrapKey().
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey">CryptoKey - MDN</a>
 */
[SecureContext, Exposed=(Window,Worker)]
interface CryptoKey {
  readonly attribute object algorithm;
  readonly attribute boolean extractable;
  readonly attribute KeyType type;
  readonly attribute object usages;
};

/**
 * The CustomElementRegistry interface provides methods for registering custom elements and querying registered elements. To get an instance of it, use the window.customElements property.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry">CustomElementRegistry - MDN</a>
 */
[Exposed=Window]
interface CustomElementRegistry {
  /**
   * The define() method of the CustomElementRegistry interface defines a new custom element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define">CustomElementRegistry.define - MDN</a>
   */
  [CEReactions]
  void define( DOMString name, CustomElementConstructor constructor, optional ElementDefinitionOptions options = {} );
  /**
   * The get() method of the CustomElementRegistry interface returns the constructor for a previously-defined custom element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/get">CustomElementRegistry.get - MDN</a>
   */
  any get( DOMString name );
  /**
   * The upgrade() method of the CustomElementRegistry interface upgrades all shadow-containing custom elements in a Node subtree, even before they are connected to the main document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/upgrade">CustomElementRegistry.upgrade - MDN</a>
   */
  [CEReactions]
  void upgrade( Node root );
  /**
   * The whenDefined() method of the CustomElementRegistry interface returns a Promise that resolves when the named element is defined.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/whenDefined">CustomElementRegistry.whenDefined - MDN</a>
   */
  Promise<void> whenDefined( DOMString name );
};

/**
 * The CustomEvent interface represents events initialized by an application for any purpose.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent">CustomEvent - MDN</a>
 */
[Exposed=(Window,Worker)]
interface CustomEvent : Event {
  /**
   * The detail readonly property of the CustomEvent interface returns any data passed when initializing the event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail">CustomEvent.detail - MDN</a>
   */
  readonly attribute any detail;
  /**
   * The CustomEvent() constructor creates a new CustomEvent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent">CustomEvent.CustomEvent - MDN</a>
   */
  constructor( DOMString type, optional CustomEventInit eventInitDict = {} );
  /**
   * The CustomEvent.initCustomEvent() method initializes a CustomEvent object. If the event has already been dispatched, this method does nothing.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/initCustomEvent">CustomEvent.initCustomEvent - MDN</a>
   */
  void initCustomEvent( DOMString type, optional boolean bubbles = false, optional boolean cancelable = false, optional any detail = null );
};

/**
 * The DOMException interface represents an abnormal event (called an exception) that occurs as a result of calling a method or accessing a property of a web API.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMException">DOMException - MDN</a>
 */
[Exposed=(Window,Worker), Serializable]
interface DOMException {
  const unsigned short ABORT_ERR = 20;
  const unsigned short DATA_CLONE_ERR = 25;
  const unsigned short DOMSTRING_SIZE_ERR = 2;
  const unsigned short HIERARCHY_REQUEST_ERR = 3;
  const unsigned short INDEX_SIZE_ERR = 1;
  const unsigned short INUSE_ATTRIBUTE_ERR = 10;
  const unsigned short INVALID_ACCESS_ERR = 15;
  const unsigned short INVALID_CHARACTER_ERR = 5;
  const unsigned short INVALID_MODIFICATION_ERR = 13;
  const unsigned short INVALID_NODE_TYPE_ERR = 24;
  const unsigned short INVALID_STATE_ERR = 11;
  const unsigned short NAMESPACE_ERR = 14;
  const unsigned short NETWORK_ERR = 19;
  const unsigned short NOT_FOUND_ERR = 8;
  const unsigned short NOT_SUPPORTED_ERR = 9;
  const unsigned short NO_DATA_ALLOWED_ERR = 6;
  const unsigned short NO_MODIFICATION_ALLOWED_ERR = 7;
  const unsigned short QUOTA_EXCEEDED_ERR = 22;
  const unsigned short SECURITY_ERR = 18;
  const unsigned short SYNTAX_ERR = 12;
  const unsigned short TIMEOUT_ERR = 23;
  const unsigned short TYPE_MISMATCH_ERR = 17;
  const unsigned short URL_MISMATCH_ERR = 21;
  const unsigned short VALIDATION_ERR = 16;
  const unsigned short WRONG_DOCUMENT_ERR = 4;
  /**
   * The code read-only property of the DOMException interface returns a short that contains one of the error code constants, or 0 if none match. This field is used for historical reasons. New DOM exceptions don't use this anymore: they put this info in the DOMException.name attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMException/code">DOMException.code - MDN</a>
   */
  readonly attribute unsigned short code;
  /**
   * The message read-only property of the DOMException interface returns a DOMString representing a message or description associated with the given error name.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMException/message">DOMException.message - MDN</a>
   */
  readonly attribute DOMString message;
  /**
   * The name read-only property of the DOMException interface returns a DOMString that contains one of the strings associated with an error name.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMException/name">DOMException.name - MDN</a>
   */
  readonly attribute DOMString name;
  /**
   * The DOMException() constructor returns a DOMException object with a specified message and name.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMException/DOMException">DOMException.DOMException - MDN</a>
   */
  constructor( optional DOMString message = "", optional DOMString name = "Error" );
};

/**
 * The DOMImplementation interface represents an object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation">DOMImplementation - MDN</a>
 */
[Exposed=Window]
interface DOMImplementation {
  /**
   * The DOMImplementation.createDocument() method creates and returns an XMLDocument.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument">DOMImplementation.createDocument - MDN</a>
   */
  [NewObject]
  XMLDocument createDocument( DOMString? namespace, [LegacyNullToEmptyString] DOMString qualifiedName, optional DocumentType? doctype = null );
  /**
   * The DOMImplementation.createDocumentType() method returns a DocumentType object which can either be used with DOMImplementation.createDocument upon document creation or can be put into the document via methods like Node.insertBefore() or Node.replaceChild().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType">DOMImplementation.createDocumentType - MDN</a>
   */
  [NewObject]
  DocumentType createDocumentType( DOMString qualifiedName, DOMString publicId, DOMString systemId );
  /**
   * The DOMImplementation.createHTMLDocument() method creates a new HTML Document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createHTMLDocument">DOMImplementation.createHTMLDocument - MDN</a>
   */
  [NewObject]
  Document createHTMLDocument( optional DOMString title );
  /**
   * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported. It is deprecated and modern browsers return true in all cases.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature">DOMImplementation.hasFeature - MDN</a>
   */
  boolean hasFeature();
};

/**
 * The DOMMatrix interface represents 4×4 matrices, suitable for 2D and 3D operations including rotation and translation. It is a mutable version of the DOMMatrixReadOnly interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix">DOMMatrix - MDN</a>
 */
[Exposed=(Window,Worker), Serializable, LegacyWindowAlias=(SVGMatrix,WebKitCSSMatrix)]
interface DOMMatrix : DOMMatrixReadOnly {
  inherit attribute unrestricted double a;
  inherit attribute unrestricted double b;
  inherit attribute unrestricted double c;
  inherit attribute unrestricted double d;
  inherit attribute unrestricted double e;
  inherit attribute unrestricted double f;
  inherit attribute unrestricted double m11;
  inherit attribute unrestricted double m12;
  inherit attribute unrestricted double m13;
  inherit attribute unrestricted double m14;
  inherit attribute unrestricted double m21;
  inherit attribute unrestricted double m22;
  inherit attribute unrestricted double m23;
  inherit attribute unrestricted double m24;
  inherit attribute unrestricted double m31;
  inherit attribute unrestricted double m32;
  inherit attribute unrestricted double m33;
  inherit attribute unrestricted double m34;
  inherit attribute unrestricted double m41;
  inherit attribute unrestricted double m42;
  inherit attribute unrestricted double m43;
  inherit attribute unrestricted double m44;
  [NewObject]
  static DOMMatrix fromFloat32Array( Float32Array array32 );
  [NewObject]
  static DOMMatrix fromFloat64Array( Float64Array array64 );
  [NewObject]
  static DOMMatrix fromMatrix( optional DOMMatrixInit other );
  /**
   * The DOMMatrix constructor creates a new DOMMatrix object which represents 4x4 matrices, suitable for 2D and 3D operations..
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/DOMMatrix">DOMMatrix.DOMMatrix - MDN</a>
   */
  constructor( optional ( DOMString or sequence<unrestricted double> ) init );
  DOMMatrix invertSelf();
  DOMMatrix multiplySelf( optional DOMMatrixInit other );
  DOMMatrix preMultiplySelf( optional DOMMatrixInit other );
  DOMMatrix rotateAxisAngleSelf( optional unrestricted double x = 0, optional unrestricted double y = 0, optional unrestricted double z = 0, optional unrestricted double angle = 0 );
  DOMMatrix rotateFromVectorSelf( optional unrestricted double x = 0, optional unrestricted double y = 0 );
  DOMMatrix rotateSelf( optional unrestricted double rotX = 0, optional unrestricted double rotY, optional unrestricted double rotZ );
  DOMMatrix scale3dSelf( optional unrestricted double scale = 1, optional unrestricted double originX = 0, optional unrestricted double originY = 0, optional unrestricted double originZ = 0 );
  DOMMatrix scaleSelf( optional unrestricted double scaleX = 1, optional unrestricted double scaleY, optional unrestricted double scaleZ = 1, optional unrestricted double originX = 0, optional unrestricted double originY = 0, optional unrestricted double originZ = 0 );
  [Exposed=Window]
  DOMMatrix setMatrixValue( DOMString transformList );
  DOMMatrix skewXSelf( optional unrestricted double sx = 0 );
  DOMMatrix skewYSelf( optional unrestricted double sy = 0 );
  DOMMatrix translateSelf( optional unrestricted double tx = 0, optional unrestricted double ty = 0, optional unrestricted double tz = 0 );
};

/**
 * The DOMMatrixReadOnly interface represents a read-only 4×4 matrix, suitable for 2D and 3D operations. The DOMMatrix interrface—which is based upon DOMMatrixReadOnly—adds mutability, allowing you to alter the matrix after creating it.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly">DOMMatrixReadOnly - MDN</a>
 */
[Exposed=(Window,Worker), Serializable]
interface DOMMatrixReadOnly {
  readonly attribute unrestricted double a;
  readonly attribute unrestricted double b;
  readonly attribute unrestricted double c;
  readonly attribute unrestricted double d;
  readonly attribute unrestricted double e;
  readonly attribute unrestricted double f;
  readonly attribute boolean is2D;
  readonly attribute boolean isIdentity;
  readonly attribute unrestricted double m11;
  readonly attribute unrestricted double m12;
  readonly attribute unrestricted double m13;
  readonly attribute unrestricted double m14;
  readonly attribute unrestricted double m21;
  readonly attribute unrestricted double m22;
  readonly attribute unrestricted double m23;
  readonly attribute unrestricted double m24;
  readonly attribute unrestricted double m31;
  readonly attribute unrestricted double m32;
  readonly attribute unrestricted double m33;
  readonly attribute unrestricted double m34;
  readonly attribute unrestricted double m41;
  readonly attribute unrestricted double m42;
  readonly attribute unrestricted double m43;
  readonly attribute unrestricted double m44;
  [NewObject]
  static DOMMatrixReadOnly fromFloat32Array( Float32Array array32 );
  [NewObject]
  static DOMMatrixReadOnly fromFloat64Array( Float64Array array64 );
  [NewObject]
  static DOMMatrixReadOnly fromMatrix( optional DOMMatrixInit other );
  constructor( optional ( DOMString or sequence<unrestricted double> ) init );
  /**
   * The flipX() method of the DOMMatrixReadOnly interface creates a new matrix being the result of the original matrix flipped about the x-axis.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/flipX">DOMMatrixReadOnly.flipX - MDN</a>
   */
  [NewObject]
  DOMMatrix flipX();
  [NewObject]
  DOMMatrix flipY();
  [NewObject]
  DOMMatrix inverse();
  [NewObject]
  DOMMatrix multiply( optional DOMMatrixInit other );
  [NewObject]
  DOMMatrix rotate( optional unrestricted double rotX = 0, optional unrestricted double rotY, optional unrestricted double rotZ );
  [NewObject]
  DOMMatrix rotateAxisAngle( optional unrestricted double x = 0, optional unrestricted double y = 0, optional unrestricted double z = 0, optional unrestricted double angle = 0 );
  [NewObject]
  DOMMatrix rotateFromVector( optional unrestricted double x = 0, optional unrestricted double y = 0 );
  /**
   *
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/scale">DOMMatrixReadOnly.scale - MDN</a>
   */
  [NewObject]
  DOMMatrix scale( optional unrestricted double scaleX = 1, optional unrestricted double scaleY, optional unrestricted double scaleZ = 1, optional unrestricted double originX = 0, optional unrestricted double originY = 0, optional unrestricted double originZ = 0 );
  [NewObject]
  DOMMatrix scale3d( optional unrestricted double scale = 1, optional unrestricted double originX = 0, optional unrestricted double originY = 0, optional unrestricted double originZ = 0 );
  [NewObject]
  DOMMatrix scaleNonUniform( optional unrestricted double scaleX = 1, optional unrestricted double scaleY = 1 );
  [NewObject]
  DOMMatrix skewX( optional unrestricted double sx = 0 );
  [NewObject]
  DOMMatrix skewY( optional unrestricted double sy = 0 );
  [NewObject]
  Float32Array toFloat32Array();
  [NewObject]
  Float64Array toFloat64Array();
  [Default]
  object toJSON();
  [NewObject]
  DOMPoint transformPoint( optional DOMPointInit point );
  /**
   * The translate() method of the DOMMatrixReadOnly interface creates a new matrix being the result of the original matrix with a translation applied.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly/translate">DOMMatrixReadOnly.translate - MDN</a>
   */
  [NewObject]
  DOMMatrix translate( optional unrestricted double tx = 0, optional unrestricted double ty = 0, optional unrestricted double tz = 0 );
  /**
   * The DOMMatrixReadOnly interface represents a read-only 4×4 matrix, suitable for 2D and 3D operations. The DOMMatrix interrface—which is based upon DOMMatrixReadOnly—adds mutability, allowing you to alter the matrix after creating it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly">DOMMatrixReadOnly - MDN</a>
   */
  [Exposed=Window]
  stringifier;
};

/**
 * The DOMParser interface provides the ability to parse XML or HTML source code from a string into a DOM Document.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMParser">DOMParser - MDN</a>
 */
[Exposed=Window]
interface DOMParser {
  constructor();
  [NewObject]
  Document parseFromString( DOMString string, DOMParserSupportedType type );
};

/**
 * A DOMPoint object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint">DOMPoint - MDN</a>
 */
[Exposed=(Window,Worker), Serializable, LegacyWindowAlias=SVGPoint]
interface DOMPoint : DOMPointReadOnly {
  /**
   * The DOMPoint interface's w property holds the point's perspective value, w, for a point in space.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint/w">DOMPoint.w - MDN</a>
   */
  inherit attribute unrestricted double w;
  /**
   * The DOMPoint interface's x property holds the horizontal coordinate, x, for a point in space.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint/x">DOMPoint.x - MDN</a>
   */
  inherit attribute unrestricted double x;
  /**
   * The DOMPoint interface's y property holds the vertical coordinate, y, for a point in space.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint/y">DOMPoint.y - MDN</a>
   */
  inherit attribute unrestricted double y;
  /**
   * The DOMPoint interface's z property specifies the depth coordinate of a point in space.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint/z">DOMPoint.z - MDN</a>
   */
  inherit attribute unrestricted double z;
  [NewObject]
  static DOMPoint fromPoint( optional DOMPointInit other );
  /**
   * The DOMPoint() constructor creates and returns a new DOMPoint object, given the values for some or all of its properties.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint/DOMPoint">DOMPoint.DOMPoint - MDN</a>
   */
  constructor( optional unrestricted double x = 0, optional unrestricted double y = 0, optional unrestricted double z = 0, optional unrestricted double w = 1 );
};

/**
 * The DOMPointReadOnly interface specifies the coordinate and perspective fields used by DOMPoint to define a 2D or 3D point in a coordinate system.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly">DOMPointReadOnly - MDN</a>
 */
[Exposed=(Window,Worker), Serializable]
interface DOMPointReadOnly {
  /**
   * The DOMPointReadOnly interface's w property holds the point's perspective value, w, for a read-only point in space.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/w">DOMPointReadOnly.w - MDN</a>
   */
  readonly attribute unrestricted double w;
  /**
   * The DOMPointReadOnly interface's x property holds the horizontal coordinate, x, for a read-only point in space. This property cannot be changed by JavaScript code in this read-only version of the DOMPoint object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/x">DOMPointReadOnly.x - MDN</a>
   */
  readonly attribute unrestricted double x;
  /**
   * The DOMPointReadOnly interface's y property holds the vertical coordinate, y, for a read-only point in space.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/y">DOMPointReadOnly.y - MDN</a>
   */
  readonly attribute unrestricted double y;
  /**
   * The DOMPointReadOnly interface's z property holds the depth coordinate, z, for a read-only point in space.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/z">DOMPointReadOnly.z - MDN</a>
   */
  readonly attribute unrestricted double z;
  /**
   * The static DOMPointReadOnly method fromPoint() creates and returns a new DOMPointReadOnly object given a source point.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/fromPoint">DOMPointReadOnly.fromPoint - MDN</a>
   */
  [NewObject]
  static DOMPointReadOnly fromPoint( optional DOMPointInit other );
  /**
   * The DOMPointReadOnly() constructor returns a new DOMPointReadOnly object representing a point in 2D or 3D space, optionally with perspective, whose values cannot be altered by script code.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/DOMPointReadOnly">DOMPointReadOnly.DOMPointReadOnly - MDN</a>
   */
  constructor( optional unrestricted double x = 0, optional unrestricted double y = 0, optional unrestricted double z = 0, optional unrestricted double w = 1 );
  DOMPoint matrixTransform( optional DOMMatrixInit matrix );
  /**
   * The DOMPointReadOnly method toJSON() returns a DOMPointInit object giving the JSON form of the point object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/toJSON">DOMPointReadOnly.toJSON - MDN</a>
   */
  [Default]
  object toJSON();
};

/**
 * A DOMQuad is a collection of four DOMPoints defining the corners of an arbitrary quadrilateral. Returning DOMQuads lets getBoxQuads() return accurate information even when arbitrary 2D or 3D transforms are present. It has a handy bounds attribute returning a DOMRectReadOnly for those cases where you just want an axis-aligned bounding rectangle.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad">DOMQuad - MDN</a>
 */
[Exposed=(Window,Worker), Serializable]
interface DOMQuad {
  [SameObject]
  readonly attribute DOMPoint p1;
  [SameObject]
  readonly attribute DOMPoint p2;
  [SameObject]
  readonly attribute DOMPoint p3;
  [SameObject]
  readonly attribute DOMPoint p4;
  [NewObject]
  static DOMQuad fromQuad( optional DOMQuadInit other );
  [NewObject]
  static DOMQuad fromRect( optional DOMRectInit other );
  constructor( optional DOMPointInit p1, optional DOMPointInit p2, optional DOMPointInit p3, optional DOMPointInit p4 );
  [NewObject]
  DOMRect getBounds();
  [Default]
  object toJSON();
};

/**
 * A DOMRect represents a rectangle.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMRect">DOMRect - MDN</a>
 */
[Exposed=(Window,Worker), Serializable, LegacyWindowAlias=SVGRect]
interface DOMRect : DOMRectReadOnly {
  inherit attribute unrestricted double height;
  inherit attribute unrestricted double width;
  inherit attribute unrestricted double x;
  inherit attribute unrestricted double y;
  [NewObject]
  static DOMRect fromRect( optional DOMRectInit other );
  /**
   * The DOMRect() constructor creates a new DOMRect object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMRect/DOMRect">DOMRect.DOMRect - MDN</a>
   */
  constructor( optional unrestricted double x = 0, optional unrestricted double y = 0, optional unrestricted double width = 0, optional unrestricted double height = 0 );
};

interface DOMRectList {
  readonly attribute unsigned long length;
  getter DOMRect? item( unsigned long index );
};

/**
 * The DOMRectReadOnly interface specifies the standard properties used by DOMRect to define a rectangle whose properties are immutable.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly">DOMRectReadOnly - MDN</a>
 */
[Exposed=(Window,Worker), Serializable]
interface DOMRectReadOnly {
  readonly attribute unrestricted double bottom;
  readonly attribute unrestricted double height;
  readonly attribute unrestricted double left;
  readonly attribute unrestricted double right;
  readonly attribute unrestricted double top;
  readonly attribute unrestricted double width;
  readonly attribute unrestricted double x;
  readonly attribute unrestricted double y;
  /**
   * The fromRect() property of the DOMRectReadOnly interface creates a new DOMRectReadOnly object with a given location and dimensions.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/fromRect">DOMRectReadOnly.fromRect - MDN</a>
   */
  [NewObject]
  static DOMRectReadOnly fromRect( optional DOMRectInit other );
  /**
   * The DOMRectReadOnly() constructor creates a new DOMRectReadOnly object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/DOMRectReadOnly">DOMRectReadOnly.DOMRectReadOnly - MDN</a>
   */
  constructor( optional unrestricted double x = 0, optional unrestricted double y = 0, optional unrestricted double width = 0, optional unrestricted double height = 0 );
  [Default]
  object toJSON();
};

/**
 * A type returned by some APIs which contains a list of DOMString (strings).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList">DOMStringList - MDN</a>
 */
[Exposed=(Window,Worker)]
interface DOMStringList {
  readonly attribute unsigned long length;
  boolean contains( DOMString string );
  getter DOMString? item( unsigned long index );
};

/**
 * The DOMStringMap interface is used for the HTMLElement.dataset attribute, to represent data for custom attributes added to elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap">DOMStringMap - MDN</a>
 */
[Exposed=Window, LegacyOverrideBuiltIns]
interface DOMStringMap {
  /**
   * The DOMStringMap interface is used for the HTMLElement.dataset attribute, to represent data for custom attributes added to elements.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap">DOMStringMap - MDN</a>
   */
  getter DOMString ( DOMString name );
  /**
   * The DOMStringMap interface is used for the HTMLElement.dataset attribute, to represent data for custom attributes added to elements.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap">DOMStringMap - MDN</a>
   */
  [CEReactions]
  setter void ( DOMString name, DOMString value );
  /**
   * The DOMStringMap interface is used for the HTMLElement.dataset attribute, to represent data for custom attributes added to elements.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap">DOMStringMap - MDN</a>
   */
  [CEReactions]
  deleter void ( DOMString name );
};

/**
 * The DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by Element.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList, HTMLAreaElement.relList, HTMLIframeElement.sandbox, or HTMLOutputElement.htmlFor. It is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList">DOMTokenList - MDN</a>
 */
[Exposed=Window]
interface DOMTokenList {
  iterable<DOMString>;
  /**
   * The length read-only property of the DOMTokenList interface is an integer representing the number of objects stored in the object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/length">DOMTokenList.length - MDN</a>
   */
  readonly attribute unsigned long length;
  /**
   * The value property of the DOMTokenList interface is a stringifier that returns the value of the list as a DOMString, or clears and sets the list to the given value.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/value">DOMTokenList.value - MDN</a>
   */
  [CEReactions]
  stringifier attribute DOMString value;
  /**
   * The add() method of the DOMTokenList interface adds the given token to the list.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/add">DOMTokenList.add - MDN</a>
   */
  [CEReactions]
  void add( DOMString... tokens );
  /**
   * The contains() method of the DOMTokenList interface returns a Boolean — true if the underlying list contains the given token, otherwise false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/contains">DOMTokenList.contains - MDN</a>
   */
  boolean contains( DOMString token );
  /**
   * The remove() method of the DOMTokenList interface removes the specified tokens from the list.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/remove">DOMTokenList.remove - MDN</a>
   */
  [CEReactions]
  void remove( DOMString... tokens );
  /**
   * The replace() method of the DOMTokenList interface replaces an existing token with a new token. If the first token doesn't exist, replace() returns false immediately, without adding the new token to the token list.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/replace">DOMTokenList.replace - MDN</a>
   */
  [CEReactions]
  boolean replace( DOMString token, DOMString newToken );
  /**
   * The supports() method of the DOMTokenList interface returns true if a given token is in the associated attribute's supported tokens. This method is intended to support feature detection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/supports">DOMTokenList.supports - MDN</a>
   */
  boolean supports( DOMString token );
  /**
   * The toggle() method of the DOMTokenList interface removes a given token from the list and returns false. If token doesn't exist it's added and the function returns true.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/toggle">DOMTokenList.toggle - MDN</a>
   */
  [CEReactions]
  boolean toggle( DOMString token, optional boolean force );
  /**
   * The item() method of the DOMTokenList interface returns an item in the list by its index.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/item">DOMTokenList.item - MDN</a>
   */
  getter DOMString? item( unsigned long index );
};

/**
 * The DataTransfer object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer">DataTransfer - MDN</a>
 */
[Exposed=Window]
interface DataTransfer {
  [SameObject]
  readonly attribute FileList files;
  [SameObject]
  readonly attribute DataTransferItemList items;
  readonly attribute FrozenArray<DOMString> types;
  attribute DOMString dropEffect;
  attribute DOMString effectAllowed;
  /**
   * The DataTransfer constructor creates a new DataTransfer object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/DataTransfer">DataTransfer.DataTransfer - MDN</a>
   */
  constructor();
  void clearData( optional DOMString format );
  DOMString getData( DOMString format );
  void setData( DOMString format, DOMString data );
  void setDragImage( Element image, long x, long y );
};

/**
 * The DataTransferItem object represents one drag data item. During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items. Each item in the list is a DataTransferItem object.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem">DataTransferItem - MDN</a>
 */
[Exposed=Window]
interface DataTransferItem {
  /**
   * The read-only DataTransferItem.kind property returns a DataTransferItem representing the drag data item kind: some text or some file.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/kind">DataTransferItem.kind - MDN</a>
   */
  readonly attribute DOMString kind;
  /**
   * The read-only DataTransferItem.type property returns the type (format) of the DataTransferItem object representing the drag data item. The type is a Unicode string generally given by a MIME type, although a MIME type is not required.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/type">DataTransferItem.type - MDN</a>
   */
  readonly attribute DOMString type;
  /**
   * If the item is a file, the DataTransferItem.getAsFile() method returns the drag data item's File object. If the item is not a file, this method returns null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsFile">DataTransferItem.getAsFile - MDN</a>
   */
  File? getAsFile();
  /**
   * The DataTransferItem.getAsString() method invokes the given callback with the drag data item's string data as the argument if the item's kind is a Plain unicode string (i.e. kind is string).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsString">DataTransferItem.getAsString - MDN</a>
   */
  void getAsString( FunctionStringCallback? _callback );
};

/**
 * The DataTransferItemList object is a list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList">DataTransferItemList - MDN</a>
 */
[Exposed=Window]
interface DataTransferItemList {
  /**
   * The read-only length property of the DataTransferItemList interface returns the number of items currently in the drag item list.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/length">DataTransferItemList.length - MDN</a>
   */
  readonly attribute unsigned long length;
  /**
   * The DataTransferItemList.add() method creates a new DataTransferItem using the specified data and adds it to the drag data list. The item may be a File or a string of a given type. If the item is successfully added to the list, the newly-created DataTransferItem object is returned.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/add">DataTransferItemList.add - MDN</a>
   */
  DataTransferItem? add( DOMString data, DOMString type );
  /**
   * The DataTransferItemList.add() method creates a new DataTransferItem using the specified data and adds it to the drag data list. The item may be a File or a string of a given type. If the item is successfully added to the list, the newly-created DataTransferItem object is returned.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/add">DataTransferItemList.add - MDN</a>
   */
  DataTransferItem? add( File data );
  /**
   * The DataTransferItemList method clear() removes all DataTransferItem objects from the drag data items list, leaving the list empty.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/clear">DataTransferItemList.clear - MDN</a>
   */
  void clear();
  /**
   * undefined.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/remove">DataTransferItemList.remove - MDN</a>
   */
  void remove( unsigned long index );
  /**
   * The DataTransferItemList object is a list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList">DataTransferItemList - MDN</a>
   */
  getter DataTransferItem ( unsigned long index );
};

/**
 * The DelayNode interface represents a delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DelayNode">DelayNode - MDN</a>
 */
[Exposed=Window]
interface DelayNode : AudioNode {
  /**
   * An AudioParam.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DelayNode/delayTime">DelayNode.delayTime - MDN</a>
   */
  readonly attribute AudioParam delayTime;
  /**
   * The DelayNode() constructor of the Web Audio API creates a new DelayNode object with a delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data, and its propagation to the output.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DelayNode/DelayNode">DelayNode.DelayNode - MDN</a>
   */
  constructor( BaseAudioContext context, optional DelayOptions options = {} );
};

/**
 * The DeviceMotionEvent provides web developers with information about the speed of changes for the device's position and orientation.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent">DeviceMotionEvent - MDN</a>
 */
[Exposed=Window, SecureContext]
interface DeviceMotionEvent : Event {
  /**
   * The acceleration property returns the amount of acceleration recorded by the device, in meters per second squared (m/s2).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/acceleration">DeviceMotionEvent.acceleration - MDN</a>
   */
  readonly attribute DeviceMotionEventAcceleration? acceleration;
  /**
   * The accelerationIncludingGravity property returns the amount of acceleration recorded by the device, in meters per second squared (m/s2). Unlike DeviceMotionEvent.acceleration which compensates for the influence of gravity, its value is the sum of the acceleration of the device as induced by the user and the acceleration caused by gravity.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/accelerationIncludingGravity">DeviceMotionEvent.accelerationIncludingGravity - MDN</a>
   */
  readonly attribute DeviceMotionEventAcceleration? accelerationIncludingGravity;
  /**
   * Returns the interval, in milliseconds, at which data is obtained from the underlaying hardware. You can use this to determine the granularity of motion events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/interval">DeviceMotionEvent.interval - MDN</a>
   */
  readonly attribute double interval;
  /**
   * Returns the rate at which the device is rotating around each of its axes in degrees per second.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/rotationRate">DeviceMotionEvent.rotationRate - MDN</a>
   */
  readonly attribute DeviceMotionEventRotationRate? rotationRate;
  static Promise<DevicePermissionState> requestPermission();
  constructor( DOMString type, optional DeviceMotionEventInit eventInitDict = {} );
};

/**
 * A DeviceMotionEventAcceleration object provides information about the amount of acceleration the device is experiencing along all three axes.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEventAcceleration">DeviceMotionEventAcceleration - MDN</a>
 */
[Exposed=Window, SecureContext]
interface DeviceMotionEventAcceleration {
  /**
   * This read-only property indicates the amount of acceleration that occurred along the X axis in a DeviceMotionEventAcceleration object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEventAcceleration/x">DeviceMotionEventAcceleration.x - MDN</a>
   */
  readonly attribute double? x;
  /**
   * This read-only property indicates the amount of acceleration that occurred along the Y axis in a DeviceMotionEventAcceleration object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEventAcceleration/y">DeviceMotionEventAcceleration.y - MDN</a>
   */
  readonly attribute double? y;
  /**
   * This read-only property indicates the amount of acceleration that occurred along the Z axis in a DeviceMotionEventAcceleration object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEventAcceleration/z">DeviceMotionEventAcceleration.z - MDN</a>
   */
  readonly attribute double? z;
};

/**
 * A DeviceMotionEventRotationRate object provides information about the rate at which the device is rotating around all three axes.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEventRotationRate">DeviceMotionEventRotationRate - MDN</a>
 */
[Exposed=Window, SecureContext]
interface DeviceMotionEventRotationRate {
  /**
   * This property indicates the rate of rotation around the Z axis -- in degrees per second -- in a DeviceMotionEventRotationRate object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEventRotationRate/alpha">DeviceMotionEventRotationRate.alpha - MDN</a>
   */
  readonly attribute double? alpha;
  /**
   * This property indicates the rate of rotation around the X axis -- in degrees per second -- in a DeviceMotionEventRotationRate object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEventRotationRate/beta">DeviceMotionEventRotationRate.beta - MDN</a>
   */
  readonly attribute double? beta;
  /**
   * This property indicates the rate of rotation around the Y axis -- in degrees per second -- in a DeviceMotionEventRotationRate object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEventRotationRate/gamma">DeviceMotionEventRotationRate.gamma - MDN</a>
   */
  readonly attribute double? gamma;
};

/**
 * The DeviceOrientationEvent provides web developers with information from the physical orientation of the device running the web page.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent">DeviceOrientationEvent - MDN</a>
 */
[Exposed=Window, SecureContext]
interface DeviceOrientationEvent : Event {
  /**
   * Indicates whether or not the device is providing orientation data absolutely (that is, in reference to the Earth's coordinate frame) or using some arbitrary frame determined by the device. See Orientation and motion data explained for details.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/absolute">DeviceOrientationEvent.absolute - MDN</a>
   */
  readonly attribute boolean absolute;
  /**
   * Returns the rotation of the device around the Z axis; that is, the number of degrees by which the device is being twisted around the center of the screen. See Orientation and motion data explained for details.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/alpha">DeviceOrientationEvent.alpha - MDN</a>
   */
  readonly attribute double? alpha;
  /**
   * Returns the rotation of the device around the X axis; that is, the number of degrees, ranged between -180 and 180,  by which the device is tipped forward or backward. See Orientation and motion data explained for details.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/beta">DeviceOrientationEvent.beta - MDN</a>
   */
  readonly attribute double? beta;
  /**
   * Returns the rotation of the device around the Y axis; that is, the number of degrees, ranged between -90 and 90, by which the device is tilted left or right. See Orientation and motion data explained for details.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/gamma">DeviceOrientationEvent.gamma - MDN</a>
   */
  readonly attribute double? gamma;
  static Promise<DevicePermissionState> requestPermission();
  constructor( DOMString type, optional DeviceOrientationEventInit eventInitDict = {} );
};

/**
 * The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document">Document - MDN</a>
 */
[Exposed=Window]
interface Document : Node {
  readonly attribute USVString URL;
  /**
   * The activeElement read-only property of the Document and ShadowRoot interfaces returns the Element within the DOM or shadow DOM tree that currently has focus.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/activeElement">DocumentOrShadowRoot.activeElement - MDN</a>
   */
  readonly attribute Element? activeElement;
  [SameObject]
  readonly attribute HTMLAllCollection all;
  /**
   * The anchors read-only property of the Document interface returns a list of all of the anchors in the document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/anchors">Document.anchors - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLCollection anchors;
  [SameObject]
  readonly attribute HTMLCollection applets;
  /**
   * The Document.characterSet read-only property returns the character encoding of the document that it's currently rendered with.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet">Document.characterSet - MDN</a>
   */
  readonly attribute DOMString characterSet;
  readonly attribute DOMString charset;
  /**
   * The ParentNode.childElementCount read-only property returns an unsigned long representing the number of child elements of the given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount">ParentNode.childElementCount - MDN</a>
   */
  readonly attribute unsigned long childElementCount;
  /**
   * The ParentNode property children is a read-only property that returns a live HTMLCollection which contains all of the child elements of the node upon which it was called.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children">ParentNode.children - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLCollection children;
  /**
   * The Document.compatMode property indicates whether the document is rendered in Quirks mode or Standards mode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode">Document.compatMode - MDN</a>
   */
  readonly attribute DOMString compatMode;
  /**
   * The Document.contentType read-only property returns the MIME type that the document is being rendered as. This may come from HTTP headers or other sources of MIME information, and might be affected by automatic type conversions performed by either the browser or extensions.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/contentType">Document.contentType - MDN</a>
   */
  readonly attribute DOMString contentType;
  readonly attribute HTMLOrSVGScriptElement? currentScript;
  readonly attribute WindowProxy? defaultView;
  /**
   * Returns the Document Type Declaration (DTD) associated with current document. The returned object implements the DocumentType interface. Use DOMImplementation.createDocumentType() to create a DocumentType.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/doctype">Document.doctype - MDN</a>
   */
  readonly attribute DocumentType? doctype;
  /**
   * Document.documentElement returns the Element that is the root element of the document (for example, the html element for HTML documents).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement">Document.documentElement - MDN</a>
   */
  readonly attribute Element? documentElement;
  /**
   * The documentURI read-only property of the Document interface returns the document location as a string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURI">Document.documentURI - MDN</a>
   */
  readonly attribute USVString documentURI;
  /**
   * The embeds read-only property of the Document interface returns a list of the embedded object elements within the current document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/embeds">Document.embeds - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLCollection embeds;
  /**
   * The ParentNode.firstElementChild read-only property returns the object's first child Element, or null if there are no child elements.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild">ParentNode.firstElementChild - MDN</a>
   */
  readonly attribute Element? firstElementChild;
  /**
   * The forms read-only property of the Document interface returns an HTMLCollection listing all the form elements contained in the document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/forms">Document.forms - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLCollection forms;
  [LegacyLenientSetter, Unscopable]
  readonly attribute boolean fullscreen;
  /**
   * The DocumentOrShadowRoot.fullscreenElement read-only property returns the Element that is currently being presented in full-screen mode in this document, or null if full-screen mode is not currently in use.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/fullscreenElement">DocumentOrShadowRoot.fullscreenElement - MDN</a>
   */
  [LegacyLenientSetter]
  readonly attribute Element? fullscreenElement;
  [LegacyLenientSetter]
  readonly attribute boolean fullscreenEnabled;
  /**
   * The head read-only property of the Document interface returns the head element of the current document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/head">Document.head - MDN</a>
   */
  readonly attribute HTMLHeadElement? head;
  /**
   * The Document.hidden read-only property returns a Boolean value indicating if the page is considered hidden or not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/hidden">Document.hidden - MDN</a>
   */
  readonly attribute boolean hidden;
  /**
   * The images read-only property of the Document interface returns a collection of the images in the current HTML document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/images">Document.images - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLCollection images;
  /**
   * The Document.implementation property returns a DOMImplementation object associated with the current document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/implementation">Document.implementation - MDN</a>
   */
  [SameObject]
  readonly attribute DOMImplementation implementation;
  readonly attribute DOMString inputEncoding;
  /**
   * The ParentNode.lastElementChild read-only property returns the object's last child Element or null if there are no child elements.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild">ParentNode.lastElementChild - MDN</a>
   */
  readonly attribute Element? lastElementChild;
  readonly attribute DOMString lastModified;
  /**
   * The links read-only property of the Document interface returns a collection of all area elements and a elements in a document with a value for the href attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/links">Document.links - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLCollection links;
  [PutForwards=href, LegacyUnforgeable]
  readonly attribute Location? location;
  /**
   * The plugins read-only property of the Document interface returns an HTMLCollection object containing one or more HTMLEmbedElements representing the embed elements in the current document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/plugins">Document.plugins - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLCollection plugins;
  /**
   * The pointerLockElement property of the Document and ShadowRoot interfaces provides the element set as the target for mouse events while the pointer is locked. It is null if lock is pending, pointer is unlocked, or the target is in another document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/pointerLockElement">DocumentOrShadowRoot.pointerLockElement - MDN</a>
   */
  readonly attribute Element? pointerLockElement;
  readonly attribute DocumentReadyState readyState;
  readonly attribute USVString referrer;
  readonly attribute SVGSVGElement? rootElement;
  /**
   * The scripts property of the Document interface returns a list of the script elements in the document. The returned object is an HTMLCollection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/scripts">Document.scripts - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLCollection scripts;
  /**
   * The scrollingElement read-only property of the Document interface returns a reference to the Element that scrolls the document. In standards mode, this is the root element of the document, document.documentElement.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollingElement">Document.scrollingElement - MDN</a>
   */
  readonly attribute Element? scrollingElement;
  /**
   * The styleSheets read-only property of the DocumentOrShadowRoot interface returns a StyleSheetList of CSSStyleSheet objects, for stylesheets explicitly linked into or embedded in a document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/styleSheets">DocumentOrShadowRoot.styleSheets - MDN</a>
   */
  [SameObject]
  readonly attribute StyleSheetList styleSheets;
  /**
   * The timeline readonly property of the Document interface represents the default timeline of the current document. This timeline is a special instance of DocumentTimeline that is automatically created on page load.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/timeline">Document.timeline - MDN</a>
   */
  readonly attribute DocumentTimeline timeline;
  /**
   * The Document.visibilityState read-only property returns the visibility of the document, that is in which context this element is now visible. It is useful to know if the document is in the background or an invisible tab, or only loaded for pre-rendering.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState">Document.visibilityState - MDN</a>
   */
  readonly attribute VisibilityState visibilityState;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString alinkColor;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString bgColor;
  /**
   * The Document.body property represents the body or frameset node of the current document, or null if no such element exists.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/body">Document.body - MDN</a>
   */
  [CEReactions]
  attribute HTMLElement? body;
  attribute USVString cookie;
  [CEReactions]
  attribute DOMString designMode;
  [CEReactions]
  attribute DOMString dir;
  attribute USVString domain;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString fgColor;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString linkColor;
  /**
   * The onabort property of the GlobalEventHandlers mixin is the EventHandler for processing abort events sent to the window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort">GlobalEventHandlers.onabort - MDN</a>
   */
  attribute NullableEventHandler onabort;
  /**
   * The onanimationcancel property of the GlobalEventHandlers mixin is the EventHandler for processing animationcancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationcancel">GlobalEventHandlers.onanimationcancel - MDN</a>
   */
  attribute NullableEventHandler onanimationcancel;
  /**
   * The onanimationend property of the GlobalEventHandlers mixin is the EventHandler for processing animationend events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend">GlobalEventHandlers.onanimationend - MDN</a>
   */
  attribute NullableEventHandler onanimationend;
  /**
   * The onanimationiteration property of the GlobalEventHandlers mixin is the EventHandler for processing animationiteration events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationiteration">GlobalEventHandlers.onanimationiteration - MDN</a>
   */
  attribute NullableEventHandler onanimationiteration;
  /**
   * An event handler for the animationstart event. This event is sent when a CSS Animation starts to play.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationstart">GlobalEventHandlers.onanimationstart - MDN</a>
   */
  attribute NullableEventHandler onanimationstart;
  /**
   * The onauxclick property of the GlobalEventHandlers mixin is an EventHandler for processing auxclick events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onauxclick">GlobalEventHandlers.onauxclick - MDN</a>
   */
  attribute NullableEventHandler onauxclick;
  /**
   * The onblur property of the GlobalEventHandlers mixin is the EventHandler for processing blur events. It's available on Element, Document, and Window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur">GlobalEventHandlers.onblur - MDN</a>
   */
  attribute NullableEventHandler onblur;
  /**
   * The oncancel property of the GlobalEventHandlers mixin is an EventHandler for processing cancel events sent to a dialog element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncancel">GlobalEventHandlers.oncancel - MDN</a>
   */
  attribute NullableEventHandler oncancel;
  /**
   * The oncanplay property of the GlobalEventHandlers mixin is the EventHandler for processing canplay events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplay">GlobalEventHandlers.oncanplay - MDN</a>
   */
  attribute NullableEventHandler oncanplay;
  /**
   * The oncanplaythrough property of the GlobalEventHandlers mixin is the EventHandler for processing canplaythrough events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough">GlobalEventHandlers.oncanplaythrough - MDN</a>
   */
  attribute NullableEventHandler oncanplaythrough;
  /**
   * The onchange property of the GlobalEventHandlers mixin is an EventHandler for processing change events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange">GlobalEventHandlers.onchange - MDN</a>
   */
  attribute NullableEventHandler onchange;
  /**
   * The onclick property of the GlobalEventHandlers mixin is the EventHandler for processing click events on a given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick">GlobalEventHandlers.onclick - MDN</a>
   */
  attribute NullableEventHandler onclick;
  /**
   * The onclose property of the GlobalEventHandlers mixin is an EventHandler for processing close events sent to a dialog element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose">GlobalEventHandlers.onclose - MDN</a>
   */
  attribute NullableEventHandler onclose;
  /**
   * The oncontextmenu property of the GlobalEventHandlers mixin is an EventHandler that processes contextmenu events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu">GlobalEventHandlers.oncontextmenu - MDN</a>
   */
  attribute NullableEventHandler oncontextmenu;
  attribute NullableEventHandler oncopy;
  /**
   * The oncuechange property of the GlobalEventHandlers mixin is the EventHandler for processing cuechange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncuechange">GlobalEventHandlers.oncuechange - MDN</a>
   */
  attribute NullableEventHandler oncuechange;
  attribute NullableEventHandler oncut;
  /**
   * The ondblclick property of the GlobalEventHandlers mixin is an EventHandler that processes dblclick events on the given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick">GlobalEventHandlers.ondblclick - MDN</a>
   */
  attribute NullableEventHandler ondblclick;
  /**
   * A global event handler for the drag event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondrag">GlobalEventHandlers.ondrag - MDN</a>
   */
  attribute NullableEventHandler ondrag;
  /**
   * A global event handler for the dragend event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragend">GlobalEventHandlers.ondragend - MDN</a>
   */
  attribute NullableEventHandler ondragend;
  /**
   * A global event handler for the dragenter event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragenter">GlobalEventHandlers.ondragenter - MDN</a>
   */
  attribute NullableEventHandler ondragenter;
  /**
   * The GlobalEventHandler.ondragexit property is an event handler for the dragexit event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragexit">GlobalEventHandlers.ondragexit - MDN</a>
   */
  attribute NullableEventHandler ondragexit;
  /**
   * A global event handler for the dragleave event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragleave">GlobalEventHandlers.ondragleave - MDN</a>
   */
  attribute NullableEventHandler ondragleave;
  /**
   * A global event handler for the dragover event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragover">GlobalEventHandlers.ondragover - MDN</a>
   */
  attribute NullableEventHandler ondragover;
  /**
   * A global event handler for the dragstart event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragstart">GlobalEventHandlers.ondragstart - MDN</a>
   */
  attribute NullableEventHandler ondragstart;
  /**
   * A global event handler for the drop event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondrop">GlobalEventHandlers.ondrop - MDN</a>
   */
  attribute NullableEventHandler ondrop;
  /**
   * The ondurationchange property of the GlobalEventHandlers mixin is the EventHandler for processing durationchange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondurationchange">GlobalEventHandlers.ondurationchange - MDN</a>
   */
  attribute NullableEventHandler ondurationchange;
  /**
   * The onemptied property sets and returns the event handler for the emptied event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onemptied">GlobalEventHandlers.onemptied - MDN</a>
   */
  attribute NullableEventHandler onemptied;
  /**
   * The onended property of the GlobalEventHandlers mixin is the EventHandler for processing ended events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onended">GlobalEventHandlers.onended - MDN</a>
   */
  attribute NullableEventHandler onended;
  /**
   * The onerror property of the GlobalEventHandlers mixin is an EventHandler that processes error events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror">GlobalEventHandlers.onerror - MDN</a>
   */
  attribute NullableOnErrorEventHandler onerror;
  /**
   * The onfocus property of the GlobalEventHandlers mixin is an EventHandler that processes focus events on the given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus">GlobalEventHandlers.onfocus - MDN</a>
   */
  attribute NullableEventHandler onfocus;
  /**
   * The onformdata property of the GlobalEventHandlers mixin is the EventHandler for processing formdata events, fired after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a FormData() constructor. onformdata is available on HTMLFormElement.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onformdata">GlobalEventHandlers.onformdata - MDN</a>
   */
  attribute NullableEventHandler onformdata;
  /**
   * The Document interface's onfullscreenchange property is an event handler for the fullscreenchange event that is fired immediately before a document transitions into or out of full-screen mode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange">Document.onfullscreenchange - MDN</a>
   */
  attribute NullableEventHandler onfullscreenchange;
  attribute NullableEventHandler onfullscreenerror;
  /**
   * The ongotpointercapture property of the GlobalEventHandlers mixin is an EventHandler that processes gotpointercapture events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ongotpointercapture">GlobalEventHandlers.ongotpointercapture - MDN</a>
   */
  attribute NullableEventHandler ongotpointercapture;
  /**
   * The oninput property of the GlobalEventHandlers mixin is an EventHandler that processes input events on the input, select, and textarea elements. It also handles these events on elements where contenteditable or designMode are turned on.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput">GlobalEventHandlers.oninput - MDN</a>
   */
  attribute NullableEventHandler oninput;
  /**
   * The oninvalid property of the GlobalEventHandlers mixin is an EventHandler that processes invalid events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninvalid">GlobalEventHandlers.oninvalid - MDN</a>
   */
  attribute NullableEventHandler oninvalid;
  /**
   * The onkeydown property of the GlobalEventHandlers mixin is an EventHandler that processes keydown events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown">GlobalEventHandlers.onkeydown - MDN</a>
   */
  attribute NullableEventHandler onkeydown;
  /**
   * The onkeypress property of the GlobalEventHandlers mixin is an EventHandler that processes keypress events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress">GlobalEventHandlers.onkeypress - MDN</a>
   */
  attribute NullableEventHandler onkeypress;
  /**
   * The onkeyup property of the GlobalEventHandlers mixin is an EventHandler that processes keyup events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup">GlobalEventHandlers.onkeyup - MDN</a>
   */
  attribute NullableEventHandler onkeyup;
  /**
   * The onload property of the GlobalEventHandlers mixin is an EventHandler that processes load events on a Window, XMLHttpRequest, img element, etc.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload">GlobalEventHandlers.onload - MDN</a>
   */
  attribute NullableEventHandler onload;
  /**
   * The onloadeddata property of the GlobalEventHandlers mixin is the EventHandler for processing loadeddata events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadeddata">GlobalEventHandlers.onloadeddata - MDN</a>
   */
  attribute NullableEventHandler onloadeddata;
  /**
   * The onloadedmetadata property of the GlobalEventHandlers mixin is the EventHandler for processing loadedmetadata events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadedmetadata">GlobalEventHandlers.onloadedmetadata - MDN</a>
   */
  attribute NullableEventHandler onloadedmetadata;
  /**
   * The onloadstart property of the GlobalEventHandlers mixin is an EventHandler representing the code to be called when the loadstart event is raised (when progress has begun on the loading of a resource.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart">GlobalEventHandlers.onloadstart - MDN</a>
   */
  attribute NullableEventHandler onloadstart;
  /**
   * The onlostpointercapture property of the GlobalEventHandlers mixin is an EventHandler that processes lostpointercapture events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onlostpointercapture">GlobalEventHandlers.onlostpointercapture - MDN</a>
   */
  attribute NullableEventHandler onlostpointercapture;
  /**
   * The onmousedown property of the GlobalEventHandlers mixin is an EventHandler that processes mousedown events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown">GlobalEventHandlers.onmousedown - MDN</a>
   */
  attribute NullableEventHandler onmousedown;
  /**
   * The onmouseenter property of the GlobalEventHandlers mixin is the EventHandler for processing mouseenter events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseenter">GlobalEventHandlers.onmouseenter - MDN</a>
   */
  [LegacyLenientThis]
  attribute NullableEventHandler onmouseenter;
  /**
   * The onmouseleave property of the GlobalEventHandlers mixin is the EventHandler for processing mouseleave events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseleave">GlobalEventHandlers.onmouseleave - MDN</a>
   */
  [LegacyLenientThis]
  attribute NullableEventHandler onmouseleave;
  /**
   * The onmousemove property of the GlobalEventHandlers mixin is an EventHandler that processes mousemove events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove">GlobalEventHandlers.onmousemove - MDN</a>
   */
  attribute NullableEventHandler onmousemove;
  /**
   * The onmouseout property of the GlobalEventHandlers mixin is an EventHandler that processes mouseout events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout">GlobalEventHandlers.onmouseout - MDN</a>
   */
  attribute NullableEventHandler onmouseout;
  /**
   * The onmouseover property of the GlobalEventHandlers mixin is an EventHandler that processes mouseover events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover">GlobalEventHandlers.onmouseover - MDN</a>
   */
  attribute NullableEventHandler onmouseover;
  /**
   * The onmouseup property of the GlobalEventHandlers mixin is an EventHandler that processes mouseup events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup">GlobalEventHandlers.onmouseup - MDN</a>
   */
  attribute NullableEventHandler onmouseup;
  attribute NullableEventHandler onpaste;
  /**
   * The onpause property of the GlobalEventHandlers mixin is the EventHandler for processing pause events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause">GlobalEventHandlers.onpause - MDN</a>
   */
  attribute NullableEventHandler onpause;
  /**
   * The onplay property of the GlobalEventHandlers mixin is the EventHandler for processing play events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay">GlobalEventHandlers.onplay - MDN</a>
   */
  attribute NullableEventHandler onplay;
  /**
   * The onplaying property of the GlobalEventHandlers mixin is the EventHandler for processing playing events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplaying">GlobalEventHandlers.onplaying - MDN</a>
   */
  attribute NullableEventHandler onplaying;
  /**
   * The onpointercancel property of the GlobalEventHandlers mixin is an EventHandler that processes pointercancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel">GlobalEventHandlers.onpointercancel - MDN</a>
   */
  attribute NullableEventHandler onpointercancel;
  /**
   * The GlobalEventHandlers event handler onpointerdown is used to specify the event handler for the pointerdown event, which is fired when the pointing device is initially pressed. This event can be sent to Window, Document, and Element objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown">GlobalEventHandlers.onpointerdown - MDN</a>
   */
  attribute NullableEventHandler onpointerdown;
  /**
   * The onpointerenter property of the GlobalEventHandlers mixin is an EventHandler that processes pointerenter events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerenter">GlobalEventHandlers.onpointerenter - MDN</a>
   */
  attribute NullableEventHandler onpointerenter;
  /**
   * The global event handler for the pointerleave event, which is delivered to a Node when the pointer (mouse cursor, fingertip, etc.) exits its hit test area (for example, if the cursor exits an Element or Window's content area). This event is part of the Pointer Events API.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave">GlobalEventHandlers.onpointerleave - MDN</a>
   */
  attribute NullableEventHandler onpointerleave;
  attribute NullableEventHandler onpointerlockchange;
  attribute NullableEventHandler onpointerlockerror;
  /**
   * The onpointermove property of the GlobalEventHandlers mixin is an EventHandler that processes pointermove events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove">GlobalEventHandlers.onpointermove - MDN</a>
   */
  attribute NullableEventHandler onpointermove;
  /**
   * The onpointerout property of the GlobalEventHandlers mixin is an EventHandler that processes pointerout events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout">GlobalEventHandlers.onpointerout - MDN</a>
   */
  attribute NullableEventHandler onpointerout;
  /**
   * The onpointerover property of the GlobalEventHandlers mixin is an EventHandler that processes pointerover events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerover">GlobalEventHandlers.onpointerover - MDN</a>
   */
  attribute NullableEventHandler onpointerover;
  /**
   * The onpointerup property of the GlobalEventHandlers mixin is an EventHandler that processes pointerup events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerup">GlobalEventHandlers.onpointerup - MDN</a>
   */
  attribute NullableEventHandler onpointerup;
  attribute NullableEventHandler onprogress;
  attribute NullableEventHandler onratechange;
  [LegacyLenientThis]
  attribute NullableEventHandler onreadystatechange;
  /**
   * The onreset property of the GlobalEventHandlers mixin is an EventHandler that processes reset events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset">GlobalEventHandlers.onreset - MDN</a>
   */
  attribute NullableEventHandler onreset;
  /**
   * The onresize property of the GlobalEventHandlers interface is an EventHandler that processes resize events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize">GlobalEventHandlers.onresize - MDN</a>
   */
  attribute NullableEventHandler onresize;
  /**
   * The onscroll property of the GlobalEventHandlers mixin is an EventHandler that processes scroll events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll">GlobalEventHandlers.onscroll - MDN</a>
   */
  attribute NullableEventHandler onscroll;
  attribute NullableEventHandler onsecuritypolicyviolation;
  attribute NullableEventHandler onseeked;
  attribute NullableEventHandler onseeking;
  /**
   * The onselect property of the GlobalEventHandlers mixin is an EventHandler that processes select events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect">GlobalEventHandlers.onselect - MDN</a>
   */
  attribute NullableEventHandler onselect;
  /**
   * The onselectionchange property of the GlobalEventHandlers mixin is an EventHandler that processes selectionchange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectionchange">Document.onselectionchange - MDN</a>
   */
  attribute NullableEventHandler onselectionchange;
  /**
   * The onselectstart property of the GlobalEventHandlers mixin is an EventHandler that processes selectstart events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart">GlobalEventHandlers.onselectstart - MDN</a>
   */
  attribute NullableEventHandler onselectstart;
  attribute NullableEventHandler onslotchange;
  attribute NullableEventHandler onstalled;
  /**
   * The onsubmit property of the GlobalEventHandlers mixin is an EventHandler that processes submit events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit">GlobalEventHandlers.onsubmit - MDN</a>
   */
  attribute NullableEventHandler onsubmit;
  attribute NullableEventHandler onsuspend;
  attribute NullableEventHandler ontimeupdate;
  attribute NullableEventHandler ontoggle;
  /**
   * The ontouchcancel property of the GlobalEventHandlers mixin is an EventHandler that processes touchcancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel">GlobalEventHandlers.ontouchcancel - MDN</a>
   */
  attribute NullableEventHandler ontouchcancel;
  /**
   * A global event handler for the touchend event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchend">GlobalEventHandlers.ontouchend - MDN</a>
   */
  attribute NullableEventHandler ontouchend;
  /**
   * A global event handler for the touchmove event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchmove">GlobalEventHandlers.ontouchmove - MDN</a>
   */
  attribute NullableEventHandler ontouchmove;
  /**
   * The ontouchstart property of the GlobalEventHandlers mixin is an EventHandler that processes touchstart events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart">GlobalEventHandlers.ontouchstart - MDN</a>
   */
  attribute NullableEventHandler ontouchstart;
  /**
   * The ontransitioncancel property of the GlobalEventHandlers mixin is an EventHandler that processes transitioncancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitioncancel">GlobalEventHandlers.ontransitioncancel - MDN</a>
   */
  attribute NullableEventHandler ontransitioncancel;
  /**
   * The ontransitionend property of the GlobalEventHandlers mixin is an EventHandler that processes transitionend events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitionend">GlobalEventHandlers.ontransitionend - MDN</a>
   */
  attribute NullableEventHandler ontransitionend;
  attribute NullableEventHandler ontransitionrun;
  attribute NullableEventHandler ontransitionstart;
  /**
   * The Document.onvisibilitychange property represents the event handler that is called when a visibilitychange event reaches this object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/onvisibilitychange">Document.onvisibilitychange - MDN</a>
   */
  attribute NullableEventHandler onvisibilitychange;
  attribute NullableEventHandler onvolumechange;
  attribute NullableEventHandler onwaiting;
  attribute NullableEventHandler onwebkitanimationend;
  attribute NullableEventHandler onwebkitanimationiteration;
  attribute NullableEventHandler onwebkitanimationstart;
  attribute NullableEventHandler onwebkittransitionend;
  /**
   * The onwheel property of the GlobalEventHandlers mixin is an EventHandler that processes wheel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel">GlobalEventHandlers.onwheel - MDN</a>
   */
  attribute NullableEventHandler onwheel;
  [CEReactions]
  attribute DOMString title;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString vlinkColor;
  /**
   * The DOMContentLoaded event fires when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event">DOMContentLoaded event - MDN</a>
   */
  [NoBubble, NoCancel]
  event Event DOMContentLoaded;
  /**
   * The animationcancel event is fired when a CSS Animation unexpectedly aborts. In other words, any time it stops running without sending an animationend event. This might happen when the animation-name is changed such that the animation is removed, or when the animating node is hidden using CSS. Therefore, either directly or because any of its containing nodes are hidden.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/animationcancel_event">animationcancel event - MDN</a>
   */
  [NoBubble]
  event AnimationEvent animationcancel;
  /**
   * The animationend event is fired when a CSS Animation has completed. If the animation aborts before reaching completion, such as if the element is removed from the DOM or the animation is removed from the element, the animationend event is not fired.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/animationend_event">animationend event - MDN</a>
   */
  [NoBubble]
  event AnimationEvent animationend;
  /**
   * The animationiteration event is fired when an iteration of a CSS Animation ends, and another one begins. This event does not occur at the same time as the animationend event, and therefore does not occur for animations with an animation-iteration-count of one.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/animationiteration_event">animationiteration event - MDN</a>
   */
  [NoBubble]
  event AnimationEvent animationiteration;
  /**
   * The animationstart event is fired when a CSS Animation has started. If there is an animation-delay, this event will fire once the delay period has expired. A negative delay will cause the event to fire with an elapsedTime equal to the absolute value of the delay (and, correspondingly, the animation will begin playing at that time index into the sequence).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/animationstart_event">animationstart event - MDN</a>
   */
  [NoBubble]
  event AnimationEvent animationstart;
  /**
   * The copy event fires when the user initiates a copy action through the browser's user interface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/copy_event">copy event - MDN</a>
   */
  [NoBubble, NoCancel]
  event ClipboardEvent copy;
  /**
   * The cut event is fired when the user has initiated a "cut" action through the browser's user interface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/cut_event">cut event - MDN</a>
   */
  [NoBubble, NoCancel]
  event ClipboardEvent cut;
  /**
   * The drag event is fired every few hundred milliseconds as an element or text selection is being dragged by the user.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/drag_event">drag event - MDN</a>
   */
  [NoBubble, NoCancel]
  event DragEvent drag;
  /**
   * The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/dragend_event">dragend event - MDN</a>
   */
  [NoBubble]
  event DragEvent dragend;
  /**
   * The dragenter event is fired when a dragged element or text selection enters a valid drop target.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/dragenter_event">dragenter event - MDN</a>
   */
  [NoBubble, NoCancel]
  event DragEvent dragenter;
  /**
   * The dragexit event is fired when an element is no longer the drag operation's immediate selection target.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/dragexit_event">dragexit event - MDN</a>
   */
  [NoBubble]
  event DragEvent dragexit;
  /**
   * The dragleave event is fired when a dragged element or text selection leaves a valid drop target.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/dragleave_event">dragleave event - MDN</a>
   */
  [NoBubble]
  event DragEvent dragleave;
  /**
   * The dragover event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/dragover_event">dragover event - MDN</a>
   */
  [NoBubble, NoCancel]
  event DragEvent dragover;
  /**
   * The dragstart event is fired when the user starts dragging an element or text selection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/dragstart_event">dragstart event - MDN</a>
   */
  [NoBubble, NoCancel]
  event DragEvent dragstart;
  /**
   * The drop event is fired when an element or text selection is dropped on a valid drop target.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/drop_event">drop event - MDN</a>
   */
  [NoBubble, NoCancel]
  event DragEvent drop;
  /**
   * The fullscreenchange event is fired immediately after the browser switches into or out of full-screen mode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenchange_event">fullscreenchange event - MDN</a>
   */
  [NoBubble]
  event Event fullscreenchange;
  /**
   * The gotpointercapture event is fired when an element captures a pointer using setPointerCapture().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/gotpointercapture_event">gotpointercapture event - MDN</a>
   */
  event PointerEvent gotpointercapture;
  /**
   * The keydown event is fired when a key is pressed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/keydown_event">keydown event - MDN</a>
   */
  [NoBubble, NoCancel]
  event KeyboardEvent keydown;
  /**
   * The keypress event is fired when a key that produces a character value is pressed down.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/keypress_event">keypress event - MDN</a>
   */
  [NoBubble, NoCancel]
  event KeyboardEvent keypress;
  /**
   * The keyup event is fired when a key is released.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/keyup_event">keyup event - MDN</a>
   */
  [NoBubble, NoCancel]
  event KeyboardEvent keyup;
  /**
   * The lostpointercapture event is fired when a captured pointer is released.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/lostpointercapture_event">lostpointercapture event - MDN</a>
   */
  event PointerEvent lostpointercapture;
  /**
   * The paste event is fired when the user has initiated a "paste" action through the browser's user interface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/paste_event">paste event - MDN</a>
   */
  [NoBubble, NoCancel]
  event ClipboardEvent paste;
  /**
   * The pointercancel event is fired when the browser determines that there are unlikely to be any more pointer events, or if after the pointerdown event is fired, the pointer is then used to manipulate the viewport by panning, zooming, or scrolling.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/pointercancel_event">pointercancel event - MDN</a>
   */
  [NoBubble]
  event PointerEvent pointercancel;
  /**
   * The pointerdown event is fired when a pointer becomes active. For mouse, it is fired when the device transitions from no buttons depressed to at least one button depressed. For touch, it is fired when physical contact is made with the digitizer. For pen, it is fired when the stylus makes physical contact with the digitizer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerdown_event">pointerdown event - MDN</a>
   */
  [NoBubble, NoCancel]
  event PointerEvent pointerdown;
  /**
   * The pointerenter event fires when a pointing device is moved into the hit test boundaries of an element or one of its descendants, including as a result of a pointerdown event from a device that does not support hover (see pointerdown).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerenter_event">pointerenter event - MDN</a>
   */
  event PointerEvent pointerenter;
  /**
   * The pointerleave event is fired when a pointing device is moved out of the hit test boundaries of an element. For pen devices, this event is fired when the stylus leaves the hover range detectable by the digitizer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerleave_event">pointerleave event - MDN</a>
   */
  event PointerEvent pointerleave;
  /**
   * The pointerlockchange event is fired when the pointer is locked/unlocked.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerlockchange_event">pointerlockchange event - MDN</a>
   */
  [NoBubble]
  event Event pointerlockchange;
  /**
   * The pointerlockerror event is fired when locking the pointer failed (for technical reasons or because the permission was denied).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerlockerror_event">pointerlockerror event - MDN</a>
   */
  [NoBubble]
  event Event pointerlockerror;
  /**
   * The pointermove event is fired when a pointer changes coordinates, and the pointer has not been canceled by a browser touch-action.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/pointermove_event">pointermove event - MDN</a>
   */
  [NoBubble, NoCancel]
  event PointerEvent pointermove;
  /**
   * The pointerout event is fired for several reasons including: pointing device is moved out of the hit test boundaries of an element; firing the pointerup event for a device that does not support hover (see pointerup); after firing the pointercancel event (see pointercancel); when a pen stylus leaves the hover range detectable by the digitizer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerout_event">pointerout event - MDN</a>
   */
  [NoBubble, NoCancel]
  event PointerEvent pointerout;
  /**
   * The pointerover event is fired when a pointing device is moved into an element's hit test boundaries.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerover_event">pointerover event - MDN</a>
   */
  [NoBubble, NoCancel]
  event PointerEvent pointerover;
  /**
   * The pointerup event is fired when a pointer is no longer active.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerup_event">pointerup event - MDN</a>
   */
  [NoBubble, NoCancel]
  event PointerEvent pointerup;
  /**
   * The readystatechange event is fired when the readyState attribute of a document has changed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/readystatechange_event">readystatechange event - MDN</a>
   */
  event Event readystatechange;
  /**
   * The scroll event fires when the document view or an element has been scrolled.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/scroll_event">scroll event - MDN</a>
   */
  [NoBubble]
  event Event scroll;
  /**
   *
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/selectionchange_event">selectionchange event - MDN</a>
   */
  event Event selectionchange;
  /**
   *
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/selectstart_event">selectstart event - MDN</a>
   */
  [NoBubble, NoCancel]
  event Event selectstart;
  /**
   * The touchcancel event is fired when one or more touch points have been disrupted in an implementation-specific manner (for example, too many touch points are created).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/touchcancel_event">touchcancel event - MDN</a>
   */
  [NoBubble]
  event TouchEvent touchcancel;
  /**
   * The touchend event fires when one or more touch points are removed from the touch surface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/touchend_event">touchend event - MDN</a>
   */
  [NoBubble, NoCancel]
  event TouchEvent touchend;
  /**
   * The touchmove event is fired when one or more touch points are moved along the touch surface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/touchmove_event">touchmove event - MDN</a>
   */
  [NoBubble, NoCancel]
  event TouchEvent touchmove;
  /**
   * The touchstart event is fired when one or more touch points are placed on the touch surface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/touchstart_event">touchstart event - MDN</a>
   */
  [NoBubble, NoCancel]
  event TouchEvent touchstart;
  /**
   * The transitioncancel event is fired when a CSS transition is canceled.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/transitioncancel_event">transitioncancel event - MDN</a>
   */
  [NoBubble]
  event TransitionEvent transitioncancel;
  /**
   * The transitionend event is fired when a CSS transition has completed. In the case where a transition is removed before completion, such as if the transition-property is removed or display is set to none, then the event will not be generated.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/transitionend_event">transitionend event - MDN</a>
   */
  [NoBubble, NoCancel]
  event TransitionEvent transitionend;
  /**
   * The transitionrun event is fired when a CSS transition is first created, i.e. before any transition-delay has begun.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/transitionrun_event">transitionrun event - MDN</a>
   */
  [NoBubble]
  event TransitionEvent transitionrun;
  /**
   * The transitionstart event is fired when a CSS transition has actually started, i.e., after any transition-delay has ended.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/transitionstart_event">transitionstart event - MDN</a>
   */
  [NoBubble]
  event TransitionEvent transitionstart;
  /**
   * The visibilitychange event is fired at the document when the content of its tab have become visible or have been hidden.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilitychange_event">visibilitychange event - MDN</a>
   */
  [NoBubble]
  event Event visibilitychange;
  /**
   * The wheel event fires when the user rotates a wheel button on a pointing device (typically a mouse).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/wheel_event">wheel event - MDN</a>
   */
  [NoBubble, NoCancel]
  event WheelEvent wheel;
  /**
   * The Document constructor creates a new Document object that is a web page loaded in the browser and serving as an entry point into the page's content.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/Document">Document.Document - MDN</a>
   */
  constructor();
  /**
   * Document.adoptNode() transfers a node from another document into the method's document. The adopted node and its subtree is removed from its original document (if any), and its ownerDocument is changed to the current document. The node can then be inserted into the current document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptNode">Document.adoptNode - MDN</a>
   */
  [CEReactions]
  Node adoptNode( Node node );
  /**
   * The ParentNode.append() method inserts a set of Node objects or DOMString objects after the last child of the ParentNode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append">ParentNode.append - MDN</a>
   */
  [CEReactions, Unscopable]
  void append( ( Node or DOMString )... nodes );
  void captureEvents();
  CaretPosition? caretPositionFromPoint( double x, double y );
  void clear();
  [CEReactions]
  void close();
  /**
   * The Document.createAttribute() method creates a new attribute node, and returns it. The object created a node implementing the Attr interface. The DOM does not enforce what sort of attributes can be added to a particular element in this manner.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createAttribute">Document.createAttribute - MDN</a>
   */
  [NewObject]
  Attr createAttribute( DOMString localName );
  [NewObject]
  Attr createAttributeNS( DOMString? namespace, DOMString qualifiedName );
  /**
   * createCDATASection() creates a new CDATA section node, and returns it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createCDATASection">Document.createCDATASection - MDN</a>
   */
  [NewObject]
  CDATASection createCDATASection( DOMString data );
  /**
   * createComment() creates a new comment node, and returns it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createComment">Document.createComment - MDN</a>
   */
  [NewObject]
  Comment createComment( DOMString data );
  /**
   * Creates a new empty DocumentFragment into which DOM nodes can be added to build an offscreen DOM tree.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment">Document.createDocumentFragment - MDN</a>
   */
  [NewObject]
  DocumentFragment createDocumentFragment();
  /**
   * In an HTML document, the document.createElement() method creates the HTML element specified by tagName, or an HTMLUnknownElement if tagName isn't recognized.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement">Document.createElement - MDN</a>
   */
  [CEReactions, NewObject]
  Element createElement( DOMString localName, optional ( DOMString or ElementCreationOptions ) options = {} );
  /**
   * Creates an element with the specified namespace URI and qualified name.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS">Document.createElementNS - MDN</a>
   */
  [CEReactions, NewObject]
  Element createElementNS( DOMString? namespace, DOMString qualifiedName, optional ( DOMString or ElementCreationOptions ) options = {} );
  /**
   * Creates an event of the type specified. The returned object should be first initialized and can then be passed to EventTarget.dispatchEvent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent">Document.createEvent - MDN</a>
   */
  [NewObject]
  Event createEvent( DOMString interface );
  [NewObject]
  XPathExpression createExpression( DOMString expression, optional XPathNSResolver? resolver = null );
  XPathNSResolver createNSResolver( Node nodeResolver );
  /**
   * Returns a new NodeIterator object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createNodeIterator">Document.createNodeIterator - MDN</a>
   */
  [NewObject]
  NodeIterator createNodeIterator( Node root, optional unsigned long whatToShow = 0xFFFFFFFF, optional NodeFilter? filter = null );
  /**
   * createProcessingInstruction() generates a new processing instruction node and returns it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createProcessingInstruction">Document.createProcessingInstruction - MDN</a>
   */
  [NewObject]
  ProcessingInstruction createProcessingInstruction( DOMString target, DOMString data );
  /**
   * The Document.createRange() method returns a new Range object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createRange">Document.createRange - MDN</a>
   */
  [NewObject]
  Range createRange();
  /**
   * Creates a new Text node. This method can be used to escape HTML characters.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode">Document.createTextNode - MDN</a>
   */
  [NewObject]
  Text createTextNode( DOMString data );
  /**
   * The Document.createTreeWalker() creator method returns a newly created TreeWalker object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createTreeWalker">Document.createTreeWalker - MDN</a>
   */
  [NewObject]
  TreeWalker createTreeWalker( Node root, optional unsigned long whatToShow = 0xFFFFFFFF, optional NodeFilter? filter = null );
  Element? elementFromPoint( double x, double y );
  sequence<Element> elementsFromPoint( double x, double y );
  XPathResult evaluate( DOMString expression, Node contextNode, optional XPathNSResolver? resolver = null, optional unsigned short type = 0, optional XPathResult? result = null );
  [CEReactions]
  boolean execCommand( DOMString commandId, optional boolean showUI = false, optional DOMString value = "" );
  Promise<void> exitFullscreen();
  /**
   * The exitPointerLock() method asynchronously releases a pointer lock previously requested through Element.requestPointerLock.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/exitPointerLock">Document.exitPointerLock - MDN</a>
   */
  void exitPointerLock();
  /**
   * The getAnimations() method of the Document interface returns an array of all Animation objects currently in effect whose target elements are descendants of the document. This array includes CSS Animations, CSS Transitions, and Web Animations.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getAnimations">Document.getAnimations - MDN</a>
   */
  sequence<Animation> getAnimations();
  Element? getElementById( DOMString elementId );
  /**
   * returns an array-like object of all child elements which have all of the given class name(s).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName">Document.getElementsByClassName - MDN</a>
   */
  HTMLCollection getElementsByClassName( DOMString classNames );
  NodeList getElementsByName( DOMString elementName );
  /**
   * returns an HTMLCollection of elements with the given tag name.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName">Document.getElementsByTagName - MDN</a>
   */
  HTMLCollection getElementsByTagName( DOMString qualifiedName );
  /**
   * Returns a list of elements with the given tag name belonging to the given namespace. The complete document is searched, including the root node.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagNameNS">Document.getElementsByTagNameNS - MDN</a>
   */
  HTMLCollection getElementsByTagNameNS( DOMString? namespace, DOMString localName );
  Selection? getSelection();
  boolean hasFocus();
  /**
   * The Document object's importNode() method creates a copy of a Node or DocumentFragment from another document, to be inserted into the current document later.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode">Document.importNode - MDN</a>
   */
  [CEReactions, NewObject]
  Node importNode( Node node, optional boolean deep = false );
  [CEReactions]
  Document open( optional DOMString unused1, optional DOMString unused2 );
  WindowProxy? open( USVString url, DOMString name, DOMString features );
  /**
   * The ParentNode.prepend() method inserts a set of Node objects or DOMString objects before the first child of the ParentNode. DOMString objects are inserted as equivalent Text nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend">ParentNode.prepend - MDN</a>
   */
  [CEReactions, Unscopable]
  void prepend( ( Node or DOMString )... nodes );
  boolean queryCommandEnabled( DOMString commandId );
  boolean queryCommandIndeterm( DOMString commandId );
  boolean queryCommandState( DOMString commandId );
  boolean queryCommandSupported( DOMString commandId );
  DOMString queryCommandValue( DOMString commandId );
  /**
   * The ParentNode mixin defines the querySelector() method as returning an Element representing the first element matching the specified group of selectors which are descendants of the object on which the method was called.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/querySelector">ParentNode.querySelector - MDN</a>
   */
  Element? querySelector( DOMString selectors );
  /**
   * The ParentNode mixin defines the querySelectorAll() method as returning a NodeList representing a list of elements matching the specified group of selectors which are descendants of the object on which the method was called.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/querySelectorAll">ParentNode.querySelectorAll - MDN</a>
   */
  [NewObject]
  NodeList querySelectorAll( DOMString selectors );
  void releaseEvents();
  /**
   * The ParentNode.replaceChildren() method replaces the existing children of a Node with a specified new set of children. These can be DOMString or Node objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/replaceChildren">ParentNode.replaceChildren - MDN</a>
   */
  [CEReactions, Unscopable]
  void replaceChildren( ( Node or DOMString )... nodes );
  [CEReactions]
  void write( DOMString... text );
  [CEReactions]
  void writeln( DOMString... text );
  /**
   * The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document">Document - MDN</a>
   */
  getter object ( DOMString name );
};

/**
 * The DocumentFragment interface represents a minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment">DocumentFragment - MDN</a>
 */
[Exposed=Window]
interface DocumentFragment : Node {
  /**
   * The ParentNode.childElementCount read-only property returns an unsigned long representing the number of child elements of the given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount">ParentNode.childElementCount - MDN</a>
   */
  readonly attribute unsigned long childElementCount;
  /**
   * The ParentNode property children is a read-only property that returns a live HTMLCollection which contains all of the child elements of the node upon which it was called.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children">ParentNode.children - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLCollection children;
  /**
   * The ParentNode.firstElementChild read-only property returns the object's first child Element, or null if there are no child elements.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild">ParentNode.firstElementChild - MDN</a>
   */
  readonly attribute Element? firstElementChild;
  /**
   * The ParentNode.lastElementChild read-only property returns the object's last child Element or null if there are no child elements.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild">ParentNode.lastElementChild - MDN</a>
   */
  readonly attribute Element? lastElementChild;
  /**
   * The DocumentFragment() constructor returns a new, empty DocumentFragment object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/DocumentFragment">DocumentFragment.DocumentFragment - MDN</a>
   */
  constructor();
  /**
   * The ParentNode.append() method inserts a set of Node objects or DOMString objects after the last child of the ParentNode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append">ParentNode.append - MDN</a>
   */
  [CEReactions, Unscopable]
  void append( ( Node or DOMString )... nodes );
  Element? getElementById( DOMString elementId );
  /**
   * The ParentNode.prepend() method inserts a set of Node objects or DOMString objects before the first child of the ParentNode. DOMString objects are inserted as equivalent Text nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend">ParentNode.prepend - MDN</a>
   */
  [CEReactions, Unscopable]
  void prepend( ( Node or DOMString )... nodes );
  /**
   * The DocumentFragment.querySelector() method returns the first element, or null if no matches are found, within the DocumentFragment (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelector">DocumentFragment.querySelector - MDN</a>
   */
  Element? querySelector( DOMString selectors );
  /**
   * The DocumentFragment.querySelectorAll() method returns a NodeList of elements within the DocumentFragment (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelectorAll">DocumentFragment.querySelectorAll - MDN</a>
   */
  [NewObject]
  NodeList querySelectorAll( DOMString selectors );
  /**
   * The ParentNode.replaceChildren() method replaces the existing children of a Node with a specified new set of children. These can be DOMString or Node objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/replaceChildren">ParentNode.replaceChildren - MDN</a>
   */
  [CEReactions, Unscopable]
  void replaceChildren( ( Node or DOMString )... nodes );
};

/**
 * The DocumentTimeline interface of the the Web Animations API represents animation timelines, including the default document timeline (accessed via Document.timeline).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline">DocumentTimeline - MDN</a>
 */
[Exposed=Window]
interface DocumentTimeline : AnimationTimeline {
  /**
   * The DocumentTimeline() constructor of the Web Animations API creates a new instance of the DocumentTimeline object associated with the active document of the current browsing context.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline/DocumentTimeline">DocumentTimeline.DocumentTimeline - MDN</a>
   */
  constructor( optional DocumentTimelineOptions options );
};

/**
 * The DocumentType interface represents a Node containing a doctype.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentType">DocumentType - MDN</a>
 */
[Exposed=Window]
interface DocumentType : Node {
  readonly attribute DOMString name;
  readonly attribute DOMString publicId;
  readonly attribute DOMString systemId;
  /**
   * The ChildNode.after() method inserts a set of Node or DOMString objects in the children list of this ChildNode's parent, just after this ChildNode. DOMString objects are inserted as equivalent Text nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/after">ChildNode.after - MDN</a>
   */
  [CEReactions, Unscopable]
  void after( ( Node or DOMString )... nodes );
  /**
   * The ChildNode.before() method inserts a set of Node or DOMString objects in the children list of this ChildNode's parent, just before this ChildNode. DOMString objects are inserted as equivalent Text nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/before">ChildNode.before - MDN</a>
   */
  [CEReactions, Unscopable]
  void before( ( Node or DOMString )... nodes );
  /**
   * The ChildNode.remove() method removes the object from the tree it belongs to.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove">ChildNode.remove - MDN</a>
   */
  [CEReactions, Unscopable]
  void remove();
  /**
   * The ChildNode.replaceWith() method replaces this ChildNode in the children list of its parent with a set of Node or DOMString objects. DOMString objects are inserted as equivalent Text nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith">ChildNode.replaceWith - MDN</a>
   */
  [CEReactions, Unscopable]
  void replaceWith( ( Node or DOMString )... nodes );
};

/**
 * The DragEvent interface is a DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DragEvent">DragEvent - MDN</a>
 */
[Exposed=Window]
interface DragEvent : MouseEvent {
  /**
   * The DragEvent.dataTransfer property holds the drag operation's data (as a DataTransfer object).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/dataTransfer">DragEvent.dataTransfer - MDN</a>
   */
  readonly attribute DataTransfer? dataTransfer;
  /**
   * This constructor is used to create a synthetic DragEvent object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent">DragEvent.DragEvent - MDN</a>
   */
  constructor( DOMString type, optional DragEventInit eventInitDict = {} );
};

/**
 * Inherits properties from its parent, AudioNode.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode">DynamicsCompressorNode - MDN</a>
 */
[Exposed=Window]
interface DynamicsCompressorNode : AudioNode {
  /**
   * An AudioParam.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/attack">DynamicsCompressorNode.attack - MDN</a>
   */
  readonly attribute AudioParam attack;
  /**
   * An AudioParam.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/knee">DynamicsCompressorNode.knee - MDN</a>
   */
  readonly attribute AudioParam knee;
  /**
   * An AudioParam.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/ratio">DynamicsCompressorNode.ratio - MDN</a>
   */
  readonly attribute AudioParam ratio;
  /**
   * The reduction read-only property of the DynamicsCompressorNode interface is a float representing the amount of gain reduction currently applied by the compressor to the signal.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/reduction">DynamicsCompressorNode.reduction - MDN</a>
   */
  readonly attribute float reduction;
  /**
   * An AudioParam.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/release">DynamicsCompressorNode.release - MDN</a>
   */
  readonly attribute AudioParam release;
  /**
   * An AudioParam.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/threshold">DynamicsCompressorNode.threshold - MDN</a>
   */
  readonly attribute AudioParam threshold;
  /**
   * The DynamicsCompressorNode() constructor creates a new DynamicsCompressorNode object which provides a compression effect, which lowers the volume of the loudest parts of the signal
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/DynamicsCompressorNode">DynamicsCompressorNode.DynamicsCompressorNode - MDN</a>
   */
  constructor( BaseAudioContext context, optional DynamicsCompressorOptions options = {} );
};

/**
 * The EXT_blend_minmax extension is part of the WebGL API and extends blending capabilities by adding two new blend equations: the minimum or maximum color components of the source and destination colors.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax">EXT_blend_minmax - MDN</a>
 */
[LegacyNoInterfaceObject]
interface EXT_blend_minmax {
  const GLenum MAX_EXT = 0x8008;
  const GLenum MIN_EXT = 0x8007;
};

/**
 * The EXT_frag_depth extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_frag_depth">EXT_frag_depth - MDN</a>
 */
[LegacyNoInterfaceObject]
interface EXT_frag_depth {
};

/**
 * The EXT_sRGB extension is part of the WebGL API and adds sRGB support to textures and framebuffer objects.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB">EXT_sRGB - MDN</a>
 */
[LegacyNoInterfaceObject]
interface EXT_sRGB {
  const GLenum FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x8210;
  const GLenum SRGB8_ALPHA8_EXT = 0x8C43;
  const GLenum SRGB_ALPHA_EXT = 0x8C42;
  const GLenum SRGB_EXT = 0x8C40;
};

/**
 * The EXT_shader_texture_lod extension is part of the WebGL API and adds additional texture functions to the OpenGL ES Shading Language which provide the shader writer with explicit control of LOD (Level of detail).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_shader_texture_lod">EXT_shader_texture_lod - MDN</a>
 */
[LegacyNoInterfaceObject]
interface EXT_shader_texture_lod {
};

/**
 * The EXT_texture_filter_anisotropic extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic">EXT_texture_filter_anisotropic - MDN</a>
 */
[LegacyNoInterfaceObject]
interface EXT_texture_filter_anisotropic {
  const GLenum MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
  const GLenum TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
};

/**
 * Element is the most general base class from which all element objects (i.e. objects that represent elements) in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element">Element - MDN</a>
 */
[Exposed=Window]
interface Element : Node {
  /**
   * The assignedSlot read-only property of the Slottable interface returns an HTMLSlotElement representing the slot element the node is inserted in.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Slottable/assignedSlot">Slottable.assignedSlot - MDN</a>
   */
  readonly attribute HTMLSlotElement? assignedSlot;
  /**
   * The Element.attributes property returns a live collection of all attribute nodes registered to the specified node. It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers. To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes">Element.attributes - MDN</a>
   */
  [SameObject]
  readonly attribute NamedNodeMap attributes;
  /**
   * The ParentNode.childElementCount read-only property returns an unsigned long representing the number of child elements of the given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount">ParentNode.childElementCount - MDN</a>
   */
  readonly attribute unsigned long childElementCount;
  /**
   * The ParentNode property children is a read-only property that returns a live HTMLCollection which contains all of the child elements of the node upon which it was called.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children">ParentNode.children - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLCollection children;
  /**
   * The Element.classList is a read-only property that returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList">Element.classList - MDN</a>
   */
  [SameObject, PutForwards=value]
  readonly attribute DOMTokenList classList;
  /**
   * The Element.clientHeight read-only property is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels. It includes padding but excludes borders, margins, and horizontal scrollbars (if present).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight">Element.clientHeight - MDN</a>
   */
  readonly attribute long clientHeight;
  /**
   * The width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right–to–left and if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left margin or the left padding. clientLeft is read-only.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft">Element.clientLeft - MDN</a>
   */
  readonly attribute long clientLeft;
  /**
   * The width of the top border of an element in pixels. It is a read-only, integer property of element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop">Element.clientTop - MDN</a>
   */
  readonly attribute long clientTop;
  /**
   * The Element.clientWidth property is zero for inline elements and elements with no CSS; otherwise, it's the inner width of an element in pixels. It includes padding but excludes borders, margins, and vertical scrollbars (if present).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth">Element.clientWidth - MDN</a>
   */
  readonly attribute long clientWidth;
  /**
   * The ParentNode.firstElementChild read-only property returns the object's first child Element, or null if there are no child elements.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild">ParentNode.firstElementChild - MDN</a>
   */
  readonly attribute Element? firstElementChild;
  /**
   * The ParentNode.lastElementChild read-only property returns the object's last child Element or null if there are no child elements.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild">ParentNode.lastElementChild - MDN</a>
   */
  readonly attribute Element? lastElementChild;
  /**
   * The Element.localName read-only property returns the local part of the qualified name of an element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/localName">Element.localName - MDN</a>
   */
  readonly attribute DOMString localName;
  /**
   * The Element.namespaceURI read-only property returns the namespace URI of the element, or null if the element is not in a namespace.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI">Element.namespaceURI - MDN</a>
   */
  readonly attribute DOMString? namespaceURI;
  /**
   * The NonDocumentTypeChildNode.nextElementSibling read-only property returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling">NonDocumentTypeChildNode.nextElementSibling - MDN</a>
   */
  readonly attribute Element? nextElementSibling;
  /**
   * The Element.prefix read-only property returns the namespace prefix of the specified element, or null if no prefix is specified.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix">Element.prefix - MDN</a>
   */
  readonly attribute DOMString? prefix;
  /**
   * The NonDocumentTypeChildNode.previousElementSibling read-only property returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling">NonDocumentTypeChildNode.previousElementSibling - MDN</a>
   */
  readonly attribute Element? previousElementSibling;
  /**
   * The Element.scrollHeight read-only property is a measurement of the height of an element's content, including content not visible on the screen due to overflow.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight">Element.scrollHeight - MDN</a>
   */
  readonly attribute long scrollHeight;
  /**
   * The Element.scrollWidth read-only property is a measurement of the width of an element's content, including content not visible on the screen due to overflow.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth">Element.scrollWidth - MDN</a>
   */
  readonly attribute long scrollWidth;
  /**
   * The Element.shadowRoot read-only property represents the shadow root hosted by the element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot">Element.shadowRoot - MDN</a>
   */
  readonly attribute ShadowRoot? shadowRoot;
  /**
   * The tagName read-only property of the Element interface returns the tag name of the element on which it's called.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName">Element.tagName - MDN</a>
   */
  readonly attribute DOMString tagName;
  /**
   * The className property of the Element interface gets and sets the value of the class attribute of the specified element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/className">Element.className - MDN</a>
   */
  [CEReactions]
  attribute DOMString className;
  /**
   * The id property of the Element interface represents the element's identifier, reflecting the id global attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/id">Element.id - MDN</a>
   */
  [CEReactions]
  attribute DOMString id;
  /**
   * The Element property innerHTML gets or sets the HTML or XML markup contained within the element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML">Element.innerHTML - MDN</a>
   */
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString innerHTML;
  /**
   * The Element interface's onfullscreenchange property is an event handler for the fullscreenchange event that is fired when the element has transitioned into or out of full-screen mode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenchange">Element.onfullscreenchange - MDN</a>
   */
  attribute NullableEventHandler onfullscreenchange;
  /**
   * The Element interface's onfullscreenerror property is an event handler for the fullscreenerror event which is sent to the element when an error occurs while attempting to transition into or out of full-screen mode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenerror">Element.onfullscreenerror - MDN</a>
   */
  attribute NullableEventHandler onfullscreenerror;
  /**
   * The outerHTML attribute of the Element DOM interface gets the serialized HTML fragment describing the element including its descendants. It can also be set to replace the element with nodes parsed from the given string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML">Element.outerHTML - MDN</a>
   */
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString outerHTML;
  /**
   * The Element.scrollLeft property gets or sets the number of pixels that an element's content is scrolled from its left edge.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft">Element.scrollLeft - MDN</a>
   */
  attribute unrestricted double scrollLeft;
  /**
   * The Element.scrollTop property gets or sets the number of pixels that an element's content is scrolled vertically.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop">Element.scrollTop - MDN</a>
   */
  attribute unrestricted double scrollTop;
  /**
   * The slot property of the Element interface returns the name of the shadow DOM slot the element is inserted in.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/slot">Element.slot - MDN</a>
   */
  [CEReactions, Unscopable]
  attribute DOMString slot;
  /**
   * The DOMActivate event is fired at an element when it becomes active, such as when it is clicked on using the mouse or a keypress is used to navigate to it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/DOMActivate_event">DOMActivate event - MDN</a>
   */
  [NoBubble, NoCancel]
  event MouseEvent DOMActivate;
  /**
   * The auxclick event is fired at an Element when a non-primary pointing device button (any mouse button other than the primary—usually leftmost—button) has been pressed and released both within the same element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event">auxclick event - MDN</a>
   */
  [NoBubble, NoCancel]
  event MouseEvent auxclick;
  /**
   * The blur event fires when an element has lost focus. The main difference between this event and focusout is that focusout bubbles while blur does not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event">blur event - MDN</a>
   */
  event FocusEvent blur;
  /**
   * The cancel event fires on a dialog when the user instructs the browser that they wish to dismiss the current open dialog. For example, the browser might fire this event when the user presses the Esc key or clicks a "Close dialog" button which is part of the browser's UI.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/cancel_event">cancel event - MDN</a>
   */
  [NoCancel]
  event Event cancel;
  /**
   * An element receives a click event when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event">click event - MDN</a>
   */
  [NoBubble, NoCancel]
  event MouseEvent click;
  /**
   * The compositionend event is fired when a text composition system such as an input method editor completes or cancels the current composition session.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event">compositionend event - MDN</a>
   */
  [NoBubble, NoCancel]
  event CompositionEvent compositionend;
  /**
   * The compositionstart event is fired when a text composition system such as an input method editor starts a new composition session.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event">compositionstart event - MDN</a>
   */
  [NoBubble, NoCancel]
  event CompositionEvent compositionstart;
  /**
   * The compositionupdate event is fired when a new character is received in the context of a text composition session controlled by a text composition system such as an input method editor.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event">compositionupdate event - MDN</a>
   */
  [NoBubble, NoCancel]
  event CompositionEvent compositionupdate;
  /**
   * The contextmenu event fires when the user attempts to open a context menu. This event is typically triggered by clicking the right mouse button, or by pressing the context menu key.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event">contextmenu event - MDN</a>
   */
  [NoBubble, NoCancel]
  event MouseEvent contextmenu;
  /**
   * The copy event fires when the user initiates a copy action through the browser's user interface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event">copy event - MDN</a>
   */
  [NoBubble, NoCancel]
  event ClipboardEvent copy;
  /**
   * The cut event is fired when the user has initiated a "cut" action through the browser's user interface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event">cut event - MDN</a>
   */
  [NoBubble, NoCancel]
  event ClipboardEvent cut;
  /**
   * The dblclick event fires when a pointing device button (such as a mouse's primary button) is double-clicked; that is, when it's rapidly clicked twice on a single element within a very short span of time.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event">dblclick event - MDN</a>
   */
  [NoBubble, NoCancel]
  event MouseEvent dblclick;
  /**
   * The focus event fires when an element has received focus. The main difference between this event and focusin is that focusin bubbles while focus does not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event">focus event - MDN</a>
   */
  event FocusEvent focus;
  /**
   * The focusin event fires when an element is about to receive focus. The main difference between this event and focus is that focusin bubbles while focus does not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event">focusin event - MDN</a>
   */
  [NoBubble]
  event FocusEvent focusin;
  /**
   * The focusout event fires when an element is about to lose focus. The main difference between this event and blur is that focusout bubbles while blur does not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event">focusout event - MDN</a>
   */
  [NoBubble]
  event FocusEvent focusout;
  /**
   * The fullscreenchange event is fired immediately after an Element switches into or out of full-screen mode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event">fullscreenchange event - MDN</a>
   */
  [NoBubble]
  event Event fullscreenchange;
  /**
   * The fullscreenerror event is fired when the browser cannot switch to full-screen mode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event">fullscreenerror event - MDN</a>
   */
  [NoBubble]
  event Event fullscreenerror;
  /**
   * The mousedown event is fired at an Element when a pointing device button is pressed while the pointer is inside the element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event">mousedown event - MDN</a>
   */
  [NoBubble, NoCancel]
  event MouseEvent mousedown;
  /**
   * The mouseenter event is fired at an Element when a pointing device (usually a mouse) is initially moved so that its hotspot is within the element at which the event was fired.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event">mouseenter event - MDN</a>
   */
  event MouseEvent mouseenter;
  /**
   * The mouseleave event is fired at an Element when the cursor of a pointing device (usually a mouse) is moved out of it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event">mouseleave event - MDN</a>
   */
  event MouseEvent mouseleave;
  /**
   * The mousemove event is fired at an element when a pointing device (usually a mouse) is moved while the cursor's hotspot is inside it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event">mousemove event - MDN</a>
   */
  [NoBubble, NoCancel]
  event MouseEvent mousemove;
  /**
   * The mouseout event is fired at an Element when a pointing device (usually a mouse) is used to move the cursor so that it is no longer contained within the element or one of its children.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event">mouseout event - MDN</a>
   */
  [NoBubble, NoCancel]
  event MouseEvent mouseout;
  /**
   * The mouseover event is fired at an Element when a pointing device (such as a mouse or trackpad) is used to move the cursor onto the element or one of its child elements.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event">mouseover event - MDN</a>
   */
  [NoBubble, NoCancel]
  event MouseEvent mouseover;
  /**
   * The mouseup event is fired at an Element when a button on a pointing device (such as a mouse or trackpad) is released while the pointer is located inside it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event">mouseup event - MDN</a>
   */
  [NoBubble, NoCancel]
  event MouseEvent mouseup;
  /**
   * The paste event is fired when the user has initiated a "paste" action through the browser's user interface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event">paste event - MDN</a>
   */
  [NoBubble, NoCancel]
  event ClipboardEvent paste;
  /**
   * The scroll event fires an element has been scrolled.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event">scroll event - MDN</a>
   */
  event Event scroll;
  /**
   * The show event is fired when a contextmenu event was fired on/bubbled to an element that has a contextmenu attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/show_event">show event - MDN</a>
   */
  event Event show;
  /**
   * The touchcancel event is fired when one or more touch points have been disrupted in an implementation-specific manner (for example, too many touch points are created).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event">touchcancel event - MDN</a>
   */
  [NoBubble]
  event TouchEvent touchcancel;
  /**
   * The touchend event fires when one or more touch points are removed from the touch surface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event">touchend event - MDN</a>
   */
  [NoBubble, NoCancel]
  event TouchEvent touchend;
  /**
   * The touchmove event is fired when one or more touch points are moved along the touch surface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event">touchmove event - MDN</a>
   */
  [NoBubble, NoCancel]
  event TouchEvent touchmove;
  /**
   * The touchstart event is fired when one or more touch points are placed on the touch surface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event">touchstart event - MDN</a>
   */
  [NoBubble, NoCancel]
  event TouchEvent touchstart;
  /**
   * The non-standard webkitmouseforcechanged event is fired by Safari each time the amount of pressure changes on the trackpad/touchscreen.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/webkitmouseforcechanged_event">webkitmouseforcechanged event - MDN</a>
   */
  [NoBubble, NoCancel]
  event MouseEvent webkitmouseforcechanged;
  /**
   * After a mousedown event has been fired at the element, if and when sufficient pressure has been applied to the mouse or trackpad button to qualify as a "force click," Safari begins sending webkitmouseforcedown events to the element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/webkitmouseforcedown_event">webkitmouseforcedown event - MDN</a>
   */
  [NoBubble, NoCancel]
  event MouseEvent webkitmouseforcedown;
  /**
   * The non-standard webkitmouseforceup event is fired by Safari at an Element some time after the webkitmouseforcedown event, when pressure on the button has been reduced sufficiently to end the "force click".
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/webkitmouseforceup_event">webkitmouseforceup event - MDN</a>
   */
  [NoBubble, NoCancel]
  event MouseEvent webkitmouseforceup;
  /**
   * Safari for macOS fires the non-standard webkitmouseforcewillbegin event at an Element before firing the initial mousedown event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/webkitmouseforcewillbegin_event">webkitmouseforcewillbegin event - MDN</a>
   */
  [NoBubble, NoCancel]
  event MouseEvent webkitmouseforcewillbegin;
  /**
   * The wheel event fires when the user rotates a wheel button on a pointing device (typically a mouse).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event">wheel event - MDN</a>
   */
  [NoBubble, NoCancel]
  event WheelEvent wheel;
  /**
   * The ChildNode.after() method inserts a set of Node or DOMString objects in the children list of this ChildNode's parent, just after this ChildNode. DOMString objects are inserted as equivalent Text nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/after">ChildNode.after - MDN</a>
   */
  [CEReactions, Unscopable]
  void after( ( Node or DOMString )... nodes );
  /**
   * The Element interface's animate() method is a shortcut method which creates a new Animation, applies it to the element, then plays the animation. It returns the created Animation object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/animate">Element.animate - MDN</a>
   */
  Animation animate( object? keyframes, optional ( unrestricted double or KeyframeAnimationOptions ) options );
  /**
   * The ParentNode.append() method inserts a set of Node objects or DOMString objects after the last child of the ParentNode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append">ParentNode.append - MDN</a>
   */
  [CEReactions, Unscopable]
  void append( ( Node or DOMString )... nodes );
  /**
   * The Element.attachShadow() method attaches a shadow DOM tree to the specified element and returns a reference to its ShadowRoot.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow">Element.attachShadow - MDN</a>
   */
  ShadowRoot attachShadow( ShadowRootInit init );
  /**
   * The ChildNode.before() method inserts a set of Node or DOMString objects in the children list of this ChildNode's parent, just before this ChildNode. DOMString objects are inserted as equivalent Text nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/before">ChildNode.before - MDN</a>
   */
  [CEReactions, Unscopable]
  void before( ( Node or DOMString )... nodes );
  /**
   * For browsers that do not support Element.closest(), but carry support for element.matches() (or a prefixed equivalent, meaning IE9+), a polyfill exists:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/closest">Element.closest - MDN</a>
   */
  Element? closest( DOMString selectors );
  /**
   * The getAnimations() method of the Element interface (specified on the Animatable mixin) returns an array of all Animation objects affecting this element or which are scheduled to do so in future. It can optionally return Animation objects for descendant elements too.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getAnimations">Element.getAnimations - MDN</a>
   */
  sequence<Animation> getAnimations();
  /**
   * The getAttribute() method of the Element interface returns the value of a specified attribute on the element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute">Element.getAttribute - MDN</a>
   */
  DOMString? getAttribute( DOMString qualifiedName );
  /**
   * The getAttributeNS() method of the Element interface returns the string value of the attribute with the specified namespace and name. If the named attribute does not exist, the value returned will either be null or "" (the empty string); see Notes for details.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS">Element.getAttributeNS - MDN</a>
   */
  DOMString? getAttributeNS( DOMString? namespace, DOMString localName );
  /**
   * The getAttributeNames() method of the Element interface returns the attribute names of the element as an Array of strings. If the element has no attributes it returns an empty array.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames">Element.getAttributeNames - MDN</a>
   */
  sequence<DOMString> getAttributeNames();
  /**
   * Returns the specified attribute of the specified element, as an Attr node.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNode">Element.getAttributeNode - MDN</a>
   */
  Attr? getAttributeNode( DOMString qualifiedName );
  /**
   * Returns the Attr node for the attribute with the given namespace and name.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNodeNS">Element.getAttributeNodeNS - MDN</a>
   */
  Attr? getAttributeNodeNS( DOMString? namespace, DOMString localName );
  /**
   * The Element.getBoundingClientRect() method returns the size of an element and its position relative to the viewport.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect">Element.getBoundingClientRect - MDN</a>
   */
  [NewObject]
  DOMRect getBoundingClientRect();
  /**
   * The getClientRects() method of the Element interface returns a collection of DOMRect objects that indicate the bounding rectangles for each CSS border box in a client.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects">Element.getClientRects - MDN</a>
   */
  DOMRectList getClientRects();
  /**
   * The Element method getElementsByClassName() returns a live HTMLCollection which contains every descendant element which has the specified class name or names.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName">Element.getElementsByClassName - MDN</a>
   */
  HTMLCollection getElementsByClassName( DOMString classNames );
  /**
   * The Element.getElementsByTagName() method returns a live HTMLCollection of elements with the given tag name.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName">Element.getElementsByTagName - MDN</a>
   */
  HTMLCollection getElementsByTagName( DOMString qualifiedName );
  /**
   * The Element.getElementsByTagNameNS() method returns a live HTMLCollection of elements with the given tag name belonging to the given namespace. It is similar to Document.getElementsByTagNameNS, except that its search is restricted to descendants of the specified element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagNameNS">Element.getElementsByTagNameNS - MDN</a>
   */
  HTMLCollection getElementsByTagNameNS( DOMString? namespace, DOMString localName );
  /**
   * The Element.hasAttribute() method returns a Boolean value indicating whether the specified element has the specified attribute or not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute">Element.hasAttribute - MDN</a>
   */
  boolean hasAttribute( DOMString qualifiedName );
  /**
   * hasAttributeNS returns a boolean value indicating whether the current element has the specified attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS">Element.hasAttributeNS - MDN</a>
   */
  boolean hasAttributeNS( DOMString? namespace, DOMString localName );
  /**
   * The hasAttributes() method of the Element interface returns a Boolean indicating whether the current element has any attributes or not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes">Element.hasAttributes - MDN</a>
   */
  boolean hasAttributes();
  /**
   * The hasPointerCapture() method of the Element interface sets whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/hasPointerCapture">Element.hasPointerCapture - MDN</a>
   */
  boolean hasPointerCapture( long pointerId );
  /**
   * The insertAdjacentElement() method of the Element interface inserts a given element node at a given position relative to the element it is invoked upon.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement">Element.insertAdjacentElement - MDN</a>
   */
  [CEReactions]
  Element? insertAdjacentElement( DOMString where, Element element );
  /**
   * The insertAdjacentHTML() method of the Element interface parses the specified text as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position. It does not reparse the element it is being used on, and thus it does not corrupt the existing elements inside that element. This avoids the extra step of serialization, making it much faster than direct innerHTML manipulation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML">Element.insertAdjacentHTML - MDN</a>
   */
  [CEReactions]
  void insertAdjacentHTML( DOMString position, DOMString text );
  /**
   * The insertAdjacentText() method of the Element interface inserts a given text node at a given position relative to the element it is invoked upon.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText">Element.insertAdjacentText - MDN</a>
   */
  void insertAdjacentText( DOMString where, DOMString data );
  /**
   * The matches() method checks to see if the Element would be selected by the provided selectorString -- in other words -- checks if the element "is" the selector.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/matches">Element.matches - MDN</a>
   */
  boolean matches( DOMString selectors );
  /**
   * The ParentNode.prepend() method inserts a set of Node objects or DOMString objects before the first child of the ParentNode. DOMString objects are inserted as equivalent Text nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend">ParentNode.prepend - MDN</a>
   */
  [CEReactions, Unscopable]
  void prepend( ( Node or DOMString )... nodes );
  CSSPseudoElement? pseudo( CSSOMString type );
  /**
   * The querySelector() method of the Element interface returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector">Element.querySelector - MDN</a>
   */
  Element? querySelector( DOMString selectors );
  /**
   * The Element method querySelectorAll() returns a static (not live) NodeList representing a list of elements matching the specified group of selectors which are descendants of the element on which the method was called.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll">Element.querySelectorAll - MDN</a>
   */
  [NewObject]
  NodeList querySelectorAll( DOMString selectors );
  /**
   * The releasePointerCapture() method of the Element interface releases (stops) pointer capture that was previously set for a specific (PointerEvent) pointer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/releasePointerCapture">Element.releasePointerCapture - MDN</a>
   */
  void releasePointerCapture( long pointerId );
  /**
   * The ChildNode.remove() method removes the object from the tree it belongs to.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove">ChildNode.remove - MDN</a>
   */
  [CEReactions, Unscopable]
  void remove();
  /**
   * The Element method removeAttribute() removes the attribute with the specified name from the element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute">Element.removeAttribute - MDN</a>
   */
  [CEReactions]
  void removeAttribute( DOMString qualifiedName );
  /**
   * The removeAttributeNS() method of the Element interface removes the specified attribute from an element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS">Element.removeAttributeNS - MDN</a>
   */
  [CEReactions]
  void removeAttributeNS( DOMString? namespace, DOMString localName );
  /**
   * The removeAttributeNode() method of the Element object removes the specified attribute from the current element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNode">Element.removeAttributeNode - MDN</a>
   */
  [CEReactions]
  Attr removeAttributeNode( Attr attr );
  /**
   * The ParentNode.replaceChildren() method replaces the existing children of a Node with a specified new set of children. These can be DOMString or Node objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/replaceChildren">ParentNode.replaceChildren - MDN</a>
   */
  [CEReactions, Unscopable]
  void replaceChildren( ( Node or DOMString )... nodes );
  /**
   * The ChildNode.replaceWith() method replaces this ChildNode in the children list of its parent with a set of Node or DOMString objects. DOMString objects are inserted as equivalent Text nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith">ChildNode.replaceWith - MDN</a>
   */
  [CEReactions, Unscopable]
  void replaceWith( ( Node or DOMString )... nodes );
  /**
   * The Element.requestFullscreen() method issues an asynchronous request to make the element be displayed in full-screen mode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen">Element.requestFullscreen - MDN</a>
   */
  Promise<void> requestFullscreen( optional FullscreenOptions options = {} );
  /**
   * The Element.requestPointerLock() method lets you asynchronously ask for the pointer to be locked on the given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/requestPointerLock">Element.requestPointerLock - MDN</a>
   */
  void requestPointerLock();
  /**
   * The scroll() method of the Element interface scrolls the element to a particular set of coordinates inside a given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll">Element.scroll - MDN</a>
   */
  void scroll( optional ScrollToOptions options = {} );
  /**
   * The scroll() method of the Element interface scrolls the element to a particular set of coordinates inside a given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll">Element.scroll - MDN</a>
   */
  void scroll( unrestricted double x, unrestricted double y );
  /**
   * The scrollBy() method of the Element interface scrolls an element by the given amount.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy">Element.scrollBy - MDN</a>
   */
  void scrollBy( optional ScrollToOptions options = {} );
  /**
   * The scrollBy() method of the Element interface scrolls an element by the given amount.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy">Element.scrollBy - MDN</a>
   */
  void scrollBy( unrestricted double x, unrestricted double y );
  /**
   * The Element interface's scrollIntoView() method scrolls the element's parent container such that the element on which scrollIntoView() is called is visible to the user
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView">Element.scrollIntoView - MDN</a>
   */
  void scrollIntoView( optional ( boolean or ScrollIntoViewOptions ) arg = {} );
  /**
   * The scrollTo() method of the Element interface scrolls to a particular set of coordinates inside a given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo">Element.scrollTo - MDN</a>
   */
  void scrollTo( optional ScrollToOptions options = {} );
  /**
   * The scrollTo() method of the Element interface scrolls to a particular set of coordinates inside a given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo">Element.scrollTo - MDN</a>
   */
  void scrollTo( unrestricted double x, unrestricted double y );
  /**
   * Sets the value of an attribute on the specified element. If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified name and value.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute">Element.setAttribute - MDN</a>
   */
  [CEReactions]
  void setAttribute( DOMString qualifiedName, DOMString value );
  /**
   * setAttributeNS adds a new attribute or changes the value of an attribute with the given namespace and name.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS">Element.setAttributeNS - MDN</a>
   */
  [CEReactions]
  void setAttributeNS( DOMString? namespace, DOMString qualifiedName, DOMString value );
  /**
   * The setAttributeNode() method adds a new Attr node to the specified element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNode">Element.setAttributeNode - MDN</a>
   */
  [CEReactions]
  Attr? setAttributeNode( Attr attr );
  /**
   * setAttributeNodeNS adds a new namespaced attribute node to an element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNodeNS">Element.setAttributeNodeNS - MDN</a>
   */
  [CEReactions]
  Attr? setAttributeNodeNS( Attr attr );
  /**
   * The setPointerCapture() method of the Element interface is used to designate a specific element as the capture target of future pointer events. Subsequent events for the pointer will be targeted at the capture element until capture is released (via Element.releasePointerCapture()).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture">Element.setPointerCapture - MDN</a>
   */
  void setPointerCapture( long pointerId );
  /**
   * The toggleAttribute() method of the Element interface toggles a Boolean attribute (removing it if it is present and adding it if it is not present) on the given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute">Element.toggleAttribute - MDN</a>
   */
  [CEReactions]
  boolean toggleAttribute( DOMString qualifiedName, optional boolean force );
  boolean webkitMatchesSelector( DOMString selectors );
};

[Exposed=Window]
interface ElementInternals {
  readonly attribute HTMLFormElement? form;
  readonly attribute NodeList labels;
  readonly attribute DOMString validationMessage;
  readonly attribute ValidityState validity;
  readonly attribute boolean willValidate;
  boolean checkValidity();
  boolean reportValidity();
  void setFormValue( ( File or USVString or FormData )? value, optional ( File or USVString or FormData )? state );
  void setValidity( optional ValidityStateFlags flags = {}, optional DOMString message, optional HTMLElement anchor );
};

/**
 * The ErrorEvent interface represents events providing information related to errors in scripts or in files.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent">ErrorEvent - MDN</a>
 */
[Exposed=(Window,Worker)]
interface ErrorEvent : Event {
  readonly attribute unsigned long colno;
  readonly attribute any error;
  readonly attribute USVString filename;
  readonly attribute unsigned long lineno;
  readonly attribute DOMString message;
  constructor( DOMString type, optional ErrorEventInit eventInitDict = {} );
};

/**
 * The Event interface represents an event which takes place in the DOM.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event - MDN</a>
 */
[Exposed=(Window,Worker,AudioWorklet)]
interface Event {
  const unsigned short AT_TARGET = 2;
  const unsigned short BUBBLING_PHASE = 3;
  const unsigned short CAPTURING_PHASE = 1;
  const unsigned short NONE = 0;
  /**
   * The bubbles read-only property of the Event interface indicates whether the event bubbles up through the DOM or not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles">Event.bubbles - MDN</a>
   */
  readonly attribute boolean bubbles;
  /**
   * The cancelable read-only property of the Event interface indicates whether the event can be canceled, and therefore prevented as if the event never happened.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable">Event.cancelable - MDN</a>
   */
  readonly attribute boolean cancelable;
  /**
   * The read-only composed property of the Event interface returns a Boolean which indicates whether or not the event will propagate across the shadow DOM boundary into the standard DOM.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/composed">Event.composed - MDN</a>
   */
  readonly attribute boolean composed;
  /**
   * The currentTarget read-only property of the Event interface identifies the current target for the event, as the event traverses the DOM. It always refers to the element to which the event handler has been attached, as opposed to Event.target, which identifies the element on which the event occurred and which may be its descendant.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget">Event.currentTarget - MDN</a>
   */
  readonly attribute EventTarget? currentTarget;
  /**
   * The defaultPrevented read-only property of the Event interface returns a Boolean indicating whether or not the call to Event.preventDefault() canceled the event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented">Event.defaultPrevented - MDN</a>
   */
  readonly attribute boolean defaultPrevented;
  /**
   * The eventPhase read-only property of the Event interface indicates which phase of the event flow is currently being evaluated.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase">Event.eventPhase - MDN</a>
   */
  readonly attribute unsigned short eventPhase;
  /**
   * The isTrusted read-only property of the Event interface is a Boolean that is true when the event was generated by a user action, and false when the event was created or modified by a script or dispatched via EventTarget.dispatchEvent().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted">Event.isTrusted - MDN</a>
   */
  [LegacyUnforgeable]
  readonly attribute boolean isTrusted;
  /**
   * Initially implemented in Internet Explorer, Event.srcElement is a now-standard alias (defined in the DOM Standard but flagged as "historical") for the Event.target property. It's supported in all major browser engines, but only for compatibility reasons. Use Event.target instead.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/srcElement">Event.srcElement - MDN</a>
   */
  readonly attribute EventTarget? srcElement;
  /**
   * The target property of the Event interface is a reference to the object onto which the event was dispatched. It is different from Event.currentTarget when the event handler is called during the bubbling or capturing phase of the event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/target">Event.target - MDN</a>
   */
  readonly attribute EventTarget? target;
  /**
   * The timeStamp read-only property of the Event interface returns the time (in milliseconds) at which the event was created.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp">Event.timeStamp - MDN</a>
   */
  readonly attribute DOMHighResTimeStamp timeStamp;
  /**
   * The type read-only property of the Event interface returns a string containing the event's type. It is set when the event is constructed and is the name commonly used to refer to the specific event, such as click, load, or error.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/type">Event.type - MDN</a>
   */
  readonly attribute DOMString type;
  /**
   * The cancelBubble property of the Event interface is a historical alias to Event.stopPropagation(). Setting its value to true before returning from an event handler prevents propagation of the event. In later implementations, setting this to false does nothing. See Browser compatibility for details.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble">Event.cancelBubble - MDN</a>
   */
  attribute boolean cancelBubble;
  /**
   * The Event property returnValue indicates whether the default action for this event has been prevented or not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/returnValue">Event.returnValue - MDN</a>
   */
  attribute boolean returnValue;
  /**
   * The Event() constructor creates a new Event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/Event">Event.Event - MDN</a>
   */
  constructor( DOMString type, optional EventInit eventInitDict = {} );
  /**
   * The composedPath() method of the Event interface returns the event’s path which is an array of the objects on which listeners will be invoked. This does not include nodes in shadow trees if the shadow root was created with its ShadowRoot.mode closed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath">Event.composedPath - MDN</a>
   */
  sequence<EventTarget> composedPath();
  void initEvent( DOMString type, optional boolean bubbles = false, optional boolean cancelable = false );
  void preventDefault();
  void stopImmediatePropagation();
  void stopPropagation();
};

/**
 * The EventSource interface is web content's interface to server-sent events. An EventSource instance opens a persistent connection to an HTTP server, which sends events in text/event-stream format.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource">EventSource - MDN</a>
 */
[Exposed=(Window,Worker)]
interface EventSource : EventTarget {
  const unsigned short CLOSED = 2;
  const unsigned short CONNECTING = 0;
  const unsigned short OPEN = 1;
  /**
   * The readyState read-only property of the EventSource interface returns a number representing the state of the connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource/readyState">EventSource.readyState - MDN</a>
   */
  readonly attribute unsigned short readyState;
  /**
   * The url read-only property of the EventSource interface returns a DOMString representing the URL of the source.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource/url">EventSource.url - MDN</a>
   */
  readonly attribute USVString url;
  /**
   * The withCredentials read-only property of the EventSource interface returns a Boolean indicating whether the EventSource object was instantiated with CORS credentials set.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource/withCredentials">EventSource.withCredentials - MDN</a>
   */
  readonly attribute boolean withCredentials;
  /**
   * The onerror property of the EventSource interface is an EventHandler called when an error occurs and the error event is dispatched on an EventSource object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onerror">EventSource.onerror - MDN</a>
   */
  attribute NullableEventHandler onerror;
  /**
   * The onmessage property of the EventSource interface is an EventHandler called when a message event is received, that is when a message is coming from the source.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onmessage">EventSource.onmessage - MDN</a>
   */
  attribute NullableEventHandler onmessage;
  /**
   * The onopen property of the EventSource interface is an EventHandler called when an open event is received, that is when the connection was just opened.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onopen">EventSource.onopen - MDN</a>
   */
  attribute NullableEventHandler onopen;
  /**
   * The message event of the EventSource API is fired when data is received through an event source.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource/message_event">message event - MDN</a>
   */
  event MessageEvent message;
  /**
   * The open event of the EventSource API is fired when a connection with an event source is opened.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource/open_event">open event - MDN</a>
   */
  event Event open;
  /**
   * The EventSource() constructor returns a newly-created EventSource, which represents a remote resource.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource/EventSource">EventSource.EventSource - MDN</a>
   */
  constructor( USVString url, optional EventSourceInit eventSourceInitDict = {} );
  /**
   * The close() method of the EventSource interface closes the connection, if one is made, and sets the EventSource.readyState attribute to 2 (closed).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource/close">EventSource.close - MDN</a>
   */
  void close();
};

/**
 * EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget">EventTarget - MDN</a>
 */
[Exposed=(Window,Worker,AudioWorklet)]
interface EventTarget {
  /**
   * The EventTarget() constructor creates a new EventTarget object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/EventTarget">EventTarget.EventTarget - MDN</a>
   */
  constructor();
  /**
   * The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener">EventTarget.addEventListener - MDN</a>
   */
  void addEventListener( DOMString type, EventListener? callback, optional ( AddEventListenerOptions or boolean ) options = {} );
  /**
   * Dispatches an Event at the specified EventTarget, (synchronously) invoking the affected EventListeners in the appropriate order. The normal event processing rules (including the capturing and optional bubbling phase) also apply to events dispatched manually with dispatchEvent().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent">EventTarget.dispatchEvent - MDN</a>
   */
  boolean dispatchEvent( Event event );
  /**
   * The EventTarget.removeEventListener() method removes from the EventTarget an event listener previously registered with EventTarget.addEventListener(). The event listener to be removed is identified using a combination of the event type, the event listener function itself, and various optional options that may affect the matching process; see Matching event listeners for removal
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener">EventTarget.removeEventListener - MDN</a>
   */
  void removeEventListener( DOMString type, EventListener? callback, optional ( EventListenerOptions or boolean ) options = {} );
};

[Exposed=Window]
interface External {
  void AddSearchProvider();
  void IsSearchProviderInstalled();
};

/**
 * The FederatedCredential interface of the the Credential Management API provides information about credentials from a federated identity provider. A federated identity provider is an entity that a website trusts to correctly authenticate a user, and that provides an API for that purpose. OpenID Connect is an example of a federated identity provider framework.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential">FederatedCredential - MDN</a>
 */
[Exposed=Window, SecureContext]
interface FederatedCredential : Credential {
  readonly attribute USVString iconURL;
  readonly attribute USVString name;
  /**
   * The protocol property of the FederatedCredential interface returns a read-only DOMString containing a credential's federated identity protocol. If this property is null, the protocol may be inferred from the FederatedCredential.provider property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/protocol">FederatedCredential.protocol - MDN</a>
   */
  readonly attribute DOMString? protocol;
  /**
   * The provider property of the FederatedCredential interface returns a USVString containing a credential's federated identity provider.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/provider">FederatedCredential.provider - MDN</a>
   */
  readonly attribute USVString provider;
  /**
   * The FederatedCredential constructor creates a new FederatedCredential object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/FederatedCredential">FederatedCredential.FederatedCredential - MDN</a>
   */
  constructor( FederatedCredentialInit data );
};

/**
 * The File interface provides information about files and allows JavaScript in a web page to access their content.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/File">File - MDN</a>
 */
[Exposed=(Window,Worker), Serializable]
interface File : Blob {
  readonly attribute long long lastModified;
  readonly attribute DOMString name;
  /**
   * The File() constructor creates a new File object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/File/File">File.File - MDN</a>
   */
  constructor( sequence<BlobPart> fileBits, USVString fileName, optional FilePropertyBag options = {} );
};

/**
 * An object of this type is returned by the files property of the HTML input element; this lets you access the list of files selected with the input type="file" element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileList">FileList - MDN</a>
 */
[Exposed=(Window,Worker), Serializable]
interface FileList {
  readonly attribute unsigned long length;
  getter File? item( unsigned long index );
};

/**
 * The FileReader object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader">FileReader - MDN</a>
 */
[Exposed=(Window,Worker)]
interface FileReader : EventTarget {
  const unsigned short DONE = 2;
  const unsigned short EMPTY = 0;
  const unsigned short LOADING = 1;
  /**
   * The FileReader error property returns the error that occurred while reading the file.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/error">FileReader.error - MDN</a>
   */
  readonly attribute DOMException? error;
  /**
   * The FileReader readyState property provides the current state of the reading operation a FileReader is in. A FileReader exists in one of the following states:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readyState">FileReader.readyState - MDN</a>
   */
  readonly attribute unsigned short readyState;
  /**
   * The FileReader result property returns the file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/result">FileReader.result - MDN</a>
   */
  readonly attribute ( DOMString or ArrayBuffer )? result;
  /**
   * The FileReader.onabort property contains an event handler executed when the abort event is fired, i.e. when the process of reading the file is aborted.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onabort">FileReader.onabort - MDN</a>
   */
  attribute NullableEventHandler onabort;
  /**
   * The FileReader onerror handler receives an Event object, not an Error object, as a parameter, but an error can be accessed from the FileReader object, as instanceOfFileReader.error
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onerror">FileReader.onerror - MDN</a>
   */
  attribute NullableEventHandler onerror;
  /**
   * The FileReader.onload property contains an event handler executed when the load event is fired, when content read with readAsArrayBuffer, readAsBinaryString, readAsDataURL or readAsText is available.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onload">FileReader.onload - MDN</a>
   */
  attribute NullableEventHandler onload;
  attribute NullableEventHandler onloadend;
  attribute NullableEventHandler onloadstart;
  attribute NullableEventHandler onprogress;
  /**
   * The abort event is fired when a read has been aborted: for instance because the program called FileReader.abort().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/abort_event">abort event - MDN</a>
   */
  event ProgressEvent abort;
  /**
   * The error event is fired when the read failed due to an error (for example, because the file was not found or not readable).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/error_event">error event - MDN</a>
   */
  event ProgressEvent error;
  /**
   * The load event is fired when a file has been read successfully.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/load_event">load event - MDN</a>
   */
  event ProgressEvent load;
  /**
   * The loadend event is fired when a file read has completed, successfully or not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/loadend_event">loadend event - MDN</a>
   */
  event ProgressEvent loadend;
  /**
   * The loadstart event is fired when a file read operation has begun.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/loadstart_event">loadstart event - MDN</a>
   */
  event ProgressEvent loadstart;
  /**
   * The progress event is fired periodically as the FileReader reads data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/progress_event">progress event - MDN</a>
   */
  event ProgressEvent progress;
  /**
   * The FileReader() constructor creates a new FileReader.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/FileReader">FileReader.FileReader - MDN</a>
   */
  constructor();
  /**
   * The abort method aborts the read operation. Upon return, the readyState will be DONE.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/abort">FileReader.abort - MDN</a>
   */
  void abort();
  /**
   * The FileReader interface's readAsArrayBuffer() method is used to start reading the contents of a specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains an ArrayBuffer representing the file's data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsArrayBuffer">FileReader.readAsArrayBuffer - MDN</a>
   */
  void readAsArrayBuffer( Blob blob );
  /**
   * The readAsBinaryString method is used to start reading the contents of the specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains the raw binary data from the file.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsBinaryString">FileReader.readAsBinaryString - MDN</a>
   */
  void readAsBinaryString( Blob blob );
  /**
   * The readAsDataURL method is used to read the contents of the specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains the data as a data: URL representing the file's data as a base64 encoded string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL">FileReader.readAsDataURL - MDN</a>
   */
  void readAsDataURL( Blob blob );
  /**
   * The readAsText() method is used to read the contents of the specified Blob or File. When the read operation is complete, the readyState is changed to DONE, the loadend event is triggered, and the result property contains the contents of the file as a text string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsText">FileReader.readAsText - MDN</a>
   */
  void readAsText( Blob blob, optional DOMString encoding );
};

/**
 * The FocusEvent interface represents focus-related events, including focus, blur, focusin, and focusout.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent">FocusEvent - MDN</a>
 */
[Exposed=Window]
interface FocusEvent : UIEvent {
  /**
   * The FocusEvent.relatedTarget read-only property is the secondary target, depending on the type of event:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/relatedTarget">FocusEvent.relatedTarget - MDN</a>
   */
  readonly attribute EventTarget? relatedTarget;
  /**
   * The FocusEvent() constructor returns a newly created FocusEvent object with an optional EventTarget. When the event has both a source and a destination, the relatedTarget value must be set to the other target.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent">FocusEvent.FocusEvent - MDN</a>
   */
  constructor( DOMString type, optional FocusEventInit eventInitDict );
};

/**
 * The FormData interface provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to "multipart/form-data".
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData">FormData - MDN</a>
 */
[Exposed=(Window,Worker)]
interface FormData {
  iterable<USVString, FormDataEntryValue>;
  /**
   * The FormData() constructor creates a new FormData object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData">FormData.FormData - MDN</a>
   */
  constructor( optional HTMLFormElement form );
  /**
   * The append() method of the FormData interface appends a new value onto an existing key inside a FormData object, or adds the key if it does not already exist.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/append">FormData.append - MDN</a>
   */
  void append( USVString name, USVString value );
  /**
   * The append() method of the FormData interface appends a new value onto an existing key inside a FormData object, or adds the key if it does not already exist.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/append">FormData.append - MDN</a>
   */
  void append( USVString name, Blob blobValue, optional USVString filename );
  /**
   * The delete() method of the FormData interface deletes a key and its value(s) from a FormData object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/delete">FormData.delete - MDN</a>
   */
  void delete( USVString name );
  /**
   * The get() method of the FormData interface returns the first value associated with a given key from within a FormData object. If you expect multiple values and want all of them, use the getAll() method instead.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/get">FormData.get - MDN</a>
   */
  FormDataEntryValue? get( USVString name );
  /**
   * The getAll() method of the FormData interface returns all the values associated with a given key from within a FormData object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/getAll">FormData.getAll - MDN</a>
   */
  sequence<FormDataEntryValue> getAll( USVString name );
  /**
   * The has() method of the FormData interface returns a boolean stating whether a FormData object contains a certain key.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/has">FormData.has - MDN</a>
   */
  boolean has( USVString name );
  /**
   * The set() method of the FormData interface sets a new value for an existing key inside a FormData object, or adds the key/value if it does not already exist.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/set">FormData.set - MDN</a>
   */
  void set( USVString name, USVString value );
  /**
   * The set() method of the FormData interface sets a new value for an existing key inside a FormData object, or adds the key/value if it does not already exist.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/set">FormData.set - MDN</a>
   */
  void set( USVString name, Blob blobValue, optional USVString filename );
};

/**
 * The FormDataEvent interface represents a formdata event — such an event is fired on an HTMLFormElement object after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a FormData() constructor.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormDataEvent">FormDataEvent - MDN</a>
 */
[Exposed=Window]
interface FormDataEvent : Event {
  /**
   * The formData read only property of the FormDataEvent interface contains the FormData object representing the data contained in the form when the event was fired.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormDataEvent/formData">FormDataEvent.formData - MDN</a>
   */
  readonly attribute FormData formData;
  /**
   * The FormDataEvent() constructor creates a new FormDataEvent object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormDataEvent/FormDataEvent">FormDataEvent.FormDataEvent - MDN</a>
   */
  constructor( DOMString type, FormDataEventInit eventInitDict );
};

/**
 * The GainNode interface represents a change in volume. It is an AudioNode audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A GainNode always has exactly one input and one output, both with the same number of channels.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GainNode">GainNode - MDN</a>
 */
[Exposed=Window]
interface GainNode : AudioNode {
  /**
   * An AudioParam.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GainNode/gain">GainNode.gain - MDN</a>
   */
  readonly attribute AudioParam gain;
  /**
   * The GainNode() constructor of the Web Audio API creates a new GainNode object which an AudioNode that represents a change in volume.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GainNode/GainNode">GainNode.GainNode - MDN</a>
   */
  constructor( BaseAudioContext context, optional GainOptions options = {} );
};

/**
 * The Gamepad interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad">Gamepad - MDN</a>
 */
[Exposed=Window]
interface Gamepad {
  /**
   * The Gamepad.axes property of the Gamepad interface returns an array representing the controls with axes present on the device (e.g. analog thumb sticks).-
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/axes">Gamepad.axes - MDN</a>
   */
  readonly attribute FrozenArray<double> axes;
  /**
   * The Gamepad.buttons property of the Gamepad interface returns an array of gamepadButton objects representing the buttons present on the device.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/buttons">Gamepad.buttons - MDN</a>
   */
  readonly attribute FrozenArray<GamepadButton> buttons;
  /**
   * The Gamepad.connected property of the Gamepad interface returns a boolean indicating whether the gamepad is still connected to the system.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/connected">Gamepad.connected - MDN</a>
   */
  readonly attribute boolean connected;
  readonly attribute GamepadHand hand;
  readonly attribute FrozenArray<GamepadHapticActuator> hapticActuators;
  /**
   * The Gamepad.id property of the Gamepad interface returns a string containing some information about the controller.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/id">Gamepad.id - MDN</a>
   */
  readonly attribute DOMString id;
  /**
   * The Gamepad.index property of the Gamepad interface returns an integer that is auto-incremented to be unique for each device currently connected to the system.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/index">Gamepad.index - MDN</a>
   */
  readonly attribute long index;
  /**
   * The Gamepad.mapping property of the Gamepad interface returns a string indicating whether the browser has remapped the controls on the device to a known layout.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/mapping">Gamepad.mapping - MDN</a>
   */
  readonly attribute GamepadMappingType mapping;
  readonly attribute GamepadPose? pose;
  /**
   * The Gamepad.timestamp property of the Gamepad interface returns a DOMHighResTimeStamp representing the last time the data for this gamepad was updated.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/timestamp">Gamepad.timestamp - MDN</a>
   */
  readonly attribute DOMHighResTimeStamp timestamp;
};

/**
 * The GamepadButton interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton">GamepadButton - MDN</a>
 */
[Exposed=Window]
interface GamepadButton {
  /**
   * The GamepadButton.pressed property of the GamepadButton interface returns a boolean indicating whether the button is currently pressed (true) or unpressed (false).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton/pressed">GamepadButton.pressed - MDN</a>
   */
  readonly attribute boolean pressed;
  readonly attribute boolean touched;
  /**
   * The GamepadButton.value property of the GamepadButton interface returns a double value used to represent the current state of analog buttons on many modern gamepads, such as the triggers.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton/value">GamepadButton.value - MDN</a>
   */
  readonly attribute double value;
};

/**
 * The GamepadEvent interface of the Gamepad API contains references to gamepads connected to the system, which is what the gamepad events Window.gamepadconnected and Window.gamepaddisconnected are fired in response to.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent">GamepadEvent - MDN</a>
 */
[Exposed=Window]
interface GamepadEvent : Event {
  /**
   * The GamepadEvent.gamepad property of the GamepadEvent interface returns a Gamepad object, providing access to the associated gamepad data for fired gamepadconnected and gamepaddisconnected events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent/gamepad">GamepadEvent.gamepad - MDN</a>
   */
  [SameObject]
  readonly attribute Gamepad gamepad;
  /**
   * The GamepadEvent() constructor creates a new GamepadEvent object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent/GamepadEvent">GamepadEvent.GamepadEvent - MDN</a>
   */
  constructor( DOMString type, GamepadEventInit eventInitDict );
};

/**
 * The GamepadHapticActuator interface of the Gamepad API represents hardware in the controller designed to provide haptic feedback to the user (if available), most commonly vibration hardware.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadHapticActuator">GamepadHapticActuator - MDN</a>
 */
[Exposed=Window]
interface GamepadHapticActuator {
  /**
   * The type read-only property of the GamepadHapticActuator interface returns an enum representing the type of the haptic hardware.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadHapticActuator/type">GamepadHapticActuator.type - MDN</a>
   */
  readonly attribute GamepadHapticActuatorType type;
  /**
   * The pulse() method of the GamepadHapticActuator interface makes the hardware pulse at a certain intensity for a specified duration.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadHapticActuator/pulse">GamepadHapticActuator.pulse - MDN</a>
   */
  Promise<boolean> pulse( double value, double duration );
};

/**
 * The GamepadPose interface of the Gamepad API represents the pose of a WebVR controller at a given timestamp (which includes orientation, position, velocity, and acceleration information.)
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose">GamepadPose - MDN</a>
 */
[Exposed=Window]
interface GamepadPose {
  /**
   * The angularAcceleration read-only property of the GamepadPose interface returns an array representing the angular acceleration vector of the Gamepad, in meters per second per second.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/angularAcceleration">GamepadPose.angularAcceleration - MDN</a>
   */
  readonly attribute Float32Array? angularAcceleration;
  /**
   * The angularVelocity read-only property of the GamepadPose interface returns an array representing the angular velocity vector of the Gamepad, in radians per second.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/angularVelocity">GamepadPose.angularVelocity - MDN</a>
   */
  readonly attribute Float32Array? angularVelocity;
  /**
   * The hasOrientation read-only property of the GamepadPose interface returns a Boolean stating whether the Gamepad can track and return orientation information.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/hasOrientation">GamepadPose.hasOrientation - MDN</a>
   */
  readonly attribute boolean hasOrientation;
  /**
   * The hasPosition read-only property of the GamepadPose interface returns a Boolean stating whether the Gamepad can track and return position information.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/hasPosition">GamepadPose.hasPosition - MDN</a>
   */
  readonly attribute boolean hasPosition;
  /**
   * The linearAcceleration read-only property of the GamepadPose interface returns an array representing the linear acceleration vector of the Gamepad, in meters per second per second.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/linearAcceleration">GamepadPose.linearAcceleration - MDN</a>
   */
  readonly attribute Float32Array? linearAcceleration;
  /**
   * The linearVelocity read-only property of the GamepadPose interface returns an array representing the linear velocity vector of the Gamepad, in meters per second.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/linearVelocity">GamepadPose.linearVelocity - MDN</a>
   */
  readonly attribute Float32Array? linearVelocity;
  /**
   * The orientation read-only property of the GamepadPose interface returns the orientation of the Gamepad, as a quarternion value.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/orientation">GamepadPose.orientation - MDN</a>
   */
  readonly attribute Float32Array? orientation;
  /**
   * The position read-only property of the GamepadPose interface returns the position of the Gamepad as a 3D vector.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose/position">GamepadPose.position - MDN</a>
   */
  readonly attribute Float32Array? position;
};

/**
 * The Geolocation interface represents an object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation">Geolocation - MDN</a>
 */
[LegacyNoInterfaceObject]
interface Geolocation {
  /**
   * The Geolocation.clearWatch() method is used to unregister location/error monitoring handlers previously installed using Geolocation.watchPosition().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/clearWatch">Geolocation.clearWatch - MDN</a>
   */
  void clearWatch( long watchId );
  /**
   * The Geolocation.getCurrentPosition() method is used to get the current position of the device.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition">Geolocation.getCurrentPosition - MDN</a>
   */
  void getCurrentPosition( PositionCallback successCallback, optional PositionErrorCallback errorCallback, optional PositionOptions options );
  /**
   * The Geolocation method watchPosition() method is used to register a handler function that will be called automatically each time the position of the device changes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/watchPosition">Geolocation.watchPosition - MDN</a>
   */
  long watchPosition( PositionCallback successCallback, optional PositionErrorCallback errorCallback, optional PositionOptions options );
};

/**
 * A WebAssembly.Global object represents a global variable instance, accessible from both JavaScript and importable/exportable across one or more WebAssembly.Module instances. This allows dynamic linking of multiple modules.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global">WebAssembly.Global - MDN</a>
 */
[LegacyNamespace=WebAssembly, Exposed=(Window,Worker,Worklet)]
interface Global {
  attribute any value;
  constructor( GlobalDescriptor descriptor, optional any v );
  any valueOf();
};

[Exposed=Window, LegacyUnenumerableNamedProperties]
interface HTMLAllCollection {
  readonly attribute unsigned long length;
  ( HTMLCollection or Element )? item( optional DOMString nameOrIndex );
  getter ( HTMLCollection or Element )? namedItem( DOMString name );
  getter Element ( unsigned long index );
};

/**
 * The HTMLAnchorElement interface represents hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements. This interface corresponds to a element; not to be confused with link, which is represented by HTMLLinkElement)
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement">HTMLAnchorElement - MDN</a>
 */
[Exposed=Window]
interface HTMLAnchorElement : HTMLElement {
  readonly attribute USVString origin;
  /**
   * The HTMLAnchorElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the a element and the current document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/relList">HTMLAnchorElement.relList - MDN</a>
   */
  [SameObject, PutForwards=value]
  readonly attribute DOMTokenList relList;
  [CEReactions]
  attribute DOMString charset;
  [CEReactions]
  attribute DOMString coords;
  /**
   * The HTMLAnchorElement.download property is a DOMString indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value, if any, specifies the default file name for use in labeling the resource in a local file system. If the name is not a valid file name in the underlying OS, the browser will adjust it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/download">HTMLAnchorElement.download - MDN</a>
   */
  [CEReactions]
  attribute DOMString download;
  [CEReactions]
  attribute USVString hash;
  [CEReactions]
  attribute USVString host;
  [CEReactions]
  attribute USVString hostname;
  [CEReactions]
  attribute DOMString hreflang;
  [CEReactions]
  attribute DOMString name;
  [CEReactions]
  attribute USVString password;
  [CEReactions]
  attribute USVString pathname;
  [CEReactions]
  attribute USVString ping;
  [CEReactions]
  attribute USVString port;
  [CEReactions]
  attribute USVString protocol;
  /**
   * The HTMLAnchorElement.referrerPolicy property reflect the HTML referrerpolicy attribute of the a element defining which referrer is sent when fetching the resource.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/referrerPolicy">HTMLAnchorElement.referrerPolicy - MDN</a>
   */
  [CEReactions]
  attribute DOMString referrerPolicy;
  /**
   * The HTMLAnchorElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the a element and the current document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/rel">HTMLAnchorElement.rel - MDN</a>
   */
  [CEReactions]
  attribute DOMString rel;
  [CEReactions]
  attribute DOMString rev;
  [CEReactions]
  attribute USVString search;
  [CEReactions]
  attribute DOMString shape;
  [CEReactions]
  attribute DOMString target;
  [CEReactions]
  attribute DOMString text;
  [CEReactions]
  attribute DOMString type;
  [CEReactions]
  attribute USVString username;
  [CEReactions]
  stringifier attribute USVString href;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLAreaElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of area elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement">HTMLAreaElement - MDN</a>
 */
[Exposed=Window]
interface HTMLAreaElement : HTMLElement {
  readonly attribute USVString origin;
  /**
   * The HTMLAreaElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the area element and the current document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/relList">HTMLAreaElement.relList - MDN</a>
   */
  [SameObject, PutForwards=value]
  readonly attribute DOMTokenList relList;
  [CEReactions]
  attribute DOMString alt;
  [CEReactions]
  attribute DOMString coords;
  [CEReactions]
  attribute DOMString download;
  [CEReactions]
  attribute USVString hash;
  [CEReactions]
  attribute USVString host;
  [CEReactions]
  attribute USVString hostname;
  [CEReactions]
  attribute boolean noHref;
  [CEReactions]
  attribute USVString password;
  [CEReactions]
  attribute USVString pathname;
  [CEReactions]
  attribute USVString ping;
  [CEReactions]
  attribute USVString port;
  [CEReactions]
  attribute USVString protocol;
  /**
   * The HTMLAreaElement.referrerPolicy property reflect the HTML referrerpolicy attribute of the area element defining which referrer is sent when fetching the resource.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/referrerPolicy">HTMLAreaElement.referrerPolicy - MDN</a>
   */
  [CEReactions]
  attribute DOMString referrerPolicy;
  /**
   * The HTMLAreaElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the area element and the current document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/rel">HTMLAreaElement.rel - MDN</a>
   */
  [CEReactions]
  attribute DOMString rel;
  [CEReactions]
  attribute USVString search;
  [CEReactions]
  attribute DOMString shape;
  [CEReactions]
  attribute DOMString target;
  [CEReactions]
  attribute USVString username;
  [CEReactions]
  stringifier attribute USVString href;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLAudioElement interface provides access to the properties of audio elements, as well as methods to manipulate them.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">HTMLAudioElement - MDN</a>
 */
[Exposed=Window, LegacyFactoryFunction=Audio( optional DOMString src )]
interface HTMLAudioElement : HTMLMediaElement {
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLBRElement interface represents a HTML line break element (br). It inherits from HTMLElement.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement">HTMLBRElement - MDN</a>
 */
[Exposed=Window]
interface HTMLBRElement : HTMLElement {
  [CEReactions]
  attribute DOMString clear;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLBaseElement interface contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement">HTMLBaseElement - MDN</a>
 */
[Exposed=Window]
interface HTMLBaseElement : HTMLElement {
  [CEReactions]
  attribute USVString href;
  [CEReactions]
  attribute DOMString target;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLBodyElement interface provides special properties (beyond those inherited from the regular HTMLElement interface) for manipulating body elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement">HTMLBodyElement - MDN</a>
 */
[Exposed=Window]
interface HTMLBodyElement : HTMLElement {
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString aLink;
  [CEReactions]
  attribute DOMString background;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString bgColor;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString link;
  /**
   * The onafterprint property of the WindowEventHandlers mixin is the EventHandler for processing afterprint events for the current window. These events are raised after the user prints, or if they abort the print dialog.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint">WindowEventHandlers.onafterprint - MDN</a>
   */
  attribute NullableEventHandler onafterprint;
  /**
   * The onbeforeprint property of the WindowEventHandlers mixin is the EventHandler for processing beforeprint events for the current window. These events are raised before the print dialog window is opened.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeprint">WindowEventHandlers.onbeforeprint - MDN</a>
   */
  attribute NullableEventHandler onbeforeprint;
  /**
   * The onbeforeunload property of the WindowEventHandlers mixin is the EventHandler for processing beforeunload events. These events fire when a window is about to unload its resources. At this point, the document is still visible and the event is still cancelable.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload">WindowEventHandlers.onbeforeunload - MDN</a>
   */
  attribute NullableOnBeforeUnloadEventHandler onbeforeunload;
  /**
   * The WindowEventHandlers.onhashchange property of the WindowEventHandlers mixin is the EventHandler for processing hashchange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange">WindowEventHandlers.onhashchange - MDN</a>
   */
  attribute NullableEventHandler onhashchange;
  /**
   * The onlanguagechange property of the WindowEventHandlers mixin is the EventHandler for processing languagechange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange">WindowEventHandlers.onlanguagechange - MDN</a>
   */
  attribute NullableEventHandler onlanguagechange;
  /**
   * The onmessage property of the WindowEventHandlers mixin is the EventHandler called whenever an object receives a message event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessage">WindowEventHandlers.onmessage - MDN</a>
   */
  attribute NullableEventHandler onmessage;
  /**
   * The onmessageerror event handler of the WindowEventHandlers interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on a window—that is, when it receives a message that cannot be deserialized.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessageerror">WindowEventHandlers.onmessageerror - MDN</a>
   */
  attribute NullableEventHandler onmessageerror;
  attribute NullableEventHandler onoffline;
  attribute NullableEventHandler ononline;
  attribute NullableEventHandler onorientationchange;
  attribute NullableEventHandler onpagehide;
  attribute NullableEventHandler onpageshow;
  /**
   * The onpopstate property of the WindowEventHandlers mixin is the EventHandler for processing popstate events on the window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate">WindowEventHandlers.onpopstate - MDN</a>
   */
  attribute NullableEventHandler onpopstate;
  /**
   * The onrejectionhandled property of the WindowEventHandlers mixin is the EventHandler for processing rejectionhandled events. These events are raised when Promises are rejected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled">WindowEventHandlers.onrejectionhandled - MDN</a>
   */
  attribute NullableEventHandler onrejectionhandled;
  /**
   * The onstorage property of the WindowEventHandlers mixin is an EventHandler for processing storage events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage">WindowEventHandlers.onstorage - MDN</a>
   */
  attribute NullableEventHandler onstorage;
  /**
   * The onunhandledrejection property of the WindowEventHandlers mixin is the EventHandler for processing unhandledrejection events. These events are raised for unhandled Promise rejections.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection">WindowEventHandlers.onunhandledrejection - MDN</a>
   */
  attribute NullableEventHandler onunhandledrejection;
  /**
   * The onunload property of the WindowEventHandlers mixin is the EventHandler for processing unload events. These events fire when the window is unloading its content and resources. The resource removal is processed after the unload event occurs.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload">WindowEventHandlers.onunload - MDN</a>
   */
  attribute NullableEventHandler onunload;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString text;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString vLink;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLButtonElement interface provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating button elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement">HTMLButtonElement - MDN</a>
 */
[Exposed=Window]
interface HTMLButtonElement : HTMLElement {
  readonly attribute HTMLFormElement? form;
  /**
   * The HTMLButtonElement.labels read-only property returns a NodeList of the label elements associated with the button element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/labels">HTMLButtonElement.labels - MDN</a>
   */
  readonly attribute NodeList labels;
  readonly attribute DOMString validationMessage;
  readonly attribute ValidityState validity;
  readonly attribute boolean willValidate;
  /**
   * Is a Boolean indicating whether or not the control is disabled, meaning that it does not accept any clicks.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/disabled">HTMLButtonElement.disabled - MDN</a>
   */
  [CEReactions]
  attribute boolean disabled;
  [CEReactions]
  attribute USVString formAction;
  [CEReactions]
  attribute DOMString formEnctype;
  [CEReactions]
  attribute DOMString formMethod;
  [CEReactions]
  attribute boolean formNoValidate;
  [CEReactions]
  attribute DOMString formTarget;
  [CEReactions]
  attribute DOMString name;
  [CEReactions]
  attribute DOMString type;
  [CEReactions]
  attribute DOMString value;
  [HTMLConstructor]
  constructor();
  boolean checkValidity();
  boolean reportValidity();
  void setCustomValidity( DOMString error );
};

/**
 * The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of canvas elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement">HTMLCanvasElement - MDN</a>
 */
[Exposed=Window]
interface HTMLCanvasElement : HTMLElement {
  /**
   * The HTMLCanvasElement.height property is a positive integer reflecting the height HTML attribute of the canvas element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height">HTMLCanvasElement.height - MDN</a>
   */
  [CEReactions]
  attribute unsigned long height;
  /**
   * The HTMLCanvasElement.width property is a positive integer reflecting the width HTML attribute of the canvas element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width">HTMLCanvasElement.width - MDN</a>
   */
  [CEReactions]
  attribute unsigned long width;
  /**
   *
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextcreationerror_event">webglcontextcreationerror event - MDN</a>
   */
  [NoBubble, NoCancel]
  event WebGLContextEvent webglcontextcreationerror;
  /**
   * With the help of the WEBGL_lose_context extension, you can simulate the webglcontextlost event:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextlost_event">webglcontextlost event - MDN</a>
   */
  [NoBubble, NoCancel]
  event WebGLContextEvent webglcontextlost;
  /**
   * With the help of the WEBGL_lose_context extension, you can simulate the webglcontextrestored event:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextrestored_event">webglcontextrestored event - MDN</a>
   */
  [NoBubble, NoCancel]
  event WebGLContextEvent webglcontextrestored;
  [HTMLConstructor]
  constructor();
  /**
   * The HTMLCanvasElement.getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext">HTMLCanvasElement.getContext - MDN</a>
   */
  RenderingContext? getContext( DOMString contextId, optional any options = null );
  /**
   * The HTMLCanvasElement.toBlob() method creates a Blob object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent. If type is not specified, the image type is image/png. The created image is in a resolution of 96dpi.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob">HTMLCanvasElement.toBlob - MDN</a>
   */
  void toBlob( BlobCallback _callback, optional DOMString type = "image/png", optional any quality );
  /**
   * The HTMLCanvasElement.toDataURL() method returns a data URI containing a representation of the image in the format specified by the type parameter (defaults to PNG). The returned image is in a resolution of 96 dpi.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL">HTMLCanvasElement.toDataURL - MDN</a>
   */
  USVString toDataURL( optional DOMString type = "image/png", optional any quality );
  /**
   * The HTMLCanvasElement.transferControlToOffscreen() method transfers control to an OffscreenCanvas object, either on the main thread or on a worker.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen">HTMLCanvasElement.transferControlToOffscreen - MDN</a>
   */
  OffscreenCanvas transferControlToOffscreen();
};

/**
 * The HTMLCollection interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection">HTMLCollection - MDN</a>
 */
[Exposed=Window, LegacyUnenumerableNamedProperties]
interface HTMLCollection {
  readonly attribute unsigned long length;
  /**
   * The HTMLCollection method item() returns the node located at the specified offset into the collection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/item">HTMLCollection.item - MDN</a>
   */
  getter Element? item( unsigned long index );
  getter Element? namedItem( DOMString name );
};

/**
 * The HTMLDListElement interface provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list (dl) elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement">HTMLDListElement - MDN</a>
 */
[Exposed=Window]
interface HTMLDListElement : HTMLElement {
  [CEReactions]
  attribute boolean compact;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLDataElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating data elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement">HTMLDataElement - MDN</a>
 */
[Exposed=Window]
interface HTMLDataElement : HTMLElement {
  /**
   * The value property of the HTMLDataElement interface returns a DOMString reflecting the value HTML attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement/value">HTMLDataElement.value - MDN</a>
   */
  [CEReactions]
  attribute DOMString value;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLDataListElement interface provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate datalist elements and their content.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement">HTMLDataListElement - MDN</a>
 */
[Exposed=Window]
interface HTMLDataListElement : HTMLElement {
  [SameObject]
  readonly attribute HTMLCollection options;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLDetailsElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating details elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement">HTMLDetailsElement - MDN</a>
 */
[Exposed=Window]
interface HTMLDetailsElement : HTMLElement {
  [CEReactions]
  attribute boolean open;
  /**
   * The toggle event fires when the open/closed state of a details element is toggled.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement/toggle_event">toggle event - MDN</a>
   */
  event Event toggle;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLDialogElement interface provides methods to manipulate dialog elements. It inherits properties and methods from the HTMLElement interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement">HTMLDialogElement - MDN</a>
 */
[Exposed=Window]
interface HTMLDialogElement : HTMLElement {
  /**
   * A Boolean representing the state of the open HTML attribute. true means it is set, and therefore the dialog is shown. false means it not set, and therefore the dialog is not shown.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/open">HTMLDialogElement.open - MDN</a>
   */
  [CEReactions]
  attribute boolean open;
  /**
   * The returnValue property of the HTMLDialogElement interface gets or sets the return value for the dialog, usually to indicate which button the user pressed to close it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/returnValue">HTMLDialogElement.returnValue - MDN</a>
   */
  attribute DOMString returnValue;
  /**
   * The close event is fired on an HTMLDialogElement object when the dialog it represents has been closed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/close_event">close event - MDN</a>
   */
  event Event close;
  [HTMLConstructor]
  constructor();
  /**
   * Void.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/close">HTMLDialogElement.close - MDN</a>
   */
  [CEReactions]
  void close( optional DOMString returnValue );
  /**
   * The show() method of the HTMLDialogElement interface displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/show">HTMLDialogElement.show - MDN</a>
   */
  [CEReactions]
  void show();
  /**
   * The showModal() method of the HTMLDialogElement interface displays the dialog as a modal, over the top of any other dialogs that might be present. It displays into the top layer, along with a ::backdrop pseudo-element. Interaction outside the dialog is blocked and the content outside it is rendered inert.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal">HTMLDialogElement.showModal - MDN</a>
   */
  [CEReactions]
  void showModal();
};

[Exposed=Window]
interface HTMLDirectoryElement : HTMLElement {
  [CEReactions]
  attribute boolean compact;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLDivElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating div elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement">HTMLDivElement - MDN</a>
 */
[Exposed=Window]
interface HTMLDivElement : HTMLElement {
  [CEReactions]
  attribute DOMString align;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLElement interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement">HTMLElement - MDN</a>
 */
[Exposed=Window]
interface HTMLElement : Element {
  /**
   * The HTMLElement.accessKeyLabel read-only property returns a String that represents the element's assigned access key (if any); otherwise it returns an empty string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKeyLabel">HTMLElement.accessKeyLabel - MDN</a>
   */
  readonly attribute DOMString accessKeyLabel;
  [SameObject]
  readonly attribute DOMStringMap dataset;
  /**
   * The HTMLElement.isContentEditable read-only property returns a Boolean that is true if the contents of the element are editable; otherwise it returns false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/isContentEditable">HTMLElement.isContentEditable - MDN</a>
   */
  readonly attribute boolean isContentEditable;
  /**
   * The HTMLElement.offsetHeight read-only property returns the height of an element, including vertical padding and borders, as an integer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight">HTMLElement.offsetHeight - MDN</a>
   */
  readonly attribute long offsetHeight;
  /**
   * The HTMLElement.offsetLeft read-only property returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetLeft">HTMLElement.offsetLeft - MDN</a>
   */
  readonly attribute long offsetLeft;
  /**
   * The HTMLElement.offsetParent read-only property returns a reference to the element which is the closest (nearest in the containment hierarchy) positioned ancestor element. If there is no positioned ancestor element, the nearest ancestor td, th, table will be returned, or the body if there are no ancestor table elements either.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent">HTMLElement.offsetParent - MDN</a>
   */
  readonly attribute Element? offsetParent;
  /**
   * The HTMLElement.offsetTop read-only property returns the distance of the current element relative to the top of the offsetParent node.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetTop">HTMLElement.offsetTop - MDN</a>
   */
  readonly attribute long offsetTop;
  /**
   * The HTMLElement.offsetWidth read-only property returns the layout width of an element as an integer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth">HTMLElement.offsetWidth - MDN</a>
   */
  readonly attribute long offsetWidth;
  /**
   * The style property is used to get as well as set the inline style of an element. When getting, it returns a CSSStyleDeclaration object that contains a list of all styles properties for that element with values assigned for the attributes that are defined in the element's inline style attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style">HTMLElement.style - MDN</a>
   */
  [SameObject, PutForwards=cssText]
  readonly attribute CSSStyleDeclaration style;
  [CEReactions]
  attribute DOMString accessKey;
  [CEReactions]
  attribute DOMString autocapitalize;
  [CEReactions]
  attribute boolean autofocus;
  /**
   * The contentEditable property of the HTMLElement interface specifies whether or not the element is editable.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable">HTMLElement.contentEditable - MDN</a>
   */
  [CEReactions]
  attribute DOMString contentEditable;
  /**
   * The HTMLElement.dir property gets or sets the text writing directionality of the content of the current element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir">HTMLElement.dir - MDN</a>
   */
  [CEReactions]
  attribute DOMString dir;
  [CEReactions]
  attribute boolean draggable;
  [CEReactions]
  attribute DOMString enterKeyHint;
  /**
   * The HTMLElement property hidden is a Boolean which is true if the element is hidden; otherwise the value is false. This is quite different from using the CSS property display to control the visibility of an element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden">HTMLElement.hidden - MDN</a>
   */
  [CEReactions]
  attribute boolean hidden;
  /**
   * The innerText property of the HTMLElement interface represents the "rendered" text content of a node and its descendants.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText">HTMLElement.innerText - MDN</a>
   */
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString innerText;
  [CEReactions]
  attribute DOMString inputMode;
  /**
   * The HTMLElement.lang property gets or sets the base language of an element's attribute values and text content.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang">HTMLElement.lang - MDN</a>
   */
  [CEReactions]
  attribute DOMString lang;
  attribute DOMString nonce;
  /**
   * The onabort property of the GlobalEventHandlers mixin is the EventHandler for processing abort events sent to the window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort">GlobalEventHandlers.onabort - MDN</a>
   */
  attribute NullableEventHandler onabort;
  /**
   * The onanimationcancel property of the GlobalEventHandlers mixin is the EventHandler for processing animationcancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationcancel">GlobalEventHandlers.onanimationcancel - MDN</a>
   */
  attribute NullableEventHandler onanimationcancel;
  /**
   * The onanimationend property of the GlobalEventHandlers mixin is the EventHandler for processing animationend events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend">GlobalEventHandlers.onanimationend - MDN</a>
   */
  attribute NullableEventHandler onanimationend;
  /**
   * The onanimationiteration property of the GlobalEventHandlers mixin is the EventHandler for processing animationiteration events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationiteration">GlobalEventHandlers.onanimationiteration - MDN</a>
   */
  attribute NullableEventHandler onanimationiteration;
  /**
   * An event handler for the animationstart event. This event is sent when a CSS Animation starts to play.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationstart">GlobalEventHandlers.onanimationstart - MDN</a>
   */
  attribute NullableEventHandler onanimationstart;
  /**
   * The onauxclick property of the GlobalEventHandlers mixin is an EventHandler for processing auxclick events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onauxclick">GlobalEventHandlers.onauxclick - MDN</a>
   */
  attribute NullableEventHandler onauxclick;
  /**
   * The onblur property of the GlobalEventHandlers mixin is the EventHandler for processing blur events. It's available on Element, Document, and Window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur">GlobalEventHandlers.onblur - MDN</a>
   */
  attribute NullableEventHandler onblur;
  /**
   * The oncancel property of the GlobalEventHandlers mixin is an EventHandler for processing cancel events sent to a dialog element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncancel">GlobalEventHandlers.oncancel - MDN</a>
   */
  attribute NullableEventHandler oncancel;
  /**
   * The oncanplay property of the GlobalEventHandlers mixin is the EventHandler for processing canplay events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplay">GlobalEventHandlers.oncanplay - MDN</a>
   */
  attribute NullableEventHandler oncanplay;
  /**
   * The oncanplaythrough property of the GlobalEventHandlers mixin is the EventHandler for processing canplaythrough events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough">GlobalEventHandlers.oncanplaythrough - MDN</a>
   */
  attribute NullableEventHandler oncanplaythrough;
  /**
   * The onchange property of the GlobalEventHandlers mixin is an EventHandler for processing change events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange">GlobalEventHandlers.onchange - MDN</a>
   */
  attribute NullableEventHandler onchange;
  /**
   * The onclick property of the GlobalEventHandlers mixin is the EventHandler for processing click events on a given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick">GlobalEventHandlers.onclick - MDN</a>
   */
  attribute NullableEventHandler onclick;
  /**
   * The onclose property of the GlobalEventHandlers mixin is an EventHandler for processing close events sent to a dialog element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose">GlobalEventHandlers.onclose - MDN</a>
   */
  attribute NullableEventHandler onclose;
  /**
   * The oncontextmenu property of the GlobalEventHandlers mixin is an EventHandler that processes contextmenu events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu">GlobalEventHandlers.oncontextmenu - MDN</a>
   */
  attribute NullableEventHandler oncontextmenu;
  attribute NullableEventHandler oncopy;
  /**
   * The oncuechange property of the GlobalEventHandlers mixin is the EventHandler for processing cuechange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncuechange">GlobalEventHandlers.oncuechange - MDN</a>
   */
  attribute NullableEventHandler oncuechange;
  attribute NullableEventHandler oncut;
  /**
   * The ondblclick property of the GlobalEventHandlers mixin is an EventHandler that processes dblclick events on the given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick">GlobalEventHandlers.ondblclick - MDN</a>
   */
  attribute NullableEventHandler ondblclick;
  /**
   * A global event handler for the drag event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondrag">GlobalEventHandlers.ondrag - MDN</a>
   */
  attribute NullableEventHandler ondrag;
  /**
   * A global event handler for the dragend event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragend">GlobalEventHandlers.ondragend - MDN</a>
   */
  attribute NullableEventHandler ondragend;
  /**
   * A global event handler for the dragenter event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragenter">GlobalEventHandlers.ondragenter - MDN</a>
   */
  attribute NullableEventHandler ondragenter;
  /**
   * The GlobalEventHandler.ondragexit property is an event handler for the dragexit event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragexit">GlobalEventHandlers.ondragexit - MDN</a>
   */
  attribute NullableEventHandler ondragexit;
  /**
   * A global event handler for the dragleave event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragleave">GlobalEventHandlers.ondragleave - MDN</a>
   */
  attribute NullableEventHandler ondragleave;
  /**
   * A global event handler for the dragover event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragover">GlobalEventHandlers.ondragover - MDN</a>
   */
  attribute NullableEventHandler ondragover;
  /**
   * A global event handler for the dragstart event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragstart">GlobalEventHandlers.ondragstart - MDN</a>
   */
  attribute NullableEventHandler ondragstart;
  /**
   * A global event handler for the drop event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondrop">GlobalEventHandlers.ondrop - MDN</a>
   */
  attribute NullableEventHandler ondrop;
  /**
   * The ondurationchange property of the GlobalEventHandlers mixin is the EventHandler for processing durationchange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondurationchange">GlobalEventHandlers.ondurationchange - MDN</a>
   */
  attribute NullableEventHandler ondurationchange;
  /**
   * The onemptied property sets and returns the event handler for the emptied event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onemptied">GlobalEventHandlers.onemptied - MDN</a>
   */
  attribute NullableEventHandler onemptied;
  /**
   * The onended property of the GlobalEventHandlers mixin is the EventHandler for processing ended events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onended">GlobalEventHandlers.onended - MDN</a>
   */
  attribute NullableEventHandler onended;
  /**
   * The onerror property of the GlobalEventHandlers mixin is an EventHandler that processes error events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror">GlobalEventHandlers.onerror - MDN</a>
   */
  attribute NullableOnErrorEventHandler onerror;
  /**
   * The onfocus property of the GlobalEventHandlers mixin is an EventHandler that processes focus events on the given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus">GlobalEventHandlers.onfocus - MDN</a>
   */
  attribute NullableEventHandler onfocus;
  /**
   * The onformdata property of the GlobalEventHandlers mixin is the EventHandler for processing formdata events, fired after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a FormData() constructor. onformdata is available on HTMLFormElement.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onformdata">GlobalEventHandlers.onformdata - MDN</a>
   */
  attribute NullableEventHandler onformdata;
  /**
   * The ongotpointercapture property of the GlobalEventHandlers mixin is an EventHandler that processes gotpointercapture events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ongotpointercapture">GlobalEventHandlers.ongotpointercapture - MDN</a>
   */
  attribute NullableEventHandler ongotpointercapture;
  /**
   * The oninput property of the GlobalEventHandlers mixin is an EventHandler that processes input events on the input, select, and textarea elements. It also handles these events on elements where contenteditable or designMode are turned on.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput">GlobalEventHandlers.oninput - MDN</a>
   */
  attribute NullableEventHandler oninput;
  /**
   * The oninvalid property of the GlobalEventHandlers mixin is an EventHandler that processes invalid events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninvalid">GlobalEventHandlers.oninvalid - MDN</a>
   */
  attribute NullableEventHandler oninvalid;
  /**
   * The onkeydown property of the GlobalEventHandlers mixin is an EventHandler that processes keydown events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown">GlobalEventHandlers.onkeydown - MDN</a>
   */
  attribute NullableEventHandler onkeydown;
  /**
   * The onkeypress property of the GlobalEventHandlers mixin is an EventHandler that processes keypress events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress">GlobalEventHandlers.onkeypress - MDN</a>
   */
  attribute NullableEventHandler onkeypress;
  /**
   * The onkeyup property of the GlobalEventHandlers mixin is an EventHandler that processes keyup events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup">GlobalEventHandlers.onkeyup - MDN</a>
   */
  attribute NullableEventHandler onkeyup;
  /**
   * The onload property of the GlobalEventHandlers mixin is an EventHandler that processes load events on a Window, XMLHttpRequest, img element, etc.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload">GlobalEventHandlers.onload - MDN</a>
   */
  attribute NullableEventHandler onload;
  /**
   * The onloadeddata property of the GlobalEventHandlers mixin is the EventHandler for processing loadeddata events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadeddata">GlobalEventHandlers.onloadeddata - MDN</a>
   */
  attribute NullableEventHandler onloadeddata;
  /**
   * The onloadedmetadata property of the GlobalEventHandlers mixin is the EventHandler for processing loadedmetadata events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadedmetadata">GlobalEventHandlers.onloadedmetadata - MDN</a>
   */
  attribute NullableEventHandler onloadedmetadata;
  /**
   * The onloadstart property of the GlobalEventHandlers mixin is an EventHandler representing the code to be called when the loadstart event is raised (when progress has begun on the loading of a resource.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart">GlobalEventHandlers.onloadstart - MDN</a>
   */
  attribute NullableEventHandler onloadstart;
  /**
   * The onlostpointercapture property of the GlobalEventHandlers mixin is an EventHandler that processes lostpointercapture events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onlostpointercapture">GlobalEventHandlers.onlostpointercapture - MDN</a>
   */
  attribute NullableEventHandler onlostpointercapture;
  /**
   * The onmousedown property of the GlobalEventHandlers mixin is an EventHandler that processes mousedown events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown">GlobalEventHandlers.onmousedown - MDN</a>
   */
  attribute NullableEventHandler onmousedown;
  /**
   * The onmouseenter property of the GlobalEventHandlers mixin is the EventHandler for processing mouseenter events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseenter">GlobalEventHandlers.onmouseenter - MDN</a>
   */
  [LegacyLenientThis]
  attribute NullableEventHandler onmouseenter;
  /**
   * The onmouseleave property of the GlobalEventHandlers mixin is the EventHandler for processing mouseleave events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseleave">GlobalEventHandlers.onmouseleave - MDN</a>
   */
  [LegacyLenientThis]
  attribute NullableEventHandler onmouseleave;
  /**
   * The onmousemove property of the GlobalEventHandlers mixin is an EventHandler that processes mousemove events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove">GlobalEventHandlers.onmousemove - MDN</a>
   */
  attribute NullableEventHandler onmousemove;
  /**
   * The onmouseout property of the GlobalEventHandlers mixin is an EventHandler that processes mouseout events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout">GlobalEventHandlers.onmouseout - MDN</a>
   */
  attribute NullableEventHandler onmouseout;
  /**
   * The onmouseover property of the GlobalEventHandlers mixin is an EventHandler that processes mouseover events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover">GlobalEventHandlers.onmouseover - MDN</a>
   */
  attribute NullableEventHandler onmouseover;
  /**
   * The onmouseup property of the GlobalEventHandlers mixin is an EventHandler that processes mouseup events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup">GlobalEventHandlers.onmouseup - MDN</a>
   */
  attribute NullableEventHandler onmouseup;
  attribute NullableEventHandler onpaste;
  /**
   * The onpause property of the GlobalEventHandlers mixin is the EventHandler for processing pause events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause">GlobalEventHandlers.onpause - MDN</a>
   */
  attribute NullableEventHandler onpause;
  /**
   * The onplay property of the GlobalEventHandlers mixin is the EventHandler for processing play events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay">GlobalEventHandlers.onplay - MDN</a>
   */
  attribute NullableEventHandler onplay;
  /**
   * The onplaying property of the GlobalEventHandlers mixin is the EventHandler for processing playing events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplaying">GlobalEventHandlers.onplaying - MDN</a>
   */
  attribute NullableEventHandler onplaying;
  /**
   * The onpointercancel property of the GlobalEventHandlers mixin is an EventHandler that processes pointercancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel">GlobalEventHandlers.onpointercancel - MDN</a>
   */
  attribute NullableEventHandler onpointercancel;
  /**
   * The GlobalEventHandlers event handler onpointerdown is used to specify the event handler for the pointerdown event, which is fired when the pointing device is initially pressed. This event can be sent to Window, Document, and Element objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown">GlobalEventHandlers.onpointerdown - MDN</a>
   */
  attribute NullableEventHandler onpointerdown;
  /**
   * The onpointerenter property of the GlobalEventHandlers mixin is an EventHandler that processes pointerenter events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerenter">GlobalEventHandlers.onpointerenter - MDN</a>
   */
  attribute NullableEventHandler onpointerenter;
  /**
   * The global event handler for the pointerleave event, which is delivered to a Node when the pointer (mouse cursor, fingertip, etc.) exits its hit test area (for example, if the cursor exits an Element or Window's content area). This event is part of the Pointer Events API.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave">GlobalEventHandlers.onpointerleave - MDN</a>
   */
  attribute NullableEventHandler onpointerleave;
  /**
   * The onpointermove property of the GlobalEventHandlers mixin is an EventHandler that processes pointermove events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove">GlobalEventHandlers.onpointermove - MDN</a>
   */
  attribute NullableEventHandler onpointermove;
  /**
   * The onpointerout property of the GlobalEventHandlers mixin is an EventHandler that processes pointerout events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout">GlobalEventHandlers.onpointerout - MDN</a>
   */
  attribute NullableEventHandler onpointerout;
  /**
   * The onpointerover property of the GlobalEventHandlers mixin is an EventHandler that processes pointerover events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerover">GlobalEventHandlers.onpointerover - MDN</a>
   */
  attribute NullableEventHandler onpointerover;
  /**
   * The onpointerup property of the GlobalEventHandlers mixin is an EventHandler that processes pointerup events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerup">GlobalEventHandlers.onpointerup - MDN</a>
   */
  attribute NullableEventHandler onpointerup;
  attribute NullableEventHandler onprogress;
  attribute NullableEventHandler onratechange;
  /**
   * The onreset property of the GlobalEventHandlers mixin is an EventHandler that processes reset events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset">GlobalEventHandlers.onreset - MDN</a>
   */
  attribute NullableEventHandler onreset;
  /**
   * The onresize property of the GlobalEventHandlers interface is an EventHandler that processes resize events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize">GlobalEventHandlers.onresize - MDN</a>
   */
  attribute NullableEventHandler onresize;
  /**
   * The onscroll property of the GlobalEventHandlers mixin is an EventHandler that processes scroll events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll">GlobalEventHandlers.onscroll - MDN</a>
   */
  attribute NullableEventHandler onscroll;
  attribute NullableEventHandler onsecuritypolicyviolation;
  attribute NullableEventHandler onseeked;
  attribute NullableEventHandler onseeking;
  /**
   * The onselect property of the GlobalEventHandlers mixin is an EventHandler that processes select events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect">GlobalEventHandlers.onselect - MDN</a>
   */
  attribute NullableEventHandler onselect;
  /**
   * The onselectionchange property of the GlobalEventHandlers mixin is an EventHandler that processes selectionchange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange">GlobalEventHandlers.onselectionchange - MDN</a>
   */
  attribute NullableEventHandler onselectionchange;
  /**
   * The onselectstart property of the GlobalEventHandlers mixin is an EventHandler that processes selectstart events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart">GlobalEventHandlers.onselectstart - MDN</a>
   */
  attribute NullableEventHandler onselectstart;
  attribute NullableEventHandler onslotchange;
  attribute NullableEventHandler onstalled;
  /**
   * The onsubmit property of the GlobalEventHandlers mixin is an EventHandler that processes submit events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit">GlobalEventHandlers.onsubmit - MDN</a>
   */
  attribute NullableEventHandler onsubmit;
  attribute NullableEventHandler onsuspend;
  attribute NullableEventHandler ontimeupdate;
  attribute NullableEventHandler ontoggle;
  /**
   * The ontouchcancel property of the GlobalEventHandlers mixin is an EventHandler that processes touchcancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel">GlobalEventHandlers.ontouchcancel - MDN</a>
   */
  attribute NullableEventHandler ontouchcancel;
  /**
   * A global event handler for the touchend event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchend">GlobalEventHandlers.ontouchend - MDN</a>
   */
  attribute NullableEventHandler ontouchend;
  /**
   * A global event handler for the touchmove event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchmove">GlobalEventHandlers.ontouchmove - MDN</a>
   */
  attribute NullableEventHandler ontouchmove;
  /**
   * The ontouchstart property of the GlobalEventHandlers mixin is an EventHandler that processes touchstart events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart">GlobalEventHandlers.ontouchstart - MDN</a>
   */
  attribute NullableEventHandler ontouchstart;
  /**
   * The ontransitioncancel property of the GlobalEventHandlers mixin is an EventHandler that processes transitioncancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitioncancel">GlobalEventHandlers.ontransitioncancel - MDN</a>
   */
  attribute NullableEventHandler ontransitioncancel;
  /**
   * The ontransitionend property of the GlobalEventHandlers mixin is an EventHandler that processes transitionend events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitionend">GlobalEventHandlers.ontransitionend - MDN</a>
   */
  attribute NullableEventHandler ontransitionend;
  attribute NullableEventHandler ontransitionrun;
  attribute NullableEventHandler ontransitionstart;
  attribute NullableEventHandler onvolumechange;
  attribute NullableEventHandler onwaiting;
  attribute NullableEventHandler onwebkitanimationend;
  attribute NullableEventHandler onwebkitanimationiteration;
  attribute NullableEventHandler onwebkitanimationstart;
  attribute NullableEventHandler onwebkittransitionend;
  /**
   * The onwheel property of the GlobalEventHandlers mixin is an EventHandler that processes wheel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel">GlobalEventHandlers.onwheel - MDN</a>
   */
  attribute NullableEventHandler onwheel;
  [CEReactions]
  attribute boolean spellcheck;
  [CEReactions]
  attribute long tabIndex;
  /**
   * The HTMLElement.title property represents the title of the element: the text usually displayed in a 'tooltip' popup when the mouse is over the node.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title">HTMLElement.title - MDN</a>
   */
  [CEReactions]
  attribute DOMString title;
  [CEReactions]
  attribute boolean translate;
  /**
   * The animationcancel event is fired when a CSS Animation unexpectedly aborts. In other words, any time it stops running without sending an animationend event. This might happen when the animation-name is changed such that the animation is removed, or when the animating node is hidden using CSS. Therefore, either directly or because any of its containing nodes are hidden.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/animationcancel_event">animationcancel event - MDN</a>
   */
  [NoBubble]
  event AnimationEvent animationcancel;
  /**
   * The animationend event is fired when a CSS Animation has completed. If the animation aborts before reaching completion, such as if the element is removed from the DOM or the animation is removed from the element, the animationend event is not fired.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/animationend_event">animationend event - MDN</a>
   */
  [NoBubble]
  event AnimationEvent animationend;
  /**
   * The animationiteration event is fired when an iteration of a CSS Animation ends, and another one begins. This event does not occur at the same time as the animationend event, and therefore does not occur for animations with an animation-iteration-count of one.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/animationiteration_event">animationiteration event - MDN</a>
   */
  [NoBubble]
  event AnimationEvent animationiteration;
  /**
   * The animationstart event is fired when a CSS Animation has started. If there is an animation-delay, this event will fire once the delay period has expired. A negative delay will cause the event to fire with an elapsedTime equal to the absolute value of the delay (and, correspondingly, the animation will begin playing at that time index into the sequence).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/animationstart_event">animationstart event - MDN</a>
   */
  [NoBubble]
  event AnimationEvent animationstart;
  /**
   * The DOM beforeinput event fires when the value of an input, select, or textarea element is about to be modified. The event also applies to elements with contenteditable enabled, and to any element when designMode is turned on.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforeinput_event">beforeinput event - MDN</a>
   */
  [NoBubble, NoCancel]
  event InputEvent beforeinput;
  /**
   * The change event is fired for input, select, and textarea elements when an alteration to the element's value is committed by the user. Unlike the input event, the change event is not necessarily fired for each alteration to an element's value.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event">change event - MDN</a>
   */
  [NoBubble]
  event Event change;
  /**
   * The gotpointercapture event is fired when an element captures a pointer using setPointerCapture().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/gotpointercapture_event">gotpointercapture event - MDN</a>
   */
  [NoBubble]
  event PointerEvent gotpointercapture;
  /**
   * The input event fires when the value of an input, select, or textarea element has been changed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event">input event - MDN</a>
   */
  [NoBubble]
  event InputEvent input;
  /**
   * The invalid event fires when a submittable element has been checked for validity and doesn't satisfy its constraints.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/invalid_event">invalid event - MDN</a>
   */
  [NoCancel]
  event Event invalid;
  /**
   * The lostpointercapture event is fired when a captured pointer is released.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lostpointercapture_event">lostpointercapture event - MDN</a>
   */
  [NoBubble]
  event PointerEvent lostpointercapture;
  /**
   * The pointercancel event is fired when the browser determines that there are unlikely to be any more pointer events, or if after the pointerdown event is fired, the pointer is then used to manipulate the viewport by panning, zooming, or scrolling.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointercancel_event">pointercancel event - MDN</a>
   */
  [NoBubble]
  event PointerEvent pointercancel;
  /**
   * The pointerdown event is fired when a pointer becomes active. For mouse, it is fired when the device transitions from no buttons depressed to at least one button depressed. For touch, it is fired when physical contact is made with the digitizer. For pen, it is fired when the stylus makes physical contact with the digitizer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerdown_event">pointerdown event - MDN</a>
   */
  [NoBubble, NoCancel]
  event PointerEvent pointerdown;
  /**
   * The pointerenter event fires when a pointing device is moved into the hit test boundaries of an element or one of its descendants, including as a result of a pointerdown event from a device that does not support hover (see pointerdown).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerenter_event">pointerenter event - MDN</a>
   */
  event PointerEvent pointerenter;
  /**
   * The pointerleave event is fired when a pointing device is moved out of the hit test boundaries of an element. For pen devices, this event is fired when the stylus leaves the hover range detectable by the digitizer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerleave_event">pointerleave event - MDN</a>
   */
  event PointerEvent pointerleave;
  /**
   * The pointermove event is fired when a pointer changes coordinates, and the pointer has not been canceled by a browser touch-action.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointermove_event">pointermove event - MDN</a>
   */
  [NoBubble, NoCancel]
  event PointerEvent pointermove;
  /**
   * The pointerout event is fired for several reasons including: pointing device is moved out of the hit test boundaries of an element; firing the pointerup event for a device that does not support hover (see pointerup); after firing the pointercancel event (see pointercancel); when a pen stylus leaves the hover range detectable by the digitizer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerout_event">pointerout event - MDN</a>
   */
  [NoBubble, NoCancel]
  event PointerEvent pointerout;
  /**
   * The pointerover event is fired when a pointing device is moved into an element's hit test boundaries.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerover_event">pointerover event - MDN</a>
   */
  [NoBubble, NoCancel]
  event PointerEvent pointerover;
  /**
   * The pointerup event is fired when a pointer is no longer active.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerup_event">pointerup event - MDN</a>
   */
  [NoBubble, NoCancel]
  event PointerEvent pointerup;
  /**
   * The transitioncancel event is fired when a CSS transition is canceled.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/transitioncancel_event">transitioncancel event - MDN</a>
   */
  [NoBubble]
  event TransitionEvent transitioncancel;
  /**
   * The transitionend event is fired when a CSS transition has completed. In the case where a transition is removed before completion, such as if the transition-property is removed or display is set to none, then the event will not be generated.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/transitionend_event">transitionend event - MDN</a>
   */
  [NoBubble, NoCancel]
  event TransitionEvent transitionend;
  /**
   * The transitionrun event is fired when a CSS transition is first created, i.e. before any transition-delay has begun.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/transitionrun_event">transitionrun event - MDN</a>
   */
  [NoBubble]
  event TransitionEvent transitionrun;
  /**
   * The transitionstart event is fired when a CSS transition has actually started, i.e., after any transition-delay has ended.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/transitionstart_event">transitionstart event - MDN</a>
   */
  [NoBubble]
  event TransitionEvent transitionstart;
  [HTMLConstructor]
  constructor();
  ElementInternals attachInternals();
  void blur();
  /**
   * The HTMLElement.click() method simulates a mouse click on an element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click">HTMLElement.click - MDN</a>
   */
  void click();
  void focus( optional FocusOptions options = {} );
};

/**
 * The HTMLEmbedElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating embed elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement">HTMLEmbedElement - MDN</a>
 */
[Exposed=Window]
interface HTMLEmbedElement : HTMLElement {
  [CEReactions]
  attribute DOMString align;
  [CEReactions]
  attribute DOMString height;
  [CEReactions]
  attribute DOMString name;
  [CEReactions]
  attribute USVString src;
  [CEReactions]
  attribute DOMString type;
  [CEReactions]
  attribute DOMString width;
  [HTMLConstructor]
  constructor();
  Document? getSVGDocument();
};

/**
 * The HTMLFieldSetElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of fieldset elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement">HTMLFieldSetElement - MDN</a>
 */
[Exposed=Window]
interface HTMLFieldSetElement : HTMLElement {
  [SameObject]
  readonly attribute HTMLCollection elements;
  readonly attribute HTMLFormElement? form;
  readonly attribute DOMString type;
  readonly attribute DOMString validationMessage;
  [SameObject]
  readonly attribute ValidityState validity;
  readonly attribute boolean willValidate;
  [CEReactions]
  attribute boolean disabled;
  [CEReactions]
  attribute DOMString name;
  [HTMLConstructor]
  constructor();
  boolean checkValidity();
  boolean reportValidity();
  void setCustomValidity( DOMString error );
};

/**
 * Implements the document object model (DOM) representation of the font element. The HTML Font Element font defines the font size, font face and color of text.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement">HTMLFontElement - MDN</a>
 */
[Exposed=Window]
interface HTMLFontElement : HTMLElement {
  /**
   * The obsolete HTMLFontElement.color property is a DOMString that reflects the color HTML attribute, containing either a named color or a color specified in the hexadecimal #RRGGBB format.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement/color">HTMLFontElement.color - MDN</a>
   */
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString color;
  /**
   * The obsolete HTMLFontElement.face property is a DOMString that reflects the face HTML attribute, containing a comma-separated list of one or more font names.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement/face">HTMLFontElement.face - MDN</a>
   */
  [CEReactions]
  attribute DOMString face;
  /**
   * The obsolete HTMLFontElement.size property is a DOMString that reflects the size HTML attribute. It contains either an integer number in the range of 1-7 or a relative value to increase/decrease the value of the size attribute of the basefont element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement/size">HTMLFontElement.size - MDN</a>
   */
  [CEReactions]
  attribute DOMString size;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLFormControlsCollection interface represents a collection of HTML form control elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection">HTMLFormControlsCollection - MDN</a>
 */
[Exposed=Window, LegacyUnenumerableNamedProperties]
interface HTMLFormControlsCollection {
  readonly attribute unsigned long length;
  getter ( RadioNodeList or Element )? item( unsigned long index );
  /**
   * The HTMLFormControlsCollection.namedItem() method returns the RadioNodeList or the Element in the collection whose name or id match the specified name, or null if no node matches.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection/namedItem">HTMLFormControlsCollection.namedItem - MDN</a>
   */
  getter ( RadioNodeList or Element )? namedItem( DOMString name );
};

/**
 * The HTMLFormElement interface represents a form element in the DOM. It allows access to—and, in some cases, modification of—aspects of the form, as well as access to its component elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement">HTMLFormElement - MDN</a>
 */
[Exposed=Window, LegacyOverrideBuiltIns, LegacyUnenumerableNamedProperties]
interface HTMLFormElement : HTMLElement {
  /**
   * The HTMLFormElement property elements returns an HTMLFormControlsCollection listing all the form controls contained in the form element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements">HTMLFormElement.elements - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLFormControlsCollection elements;
  /**
   * The HTMLFormElement.length read-only property returns the number of controls in the form element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/length">HTMLFormElement.length - MDN</a>
   */
  readonly attribute unsigned long length;
  [SameObject, PutForwards=value]
  readonly attribute DOMTokenList relList;
  /**
   * The HTMLFormElement.acceptCharset property represents a list of the supported character encodings for the given form element. This list can be comma-separated or space-separated.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/acceptCharset">HTMLFormElement.acceptCharset - MDN</a>
   */
  [CEReactions]
  attribute DOMString acceptCharset;
  /**
   * The HTMLFormElement.action property represents the action of the form element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action">HTMLFormElement.action - MDN</a>
   */
  [CEReactions]
  attribute USVString action;
  [CEReactions]
  attribute DOMString autocomplete;
  /**
   * The HTMLFormElement.encoding property is an alternative name for the enctype element on the DOM HTMLFormElement object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/encoding">HTMLFormElement.encoding - MDN</a>
   */
  [CEReactions]
  attribute DOMString encoding;
  /**
   * The HTMLFormElement.enctype property is the MIME type of content that is used to submit the form to the server. Possible values are:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/enctype">HTMLFormElement.enctype - MDN</a>
   */
  [CEReactions]
  attribute DOMString enctype;
  /**
   * The HTMLFormElement.method property represents the HTTP method used to submit the form.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/method">HTMLFormElement.method - MDN</a>
   */
  [CEReactions]
  attribute DOMString method;
  /**
   * The HTMLFormElement.name property represents the name of the current form element as a string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/name">HTMLFormElement.name - MDN</a>
   */
  [CEReactions]
  attribute DOMString name;
  [CEReactions]
  attribute boolean noValidate;
  [CEReactions]
  attribute DOMString rel;
  /**
   * The target property of the HTMLFormElement interface represents the target of the form's action (i.e., the frame in which to render its output).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/target">HTMLFormElement.target - MDN</a>
   */
  [CEReactions]
  attribute DOMString target;
  /**
   * The formdata event fires after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a FormData() constructor.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/formdata_event">formdata event - MDN</a>
   */
  event FormDataEvent formdata;
  /**
   * The reset event fires when a form is reset.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset_event">reset event - MDN</a>
   */
  [NoBubble, NoCancel]
  event Event reset;
  /**
   * The submit event fires when a form is submitted.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit_event">submit event - MDN</a>
   */
  [NoBubble, NoCancel]
  event SubmitEvent submit;
  [HTMLConstructor]
  constructor();
  boolean checkValidity();
  /**
   * The HTMLFormElement.reportValidity() method returns true if the element's child controls satisfy their validation constraints. When false is returned, cancelable invalid events are fired for each invalid child and validation problems are reported to the user.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reportValidity">HTMLFormElement.reportValidity - MDN</a>
   */
  boolean reportValidity();
  /**
   * The HTMLFormElement method requestSubmit() requests that the form be submitted using a specific submit button.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/requestSubmit">HTMLFormElement.requestSubmit - MDN</a>
   */
  void requestSubmit( optional HTMLElement? submitter = null );
  /**
   * The HTMLFormElement.reset() method restores a form element's default values. This method does the same thing as clicking the form's reset button.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset">HTMLFormElement.reset - MDN</a>
   */
  [CEReactions]
  void reset();
  /**
   * The HTMLFormElement.submit() method submits a given form.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit">HTMLFormElement.submit - MDN</a>
   */
  void submit();
  /**
   * The HTMLFormElement interface represents a form element in the DOM. It allows access to—and, in some cases, modification of—aspects of the form, as well as access to its component elements.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement">HTMLFormElement - MDN</a>
   */
  getter Element ( unsigned long index );
  /**
   * The HTMLFormElement interface represents a form element in the DOM. It allows access to—and, in some cases, modification of—aspects of the form, as well as access to its component elements.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement">HTMLFormElement - MDN</a>
   */
  getter ( RadioNodeList or Element ) ( DOMString name );
};

[Exposed=Window]
interface HTMLFrameElement : HTMLElement {
  readonly attribute Document? contentDocument;
  readonly attribute WindowProxy? contentWindow;
  [CEReactions]
  attribute DOMString frameBorder;
  [CEReactions]
  attribute USVString longDesc;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString marginHeight;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString marginWidth;
  [CEReactions]
  attribute DOMString name;
  [CEReactions]
  attribute boolean noResize;
  [CEReactions]
  attribute DOMString scrolling;
  [CEReactions]
  attribute USVString src;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLFrameSetElement interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating frameset elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement">HTMLFrameSetElement - MDN</a>
 */
[Exposed=Window]
interface HTMLFrameSetElement : HTMLElement {
  [CEReactions]
  attribute DOMString cols;
  /**
   * The onafterprint property of the WindowEventHandlers mixin is the EventHandler for processing afterprint events for the current window. These events are raised after the user prints, or if they abort the print dialog.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint">WindowEventHandlers.onafterprint - MDN</a>
   */
  attribute NullableEventHandler onafterprint;
  /**
   * The onbeforeprint property of the WindowEventHandlers mixin is the EventHandler for processing beforeprint events for the current window. These events are raised before the print dialog window is opened.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeprint">WindowEventHandlers.onbeforeprint - MDN</a>
   */
  attribute NullableEventHandler onbeforeprint;
  /**
   * The onbeforeunload property of the WindowEventHandlers mixin is the EventHandler for processing beforeunload events. These events fire when a window is about to unload its resources. At this point, the document is still visible and the event is still cancelable.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload">WindowEventHandlers.onbeforeunload - MDN</a>
   */
  attribute NullableOnBeforeUnloadEventHandler onbeforeunload;
  /**
   * The WindowEventHandlers.onhashchange property of the WindowEventHandlers mixin is the EventHandler for processing hashchange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange">WindowEventHandlers.onhashchange - MDN</a>
   */
  attribute NullableEventHandler onhashchange;
  /**
   * The onlanguagechange property of the WindowEventHandlers mixin is the EventHandler for processing languagechange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange">WindowEventHandlers.onlanguagechange - MDN</a>
   */
  attribute NullableEventHandler onlanguagechange;
  /**
   * The onmessage property of the WindowEventHandlers mixin is the EventHandler called whenever an object receives a message event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessage">WindowEventHandlers.onmessage - MDN</a>
   */
  attribute NullableEventHandler onmessage;
  /**
   * The onmessageerror event handler of the WindowEventHandlers interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on a window—that is, when it receives a message that cannot be deserialized.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessageerror">WindowEventHandlers.onmessageerror - MDN</a>
   */
  attribute NullableEventHandler onmessageerror;
  attribute NullableEventHandler onoffline;
  attribute NullableEventHandler ononline;
  attribute NullableEventHandler onpagehide;
  attribute NullableEventHandler onpageshow;
  /**
   * The onpopstate property of the WindowEventHandlers mixin is the EventHandler for processing popstate events on the window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate">WindowEventHandlers.onpopstate - MDN</a>
   */
  attribute NullableEventHandler onpopstate;
  /**
   * The onrejectionhandled property of the WindowEventHandlers mixin is the EventHandler for processing rejectionhandled events. These events are raised when Promises are rejected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled">WindowEventHandlers.onrejectionhandled - MDN</a>
   */
  attribute NullableEventHandler onrejectionhandled;
  /**
   * The onstorage property of the WindowEventHandlers mixin is an EventHandler for processing storage events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage">WindowEventHandlers.onstorage - MDN</a>
   */
  attribute NullableEventHandler onstorage;
  /**
   * The onunhandledrejection property of the WindowEventHandlers mixin is the EventHandler for processing unhandledrejection events. These events are raised for unhandled Promise rejections.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection">WindowEventHandlers.onunhandledrejection - MDN</a>
   */
  attribute NullableEventHandler onunhandledrejection;
  /**
   * The onunload property of the WindowEventHandlers mixin is the EventHandler for processing unload events. These events fire when the window is unloading its content and resources. The resource removal is processed after the unload event occurs.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload">WindowEventHandlers.onunload - MDN</a>
   */
  attribute NullableEventHandler onunload;
  [CEReactions]
  attribute DOMString rows;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLHRElement interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating hr elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement">HTMLHRElement - MDN</a>
 */
[Exposed=Window]
interface HTMLHRElement : HTMLElement {
  [CEReactions]
  attribute DOMString align;
  [CEReactions]
  attribute DOMString color;
  [CEReactions]
  attribute boolean noShade;
  [CEReactions]
  attribute DOMString size;
  [CEReactions]
  attribute DOMString width;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLHeadElement interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement">HTMLHeadElement - MDN</a>
 */
[Exposed=Window]
interface HTMLHeadElement : HTMLElement {
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLHeadingElement interface represents the different heading elements, h1 through h6. It inherits methods and properties from the HTMLElement interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement">HTMLHeadingElement - MDN</a>
 */
[Exposed=Window]
interface HTMLHeadingElement : HTMLElement {
  [CEReactions]
  attribute DOMString align;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLHtmlElement interface serves as the root node for a given HTML document. This object inherits the properties and methods described in the HTMLElement interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement">HTMLHtmlElement - MDN</a>
 */
[Exposed=Window]
interface HTMLHtmlElement : HTMLElement {
  /**
   * Returns version information about the document type definition (DTD) of a document. While this property is recognized by Mozilla, the return value for this property is always an empty string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement/version">HTMLHtmlElement.version - MDN</a>
   */
  [CEReactions]
  attribute DOMString version;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLIFrameElement interface provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement">HTMLIFrameElement - MDN</a>
 */
[Exposed=Window]
interface HTMLIFrameElement : HTMLElement {
  /**
   * If the iframe and the iframe's parent document are Same Origin, returns a Document (that is, the active document in the inline frame's nested browsing context), else returns null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentDocument">HTMLIFrameElement.contentDocument - MDN</a>
   */
  readonly attribute Document? contentDocument;
  /**
   * The contentWindow property returns the Window object of an HTMLIFrameElement. You can use this Window object to access the iframe's document and its internal DOM. This attribute is read-only, but its properties can be manipulated like the global Window object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentWindow">HTMLIFrameElement.contentWindow - MDN</a>
   */
  readonly attribute WindowProxy? contentWindow;
  [SameObject, PutForwards=value]
  readonly attribute DOMTokenList sandbox;
  [CEReactions]
  attribute DOMString align;
  [CEReactions]
  attribute DOMString allow;
  [CEReactions]
  attribute boolean allowFullscreen;
  /**
   * The allowPaymentRequest property of the HTMLIFrameElement interface returns a Boolean indicating whether the Payment Request API may be invoked on a cross-origin iframe.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/allowPaymentRequest">HTMLIFrameElement.allowPaymentRequest - MDN</a>
   */
  [CEReactions]
  attribute boolean allowPaymentRequest;
  [CEReactions]
  attribute DOMString frameBorder;
  [CEReactions]
  attribute DOMString height;
  [CEReactions]
  attribute DOMString loading;
  [CEReactions]
  attribute USVString longDesc;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString marginHeight;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString marginWidth;
  [CEReactions]
  attribute DOMString name;
  /**
   * The HTMLIFrameElement.referrerPolicy property reflects the HTML referrerpolicy attribute of the iframe element defining which referrer is sent when fetching the resource.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy">HTMLIFrameElement.referrerPolicy - MDN</a>
   */
  [CEReactions]
  attribute DOMString referrerPolicy;
  [CEReactions]
  attribute DOMString scrolling;
  /**
   * The HTMLIFrameElement.src property reflects the HTML referrerpolicy attribute of the iframe element defining which referrer is sent when fetching the resource.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/src">HTMLIFrameElement.src - MDN</a>
   */
  [CEReactions]
  attribute USVString src;
  /**
   * The srcdoc property of the HTMLIFrameElement specifies the content of the page.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/srcdoc">HTMLIFrameElement.srcdoc - MDN</a>
   */
  [CEReactions]
  attribute DOMString srcdoc;
  [CEReactions]
  attribute DOMString width;
  [HTMLConstructor]
  constructor();
  Document? getSVGDocument();
};

/**
 * The HTMLImageElement interface represents an HTML img element, providing the properties and methods used to manipulate image elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement">HTMLImageElement - MDN</a>
 */
[Exposed=Window, LegacyFactoryFunction=Image( optional unsigned long width, optional unsigned long height )]
interface HTMLImageElement : HTMLElement {
  /**
   * The read-only HTMLImageElement interface's complete attribute is a Boolean value which indicates whether or not the image has completely loaded.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/complete">HTMLImageElement.complete - MDN</a>
   */
  readonly attribute boolean complete;
  /**
   * The read-only HTMLImageElement property currentSrc indicates the URL of the image which is currently presented in the img element it represents.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/currentSrc">HTMLImageElement.currentSrc - MDN</a>
   */
  readonly attribute USVString currentSrc;
  /**
   * The HTMLImageElement interface's naturalHeight property is a read-only value which returns the intrinsic (natural), density-corrected height of the image in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalHeight">HTMLImageElement.naturalHeight - MDN</a>
   */
  readonly attribute unsigned long naturalHeight;
  /**
   * The HTMLImageElement interface's read-only naturalWidth property returns the intrinsic (natural), density-corrected width of the image in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalWidth">HTMLImageElement.naturalWidth - MDN</a>
   */
  readonly attribute unsigned long naturalWidth;
  /**
   * The read-only HTMLImageElement property x indicates the x-coordinate of the  img element's left border edge relative to the root element's origin.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/x">HTMLImageElement.x - MDN</a>
   */
  readonly attribute long x;
  /**
   * The read-only HTMLImageElement property y indicates the y-coordinate of the img element's top border edge relative to the root element's origin.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/y">HTMLImageElement.y - MDN</a>
   */
  readonly attribute long y;
  [CEReactions]
  attribute DOMString align;
  /**
   * The HTMLImageElement property alt provides fallback (alternate) text to display when the image specified by the img element is not loaded.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt">HTMLImageElement.alt - MDN</a>
   */
  [CEReactions]
  attribute DOMString alt;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString border;
  /**
   * The HTMLImageElement interface's crossOrigin attribute is a string which specifies the Cross-Origin Resource Sharing (CORS) setting to use when retrieving the image.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin">HTMLImageElement.crossOrigin - MDN</a>
   */
  [CEReactions]
  attribute DOMString? crossOrigin;
  /**
   * The decoding property of the HTMLImageElement interface represents a hint given to the browser on how it should decode the image.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding">HTMLImageElement.decoding - MDN</a>
   */
  [CEReactions]
  attribute DOMString decoding;
  /**
   * The height property of the HTMLImageElement interface indicates the height at which the image is drawn, in CSS pixels if the image is being drawn or rendered to any visual medium such as the screen or a printer; otherwise, it's the natural, pixel density corrected height of the image.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/height">HTMLImageElement.height - MDN</a>
   */
  [CEReactions]
  attribute unsigned long height;
  [CEReactions]
  attribute unsigned long hspace;
  /**
   * The HTMLImageElement proeprty isMap is a Boolean value which indicates that the image is to be used by a server-side image map. This may only be used on images located within an a element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/isMap">HTMLImageElement.isMap - MDN</a>
   */
  [CEReactions]
  attribute boolean isMap;
  /**
   * The HTMLImageElement property loading is a string whose value provides a hint to the user agent that tells the browser how to handle loading images which are currently outside the window's visual viewport.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/loading">HTMLImageElement.loading - MDN</a>
   */
  [CEReactions]
  attribute DOMString loading;
  [CEReactions]
  attribute USVString longDesc;
  [CEReactions]
  attribute USVString lowsrc;
  [CEReactions]
  attribute DOMString name;
  /**
   * The HTMLImageElement.referrerPolicy property reflects the HTML referrerpolicy attribute of the img element defining which referrer is sent when fetching the resource.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy">HTMLImageElement.referrerPolicy - MDN</a>
   */
  [CEReactions]
  attribute DOMString referrerPolicy;
  /**
   * The HTMLImageElement property sizes allows you to specify the layout width of the image for each of a list of media conditions. This provides the ability to automatically select among different images—even images of different orientations or aspect ratios—as the document state changes to match different media conditions.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes">HTMLImageElement.sizes - MDN</a>
   */
  [CEReactions]
  attribute DOMString sizes;
  /**
   * The HTMLImageElement property src, which reflects the HTML src attribute, specifies the image to display in the img element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/src">HTMLImageElement.src - MDN</a>
   */
  [CEReactions]
  attribute USVString src;
  /**
   * The HTMLImageElement property srcset is a string which identifies one or more image candidate strings, separated using commas (,) each specifying image resources to use under given circumstances.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/srcset">HTMLImageElement.srcset - MDN</a>
   */
  [CEReactions]
  attribute USVString srcset;
  /**
   * The useMap property on the HTMLImageElement interface reflects the value of the HTML usemap attribute, which is a string providing the name of the client-side image map to apply to the image.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/useMap">HTMLImageElement.useMap - MDN</a>
   */
  [CEReactions]
  attribute DOMString useMap;
  [CEReactions]
  attribute unsigned long vspace;
  /**
   * The width property of the HTMLImageElement interface indicates the width at which the image is drawn, in CSS pixels if the image is being drawn or rendered to any visual medium such as the screen or a printer; otherwise, it's the natural, pixel density corrected width of the image.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/width">HTMLImageElement.width - MDN</a>
   */
  [CEReactions]
  attribute unsigned long width;
  [HTMLConstructor]
  constructor();
  /**
   * The decode() method of the HTMLImageElement interface returns a Promise that resolves when the image is decoded and it is safe to append the image to the DOM.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decode">HTMLImageElement.decode - MDN</a>
   */
  Promise<void> decode();
};

/**
 * The HTMLInputElement interface provides special properties and methods for manipulating the options, layout, and presentation of input elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement">HTMLInputElement - MDN</a>
 */
[Exposed=Window]
interface HTMLInputElement : HTMLElement {
  readonly attribute HTMLFormElement? form;
  readonly attribute NodeList? labels;
  readonly attribute HTMLElement? list;
  readonly attribute DOMString validationMessage;
  readonly attribute ValidityState validity;
  readonly attribute boolean willValidate;
  [CEReactions]
  attribute DOMString accept;
  [CEReactions]
  attribute DOMString align;
  [CEReactions]
  attribute DOMString alt;
  [CEReactions]
  attribute DOMString autocomplete;
  attribute boolean checked;
  [CEReactions]
  attribute boolean defaultChecked;
  [CEReactions]
  attribute DOMString defaultValue;
  [CEReactions]
  attribute DOMString dirName;
  [CEReactions]
  attribute boolean disabled;
  attribute FileList? files;
  [CEReactions]
  attribute USVString formAction;
  [CEReactions]
  attribute DOMString formEnctype;
  [CEReactions]
  attribute DOMString formMethod;
  [CEReactions]
  attribute boolean formNoValidate;
  [CEReactions]
  attribute DOMString formTarget;
  [CEReactions]
  attribute unsigned long height;
  attribute boolean indeterminate;
  [CEReactions]
  attribute DOMString max;
  [CEReactions]
  attribute long maxLength;
  [CEReactions]
  attribute DOMString min;
  [CEReactions]
  attribute long minLength;
  [CEReactions]
  attribute boolean multiple;
  [CEReactions]
  attribute DOMString name;
  [CEReactions]
  attribute DOMString pattern;
  [CEReactions]
  attribute DOMString placeholder;
  [CEReactions]
  attribute boolean readOnly;
  [CEReactions]
  attribute boolean required;
  attribute DOMString? selectionDirection;
  attribute unsigned long? selectionEnd;
  attribute unsigned long? selectionStart;
  [CEReactions]
  attribute unsigned long size;
  [CEReactions]
  attribute USVString src;
  [CEReactions]
  attribute DOMString step;
  [CEReactions]
  attribute DOMString type;
  [CEReactions]
  attribute DOMString useMap;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString value;
  attribute object? valueAsDate;
  attribute unrestricted double valueAsNumber;
  [CEReactions]
  attribute unsigned long width;
  /**
   * The search event is fired when a search is initiated usinng an input element of type="search".
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/search_event">search event - MDN</a>
   */
  [NoBubble]
  event Event search;
  [HTMLConstructor]
  constructor();
  boolean checkValidity();
  boolean reportValidity();
  void select();
  void setCustomValidity( DOMString error );
  void setRangeText( DOMString replacement );
  void setRangeText( DOMString replacement, unsigned long start, unsigned long end, optional SelectionMode selectionMode = "preserve" );
  void setSelectionRange( unsigned long start, unsigned long end, optional DOMString direction );
  void stepDown( optional long n = 1 );
  void stepUp( optional long n = 1 );
};

/**
 * The HTMLLIElement interface exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement">HTMLLIElement - MDN</a>
 */
[Exposed=Window]
interface HTMLLIElement : HTMLElement {
  [CEReactions]
  attribute DOMString type;
  [CEReactions]
  attribute long value;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLLabelElement interface gives access to properties specific to label elements. It inherits methods and properties from the base HTMLElement interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement">HTMLLabelElement - MDN</a>
 */
[Exposed=Window]
interface HTMLLabelElement : HTMLElement {
  /**
   * The read-only HTMLLabelElement.control property returns a reference to the control (in the form of an object of type HTMLElement or one of its derivatives) with which the label element is associated, or null if the label isn't associated with a control.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control">HTMLLabelElement.control - MDN</a>
   */
  readonly attribute HTMLElement? control;
  /**
   * The read-only HTMLLabelElement.form property returns an HTMLFormElement object which represents the form of which the label's associated control is a part, or null if there is either no associated control, or if that control isn't in a form.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/form">HTMLLabelElement.form - MDN</a>
   */
  readonly attribute HTMLFormElement? form;
  /**
   * The HTMLLabelElement.htmlFor property reflects the value of the for content property. That means that this script-accessible property is used to set and read the value of the content property for, which is the ID of the label's associated control element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor">HTMLLabelElement.htmlFor - MDN</a>
   */
  [CEReactions]
  attribute DOMString htmlFor;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLLegendElement is an interface allowing to access properties of the legend elements. It inherits properties and methods from the HTMLElement interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement">HTMLLegendElement - MDN</a>
 */
[Exposed=Window]
interface HTMLLegendElement : HTMLElement {
  readonly attribute HTMLFormElement? form;
  [CEReactions]
  attribute DOMString align;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLLinkElement interface represents reference information for external resources and the relationship of those resources to a document and vice-versa (corresponds to link element; not to be confused with a, which is represented by HTMLAnchorElement). This object inherits all of the properties and methods of the HTMLElement interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement">HTMLLinkElement - MDN</a>
 */
[Exposed=Window]
interface HTMLLinkElement : HTMLElement {
  /**
   * The HTMLLinkElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the link element and the current document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/relList">HTMLLinkElement.relList - MDN</a>
   */
  [SameObject, PutForwards=value]
  readonly attribute DOMTokenList relList;
  readonly attribute CSSStyleSheet? sheet;
  [SameObject, PutForwards=value]
  readonly attribute DOMTokenList sizes;
  /**
   * The as property of the HTMLLinkElement interface returns a DOMString representing the type of content being loaded by the HTML link, one of "script", "style", "image", "video", "audio", "track", "font", "fetch".
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/as">HTMLLinkElement.as - MDN</a>
   */
  [CEReactions]
  attribute DOMString as;
  [CEReactions]
  attribute DOMString charset;
  [CEReactions]
  attribute DOMString? crossOrigin;
  [CEReactions]
  attribute boolean disabled;
  [CEReactions]
  attribute USVString href;
  [CEReactions]
  attribute DOMString hreflang;
  [CEReactions]
  attribute DOMString imageSizes;
  [CEReactions]
  attribute USVString imageSrcset;
  [CEReactions]
  attribute DOMString integrity;
  [CEReactions]
  attribute DOMString media;
  /**
   * The HTMLLinkElement.referrerPolicy property reflect the HTML referrerpolicy attribute of the link element defining which referrer is sent when fetching the resource.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/referrerPolicy">HTMLLinkElement.referrerPolicy - MDN</a>
   */
  [CEReactions]
  attribute DOMString referrerPolicy;
  /**
   * The HTMLLinkElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the link element and the current document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/rel">HTMLLinkElement.rel - MDN</a>
   */
  [CEReactions]
  attribute DOMString rel;
  [CEReactions]
  attribute DOMString rev;
  [CEReactions]
  attribute DOMString target;
  [CEReactions]
  attribute DOMString type;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLMapElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement">HTMLMapElement - MDN</a>
 */
[Exposed=Window]
interface HTMLMapElement : HTMLElement {
  [SameObject]
  readonly attribute HTMLCollection areas;
  [CEReactions]
  attribute DOMString name;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLMarqueeElement interface provides methods to manipulate marquee elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMarqueeElement">HTMLMarqueeElement - MDN</a>
 */
[Exposed=Window]
interface HTMLMarqueeElement : HTMLElement {
  [CEReactions]
  attribute DOMString behavior;
  [CEReactions]
  attribute DOMString bgColor;
  [CEReactions]
  attribute DOMString direction;
  [CEReactions]
  attribute DOMString height;
  [CEReactions]
  attribute unsigned long hspace;
  [CEReactions]
  attribute long loop;
  attribute NullableEventHandler onbounce;
  attribute NullableEventHandler onfinish;
  attribute NullableEventHandler onstart;
  [CEReactions]
  attribute unsigned long scrollAmount;
  [CEReactions]
  attribute unsigned long scrollDelay;
  [CEReactions]
  attribute boolean trueSpeed;
  [CEReactions]
  attribute unsigned long vspace;
  [CEReactions]
  attribute DOMString width;
  [HTMLConstructor]
  constructor();
  void start();
  void stop();
};

/**
 * The HTMLMediaElement interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement">HTMLMediaElement - MDN</a>
 */
[Exposed=Window]
interface HTMLMediaElement : HTMLElement {
  const unsigned short HAVE_CURRENT_DATA = 2;
  const unsigned short HAVE_ENOUGH_DATA = 4;
  const unsigned short HAVE_FUTURE_DATA = 3;
  const unsigned short HAVE_METADATA = 1;
  const unsigned short HAVE_NOTHING = 0;
  const unsigned short NETWORK_EMPTY = 0;
  const unsigned short NETWORK_IDLE = 1;
  const unsigned short NETWORK_LOADING = 2;
  const unsigned short NETWORK_NO_SOURCE = 3;
  /**
   * The read-only audioTracks property on HTMLMediaElement objects returns an AudioTrackList object listing all of the  AudioTrack objects representing the media element's audio tracks.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/audioTracks">HTMLMediaElement.audioTracks - MDN</a>
   */
  [SameObject]
  readonly attribute AudioTrackList audioTracks;
  /**
   * The HTMLMediaElement.buffered read-only property returns a new TimeRanges object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the buffered property is accessed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered">HTMLMediaElement.buffered - MDN</a>
   */
  readonly attribute TimeRanges buffered;
  /**
   * The HTMLMediaElement.currentSrc property contains the absolute URL of the chosen media resource. This could happen, for example, if the web server selects a media file based on the resolution of the user's display. The value is an empty string if the networkState property is EMPTY.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentSrc">HTMLMediaElement.currentSrc - MDN</a>
   */
  readonly attribute USVString currentSrc;
  /**
   * The read-only HTMLMediaElement property duration indicates the length of the element's media in seconds.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/duration">HTMLMediaElement.duration - MDN</a>
   */
  readonly attribute unrestricted double duration;
  /**
   * The HTMLMediaElement.ended indicates whether the media element has ended playback.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended">HTMLMediaElement.ended - MDN</a>
   */
  readonly attribute boolean ended;
  /**
   * The HTMLMediaElement.error is the MediaError object for the most recent error, or null if there has not been an error. When an error event is received by the element, you can determine details about what happened by examining this object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error">HTMLMediaElement.error - MDN</a>
   */
  readonly attribute MediaError? error;
  [SecureContext]
  readonly attribute MediaKeys? mediaKeys;
  /**
   * The HTMLMediaElement.networkState property indicates the current state of the fetching of media over the network.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState">HTMLMediaElement.networkState - MDN</a>
   */
  readonly attribute unsigned short networkState;
  /**
   * The read-only HTMLMediaElement.paused property tells whether the media element is paused.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/paused">HTMLMediaElement.paused - MDN</a>
   */
  readonly attribute boolean paused;
  readonly attribute TimeRanges played;
  /**
   * The HTMLMediaElement.readyState property indicates the readiness state of the media.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState">HTMLMediaElement.readyState - MDN</a>
   */
  readonly attribute unsigned short readyState;
  /**
   * The seekable read-only property of the HTMLMediaElement returns a TimeRanges object that contains the time ranges that the user is able to seek to, if any.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekable">HTMLMediaElement.seekable - MDN</a>
   */
  readonly attribute TimeRanges seekable;
  readonly attribute boolean seeking;
  /**
   * The read-only textTracks property on HTMLMediaElement objects returns a TextTrackList object listing all of the TextTrack objects representing the media element's text tracks
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/textTracks">HTMLMediaElement.textTracks - MDN</a>
   */
  [SameObject]
  readonly attribute TextTrackList textTracks;
  /**
   * The read-only videoTracks property on HTMLMediaElement objects returns a VideoTrackList object listing all of the VideoTrack objects representing the media element's video tracks.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/videoTracks">HTMLMediaElement.videoTracks - MDN</a>
   */
  [SameObject]
  readonly attribute VideoTrackList videoTracks;
  /**
   * The HTMLMediaElement.autoplay property reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay">HTMLMediaElement.autoplay - MDN</a>
   */
  [CEReactions]
  attribute boolean autoplay;
  /**
   * The HTMLMediaElement.controls property reflects the controls HTML attribute, which controls whether user interface controls for playing the media item will be displayed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controls">HTMLMediaElement.controls - MDN</a>
   */
  [CEReactions]
  attribute boolean controls;
  /**
   * The HTMLMediaElement.crossOrigin property is the CORS setting for this image element. See CORS settings attributes for details.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin">HTMLMediaElement.crossOrigin - MDN</a>
   */
  [CEReactions]
  attribute DOMString? crossOrigin;
  /**
   * The HTMLMediaElement interface's currentTime property specifies the current playback time in seconds.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime">HTMLMediaElement.currentTime - MDN</a>
   */
  attribute double currentTime;
  /**
   * The HTMLMediaElement.defaultMuted property reflects the muted HTML attribute, which indicates whether the media element's audio output should be muted by default. This property has no dynamic effect. To mute and unmute the audio output, use the muted property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted">HTMLMediaElement.defaultMuted - MDN</a>
   */
  [CEReactions]
  attribute boolean defaultMuted;
  /**
   * The HTMLMediaElement.defaultPlaybackRate property indicates the default playback rate for the media.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate">HTMLMediaElement.defaultPlaybackRate - MDN</a>
   */
  attribute double defaultPlaybackRate;
  /**
   * The HTMLMediaElement.loop property reflects the loop HTML attribute, which controls whether the media element should start over when it reaches the end.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop">HTMLMediaElement.loop - MDN</a>
   */
  [CEReactions]
  attribute boolean loop;
  /**
   * The HTMLMediaElement.muted indicates whether the media element muted.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted">HTMLMediaElement.muted - MDN</a>
   */
  attribute boolean muted;
  attribute NullableEventHandler onencrypted;
  attribute NullableEventHandler onwaitingforkey;
  /**
   * The HTMLMediaElement.playbackRate property sets the rate at which the media is being played back. This is used to implement user controls for fast forward, slow motion, and so forth. The normal playback rate is multiplied by this value to obtain the current rate, so a value of 1.0 indicates normal speed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate">HTMLMediaElement.playbackRate - MDN</a>
   */
  attribute double playbackRate;
  [CEReactions]
  attribute DOMString preload;
  /**
   * The HTMLMediaElement.src property reflects the value of the HTML media element's src attribute, which indicates the URL of a media resource to use in the element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src">HTMLMediaElement.src - MDN</a>
   */
  [CEReactions]
  attribute USVString src;
  /**
   * The srcObject property of the HTMLMediaElement interface sets or returns the object which serves as the source of the media associated with the HTMLMediaElement.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject">HTMLMediaElement.srcObject - MDN</a>
   */
  attribute MediaProvider? srcObject;
  /**
   * The HTMLMediaElement.volume property sets the volume at which the media will be played.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume">HTMLMediaElement.volume - MDN</a>
   */
  attribute double volume;
  /**
   * The abort event is fired when the resource was not fully loaded, but not as the result of an error.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/abort_event">abort event - MDN</a>
   */
  event Event abort;
  /**
   * The canplay event is fired when the user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event">canplay event - MDN</a>
   */
  event Event canplay;
  /**
   * The canplaythrough event is fired when the user agent can play the media, and estimates that enough data has been loaded to play the media up to its end without having to stop for further buffering of content.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplaythrough_event">canplaythrough event - MDN</a>
   */
  event Event canplaythrough;
  /**
   * The durationchange event is fired when the duration attribute has been updated.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/durationchange_event">durationchange event - MDN</a>
   */
  event Event durationchange;
  /**
   * The emptied event is fired when the media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the load() method is called to reload it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/emptied_event">emptied event - MDN</a>
   */
  event Event emptied;
  /**
   * The ended event is fired when playback or streaming has stopped because the end of the media was reached or because no further data is available.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended_event">ended event - MDN</a>
   */
  event Event ended;
  /**
   * The error event is fired when the resource could not be loaded due to an error (for example, a network connectivity problem).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error_event">error event - MDN</a>
   */
  event Event error;
  /**
   * The loadeddata event is fired when the frame at the current playback position of the media has finished loading; often the first frame.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadeddata_event">loadeddata event - MDN</a>
   */
  event Event loadeddata;
  /**
   * The loadedmetadata event is fired when the metadata has been loaded.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadedmetadata_event">loadedmetadata event - MDN</a>
   */
  event Event loadedmetadata;
  /**
   * The loadstart event is fired when the browser has started to load a resource.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadstart_event">loadstart event - MDN</a>
   */
  event Event loadstart;
  /**
   * The pause event is sent when a request to pause an activity is handled and the activity has entered its paused state, most commonly after the media has been paused through a call to the element's pause() method.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause_event">pause event - MDN</a>
   */
  event Event pause;
  /**
   * The play event is fired when the paused property is changed from true to false, as a result of the play method, or the autoplay attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play_event">play event - MDN</a>
   */
  event Event play;
  /**
   * The playing event is fired when playback is ready to start after having been paused or delayed due to lack of data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playing_event">playing event - MDN</a>
   */
  event Event playing;
  /**
   * The progress event is fired periodically as the browser loads a resource.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/progress_event">progress event - MDN</a>
   */
  event Event progress;
  /**
   * The ratechange event is fired when the playback rate has changed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ratechange_event">ratechange event - MDN</a>
   */
  event Event ratechange;
  /**
   * The seeked event is fired when a seek operation completed, the current playback position has changed, and the Boolean seeking attribute is changed to false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeked_event">seeked event - MDN</a>
   */
  event Event seeked;
  /**
   * The seeking event is fired when a seek operation starts, meaning the Boolean seeking attribute has changed to true and the media is seeking a new position.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeking_event">seeking event - MDN</a>
   */
  event Event seeking;
  /**
   * The stalled event is fired when the user agent is trying to fetch media data, but data is unexpectedly not forthcoming.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/stalled_event">stalled event - MDN</a>
   */
  event Event stalled;
  /**
   * The suspend event is fired when media data loading has been suspended.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/suspend_event">suspend event - MDN</a>
   */
  event Event suspend;
  /**
   * The timeupdate event is fired when the time indicated by the currentTime attribute has been updated.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/timeupdate_event">timeupdate event - MDN</a>
   */
  event Event timeupdate;
  /**
   * The volumechange event is fired when the volume has changed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volumechange_event">volumechange event - MDN</a>
   */
  event Event volumechange;
  /**
   * The waiting event is fired when playback has stopped because of a temporary lack of data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/waiting_event">waiting event - MDN</a>
   */
  event Event waiting;
  TextTrack addTextTrack( TextTrackKind kind, optional DOMString label = "", optional DOMString language = "" );
  /**
   * The HTMLMediaElement method canPlayType() reports how likely it is that the current browser will be able to play media of a given MIME type.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType">HTMLMediaElement.canPlayType - MDN</a>
   */
  CanPlayTypeResult canPlayType( DOMString type );
  /**
   * The HTMLMediaElement.fastSeek() method quickly seeks the media to the new time with precision tradeoff.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/fastSeek">HTMLMediaElement.fastSeek - MDN</a>
   */
  void fastSeek( double time );
  object getStartDate();
  /**
   * The HTMLMediaElement method load() resets the media element to its initial state and begins the process of selecting a media source and loading the media in preparation for playback to begin at the beginning.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/load">HTMLMediaElement.load - MDN</a>
   */
  void load();
  /**
   * The HTMLMediaElement.pause() method will pause playback of the media, if the media is already in a paused state this method will have no effect.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause">HTMLMediaElement.pause - MDN</a>
   */
  void pause();
  /**
   * The HTMLMediaElement play() method attempts to begin playback of the media. It returns a Promise which is resolved when playback has been successfully started.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play">HTMLMediaElement.play - MDN</a>
   */
  Promise<void> play();
  /**
   * The setMediaKeys() property of the HTMLMediaElement interface returns a Promise that resolves to the passed MediaKeys, which are those used to decrypt media during playback.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setMediaKeys">HTMLMediaElement.setMediaKeys - MDN</a>
   */
  [SecureContext]
  Promise<void> setMediaKeys( MediaKeys? mediaKeys );
};

/**
 * The HTMLMenuElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating menu elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMenuElement">HTMLMenuElement - MDN</a>
 */
[Exposed=Window]
interface HTMLMenuElement : HTMLElement {
  [CEReactions]
  attribute boolean compact;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLMetaElement interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the HTMLElement interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement">HTMLMetaElement - MDN</a>
 */
[Exposed=Window]
interface HTMLMetaElement : HTMLElement {
  [CEReactions]
  attribute DOMString content;
  [CEReactions]
  attribute DOMString httpEquiv;
  [CEReactions]
  attribute DOMString name;
  [CEReactions]
  attribute DOMString scheme;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTML meter elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of meter elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement">HTMLMeterElement - MDN</a>
 */
[Exposed=Window]
interface HTMLMeterElement : HTMLElement {
  /**
   * The HTMLMeterElement.labels read-only property returns a NodeList of the label elements associated with the meter element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement/labels">HTMLMeterElement.labels - MDN</a>
   */
  readonly attribute NodeList labels;
  [CEReactions]
  attribute double high;
  [CEReactions]
  attribute double low;
  [CEReactions]
  attribute double max;
  [CEReactions]
  attribute double min;
  [CEReactions]
  attribute double optimum;
  [CEReactions]
  attribute double value;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLModElement interface provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is del and ins.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement">HTMLModElement - MDN</a>
 */
[Exposed=Window]
interface HTMLModElement : HTMLElement {
  [CEReactions]
  attribute USVString cite;
  [CEReactions]
  attribute DOMString dateTime;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLOListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement">HTMLOListElement - MDN</a>
 */
[Exposed=Window]
interface HTMLOListElement : HTMLElement {
  [CEReactions]
  attribute boolean compact;
  [CEReactions]
  attribute boolean reversed;
  [CEReactions]
  attribute long start;
  [CEReactions]
  attribute DOMString type;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLObjectElement interface provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of object element, representing external resources.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement">HTMLObjectElement - MDN</a>
 */
[Exposed=Window]
interface HTMLObjectElement : HTMLElement {
  /**
   * The contentDocument read-only property of the HTMLObjectElement interface Returns a Document representing the active document of the object element's nested browsing context, if any; otherwise null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/contentDocument">HTMLObjectElement.contentDocument - MDN</a>
   */
  readonly attribute Document? contentDocument;
  /**
   * The contentWindow read-only property of the HTMLObjectElement interface returns a WindowProxy representing the window proxy of the object element's nested browsing context, if any; otherwise null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/contentWindow">HTMLObjectElement.contentWindow - MDN</a>
   */
  readonly attribute WindowProxy? contentWindow;
  /**
   * The form read-only property of the HTMLObjectElement interface Retuns a HTMLFormElement representing the object element's form owner, or null if there isn't one.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/form">HTMLObjectElement.form - MDN</a>
   */
  readonly attribute HTMLFormElement? form;
  /**
   * The validationMessage read-only property of the HTMLObjectElement interface returns a DOMString representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/validationMessage">HTMLObjectElement.validationMessage - MDN</a>
   */
  readonly attribute DOMString validationMessage;
  /**
   * The validity read-only property of the HTMLObjectElement interface returns a ValidityState with the validity states that this element is in.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/validity">HTMLObjectElement.validity - MDN</a>
   */
  readonly attribute ValidityState validity;
  /**
   * The willValidate read-only property of the HTMLObjectElement interface returns a Boolean that indicates whether the element is a candidate for constraint validation. Always false for HTMLObjectElement objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/willValidate">HTMLObjectElement.willValidate - MDN</a>
   */
  readonly attribute boolean willValidate;
  [CEReactions]
  attribute DOMString align;
  [CEReactions]
  attribute DOMString archive;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString border;
  [CEReactions]
  attribute DOMString code;
  [CEReactions]
  attribute DOMString codeBase;
  [CEReactions]
  attribute DOMString codeType;
  /**
   * The data property of the HTMLObjectElement interface returns a DOMString that reflects the data HTML attribute, specifying the address of a resource's data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/data">HTMLObjectElement.data - MDN</a>
   */
  [CEReactions]
  attribute USVString data;
  [CEReactions]
  attribute boolean declare;
  /**
   * The height property of the HTMLObjectElement interface Returns a DOMString that reflects the height HTML attribute, specifying the displayed height of the resource in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/height">HTMLObjectElement.height - MDN</a>
   */
  [CEReactions]
  attribute DOMString height;
  [CEReactions]
  attribute unsigned long hspace;
  /**
   * The name property of the HTMLObjectElement interface returns a DOMString that reflects the name HTML attribute, specifying the name of the browsing context.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/name">HTMLObjectElement.name - MDN</a>
   */
  [CEReactions]
  attribute DOMString name;
  [CEReactions]
  attribute DOMString standby;
  /**
   * The type property of the HTMLObjectElement interface returns a DOMString that reflects the type HTML attribute, specifying the MIME type of the resource.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/type">HTMLObjectElement.type - MDN</a>
   */
  [CEReactions]
  attribute DOMString type;
  /**
   * The useMap property of the HTMLObjectElement interface returns a DOMString that reflects the usemap HTML attribute, specifying a map element to use.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/useMap">HTMLObjectElement.useMap - MDN</a>
   */
  [CEReactions]
  attribute DOMString useMap;
  [CEReactions]
  attribute unsigned long vspace;
  /**
   * The width property of the HTMLObjectElement interface returns a DOMString that reflects the width HTML attribute, specifying the displayed width of the resource in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/width">HTMLObjectElement.width - MDN</a>
   */
  [CEReactions]
  attribute DOMString width;
  [HTMLConstructor]
  constructor();
  /**
   * The checkValidity() method of the HTMLObjectElement interface returns a Boolean that always is true, because object objects are never candidates for constraint validation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/checkValidity">HTMLObjectElement.checkValidity - MDN</a>
   */
  boolean checkValidity();
  Document? getSVGDocument();
  boolean reportValidity();
  /**
   * The setCustomValidity() method of the HTMLObjectElement interface sets a custom validity message for the element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/setCustomValidity">HTMLObjectElement.setCustomValidity - MDN</a>
   */
  void setCustomValidity( DOMString error );
};

/**
 * The HTMLOptGroupElement interface provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of optgroup elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement">HTMLOptGroupElement - MDN</a>
 */
[Exposed=Window]
interface HTMLOptGroupElement : HTMLElement {
  [CEReactions]
  attribute boolean disabled;
  [CEReactions]
  attribute DOMString label;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLOptionElement interface represents option elements and inherits all classes and methods of the HTMLElement interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement">HTMLOptionElement - MDN</a>
 */
[Exposed=Window, LegacyFactoryFunction=Option( optional DOMString text = "", optional DOMString value, optional boolean defaultSelected = false, optional boolean selected = false )]
interface HTMLOptionElement : HTMLElement {
  readonly attribute HTMLFormElement? form;
  readonly attribute long index;
  [CEReactions]
  attribute boolean defaultSelected;
  [CEReactions]
  attribute boolean disabled;
  [CEReactions]
  attribute DOMString label;
  attribute boolean selected;
  [CEReactions]
  attribute DOMString text;
  [CEReactions]
  attribute DOMString value;
  [HTMLConstructor]
  constructor();
};

/**
 * This interface inherits the methods of its parent, HTMLCollection.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection">HTMLOptionsCollection - MDN</a>
 */
[Exposed=Window]
interface HTMLOptionsCollection : HTMLCollection {
  [CEReactions]
  attribute unsigned long length;
  attribute long selectedIndex;
  [CEReactions]
  void add( ( HTMLOptionElement or HTMLOptGroupElement ) element, optional ( HTMLElement or long )? before = null );
  [CEReactions]
  void remove( long index );
  /**
   * This interface inherits the methods of its parent, HTMLCollection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection">HTMLOptionsCollection - MDN</a>
   */
  [CEReactions]
  setter void ( unsigned long index, HTMLOptionElement? option );
};

/**
 * The HTMLOutputElement interface provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of output elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement">HTMLOutputElement - MDN</a>
 */
[Exposed=Window]
interface HTMLOutputElement : HTMLElement {
  readonly attribute HTMLFormElement? form;
  [SameObject, PutForwards=value]
  readonly attribute DOMTokenList htmlFor;
  /**
   * The HTMLOutputElement.labels read-only property returns a NodeList of the label elements associated with the output element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/labels">HTMLOutputElement.labels - MDN</a>
   */
  readonly attribute NodeList labels;
  readonly attribute DOMString type;
  readonly attribute DOMString validationMessage;
  readonly attribute ValidityState validity;
  readonly attribute boolean willValidate;
  [CEReactions]
  attribute DOMString defaultValue;
  [CEReactions]
  attribute DOMString name;
  [CEReactions]
  attribute DOMString value;
  [HTMLConstructor]
  constructor();
  boolean checkValidity();
  boolean reportValidity();
  void setCustomValidity( DOMString error );
};

/**
 * The HTMLParagraphElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating p elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement">HTMLParagraphElement - MDN</a>
 */
[Exposed=Window]
interface HTMLParagraphElement : HTMLElement {
  [CEReactions]
  attribute DOMString align;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLParamElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating param elements, representing a pair of a key and a value that acts as a parameter for an object element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement">HTMLParamElement - MDN</a>
 */
[Exposed=Window]
interface HTMLParamElement : HTMLElement {
  [CEReactions]
  attribute DOMString name;
  [CEReactions]
  attribute DOMString type;
  [CEReactions]
  attribute DOMString value;
  [CEReactions]
  attribute DOMString valueType;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLPictureElement interface represents a picture HTML element. It doesn't implement specific properties or methods.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement">HTMLPictureElement - MDN</a>
 */
[Exposed=Window]
interface HTMLPictureElement : HTMLElement {
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLPreElement interface exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text (pre).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement">HTMLPreElement - MDN</a>
 */
[Exposed=Window]
interface HTMLPreElement : HTMLElement {
  [CEReactions]
  attribute long width;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLProgressElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of progress elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement">HTMLProgressElement - MDN</a>
 */
[Exposed=Window]
interface HTMLProgressElement : HTMLElement {
  /**
   * The HTMLProgressElement.labels read-only property returns a NodeList of the label elements associated with the progress element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement/labels">HTMLProgressElement.labels - MDN</a>
   */
  readonly attribute NodeList labels;
  readonly attribute double position;
  [CEReactions]
  attribute double max;
  [CEReactions]
  attribute double value;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLQuoteElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like blockquote and q, but not the cite element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement">HTMLQuoteElement - MDN</a>
 */
[Exposed=Window]
interface HTMLQuoteElement : HTMLElement {
  [CEReactions]
  attribute USVString cite;
  [HTMLConstructor]
  constructor();
};

/**
 * HTML script elements expose the HTMLScriptElement interface, which provides special properties and methods for manipulating the behavior and execution of script elements (beyond the inherited HTMLElement interface).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement">HTMLScriptElement - MDN</a>
 */
[Exposed=Window]
interface HTMLScriptElement : HTMLElement {
  [CEReactions]
  attribute boolean async;
  [CEReactions]
  attribute DOMString charset;
  [CEReactions]
  attribute DOMString? crossOrigin;
  [CEReactions]
  attribute boolean defer;
  [CEReactions]
  attribute DOMString event;
  [CEReactions]
  attribute DOMString htmlFor;
  [CEReactions]
  attribute DOMString integrity;
  [CEReactions]
  attribute boolean noModule;
  /**
   * The referrerPolicy property of the HTMLScriptElement interface reflects the HTML referrerpolicy of the script element and fetches made by that script, defining which referrer is sent when fetching the resource.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/referrerPolicy">HTMLScriptElement.referrerPolicy - MDN</a>
   */
  [CEReactions]
  attribute DOMString referrerPolicy;
  [CEReactions]
  attribute USVString src;
  [CEReactions]
  attribute DOMString text;
  [CEReactions]
  attribute DOMString type;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLSelectElement interface represents a select HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement">HTMLSelectElement - MDN</a>
 */
[Exposed=Window]
interface HTMLSelectElement : HTMLElement {
  /**
   * The HTMLSelectElement.form read-only property returns a HTMLFormElement representing the form that this element is associated with. If the element is not associated with of a form element, then it returns null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/form">HTMLSelectElement.form - MDN</a>
   */
  readonly attribute HTMLFormElement? form;
  /**
   * The HTMLSelectElement.labels read-only property returns a NodeList of the label elements associated with the select element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/labels">HTMLSelectElement.labels - MDN</a>
   */
  readonly attribute NodeList labels;
  /**
   * The HTMLSelectElement.options read-only property returns a HTMLOptionsCollection of the option elements contained by the select element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/options">HTMLSelectElement.options - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLOptionsCollection options;
  /**
   * The read-only HTMLSelectElement property selectedOptions contains a list of the option elements contained within the select element that are currently selected. The list of selected options is an HTMLCollection object with one entry per currently selected option.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/selectedOptions">HTMLSelectElement.selectedOptions - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLCollection selectedOptions;
  /**
   * The HTMLSelectElement.type read-only property returns the form control's type.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/type">HTMLSelectElement.type - MDN</a>
   */
  readonly attribute DOMString type;
  readonly attribute DOMString validationMessage;
  readonly attribute ValidityState validity;
  readonly attribute boolean willValidate;
  [CEReactions]
  attribute DOMString autocomplete;
  /**
   * The HTMLSelectElement.disabled is a Boolean that reflects the disabled HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks. A disabled element is unusable and un-clickable.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/disabled">HTMLSelectElement.disabled - MDN</a>
   */
  [CEReactions]
  attribute boolean disabled;
  [CEReactions]
  attribute unsigned long length;
  [CEReactions]
  attribute boolean multiple;
  [CEReactions]
  attribute DOMString name;
  [CEReactions]
  attribute boolean required;
  /**
   * The HTMLSelectElement.selectedIndex is a long that reflects the index of the first or last selected option element, depending on the value of multiple. The value -1 indicates that no element is selected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/selectedIndex">HTMLSelectElement.selectedIndex - MDN</a>
   */
  attribute long selectedIndex;
  [CEReactions]
  attribute unsigned long size;
  attribute DOMString value;
  [HTMLConstructor]
  constructor();
  /**
   * The HTMLSelectElement.add() method adds an element to the collection of option elements for this select element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/add">HTMLSelectElement.add - MDN</a>
   */
  [CEReactions]
  void add( ( HTMLOptionElement or HTMLOptGroupElement ) element, optional ( HTMLElement or long )? before = null );
  /**
   * The HTMLSelectElement.checkValidity() method checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable invalid event at the element, and then returns false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/checkValidity">HTMLSelectElement.checkValidity - MDN</a>
   */
  boolean checkValidity();
  /**
   * The HTMLSelectElement.namedItem() method returns the HTMLOptionElement corresponding to the HTMLOptionElement whose name or id match the specified name, or null if no option matches.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/namedItem">HTMLSelectElement.namedItem - MDN</a>
   */
  HTMLOptionElement? namedItem( DOMString name );
  /**
   * The HTMLSelectElement.remove() method removes the element at the specified index from the options collection for this select element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/remove">HTMLSelectElement.remove - MDN</a>
   */
  [CEReactions]
  void remove();
  /**
   * The HTMLSelectElement.remove() method removes the element at the specified index from the options collection for this select element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/remove">HTMLSelectElement.remove - MDN</a>
   */
  [CEReactions]
  void remove( long index );
  boolean reportValidity();
  /**
   * The HTMLSelectElement.setCustomValidity() method sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/setCustomValidity">HTMLSelectElement.setCustomValidity - MDN</a>
   */
  void setCustomValidity( DOMString error );
  /**
   * The HTMLSelectElement.item() method returns the Element corresponding to the HTMLOptionElement whose position in the options list corresponds to the index given in the parameter, or null if there are none.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/item">HTMLSelectElement.item - MDN</a>
   */
  getter Element? item( unsigned long index );
  /**
   * The HTMLSelectElement interface represents a select HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement">HTMLSelectElement - MDN</a>
   */
  [CEReactions]
  setter void ( unsigned long index, HTMLOptionElement? option );
};

/**
 * Fired on an HTMLSlotElement instance (slot element) when the node(s) contained in that slot change.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement">HTMLSlotElement - MDN</a>
 */
[Exposed=Window]
interface HTMLSlotElement : HTMLElement {
  /**
   * The name property of the HTMLSlotElement interface returns or sets the slot name. A slot is a placeholder inside a web component that users can fill with their own markup.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/name">HTMLSlotElement.name - MDN</a>
   */
  [CEReactions]
  attribute DOMString name;
  /**
   * The slotchange event is fired on an HTMLSlotElement instance (slot element) when the node(s) contained in that slot change.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/slotchange_event">slotchange event - MDN</a>
   */
  [NoBubble]
  event Event slotchange;
  [HTMLConstructor]
  constructor();
  /**
   * The assignedElements() property of the HTMLSlotElement interface returns a sequence of the elements assigned to this slot (and no other nodes). If the flatten option is set to true, it also returns the assigned elements of any other slots that are descendants of this slot. If no assigned nodes are found, it returns the slot's fallback content.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements">HTMLSlotElement.assignedElements - MDN</a>
   */
  sequence<Element> assignedElements( optional AssignedNodesOptions options = {} );
  /**
   * The assignedNodes() property of the HTMLSlotElement interface returns a sequence of the nodes assigned to this slot, and if the flatten option is set to true, the assigned nodes of any other slots that are descendants of this slot. If no assigned nodes are found, it returns the slot's fallback content.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedNodes">HTMLSlotElement.assignedNodes - MDN</a>
   */
  sequence<Node> assignedNodes( optional AssignedNodesOptions options = {} );
};

/**
 * The HTMLSourceElement interface provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating source elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement">HTMLSourceElement - MDN</a>
 */
[Exposed=Window]
interface HTMLSourceElement : HTMLElement {
  [CEReactions]
  attribute DOMString media;
  [CEReactions]
  attribute DOMString sizes;
  [CEReactions]
  attribute USVString src;
  [CEReactions]
  attribute USVString srcset;
  [CEReactions]
  attribute DOMString type;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLSpanElement interface represents a span element and derives from the HTMLElement interface, but without implementing any additional properties or methods.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement">HTMLSpanElement - MDN</a>
 */
[Exposed=Window]
interface HTMLSpanElement : HTMLElement {
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLStyleElement interface represents a style element. It inherits properties and methods from its parent, HTMLElement, and from LinkStyle.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement">HTMLStyleElement - MDN</a>
 */
[Exposed=Window]
interface HTMLStyleElement : HTMLElement {
  readonly attribute CSSStyleSheet? sheet;
  /**
   * The HTMLStyleElement.media property specifies the intended destination medium for style information.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/media">HTMLStyleElement.media - MDN</a>
   */
  [CEReactions]
  attribute DOMString media;
  /**
   * The HTMLStyleElement.type read-only property returns the type of the current style.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/type">HTMLStyleElement.type - MDN</a>
   */
  [CEReactions]
  attribute DOMString type;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLTableCaptionElement interface special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement">HTMLTableCaptionElement - MDN</a>
 */
[Exposed=Window]
interface HTMLTableCaptionElement : HTMLElement {
  [CEReactions]
  attribute DOMString align;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLTableCellElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement">HTMLTableCellElement - MDN</a>
 */
[Exposed=Window]
interface HTMLTableCellElement : HTMLElement {
  readonly attribute long cellIndex;
  [CEReactions]
  attribute DOMString abbr;
  [CEReactions]
  attribute DOMString align;
  [CEReactions]
  attribute DOMString axis;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString bgColor;
  [CEReactions]
  attribute DOMString ch;
  [CEReactions]
  attribute DOMString chOff;
  [CEReactions]
  attribute unsigned long colSpan;
  [CEReactions]
  attribute DOMString headers;
  [CEReactions]
  attribute DOMString height;
  [CEReactions]
  attribute boolean noWrap;
  [CEReactions]
  attribute unsigned long rowSpan;
  [CEReactions]
  attribute DOMString scope;
  [CEReactions]
  attribute DOMString vAlign;
  [CEReactions]
  attribute DOMString width;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLTableColElement interface provides special properties (beyond the HTMLElement interface it also has available to it inheritance) for manipulating single or grouped table column elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement">HTMLTableColElement - MDN</a>
 */
[Exposed=Window]
interface HTMLTableColElement : HTMLElement {
  [CEReactions]
  attribute DOMString align;
  [CEReactions]
  attribute DOMString ch;
  [CEReactions]
  attribute DOMString chOff;
  [CEReactions]
  attribute unsigned long span;
  [CEReactions]
  attribute DOMString vAlign;
  [CEReactions]
  attribute DOMString width;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLTableElement interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement">HTMLTableElement - MDN</a>
 */
[Exposed=Window]
interface HTMLTableElement : HTMLElement {
  /**
   * The read-only HTMLTableElement property rows returns a live HTMLCollection of all the rows in the table, including the rows contained within any thead, tfoot, and tbody elements.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rows">HTMLTableElement.rows - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLCollection rows;
  /**
   * The HTMLTableElement.tBodies read-only property returns a live HTMLCollection of the bodies in a table.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tBodies">HTMLTableElement.tBodies - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLCollection tBodies;
  [CEReactions]
  attribute DOMString align;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString bgColor;
  [CEReactions]
  attribute DOMString border;
  /**
   * The HTMLTableElement.caption property represents the table caption. If no caption element is associated with the table, this property is null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/caption">HTMLTableElement.caption - MDN</a>
   */
  [CEReactions]
  attribute HTMLTableCaptionElement? caption;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString cellPadding;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString cellSpacing;
  [CEReactions]
  attribute DOMString frame;
  [CEReactions]
  attribute DOMString rules;
  [CEReactions]
  attribute DOMString summary;
  /**
   * The HTMLTableElement.tFoot property represents the tfoot element of a table. Its value will be null if there is no such element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tFoot">HTMLTableElement.tFoot - MDN</a>
   */
  [CEReactions]
  attribute HTMLTableSectionElement? tFoot;
  /**
   * The HTMLTableElement.tHead represents the thead element of a table. Its value will be null if there is no such element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tHead">HTMLTableElement.tHead - MDN</a>
   */
  [CEReactions]
  attribute HTMLTableSectionElement? tHead;
  [CEReactions]
  attribute DOMString width;
  [HTMLConstructor]
  constructor();
  /**
   * The HTMLTableElement.createCaption() method returns the caption element associated with a given table. If no caption element exists on the table, this method creates it, and then returns it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createCaption">HTMLTableElement.createCaption - MDN</a>
   */
  HTMLTableCaptionElement createCaption();
  HTMLTableSectionElement createTBody();
  /**
   * The HTMLTableElement.createTFoot() method returns the tfoot element associated with a given table. If no footer exists in the table, this methods creates it, and then returns it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTFoot">HTMLTableElement.createTFoot - MDN</a>
   */
  HTMLTableSectionElement createTFoot();
  /**
   * The HTMLTableElement.createTHead() method returns the thead element associated with a given table. If no header exists in the table, this method creates it, and then returns it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTHead">HTMLTableElement.createTHead - MDN</a>
   */
  HTMLTableSectionElement createTHead();
  /**
   * The HTMLTableElement.deleteCaption() method removes the caption element from a given table. If there is no caption element associated with the table, this method does nothing.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteCaption">HTMLTableElement.deleteCaption - MDN</a>
   */
  [CEReactions]
  void deleteCaption();
  /**
   * The HTMLTableElement.deleteRow() method removes a specific row (tr) from a given table.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteRow">HTMLTableElement.deleteRow - MDN</a>
   */
  [CEReactions]
  void deleteRow( long index );
  /**
   * The HTMLTableElement.deleteTFoot() method removes the tfoot element from a given table.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteTFoot">HTMLTableElement.deleteTFoot - MDN</a>
   */
  [CEReactions]
  void deleteTFoot();
  /**
   * The HTMLTableElement.deleteTHead() removes the thead element from a given table.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteTHead">HTMLTableElement.deleteTHead - MDN</a>
   */
  [CEReactions]
  void deleteTHead();
  /**
   * The HTMLTableElement.insertRow() method inserts a new row (tr) in a given table, and returns a reference to the new row.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/insertRow">HTMLTableElement.insertRow - MDN</a>
   */
  HTMLTableRowElement insertRow( optional long index = -1 );
};

/**
 * The HTMLTableRowElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement">HTMLTableRowElement - MDN</a>
 */
[Exposed=Window]
interface HTMLTableRowElement : HTMLElement {
  [SameObject]
  readonly attribute HTMLCollection cells;
  /**
   * The HTMLTableRowElement.rowIndex read-only property represents the position of a row in relation to the whole table.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/rowIndex">HTMLTableRowElement.rowIndex - MDN</a>
   */
  readonly attribute long rowIndex;
  readonly attribute long sectionRowIndex;
  [CEReactions]
  attribute DOMString align;
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString bgColor;
  [CEReactions]
  attribute DOMString ch;
  [CEReactions]
  attribute DOMString chOff;
  [CEReactions]
  attribute DOMString vAlign;
  [HTMLConstructor]
  constructor();
  [CEReactions]
  void deleteCell( long index );
  /**
   * The HTMLTableRowElement.insertCell() method inserts a new cell (td) into a table row (tr) and returns a reference to the cell.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/insertCell">HTMLTableRowElement.insertCell - MDN</a>
   */
  HTMLTableCellElement insertCell( optional long index = -1 );
};

/**
 * The HTMLTableSectionElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement">HTMLTableSectionElement - MDN</a>
 */
[Exposed=Window]
interface HTMLTableSectionElement : HTMLElement {
  [SameObject]
  readonly attribute HTMLCollection rows;
  [CEReactions]
  attribute DOMString align;
  [CEReactions]
  attribute DOMString ch;
  [CEReactions]
  attribute DOMString chOff;
  [CEReactions]
  attribute DOMString vAlign;
  [HTMLConstructor]
  constructor();
  [CEReactions]
  void deleteRow( long index );
  HTMLTableRowElement insertRow( optional long index = -1 );
};

/**
 * The HTMLTemplateElement interface enables access to the contents of an HTML template element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement">HTMLTemplateElement - MDN</a>
 */
[Exposed=Window]
interface HTMLTemplateElement : HTMLElement {
  /**
   * The HTMLTemplateElement.content property returns a template element's template contents (a DocumentFragment).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement/content">HTMLTemplateElement.content - MDN</a>
   */
  readonly attribute DocumentFragment content;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLTextAreaElement interface provides special properties and methods for manipulating the layout and presentation of textarea elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement">HTMLTextAreaElement - MDN</a>
 */
[Exposed=Window]
interface HTMLTextAreaElement : HTMLElement {
  readonly attribute HTMLFormElement? form;
  readonly attribute NodeList labels;
  readonly attribute unsigned long textLength;
  readonly attribute DOMString type;
  readonly attribute DOMString validationMessage;
  readonly attribute ValidityState validity;
  readonly attribute boolean willValidate;
  [CEReactions]
  attribute DOMString autocomplete;
  [CEReactions]
  attribute unsigned long cols;
  [CEReactions]
  attribute DOMString defaultValue;
  [CEReactions]
  attribute DOMString dirName;
  [CEReactions]
  attribute boolean disabled;
  [CEReactions]
  attribute long maxLength;
  [CEReactions]
  attribute long minLength;
  [CEReactions]
  attribute DOMString name;
  [CEReactions]
  attribute DOMString placeholder;
  [CEReactions]
  attribute boolean readOnly;
  [CEReactions]
  attribute boolean required;
  [CEReactions]
  attribute unsigned long rows;
  attribute DOMString selectionDirection;
  attribute unsigned long selectionEnd;
  attribute unsigned long selectionStart;
  attribute [LegacyNullToEmptyString] DOMString value;
  [CEReactions]
  attribute DOMString wrap;
  [HTMLConstructor]
  constructor();
  boolean checkValidity();
  boolean reportValidity();
  void select();
  void setCustomValidity( DOMString error );
  void setRangeText( DOMString replacement );
  void setRangeText( DOMString replacement, unsigned long start, unsigned long end, optional SelectionMode selectionMode = "preserve" );
  void setSelectionRange( unsigned long start, unsigned long end, optional DOMString direction );
};

/**
 * The HTMLTimeElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating time elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement">HTMLTimeElement - MDN</a>
 */
[Exposed=Window]
interface HTMLTimeElement : HTMLElement {
  /**
   * The HTMLTimeElement.dateTime property is a DOMString that reflects the datetime HTML attribute, containing a machine-readable form of the element's date and time value.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement/dateTime">HTMLTimeElement.dateTime - MDN</a>
   */
  [CEReactions]
  attribute DOMString dateTime;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLTitleElement interface contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement">HTMLTitleElement - MDN</a>
 */
[Exposed=Window]
interface HTMLTitleElement : HTMLElement {
  [CEReactions]
  attribute DOMString text;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLTrackElement interface represents an HTML track element within the DOM. This element can be used as a child of either audio or video to specify a text track containing information such as closed captions or subtitles.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement">HTMLTrackElement - MDN</a>
 */
[Exposed=Window]
interface HTMLTrackElement : HTMLElement {
  const unsigned short ERROR = 3;
  const unsigned short LOADED = 2;
  const unsigned short LOADING = 1;
  const unsigned short NONE = 0;
  readonly attribute unsigned short readyState;
  readonly attribute TextTrack track;
  [CEReactions]
  attribute boolean default;
  [CEReactions]
  attribute DOMString kind;
  [CEReactions]
  attribute DOMString label;
  /**
   * The HTMLTrackElement.src property reflects the value of the track element's src attribute, which indicates the URL of the text track's data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/src">HTMLTrackElement.src - MDN</a>
   */
  [CEReactions]
  attribute USVString src;
  [CEReactions]
  attribute DOMString srclang;
  /**
   * The cuechange event fires when a TextTrack has changed the currently displaying cues.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/cuechange_event">cuechange event - MDN</a>
   */
  event Event cuechange;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLUListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement">HTMLUListElement - MDN</a>
 */
[Exposed=Window]
interface HTMLUListElement : HTMLElement {
  [CEReactions]
  attribute boolean compact;
  [CEReactions]
  attribute DOMString type;
  [HTMLConstructor]
  constructor();
};

/**
 * The HTMLUnknownElement interface represents an invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement">HTMLUnknownElement - MDN</a>
 */
[Exposed=Window]
interface HTMLUnknownElement : HTMLElement {
};

/**
 * The HTMLVideoElement interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">HTMLVideoElement - MDN</a>
 */
[Exposed=Window]
interface HTMLVideoElement : HTMLMediaElement {
  /**
   * The HTMLVideoElement interface's read-only videoHeight property indicates the intrinsic height of the video, expressed in CSS pixels. In simple terms, this is the height of the media in its natural size.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoHeight">HTMLVideoElement.videoHeight - MDN</a>
   */
  readonly attribute unsigned long videoHeight;
  /**
   * The HTMLVideoElement interface's read-only videoWidth property indicates the intrinsic width of the video, expressed in CSS pixels. In simple terms, this is the width of the media in its natural size.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoWidth">HTMLVideoElement.videoWidth - MDN</a>
   */
  readonly attribute unsigned long videoWidth;
  [CEReactions]
  attribute unsigned long height;
  [CEReactions]
  attribute boolean playsInline;
  [CEReactions]
  attribute USVString poster;
  [CEReactions]
  attribute unsigned long width;
  [HTMLConstructor]
  constructor();
  /**
   * The HTMLVideoElement method getVideoPlaybackQuality() creates and returns a VideoPlaybackQuality object containing metrics including how many frames have been lost.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/getVideoPlaybackQuality">HTMLVideoElement.getVideoPlaybackQuality - MDN</a>
   */
  VideoPlaybackQuality getVideoPlaybackQuality();
};

/**
 * The HashChangeEvent interface represents events that fire when the fragment identifier of the URL has changed.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent">HashChangeEvent - MDN</a>
 */
[Exposed=Window]
interface HashChangeEvent : Event {
  /**
   * The newURL read-only property of the HashChangeEvent interface returns the new URL to which the window is navigating.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent/newURL">HashChangeEvent.newURL - MDN</a>
   */
  readonly attribute USVString newURL;
  /**
   * The oldURL read-only property of the HashChangeEvent interface returns the previous URL from which the window was navigated.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent/oldURL">HashChangeEvent.oldURL - MDN</a>
   */
  readonly attribute USVString oldURL;
  constructor( DOMString type, optional HashChangeEventInit eventInitDict = {} );
};

/**
 * The Headers interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing headers from the list of the request's headers.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers">Headers - MDN</a>
 */
[Exposed=(Window,Worker)]
interface Headers {
  iterable<ByteString, ByteString>;
  /**
   * The Headers() constructor creates a new Headers object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers">Headers.Headers - MDN</a>
   */
  constructor( optional HeadersInit init );
  /**
   * The append() method of the Headers interface appends a new value onto an existing header inside a Headers object, or adds the header if it does not already exist.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers/append">Headers.append - MDN</a>
   */
  void append( ByteString name, ByteString value );
  /**
   * The delete() method of the Headers interface deletes a header from the current Headers object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers/delete">Headers.delete - MDN</a>
   */
  void delete( ByteString name );
  /**
   * The get() method of the Headers interface returns a byte string of all the values of a header within a Headers object with a given name. If the requested header doesn't exist in the Headers object, it returns null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers/get">Headers.get - MDN</a>
   */
  ByteString? get( ByteString name );
  /**
   * The has() method of the Headers interface returns a boolean stating whether a Headers object contains a certain header.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers/has">Headers.has - MDN</a>
   */
  boolean has( ByteString name );
  /**
   * The set() method of the Headers interface sets a new value for an existing header inside a Headers object, or adds the header if it does not already exist.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers/set">Headers.set - MDN</a>
   */
  void set( ByteString name, ByteString value );
};

/**
 * The History interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/History">History - MDN</a>
 */
[Exposed=Window]
interface History {
  /**
   * The History.length read-only property returns an integer representing the number of elements in the session history, including the currently loaded page.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/History/length">History.length - MDN</a>
   */
  readonly attribute unsigned long length;
  /**
   * The History.state property returns a value representing the state at the top of the history stack.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/History/state">History.state - MDN</a>
   */
  readonly attribute any state;
  /**
   * The scrollRestoration property of History interface allows web applications to explicitly set default scroll restoration behavior on history navigation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/History/scrollRestoration">History.scrollRestoration - MDN</a>
   */
  attribute ScrollRestoration scrollRestoration;
  /**
   * The History.back() method causes the browser to move back one page in the session history.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/History/back">History.back - MDN</a>
   */
  void back();
  /**
   * The History.forward() method causes the browser to move forward one page in the session history. It has the same effect as calling history.go(1).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/History/forward">History.forward - MDN</a>
   */
  void forward();
  /**
   * The History.go() method loads a specific page from the session history. You can use it to move forwards and backwards through the history depending on the value of a parameter.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/History/go">History.go - MDN</a>
   */
  void go( optional long delta = 0 );
  /**
   * In an HTML document, the history.pushState() method adds a state to the browser's session history stack.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/History/pushState">History.pushState - MDN</a>
   */
  void pushState( any data, DOMString title, optional USVString? url = null );
  /**
   * The History.replaceState() method modifies the current history entry, replacing it with the stateObj, title, and URL passed in the method parameters. This method is particularly useful when you want to update the state object or URL of the current history entry in response to some user action.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState">History.replaceState - MDN</a>
   */
  void replaceState( any data, DOMString title, optional USVString? url = null );
};

/**
 * The IDBCursor interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor">IDBCursor - MDN</a>
 */
[Exposed=(Window,Worker)]
interface IDBCursor {
  readonly attribute IDBCursorDirection direction;
  readonly attribute any key;
  readonly attribute any primaryKey;
  [SameObject]
  readonly attribute IDBRequest request;
  readonly attribute ( IDBObjectStore or IDBIndex ) source;
  /**
   * The advance() method of the IDBCursor interface sets the number of times a cursor should move its position forward.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/advance">IDBCursor.advance - MDN</a>
   */
  void advance( [EnforceRange] unsigned long count );
  void continue( optional any key );
  /**
   * The continuePrimaryKey() method of the IDBCursor interface advances the cursor to the to the item whose key matches the key parameter as well as whose primary key matches the primary key parameter.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/continuePrimaryKey">IDBCursor.continuePrimaryKey - MDN</a>
   */
  void continuePrimaryKey( any key, any primaryKey );
  [NewObject]
  IDBRequest delete();
  [NewObject]
  IDBRequest update( any value );
};

/**
 * The IDBCursorWithValue interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValue">IDBCursorWithValue - MDN</a>
 */
[Exposed=(Window,Worker)]
interface IDBCursorWithValue : IDBCursor {
  /**
   * The value of the current cursor.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValue/value">IDBCursorWithValue.value - MDN</a>
   */
  readonly attribute any value;
};

/**
 * The IDBDatabase interface of the IndexedDB API provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase">IDBDatabase - MDN</a>
 */
[Exposed=(Window,Worker)]
interface IDBDatabase : EventTarget {
  readonly attribute DOMString name;
  readonly attribute DOMStringList objectStoreNames;
  readonly attribute unsigned long long version;
  /**
   * The onabort event handler of the IDBDatabase interface handles the abort event, fired when a transaction is aborted and bubbles up to the connection object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onabort">IDBDatabase.onabort - MDN</a>
   */
  attribute NullableEventHandler onabort;
  /**
   * A function which is called when the close event is fired.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onclose">IDBDatabase.onclose - MDN</a>
   */
  attribute NullableEventHandler onclose;
  /**
   * The onerror event handler of the IDBDatabase interface handles the error event, fired when a request returns an error and bubbles up to the connection object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onerror">IDBDatabase.onerror - MDN</a>
   */
  attribute NullableEventHandler onerror;
  /**
   * This example shows an IDBOpenDBRequest.onupgradeneeded block that creates a new object store; it also includes onerror and onabort functions to handle non-success cases, and an onversionchange function to notify when a database structure change has occurred.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onversionchange">IDBDatabase.onversionchange - MDN</a>
   */
  attribute NullableEventHandler onversionchange;
  /**
   * The abort event is fired on IDBDatabase when a transaction is aborted and bubbles up to the connection object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/abort_event">abort event - MDN</a>
   */
  [NoBubble]
  event Event abort;
  /**
   * The close event is fired on IDBDatabase when the database connection is unexpectedly closed. This could happen, for example, if the underlying storage is removed or if the user clears the database in the browser's history preferences.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/close_event">close event - MDN</a>
   */
  event Event close;
  /**
   * The error event is fired on IDBDatabase when a request returns an error and the event bubbles up to the connection object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/error_event">error event - MDN</a>
   */
  [NoBubble]
  event Event error;
  /**
   * The versionchange event is fired when a database structure change (IDBOpenDBRequest.onupgradeneeded event or IDBFactory.deleteDatabase) was requested.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/versionchange_event">versionchange event - MDN</a>
   */
  event Event versionchange;
  /**
   * The connection is not actually closed until all transactions created using this connection are complete. No new transactions can be created for this connection once this method is called. Methods that create transactions throw an exception if a closing operation is pending.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/close">IDBDatabase.close - MDN</a>
   */
  void close();
  /**
   * The method takes the name of the store as well as a parameter object that lets you define important optional properties. You can use the property to uniquely identify individual objects in the store. As the property is an identifier, it should be unique to every object, and every object should have that property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/createObjectStore">IDBDatabase.createObjectStore - MDN</a>
   */
  [NewObject]
  IDBObjectStore createObjectStore( DOMString name, optional IDBObjectStoreParameters options = {} );
  /**
   * As with IDBDatabase.createObjectStore, this method can be called only within a versionchange transaction.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/deleteObjectStore">IDBDatabase.deleteObjectStore - MDN</a>
   */
  void deleteObjectStore( DOMString name );
  /**
   * An IDBTransaction object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/transaction">IDBDatabase.transaction - MDN</a>
   */
  [NewObject]
  IDBTransaction transaction( ( DOMString or sequence<DOMString> ) storeNames, optional IDBTransactionMode mode = "readonly", optional IDBTransactionOptions options = {} );
};

/**
 * In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory">IDBFactory - MDN</a>
 */
[Exposed=(Window,Worker)]
interface IDBFactory {
  /**
   * An integer that indicates the result of the comparison; the table below lists the possible values and their meanings:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/cmp">IDBFactory.cmp - MDN</a>
   */
  short cmp( any first, any second );
  /**
   * The databases method of the IDBFactory interface returns a list represening all the available databases, including their names and versions.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/databases">IDBFactory.databases - MDN</a>
   */
  Promise<sequence<IDBDatabaseInfo>> databases();
  /**
   * The deleteDatabase() method of the IDBFactory interface requests the deletion of a database. The method returns an IDBOpenDBRequest object immediately, and performs the deletion operation asynchronously.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/deleteDatabase">IDBFactory.deleteDatabase - MDN</a>
   */
  [NewObject]
  IDBOpenDBRequest deleteDatabase( DOMString name );
  /**
   * If an error occurs while the database connection is being opened, then an error event is fired on the request object returned from this method.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/open">IDBFactory.open - MDN</a>
   */
  [NewObject]
  IDBOpenDBRequest open( DOMString name, optional [EnforceRange] unsigned long long version );
};

/**
 * IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex">IDBIndex - MDN</a>
 */
[Exposed=(Window,Worker)]
interface IDBIndex {
  /**
   * Any data type that can be used as a key path.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/keyPath">IDBIndex.keyPath - MDN</a>
   */
  readonly attribute any keyPath;
  /**
   * A Boolean:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/multiEntry">IDBIndex.multiEntry - MDN</a>
   */
  readonly attribute boolean multiEntry;
  /**
   * An IDBObjectStore.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/objectStore">IDBIndex.objectStore - MDN</a>
   */
  [SameObject]
  readonly attribute IDBObjectStore objectStore;
  /**
   * A Boolean:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/unique">IDBIndex.unique - MDN</a>
   */
  readonly attribute boolean unique;
  /**
   * A DOMString specifying a name for the index.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/name">IDBIndex.name - MDN</a>
   */
  attribute DOMString name;
  /**
   * A IDBRequest object on which subsequent events related to this operation are fired.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/count">IDBIndex.count - MDN</a>
   */
  [NewObject]
  IDBRequest count( optional any query );
  /**
   * If a value is found, then a structured clone of it is created and set as the result of the request object: this returns the record the key is associated with.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/get">IDBIndex.get - MDN</a>
   */
  [NewObject]
  IDBRequest get( any query );
  /**
   * There is a performance cost associated with looking at the value property of a cursor, because the object is created lazily. To use a feature like getAll(), the browser has to create all the objects at once. If you are just interested in looking at each of the keys, for instance, it is more efficient to use a cursor. If you are trying to get an array of all the objects in an object store, though, you should use getAll().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getAll">IDBIndex.getAll - MDN</a>
   */
  [NewObject]
  IDBRequest getAll( optional any query, optional [EnforceRange] unsigned long count );
  /**
   * An IDBRequest object on which subsequent events related to this operation are fired.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getAllKeys">IDBIndex.getAllKeys - MDN</a>
   */
  [NewObject]
  IDBRequest getAllKeys( optional any query, optional [EnforceRange] unsigned long count );
  /**
   * If a primary key is found, it is set as the result of the request object. Note that this doesn't return the whole record as IDBIndex.get does.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getKey">IDBIndex.getKey - MDN</a>
   */
  [NewObject]
  IDBRequest getKey( any query );
  /**
   * The method sets the position of the cursor to the appropriate record, based on the specified direction.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/openCursor">IDBIndex.openCursor - MDN</a>
   */
  [NewObject]
  IDBRequest openCursor( optional any query, optional IDBCursorDirection direction = "next" );
  /**
   * The method sets the position of the cursor to the appropriate key, based on the specified direction.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/openKeyCursor">IDBIndex.openKeyCursor - MDN</a>
   */
  [NewObject]
  IDBRequest openKeyCursor( optional any query, optional IDBCursorDirection direction = "next" );
};

/**
 * A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange">IDBKeyRange - MDN</a>
 */
[Exposed=(Window,Worker)]
interface IDBKeyRange {
  /**
   * The lower bound of the key range (can be any type.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/lower">IDBKeyRange.lower - MDN</a>
   */
  readonly attribute any lower;
  /**
   * A boolean:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/lowerOpen">IDBKeyRange.lowerOpen - MDN</a>
   */
  readonly attribute boolean lowerOpen;
  /**
   * The upper bound of the key range (can be any type.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/upper">IDBKeyRange.upper - MDN</a>
   */
  readonly attribute any upper;
  /**
   * A boolean:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/upperOpen">IDBKeyRange.upperOpen - MDN</a>
   */
  readonly attribute boolean upperOpen;
  /**
   * IDBKeyRange: The newly created key range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/bound">IDBKeyRange.bound - MDN</a>
   */
  [NewObject]
  static IDBKeyRange bound( any lower, any upper, optional boolean lowerOpen = false, optional boolean upperOpen = false );
  /**
   * IDBKeyRange: The newly created key range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/lowerBound">IDBKeyRange.lowerBound - MDN</a>
   */
  [NewObject]
  static IDBKeyRange lowerBound( any lower, optional boolean open = false );
  /**
   * value is the value for the new key range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/only">IDBKeyRange.only - MDN</a>
   */
  [NewObject]
  static IDBKeyRange only( any value );
  /**
   * IDBKeyRange: The newly created key range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/upperBound">IDBKeyRange.upperBound - MDN</a>
   */
  [NewObject]
  static IDBKeyRange upperBound( any upper, optional boolean open = false );
  boolean includes( any key );
};

/**
 * This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndex inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see our To-do Notifications app (view example live.)
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore">IDBObjectStore - MDN</a>
 */
[Exposed=(Window,Worker)]
interface IDBObjectStore {
  /**
   * A Boolean:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/autoIncrement">IDBObjectStore.autoIncrement - MDN</a>
   */
  readonly attribute boolean autoIncrement;
  /**
   * A DOMStringList.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/indexNames">IDBObjectStore.indexNames - MDN</a>
   */
  readonly attribute DOMStringList indexNames;
  /**
   * If this property is null, the application must provide a key for each modification operation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/keyPath">IDBObjectStore.keyPath - MDN</a>
   */
  readonly attribute any keyPath;
  /**
   * An IDBTransaction object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/transaction">IDBObjectStore.transaction - MDN</a>
   */
  [SameObject]
  readonly attribute IDBTransaction transaction;
  /**
   * A DOMString containing the object store's name.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/name">IDBObjectStore.name - MDN</a>
   */
  attribute DOMString name;
  /**
   * To determine if the add operation has completed successfully, listen for the transaction’s complete event in addition to the IDBObjectStore.add request’s success event, because the transaction may still fail after the success event fires. In other words, the success event is only triggered when the transaction has been successfully queued.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/add">IDBObjectStore.add - MDN</a>
   */
  [NewObject]
  IDBRequest add( any value, optional any key );
  /**
   * Clearing an object store consists of removing all records from the object store and removing all records in indexes that reference the object store. To remove only some of the records in a store, use IDBObjectStore.delete passing a key or IDBKeyRange.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/clear">IDBObjectStore.clear - MDN</a>
   */
  [NewObject]
  IDBRequest clear();
  /**
   * An IDBRequest object on which subsequent events related to this operation are fired.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/count">IDBObjectStore.count - MDN</a>
   */
  [NewObject]
  IDBRequest count( optional any query );
  /**
   * Note that this method must be called only from a VersionChange transaction mode callback.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex">IDBObjectStore.createIndex - MDN</a>
   */
  [NewObject]
  IDBIndex createIndex( DOMString name, ( DOMString or sequence<DOMString> ) keyPath, optional IDBIndexParameters options = {} );
  /**
   * An IDBRequest object on which subsequent events related to this operation are fired. The request.result attribute is set to undefined.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete">IDBObjectStore.delete - MDN</a>
   */
  [NewObject]
  IDBRequest delete( any query );
  /**
   * Note that this method must be called only from a VersionChange transaction mode callback. Note that this method synchronously modifies the IDBObjectStore.indexNames property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/deleteIndex">IDBObjectStore.deleteIndex - MDN</a>
   */
  void deleteIndex( DOMString name );
  /**
   * If a value is successfully found, then a structured clone of it is created and set as the result of the request object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/get">IDBObjectStore.get - MDN</a>
   */
  [NewObject]
  IDBRequest get( any query );
  /**
   * If a value is successfully found, then a structured clone of it is created and set as the result of the request object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll">IDBObjectStore.getAll - MDN</a>
   */
  [NewObject]
  IDBRequest getAll( optional any query, optional [EnforceRange] unsigned long count );
  /**
   * If a value is successfully found, then a structured clone of it is created and set as the result of the request object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAllKeys">IDBObjectStore.getAllKeys - MDN</a>
   */
  [NewObject]
  IDBRequest getAllKeys( optional any query, optional [EnforceRange] unsigned long count );
  /**
   * If a key is successfully found, then a structured clone of it is created and set as the result of the request object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getKey">IDBObjectStore.getKey - MDN</a>
   */
  [NewObject]
  IDBRequest getKey( any query );
  /**
   * An IDBIndex object for accessing the index.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/index">IDBObjectStore.index - MDN</a>
   */
  IDBIndex index( DOMString name );
  /**
   * To determine if the add operation has completed successfully, listen for the results’s success event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/openCursor">IDBObjectStore.openCursor - MDN</a>
   */
  [NewObject]
  IDBRequest openCursor( optional any query, optional IDBCursorDirection direction = "next" );
  /**
   * To determine if the add operation has completed successfully, listen for the results’s success event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/openKeyCursor">IDBObjectStore.openKeyCursor - MDN</a>
   */
  [NewObject]
  IDBRequest openKeyCursor( optional any query, optional IDBCursorDirection direction = "next" );
  /**
   * The put method is an update or insert method. See the IDBObjectStore.add method for an insert only method.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/put">IDBObjectStore.put - MDN</a>
   */
  [NewObject]
  IDBRequest put( any value, optional any key );
};

/**
 * Also inherits methods from its parents IDBRequest and EventTarget.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest">IDBOpenDBRequest - MDN</a>
 */
[Exposed=(Window,Worker)]
interface IDBOpenDBRequest : IDBRequest {
  /**
   * The onblocked event handler of the IDBOpenDBRequest interface is the event handler for the blocked event. This event is triggered when the upgradeneeded should be triggered because of a version change but the database is still in use (that is, not closed) somewhere, even after the versionchange event was sent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest/onblocked">IDBOpenDBRequest.onblocked - MDN</a>
   */
  attribute NullableEventHandler onblocked;
  /**
   * In the following example you can see the onupgradeneeded handler being used to update the database structure if a database with a higher version number is loaded. For a full working example, see our To-do Notifications app (view example live.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest/onupgradeneeded">IDBOpenDBRequest.onupgradeneeded - MDN</a>
   */
  attribute NullableEventHandler onupgradeneeded;
  /**
   * The blocked handler is executed when an open connection to a database is blocking a versionchange transaction on the same database.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest/blocked_event">blocked event - MDN</a>
   */
  event IDBVersionChangeEvent blocked;
  /**
   * The upgradeneeded event is fired when an attempt was made to open a database with a version number higher than its current version.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest/upgradeneeded_event">upgradeneeded event - MDN</a>
   */
  event Event upgradeneeded;
};

/**
 * The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest">IDBRequest - MDN</a>
 */
[Exposed=(Window,Worker)]
interface IDBRequest : EventTarget {
  /**
   * A DOMError containing the relevant error. In Chrome 48+/Firefox 58+ this property returns a DOMException because DOMError has been removed from the DOM standard. The following error codes are returned under certain conditions:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/error">IDBRequest.error - MDN</a>
   */
  readonly attribute DOMException? error;
  /**
   * The IDBRequestReadyState of the request, which takes one of the following two values:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/readyState">IDBRequest.readyState - MDN</a>
   */
  readonly attribute IDBRequestReadyState readyState;
  /**
   * any
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/result">IDBRequest.result - MDN</a>
   */
  readonly attribute any result;
  /**
   * An object representing the source of the request, such as an IDBIndex, IDBObjectStore or IDBCursor.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/source">IDBRequest.source - MDN</a>
   */
  readonly attribute ( IDBObjectStore or IDBIndex or IDBCursor )? source;
  /**
   * An IDBTransaction.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/transaction">IDBRequest.transaction - MDN</a>
   */
  readonly attribute IDBTransaction? transaction;
  /**
   * The following example requests a given record title, onsuccess gets the associated record from the IDBObjectStore (made available as objectStoreTitleRequest.result), updates one property of the record, and then puts the updated record back into the object store. Also included at the bottom is an onerror function that reports what the error was if the request fails. For a full working example, see our To-do Notifications app (view example live.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/onerror">IDBRequest.onerror - MDN</a>
   */
  attribute NullableEventHandler onerror;
  /**
   * The following example requests a given record title, onsuccess gets the associated record from the IDBObjectStore (made available as objectStoreTitleRequest.result), updates one property of the record, and then puts the updated record back into the object store. For a full working example, see our To-do Notifications app (view example live.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/onsuccess">IDBRequest.onsuccess - MDN</a>
   */
  attribute NullableEventHandler onsuccess;
  /**
   * The error handler is executed when an error caused a request to fail.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/error_event">error event - MDN</a>
   */
  [NoBubble]
  event Event error;
  /**
   * The success event is fired when an IDBRequest succeeds.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/success_event">success event - MDN</a>
   */
  event Event success;
};

/**
 * The IDBTransaction interface of the IndexedDB API provides a static, asynchronous transaction on a database using event handler attributes. All reading and writing of data is done within transactions. You use IDBDatabase to start transactions, IDBTransaction to set the mode of the transaction (e.g. is it readonly or readwrite), and you access an IDBObjectStore to make a request. You can also use an IDBTransaction object to abort transactions.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction">IDBTransaction - MDN</a>
 */
[Exposed=(Window,Worker)]
interface IDBTransaction : EventTarget {
  /**
   * An IDBDatabase object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/db">IDBTransaction.db - MDN</a>
   */
  [SameObject]
  readonly attribute IDBDatabase db;
  readonly attribute IDBTransactionDurability durability;
  /**
   * A DOMError containing the relevant error. In Chrome 48+/Firefox 58+ this property returns a DOMException because DOMError has been removed from the DOM standard. The exact error is one of serveral possibilities. It can be a reference to the same error as the request object that raised it, or a transaction failure (for example QuotaExceededError or UnknownError).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/error">IDBTransaction.error - MDN</a>
   */
  readonly attribute DOMException? error;
  /**
   * An IDBTransactionMode object defining the mode for isolating access to data in the current object stores:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/mode">IDBTransaction.mode - MDN</a>
   */
  readonly attribute IDBTransactionMode mode;
  /**
   * The objectStoreNames read-only property of the IDBTransaction interface returns a DOMStringList of names of IDBObjectStore objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/objectStoreNames">IDBTransaction.objectStoreNames - MDN</a>
   */
  readonly attribute DOMStringList objectStoreNames;
  /**
   * In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. Note the transaction.onabort = function(event) { }; block, reporting when the transaction has been aborted. For a full working example, see our To-do Notifications app (view example live.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/onabort">IDBTransaction.onabort - MDN</a>
   */
  attribute NullableEventHandler onabort;
  /**
   * The oncomplete event handler of the IDBTransaction interface handles the complete event, fired when the transaction successfully completes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/oncomplete">IDBTransaction.oncomplete - MDN</a>
   */
  attribute NullableEventHandler oncomplete;
  /**
   * The onerror event handler of the IDBTransaction interface handles the error event, fired when a request returns an error and bubbles up to the transaction object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/onerror">IDBTransaction.onerror - MDN</a>
   */
  attribute NullableEventHandler onerror;
  /**
   * The abort event is fired when an IndexedDB transaction is aborted.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/abort_event">abort event - MDN</a>
   */
  [NoBubble]
  event Event abort;
  /**
   * The complete handler is executed when a transaction successfully completed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/complete_event">complete event - MDN</a>
   */
  event Event complete;
  /**
   * The error event is fired on IDBTransaction when a request returns an error and the event bubbles up to the transaction object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/error_event">error event - MDN</a>
   */
  [NoBubble]
  event Event error;
  /**
   * The abort() method of the IDBTransaction interface rolls back all the changes to objects in the database associated with this transaction.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/abort">IDBTransaction.abort - MDN</a>
   */
  void abort();
  /**
   * The commit() method of the IDBTransaction interface commits the transaction if it is called on an active transaction.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/commit">IDBTransaction.commit - MDN</a>
   */
  void commit();
  /**
   * The objectStore() method of the IDBTransaction interface returns an object store that has already been added to the scope of this transaction.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/objectStore">IDBTransaction.objectStore - MDN</a>
   */
  IDBObjectStore objectStore( DOMString name );
};

/**
 * The IDBVersionChangeEvent interface of the IndexedDB API indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent">IDBVersionChangeEvent - MDN</a>
 */
[Exposed=(Window,Worker)]
interface IDBVersionChangeEvent : Event {
  /**
   * A 64-bit integer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent/newVersion">IDBVersionChangeEvent.newVersion - MDN</a>
   */
  readonly attribute unsigned long long? newVersion;
  /**
   * The oldVersion read-only property of the IDBVersionChangeEvent interface returns the old version number of the database.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent/oldVersion">IDBVersionChangeEvent.oldVersion - MDN</a>
   */
  readonly attribute unsigned long long oldVersion;
  constructor( DOMString type, optional IDBVersionChangeEventInit eventInitDict = {} );
};

/**
 * The IIRFilterNode interface of the Web Audio API is a AudioNode processor which implements a general infinite impulse response (IIR)  filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode">IIRFilterNode - MDN</a>
 */
[Exposed=Window]
interface IIRFilterNode : AudioNode {
  /**
   * The IIRFilterNode() constructor of the Web Audio API creates a new IIRFilterNode object which an AudioNode processor which implements a general infinite impulse response filter.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode/IIRFilterNode">IIRFilterNode.IIRFilterNode - MDN</a>
   */
  constructor( BaseAudioContext context, IIRFilterOptions options );
  void getFrequencyResponse( Float32Array frequencyHz, Float32Array magResponse, Float32Array phaseResponse );
};

/**
 * The ImageBitmap interface represents a bitmap image which can be drawn to a canvas without undue latency. It can be created from a variety of source objects using the createImageBitmap() factory method. ImageBitmap provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap">ImageBitmap - MDN</a>
 */
[Exposed=(Window,Worker), Serializable, Transferable]
interface ImageBitmap {
  /**
   * The read-only ImageBitmap.height property returns the ImageBitmap object's height in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/height">ImageBitmap.height - MDN</a>
   */
  readonly attribute unsigned long height;
  /**
   * The read-only ImageBitmap.width property returns the ImageBitmap object's width in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/width">ImageBitmap.width - MDN</a>
   */
  readonly attribute unsigned long width;
  /**
   * The ImageBitmap.close() method disposes of all graphical resources associated with an ImageBitmap.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/close">ImageBitmap.close - MDN</a>
   */
  void close();
};

/**
 * The ImageBitmapRenderingContext interface is a canvas rendering context that provides the functionality to replace the canvas's contents with the given ImageBitmap. Its context id (the first argument to HTMLCanvasElement.getContext() or OffscreenCanvas.getContext()) is "bitmaprenderer".
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext">ImageBitmapRenderingContext - MDN</a>
 */
[Exposed=(Window,Worker)]
interface ImageBitmapRenderingContext {
  readonly attribute ( HTMLCanvasElement or OffscreenCanvas ) canvas;
  /**
   * The ImageBitmapRenderingContext.transferFromImageBitmap() method displays the given ImageBitmap in the canvas associated with this rendering context. The ownership of the ImageBitmap is transferred to the canvas as well.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext/transferFromImageBitmap">ImageBitmapRenderingContext.transferFromImageBitmap - MDN</a>
   */
  void transferFromImageBitmap( ImageBitmap? bitmap );
};

/**
 * The ImageData interface represents the underlying pixel data of an area of a canvas element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageData">ImageData - MDN</a>
 */
[Exposed=(Window,Worker), Serializable]
interface ImageData {
  /**
   * The readonly ImageData.data property returns a Uint8ClampedArray that contains the ImageData object's pixel data. Data is stored as a one-dimensional array in the RGBA order, with integer values between 0 and 255 (inclusive).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageData/data">ImageData.data - MDN</a>
   */
  readonly attribute Uint8ClampedArray data;
  /**
   * The readonly ImageData.height property returns the number of rows in the ImageData object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageData/height">ImageData.height - MDN</a>
   */
  readonly attribute unsigned long height;
  /**
   * The readonly ImageData.width property returns the number of pixels per row in the ImageData object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageData/width">ImageData.width - MDN</a>
   */
  readonly attribute unsigned long width;
  /**
   * The ImageData() constructor returns a newly instantiated ImageData object built from the typed array given and having the specified width and height.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageData/ImageData">ImageData.ImageData - MDN</a>
   */
  constructor( unsigned long sw, unsigned long sh );
  /**
   * The ImageData() constructor returns a newly instantiated ImageData object built from the typed array given and having the specified width and height.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageData/ImageData">ImageData.ImageData - MDN</a>
   */
  constructor( Uint8ClampedArray data, unsigned long sw, optional unsigned long sh );
};

[Exposed=Window]
interface InputDeviceInfo : MediaDeviceInfo {
  MediaTrackCapabilities getCapabilities();
};

/**
 * The InputEvent interface represents an event notifying of editable content change.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/InputEvent">InputEvent - MDN</a>
 */
[Exposed=Window]
interface InputEvent : UIEvent {
  /**
   * The data read-only property of the InputEvent interface returns a DOMString with the inserted characters. This may be an empty string if the change doesn't insert text (such as when deleting characters, for example).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/data">InputEvent.data - MDN</a>
   */
  readonly attribute DOMString? data;
  /**
   * The inputType read-only property of the InputEvent interface returns the type of change made to editible content. Possible changes include for example inserting, deleting, and formatting text.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType">InputEvent.inputType - MDN</a>
   */
  readonly attribute DOMString inputType;
  /**
   * The InputEvent.isComposing read-only property returns a Boolean value indicating if the event is fired after compositionstart and before compositionend.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/isComposing">InputEvent.isComposing - MDN</a>
   */
  readonly attribute boolean isComposing;
  /**
   * The InputEvent() constructor creates a new InputEvent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/InputEvent">InputEvent.InputEvent - MDN</a>
   */
  constructor( DOMString type, optional InputEventInit eventInitDict );
};

/**
 * A WebAssembly.Instance object is a stateful, executable instance of a WebAssembly.Module. Instance objects contain all the Exported WebAssembly functions that allow calling into WebAssembly code from JavaScript.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance">WebAssembly.Instance - MDN</a>
 */
[LegacyNamespace=WebAssembly, Exposed=(Window,Worker,Worklet)]
interface Instance {
  /**
   * The exports readonly property of the WebAssembly.Instance object prototype returns an object containing as its members all the functions exported from the WebAssembly module instance, to allow them to be accessed and used by JavaScript.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance/exports">WebAssembly.Instance.exports - MDN</a>
   */
  readonly attribute object exports;
  constructor( Module module, optional object importObject );
};

/**
 * provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver">IntersectionObserver - MDN</a>
 */
[Exposed=Window]
interface IntersectionObserver {
  /**
   * The IntersectionObserver interface's read-only root property identifies the Element or Document whose bounds are treated as the bounding box of the viewport for the element which is the observer's target.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/root">IntersectionObserver.root - MDN</a>
   */
  readonly attribute Element? root;
  /**
   * The IntersectionObserver interface's read-only rootMargin property is a string with syntax similar to that of the CSS margin property. Each side of the rectangle represented by rootMargin is added to the corresponding side in the root element's bounding box before the intersection test is performed. This lets you, for example, adjust the bounds outward so that the target element is considered 100% visible even if a certain number of pixels worth of width or height is clipped away, or treat the target as partially hidden if an edge is too close to the edge of the root's bounding box.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin">IntersectionObserver.rootMargin - MDN</a>
   */
  readonly attribute DOMString rootMargin;
  /**
   * The IntersectionObserver interface's read-only thresholds property returns the list of intersection thresholds that was specified when the observer was instantiated with IntersectionObserver(). If only one threshold ratio was provided when instanitating the object, this will be an array containing that single value.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/thresholds">IntersectionObserver.thresholds - MDN</a>
   */
  readonly attribute FrozenArray<double> thresholds;
  constructor( IntersectionObserverCallback callback, optional IntersectionObserverInit options );
  /**
   * The IntersectionObserver method disconnect() stops watching all of its target elements for visibility changes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/disconnect">IntersectionObserver.disconnect - MDN</a>
   */
  void disconnect();
  /**
   * The IntersectionObserver method observe() adds an element to the set of target elements being watched by the IntersectionObserver. One observer has one set of thresholds and one root, but can watch multiple target elements for visibility changes in keeping with those.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/observe">IntersectionObserver.observe - MDN</a>
   */
  void observe( Element target );
  /**
   * The IntersectionObserver method takeRecords() returns an array of IntersectionObserverEntry objects, one for each targeted element which has experienced an intersection change since the last time the intersections were checked, either explicitly through a call to this method or implicitly by an automatic call to the observer's callback.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/takeRecords">IntersectionObserver.takeRecords - MDN</a>
   */
  sequence<IntersectionObserverEntry> takeRecords();
  /**
   * The IntersectionObserver method unobserve() instructs the IntersectionObserver to stop observing the specified target element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/unobserve">IntersectionObserver.unobserve - MDN</a>
   */
  void unobserve( Element target );
};

/**
 * The IntersectionObserverEntry interface of the Intersection Observer API describes the intersection between the target element and its root container at a specific moment of transition.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry">IntersectionObserverEntry - MDN</a>
 */
interface IntersectionObserverEntry {
  /**
   * The IntersectionObserverEntry interface's read-only boundingClientRect property returns a DOMRectReadOnly which in essence describes a rectangle describing the smallest rectangle that contains the entire target element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/boundingClientRect">IntersectionObserverEntry.boundingClientRect - MDN</a>
   */
  readonly attribute DOMRectReadOnly boundingClientRect;
  /**
   * The IntersectionObserverEntry interface's read-only intersectionRatio property tells you how much of the target element is currently visible within the root's intersection ratio, as a value between 0.0 and 1.0.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/intersectionRatio">IntersectionObserverEntry.intersectionRatio - MDN</a>
   */
  readonly attribute double intersectionRatio;
  /**
   * The IntersectionObserverEntry interface's read-only intersectionRect property is a DOMRectReadOnly object which describes the smallest rectangle that contains the entire portion of the target element which is currently visible within the intersection root.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/intersectionRect">IntersectionObserverEntry.intersectionRect - MDN</a>
   */
  readonly attribute DOMRectReadOnly intersectionRect;
  /**
   * The IntersectionObserverEntry interface's read-only isIntersecting property is a Boolean value which is true if the target element intersects with the intersection observer's root. If this is true, then, the IntersectionObserverEntry describes a transition into a state of intersection; if it's false, then you know the transition is from intersecting to not-intersecting.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/isIntersecting">IntersectionObserverEntry.isIntersecting - MDN</a>
   */
  readonly attribute boolean isIntersecting;
  /**
   * The IntersectionObserverEntry interface's read-only rootBounds property is a DOMRectReadOnly corresponding to the target's root intersection rectangle, offset by the IntersectionObserver.rootMargin if one is specified.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/rootBounds">IntersectionObserverEntry.rootBounds - MDN</a>
   */
  readonly attribute DOMRectReadOnly? rootBounds;
  /**
   * The IntersectionObserverEntry interface's read-only target property indicates which targeted Element has changed its amount of intersection with the intersection root.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/target">IntersectionObserverEntry.target - MDN</a>
   */
  readonly attribute Element target;
  /**
   * The IntersectionObserverEntry interface's read-only time property is a DOMHighResTimeStamp that indicates the time at which the intersection change occurred relative to the time at which the document was created.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/time">IntersectionObserverEntry.time - MDN</a>
   */
  readonly attribute DOMHighResTimeStamp time;
  constructor( IntersectionObserverEntryInit intersectionObserverEntryInit );
};

/**
 * The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can't be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON">JSON - MDN</a>
 */
interface JSON {
  /**
   * The JSON.parse() method parses a JSON string, constructing the JavaScript value or object described by the string. An optional reviver function can be provided to perform a transformation on the resulting object before it is returned.
   *
   * @param text The string to parse as JSON.
   * @param reviver This prescribes how the value originally produced by parsing is transformed, before being returned.
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse">JSON.parse - MDN</a>
   */
  static any parse( DOMString text, optional ParseReviverFn? reviver = null );
  /**
   * The JSON.stringify() method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.
   *
   * @param replacer A function that alters the behavior of the stringification process, or an array of String and Number that serve as an allowlist for selecting/filtering the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string.
   * @param space A String or Number object that's used to insert white space into the output JSON string for readability purposes. If this is a Number, it indicates the number of space characters to use as white space; this number is capped at 10 (if it is greater, the value is just 10). Values less than 1 indicate that no space should be used. If this is a String, the string (or the first 10 characters of the string, if it's longer than that) is used as white space. If this parameter is not provided (or is null), no white space is used.
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify - MDN</a>
   */
  static DOMString stringify( any value, optional ( StringifyReplacerFn or sequence<( DOMString or long long )> )? replacer = null, optional StringifySpaceUnionType? space = null );
};

/**
 * KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent">KeyboardEvent - MDN</a>
 */
[Exposed=Window]
interface KeyboardEvent : UIEvent {
  const unsigned long DOM_KEY_LOCATION_LEFT = 0x01;
  const unsigned long DOM_KEY_LOCATION_NUMPAD = 0x03;
  const unsigned long DOM_KEY_LOCATION_RIGHT = 0x02;
  const unsigned long DOM_KEY_LOCATION_STANDARD = 0x00;
  /**
   * The KeyboardEvent.altKey read-only property is a Boolean that indicates if the alt key (Option or ⌥ on OS X) was pressed (true) or not (false) when the event occured.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/altKey">KeyboardEvent.altKey - MDN</a>
   */
  readonly attribute boolean altKey;
  readonly attribute unsigned long charCode;
  /**
   * The KeyboardEvent.code property represents a physical key on the keyboard (as opposed to the character generated by pressing the key). In other words, this property returns a value that isn't altered by keyboard layout or the state of the modifier keys.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code">KeyboardEvent.code - MDN</a>
   */
  readonly attribute DOMString code;
  /**
   * The KeyboardEvent.ctrlKey read-only property returns a Boolean that indicates if the control key was pressed (true) or not (false) when the event occured.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/ctrlKey">KeyboardEvent.ctrlKey - MDN</a>
   */
  readonly attribute boolean ctrlKey;
  /**
   * The KeyboardEvent.isComposing read-only property returns a Boolean value indicating if the event is fired within a composition session, i.e. after compositionstart and before compositionend.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing">KeyboardEvent.isComposing - MDN</a>
   */
  readonly attribute boolean isComposing;
  /**
   * The KeyboardEvent interface's key read-only property returns the value of the key pressed by the user, taking into consideration the state of modifier keys such as Shift as well as the keyboard locale and layout.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key">KeyboardEvent.key - MDN</a>
   */
  readonly attribute DOMString key;
  readonly attribute unsigned long keyCode;
  /**
   * The KeyboardEvent.location read-only property returns an unsigned long representing the location of the key on the keyboard or other input device.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/location">KeyboardEvent.location - MDN</a>
   */
  readonly attribute unsigned long location;
  /**
   * The KeyboardEvent.metaKey read-only property returning a Boolean that indicates if the Meta key was pressed (true) or not (false) when the event occurred. Some operating systems may intercept the key so it is never detected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/metaKey">KeyboardEvent.metaKey - MDN</a>
   */
  readonly attribute boolean metaKey;
  /**
   * The repeat read-only property of the KeyboardEvent interface returns a Boolean that is true if the given key is being held down such that it is automatically repeating.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat">KeyboardEvent.repeat - MDN</a>
   */
  readonly attribute boolean repeat;
  /**
   * The KeyboardEvent.shiftKey read-only property is a Boolean that indicates if the shift key was pressed (true) or not (false) when the event occurred.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/shiftKey">KeyboardEvent.shiftKey - MDN</a>
   */
  readonly attribute boolean shiftKey;
  /**
   * The KeyboardEvent() constructor creates a new KeyboardEvent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent">KeyboardEvent.KeyboardEvent - MDN</a>
   */
  constructor( DOMString type, optional KeyboardEventInit eventInitDict );
  /**
   * The KeyboardEvent.getModifierState() method returns the current state of the specified modifier key: true if the modifier is active (that is the modifier key is pressed or locked), otherwise, false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState">KeyboardEvent.getModifierState - MDN</a>
   */
  boolean getModifierState( DOMString keyArg );
};

/**
 * The KeyframeEffect interface of the Web Animations API lets us create sets of animatable properties and values, called keyframes. These can then be played using the Animation() constructor.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect">KeyframeEffect - MDN</a>
 */
[Exposed=Window]
interface KeyframeEffect : AnimationEffect {
  /**
   * The composite property of a KeyframeEffect resolves how an element's animation impacts its underlying property values.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/composite">KeyframeEffect.composite - MDN</a>
   */
  attribute CompositeOperation composite;
  /**
   * The iterationComposite property of a KeyframeEffect resolves how the animation's property value changes accumulate or override each other upon each of the animation's iterations.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/iterationComposite">KeyframeEffect.iterationComposite - MDN</a>
   */
  attribute IterationCompositeOperation iterationComposite;
  /**
   * The target property of a KeyframeEffect interface represents the element or pseudo-element being animated. It may be null for animations that do not target a specific element. It performs as both a getter and a setter, except with animations and transitions generated by CSS.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/target">KeyframeEffect.target - MDN</a>
   */
  attribute ( Element or CSSPseudoElement )? target;
  /**
   * The KeyframeEffect() constructor of the Web Animations API returns a new KeyframeEffect object instance, and also allows you to clone an existing keyframe effect object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/KeyframeEffect">KeyframeEffect.KeyframeEffect - MDN</a>
   */
  constructor( ( Element or CSSPseudoElement )? target, object? keyframes, optional ( unrestricted double or KeyframeEffectOptions ) options );
  /**
   * The KeyframeEffect() constructor of the Web Animations API returns a new KeyframeEffect object instance, and also allows you to clone an existing keyframe effect object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/KeyframeEffect">KeyframeEffect.KeyframeEffect - MDN</a>
   */
  constructor( KeyframeEffect source );
  /**
   * The getKeyframes() method of a KeyframeEffect returns an Array of the computed keyframes that make up this animation along with their computed offsets.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/getKeyframes">KeyframeEffect.getKeyframes - MDN</a>
   */
  sequence<object> getKeyframes();
  void setKeyframes( object? keyframes );
};

/**
 * The WebAssembly.LinkError object indicates an error during module instantiation (besides traps from the start function).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError">WebAssembly.LinkError - MDN</a>
 */
[LegacyNamespace=WebAssembly]
interface LinkError {
};

/**
 * The Location interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location">Location - MDN</a>
 */
[Exposed=Window]
interface Location {
  /**
   * The ancestorOrigins read-only property of the Location interface is a static DOMStringList containing, in reverse order, the origins of all ancestor browsing contexts of the document associated with the given Location object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/ancestorOrigins">Location.ancestorOrigins - MDN</a>
   */
  [LegacyUnforgeable, SameObject]
  readonly attribute DOMStringList ancestorOrigins;
  /**
   * The origin read-only property of the Location interface is a USVString containing the Unicode serialization of the origin of the represented URL
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/origin">Location.origin - MDN</a>
   */
  [LegacyUnforgeable]
  readonly attribute USVString origin;
  /**
   * The hash property of the Location interface returns a USVString containing a '#' followed by the fragment identifier of the URL.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/hash">Location.hash - MDN</a>
   */
  [LegacyUnforgeable]
  attribute USVString hash;
  /**
   * The host property of the Location interface is a USVString containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', and the port of the URL.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/host">Location.host - MDN</a>
   */
  [LegacyUnforgeable]
  attribute USVString host;
  /**
   * The hostname property of the Location interface is a USVString containing the domain of the URL.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/hostname">Location.hostname - MDN</a>
   */
  [LegacyUnforgeable]
  attribute USVString hostname;
  /**
   * The pathname property of the Location interface is a USVString containing an initial '/' followed by the path of the URL (or the empty string if there is no path).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/pathname">Location.pathname - MDN</a>
   */
  [LegacyUnforgeable]
  attribute USVString pathname;
  /**
   * The port property of the Location interface is a USVString containing the port number of the URL. If the URL does not contain an explicit port number, it will be set to ''.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/port">Location.port - MDN</a>
   */
  [LegacyUnforgeable]
  attribute USVString port;
  /**
   * The protocol property of the Location interface is a USVString representing the protocol scheme of the URL, including the final ':'.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/protocol">Location.protocol - MDN</a>
   */
  [LegacyUnforgeable]
  attribute USVString protocol;
  /**
   * The search property of the Location interface is a search string, also called a query string; that is, a USVString containing a '?' followed by the parameters of the URL.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/search">Location.search - MDN</a>
   */
  [LegacyUnforgeable]
  attribute USVString search;
  /**
   * The href property of the Location interface is a stringifier that returns a USVString containing the whole URL, and allows the href to be updated.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/href">Location.href - MDN</a>
   */
  [LegacyUnforgeable]
  stringifier attribute USVString href;
  /**
   * The Location.assign() method causes the window to load and display the document at the URL specified. After the navigation occurs, the user can navigate back to the page that called Location.assign() by pressing the "back" button.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/assign">Location.assign - MDN</a>
   */
  [LegacyUnforgeable]
  void assign( USVString url );
  /**
   * The Location.reload() method reloads the current URL, like the Refresh button.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/reload">Location.reload - MDN</a>
   */
  [LegacyUnforgeable]
  void reload();
  /**
   * The replace() method of the Location interface replaces the current resource with the one at the provided URL. The difference from the assign() method is that after using replace() the current page will not be saved in session History, meaning the user won't be able to use the back button to navigate to it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/replace">Location.replace - MDN</a>
   */
  [LegacyUnforgeable]
  void replace( USVString url );
};

/**
 * The MediaDevicesInfo interface contains information that describes a single media input or output device.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo">MediaDeviceInfo - MDN</a>
 */
[Exposed=Window, SecureContext]
interface MediaDeviceInfo {
  /**
   * The deviceId readonly property of the MediaDeviceInfo interface returns a DOMString that is an identifier for the represented device and is persisted across sessions.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/deviceId">MediaDeviceInfo.deviceId - MDN</a>
   */
  readonly attribute DOMString deviceId;
  /**
   * The groupId readonly property of the MediaDeviceInfo interface returns a DOMString that is a group identifier.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/groupId">MediaDeviceInfo.groupId - MDN</a>
   */
  readonly attribute DOMString groupId;
  /**
   * The kind readonly property of the MediaDeviceInfo interface returns an enumerated value, that is either "videoinput", "audioinput" or "audiooutput".
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/kind">MediaDeviceInfo.kind - MDN</a>
   */
  readonly attribute MediaDeviceKind kind;
  /**
   * The label readonlyinline property of the MediaDeviceInfo interface returns a DOMString, that is a label describing this device (for example "External USB Webcam").
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo/label">MediaDeviceInfo.label - MDN</a>
   */
  readonly attribute DOMString label;
  [Default]
  object toJSON();
};

/**
 * The MediaDevices interface provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices">MediaDevices - MDN</a>
 */
[Exposed=Window, SecureContext]
interface MediaDevices : EventTarget {
  attribute NullableEventHandler ondevicechange;
  /**
   * The MediaDevices method enumerateDevices() requests a list of the available media input and output devices, such as microphones, cameras, headsets, and so forth.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices">MediaDevices.enumerateDevices - MDN</a>
   */
  Promise<sequence<MediaDeviceInfo>> enumerateDevices();
  /**
   * The MediaDevices interface's getDisplayMedia() method prompts the user to select and grant permission to capture the contents of a display or portion thereof (such as a window) as a MediaStream.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia">MediaDevices.getDisplayMedia - MDN</a>
   */
  Promise<MediaStream> getDisplayMedia( optional DisplayMediaStreamConstraints constraints = {} );
  /**
   * The getSupportedConstraints() method of the MediaDevices interface returns an object based on the MediaTrackSupportedConstraints dictionary, whose member fields each specify one of the constrainable properties the user agent understands.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getSupportedConstraints">MediaDevices.getSupportedConstraints - MDN</a>
   */
  MediaTrackSupportedConstraints getSupportedConstraints();
  /**
   * The MediaDevices.getUserMedia() method prompts the user for permission to use a media input which produces a MediaStream with tracks containing the requested types of media.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia">MediaDevices.getUserMedia - MDN</a>
   */
  Promise<MediaStream> getUserMedia( optional MediaStreamConstraints constraints = {} );
};

/**
 * A MediaElementSourceNode has no inputs and exactly one output, and is created using the AudioContext.createMediaElementSource() method. The amount of channels in the output equals the number of channels of the audio referenced by the HTMLMediaElement used in the creation of the node, or is 1 if the HTMLMediaElement has no audio.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode">MediaElementAudioSourceNode - MDN</a>
 */
[Exposed=Window]
interface MediaElementAudioSourceNode : AudioNode {
  /**
   * The MediaElementAudioSourceNode interface's read-only mediaElement property indicates the HTMLMediaElement that contains the audio track from which the node is receiving audio.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode/mediaElement">MediaElementAudioSourceNode.mediaElement - MDN</a>
   */
  [SameObject]
  readonly attribute HTMLMediaElement mediaElement;
  /**
   * The MediaElementAudioSourceNode() constructor creates a new MediaElementAudioSourceNode object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode/MediaElementAudioSourceNode">MediaElementAudioSourceNode.MediaElementAudioSourceNode - MDN</a>
   */
  constructor( AudioContext context, MediaElementAudioSourceOptions options );
};

interface MediaEncryptedEvent : Event {
  readonly attribute ArrayBuffer? initData;
  readonly attribute DOMString initDataType;
  constructor( DOMString type, optional MediaEncryptedEventInit eventInitDict );
};

/**
 * The MediaError interface represents an error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as audio or video.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaError">MediaError - MDN</a>
 */
[Exposed=Window]
interface MediaError {
  const unsigned short MEDIA_ERR_ABORTED = 1;
  const unsigned short MEDIA_ERR_DECODE = 3;
  const unsigned short MEDIA_ERR_NETWORK = 2;
  const unsigned short MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
  /**
   * The read-only property MediaError.code returns a numeric value which represents the kind of error that occurred on a media element. To get a text string with specific diagnostic information, see MediaError.message.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaError/code">MediaError.code - MDN</a>
   */
  readonly attribute unsigned short code;
  /**
   * The read-only property MediaError.message returns a DOMString which contains a human-readable string offering specific diagnostic details related to the error described by the MediaError object, or an empty string ("") if no diagnostic information can be determined or provided.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaError/message">MediaError.message - MDN</a>
   */
  readonly attribute DOMString message;
};

/**
 * The MediaKeyMessageEvent interface of the EncryptedMediaExtensions API contains the content and related data when the content decryption module generates a message for the session.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent">MediaKeyMessageEvent - MDN</a>
 */
[SecureContext]
interface MediaKeyMessageEvent : Event {
  /**
   * The MediaKeyMessageEvent.message read-only property returns an ArrayBuffer with a message from the content decryption module. Messages vary by key system.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/message">MediaKeyMessageEvent.message - MDN</a>
   */
  readonly attribute ArrayBuffer message;
  /**
   * The MediaKeyMessageEvent.messageType read-only property indicates the type of message. It may be one of license-request, license-renewal, license-release, or individualization-request.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/messageType">MediaKeyMessageEvent.messageType - MDN</a>
   */
  readonly attribute MediaKeyMessageType messageType;
  /**
   * The MediaKeyMessageEvent constructor creates a new MediaKeyMessageEvent object which creates a new instance of MediaKeyMessageEvent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/MediaKeyMessageEvent">MediaKeyMessageEvent.MediaKeyMessageEvent - MDN</a>
   */
  constructor( DOMString type, MediaKeyMessageEventInit eventInitDict );
};

/**
 * The MediaKeySession interface of the EncryptedMediaExtensions API represents a context for message exchange with a content decryption module (CDM).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession">MediaKeySession - MDN</a>
 */
[SecureContext]
interface MediaKeySession : EventTarget {
  /**
   * The MediaKeySession.closed read-only property returns a Promise signaling when a MediaKeySession closes. This promise can only be fulfilled and is never rejected. Closing a session means that licenses and keys associated with it are no longer valid for decrypting media data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/closed">MediaKeySession.closed - MDN</a>
   */
  readonly attribute Promise<void> closed;
  /**
   * The MediaKeySession.expiration read-only property returns the time after which the keys in the current session can no longer be used to decrypt media data, or NaN if no such time exists. This value is determined by the CDM and measured in milliseconds since January 1, 1970, UTC. This value may change during a session lifetime, such as when an action triggers the start of a window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/expiration">MediaKeySession.expiration - MDN</a>
   */
  readonly attribute unrestricted double expiration;
  /**
   * The MediaKeySession.keyStatuses read-only property returns a reference to a read-only MediaKeyStatusMap of the current session's keys and their statuses.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/keyStatuses">MediaKeySession.keyStatuses - MDN</a>
   */
  readonly attribute MediaKeyStatusMap keyStatuses;
  /**
   * The MediaKeySession.sessionId read-only property contains a unique string generated by the CDM for the current media object and its associated keys or licenses.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/sessionId">MediaKeySession.sessionId - MDN</a>
   */
  readonly attribute DOMString sessionId;
  attribute NullableEventHandler onkeystatuseschange;
  attribute NullableEventHandler onmessage;
  /**
   * The MediaKeySession.close() method notifies that the current media session is no longer needed, and that the content decryption module should release any resources associated with this object and close it. Then, it returns a Promise.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/close">MediaKeySession.close - MDN</a>
   */
  Promise<void> close();
  /**
   * The MediaKeySession.generateRequest() method returns a Promise after generating a media request based on initialization data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/generateRequest">MediaKeySession.generateRequest - MDN</a>
   */
  Promise<void> generateRequest( DOMString initDataType, BufferSource initData );
  /**
   * The MediaKeySession.load() method returns a Promise that resolves to a boolean value after loading data for a specified session object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/load">MediaKeySession.load - MDN</a>
   */
  Promise<boolean> load( DOMString sessionId );
  /**
   * The MediaKeySession.remove() method returns a Promise after removing any session data associated with the current object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/remove">MediaKeySession.remove - MDN</a>
   */
  Promise<void> remove();
  /**
   * The MediaKeySession.update() method loads messages and licenses to the CDM, and then returns a Promise.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/update">MediaKeySession.update - MDN</a>
   */
  Promise<void> update( BufferSource response );
};

/**
 * The MediaKeyStatusMap interface of the EncryptedMediaExtensions API is a read-only map of media key statuses by key IDs.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap">MediaKeyStatusMap - MDN</a>
 */
[SecureContext]
interface MediaKeyStatusMap {
  iterable<BufferSource, MediaKeyStatus>;
  /**
   * The size read-only property of the MediaKeyStatusMap interface returns the number of key/value paIrs in the status map.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/size">MediaKeyStatusMap.size - MDN</a>
   */
  readonly attribute unsigned long size;
  /**
   * The get property of the MediaKeyStatusMap interface returns the value associated with the given key, or undefined if there is none.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/get">MediaKeyStatusMap.get - MDN</a>
   */
  any get( BufferSource keyId );
  /**
   * The has property of the MediaKeyStatusMap interface returns a Boolean, asserting whether a value has been associated with the given key.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/has">MediaKeyStatusMap.has - MDN</a>
   */
  boolean has( BufferSource keyId );
};

/**
 * The MediaKeySystemAccess interface of the EncryptedMediaExtensions API provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the Navigator.requestMediaKeySystemAccess() method.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess">MediaKeySystemAccess - MDN</a>
 */
[SecureContext]
interface MediaKeySystemAccess {
  /**
   * The MediaKeySystemAccess.keySystem read-only property returns a DOMString identifying the key system being used.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess/keySystem">MediaKeySystemAccess.keySystem - MDN</a>
   */
  readonly attribute DOMString keySystem;
  /**
   * The MediaKeySystemAccess.createMediaKeys() method returns a Promise that resolves to a new MediaKeys object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess/createMediaKeys">MediaKeySystemAccess.createMediaKeys - MDN</a>
   */
  Promise<MediaKeys> createMediaKeys();
  /**
   * The MediaKeySystemAccess.getConfiguration() method returns a MediaKeySystemConfiguration object with the supported combination of configuration options.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess/getConfiguration">MediaKeySystemAccess.getConfiguration - MDN</a>
   */
  MediaKeySystemConfiguration getConfiguration();
};

/**
 * The MediaKeys interface of EncryptedMediaExtensions API represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys">MediaKeys - MDN</a>
 */
[SecureContext]
interface MediaKeys {
  /**
   * The MediaKeys.createSession() method returns a new MediaKeySession object, which represents a context for message exchange with a content decryption module (CDM).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys/createSession">MediaKeys.createSession - MDN</a>
   */
  MediaKeySession createSession( optional MediaKeySessionType sessionType = "temporary" );
  /**
   * The MediaKeys.setServerCertificate() method a Promise to a server certificate to be used to encrypt messages to the license server.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys/setServerCertificate">MediaKeys.setServerCertificate - MDN</a>
   */
  Promise<boolean> setServerCertificate( BufferSource serverCertificate );
};

/**
 * The MediaList interface represents the media queries of a stylesheet, e.g. those set using a link element's media attribute.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaList">MediaList - MDN</a>
 */
[Exposed=Window]
interface MediaList {
  readonly attribute unsigned long length;
  /**
   * The mediaText property of the MediaList interface is a stringifier that returns a DOMString representing the MediaList as text, and also allows you to set a new MediaList.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaList/mediaText">MediaList.mediaText - MDN</a>
   */
  stringifier attribute [LegacyNullToEmptyString] CSSOMString mediaText;
  void appendMedium( CSSOMString medium );
  void deleteMedium( CSSOMString medium );
  getter CSSOMString? item( unsigned long index );
};

/**
 * A MediaQueryList object stores information on a media query applied to a document, with support for both immediate and event-driven matching against the state of the document.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList">MediaQueryList - MDN</a>
 */
[Exposed=Window]
interface MediaQueryList : EventTarget {
  /**
   * The matches read-only property of the MediaQueryList interface is a Boolean that returns true if the document currently matches the media query list, or false if not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/matches">MediaQueryList.matches - MDN</a>
   */
  readonly attribute boolean matches;
  /**
   * The media read-only property of the MediaQueryList interface is a DOMString representing a serialized media query.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/media">MediaQueryList.media - MDN</a>
   */
  readonly attribute CSSOMString media;
  /**
   * The onchange property of the MediaQueryList interface is an event handler property representing a function that is invoked when the change event fires, i.e when the status of media query support changes. The event object is a MediaQueryListEvent instance, which is recognised as a MediaListQuery instance in older browsers, for backwards compatibility purposes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/onchange">MediaQueryList.onchange - MDN</a>
   */
  attribute NullableEventHandler onchange;
  /**
   * The addListener() method of the MediaQueryList interface adds a listener to the MediaQueryListener that will run a custom callback function in response to the media query status changing.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/addListener">MediaQueryList.addListener - MDN</a>
   */
  void addListener( EventListener? callback );
  /**
   * The removeListener() method of the MediaQueryList interface removes a listener from the MediaQueryListener.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/removeListener">MediaQueryList.removeListener - MDN</a>
   */
  void removeListener( EventListener? callback );
};

/**
 * The MediaQueryListEvent object stores information on the changes that have happened to a MediaQueryList object — instances are available as the event object on a function referenced by a MediaQueryList.onchange property or MediaQueryList.addListener() call.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent">MediaQueryListEvent - MDN</a>
 */
[Exposed=Window]
interface MediaQueryListEvent : Event {
  /**
   * The matches read-only property of the MediaQueryListEvent interface is a Boolean that returns true if the document currently matches the media query list, or false if not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/matches">MediaQueryListEvent.matches - MDN</a>
   */
  readonly attribute boolean matches;
  /**
   * The media read-only property of the MediaQueryListEvent interface is a DOMString representing a serialized media query.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/media">MediaQueryListEvent.media - MDN</a>
   */
  readonly attribute CSSOMString media;
  /**
   * The MediaQueryListEvent constructor creates a new MediaQueryListEvent instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/MediaQueryListEvent">MediaQueryListEvent.MediaQueryListEvent - MDN</a>
   */
  constructor( CSSOMString type, optional MediaQueryListEventInit eventInitDict = {} );
};

/**
 * The MediaRecorder interface of the MediaStream Recording API provides functionality to easily record media. It is created using the MediaRecorder() constructor.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder">MediaRecorder - MDN</a>
 */
[Exposed=Window]
interface MediaRecorder : EventTarget {
  readonly attribute BitrateMode audioBitrateMode;
  /**
   * The audioBitsPerSecond read-only property of the MediaRecorder interface returns the audio encoding bit rate in use.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond">MediaRecorder.audioBitsPerSecond - MDN</a>
   */
  readonly attribute unsigned long audioBitsPerSecond;
  /**
   * The mimeType read-only property returns the MIME media type that was specified when creating the MediaRecorder object, or, if none was specified, which was chosen by the browser.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/mimeType">MediaRecorder.mimeType - MDN</a>
   */
  readonly attribute DOMString mimeType;
  /**
   * The MediaRecorder.state read-only property returns the current state of the current MediaRecorder object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/state">MediaRecorder.state - MDN</a>
   */
  readonly attribute RecordingState state;
  /**
   * The MediaRecorder.stream read-only property returns the stream that was passed into the MediaRecorder() constructor when the MediaRecorder was created.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/stream">MediaRecorder.stream - MDN</a>
   */
  readonly attribute MediaStream stream;
  /**
   * The videoBitsPerSecond read-only property of the MediaRecorder interface returns the video encoding bit rate in use.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/videoBitsPerSecond">MediaRecorder.videoBitsPerSecond - MDN</a>
   */
  readonly attribute unsigned long videoBitsPerSecond;
  attribute NullableEventHandler ondataavailable;
  /**
   * The MediaRecorder interface's onerror event handler is called by the MediaStream Recording API when an error occurs. You can provide an event handler to deal with errors that occur while creating or using a media recorder
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onerror">MediaRecorder.onerror - MDN</a>
   */
  attribute NullableEventHandler onerror;
  attribute NullableEventHandler onpause;
  attribute NullableEventHandler onresume;
  attribute NullableEventHandler onstart;
  attribute NullableEventHandler onstop;
  /**
   * The MediaRecorder interface's error event is fired when an error occurs: for example because recording wasn't allowed or was attempted using an unsupported codec.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/error_event">error event - MDN</a>
   */
  event MediaRecorderErrorEvent error;
  /**
   * The MediaRecorder.isTypeSupported() static method returns a Boolean which is true if the MIME type specified is one the user agent should be able to successfully record.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/isTypeSupported">MediaRecorder.isTypeSupported - MDN</a>
   */
  static boolean isTypeSupported( DOMString type );
  /**
   * The MediaRecorder() constructor creates a new MediaRecorder object that will record a specified MediaStream.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/MediaRecorder">MediaRecorder.MediaRecorder - MDN</a>
   */
  constructor( MediaStream stream, optional MediaRecorderOptions options = {} );
  /**
   * The Media.pause() method (part of the MediaRecorder API) is used to pause recording of media streams.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/pause">MediaRecorder.pause - MDN</a>
   */
  void pause();
  /**
   * The MediaRecorder.requestData() method (part of the MediaRecorder API) is used to raise a dataavailable event containing a Blob object of the captured media as it was when the method was called.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/requestData">MediaRecorder.requestData - MDN</a>
   */
  void requestData();
  /**
   * The MediaRecorder.resume() method (part of the MediaRecorder API) is used to resume media recording when it has been previously paused.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/resume">MediaRecorder.resume - MDN</a>
   */
  void resume();
  /**
   * The MediaRecorder method start(), which is part of the MediaStream Recording API, begins recording media into one or more Blob objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/start">MediaRecorder.start - MDN</a>
   */
  void start( optional unsigned long timeslice );
  /**
   * The MediaRecorder.stop() method (part of the MediaRecorder API) is used to stop media capture.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/stop">MediaRecorder.stop - MDN</a>
   */
  void stop();
};

/**
 * The MediaRecorderErrorEvent interface represents errors returned by the MediaStream Recording API. It is an Event object that encapsulates a reference to a DOMException describing the error that occurred.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorderErrorEvent">MediaRecorderErrorEvent - MDN</a>
 */
[Exposed=Window]
interface MediaRecorderErrorEvent : Event {
  /**
   * The read-only error property in the MediaRecorderErrorEvent interface is a DOMException object providing details about the exception that was thrown by a MediaRecorder instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorderErrorEvent/error">MediaRecorderErrorEvent.error - MDN</a>
   */
  [SameObject]
  readonly attribute DOMException error;
  constructor( DOMString type, MediaRecorderErrorEventInit eventInitDict );
};

/**
 * The MediaSource interface of the Media Source Extensions API represents a source of media data for an HTMLMediaElement object. A MediaSource object can be attached to a HTMLMediaElement to be played in the user agent.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaSource">MediaSource - MDN</a>
 */
[Constructor]
interface MediaSource : EventTarget {
  /**
   * The activeSourceBuffers read-only property of the MediaSource interface returns a SourceBufferList object containing a subset of the SourceBuffer objects contained within sourceBuffers — the list of objects providing the selected video track, enabled audio tracks, and shown/hidden text tracks.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/activeSourceBuffers">MediaSource.activeSourceBuffers - MDN</a>
   */
  readonly attribute SourceBufferList activeSourceBuffers;
  /**
   * The readyState read-only property of the MediaSource interface returns an enum representing the state of the current MediaSource. The three possible values are:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/readyState">MediaSource.readyState - MDN</a>
   */
  readonly attribute ReadyState readyState;
  /**
   * The sourceBuffers read-only property of the MediaSource interface returns a SourceBufferList object containing the list of SourceBuffer objects associated with this MediaSource.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/sourceBuffers">MediaSource.sourceBuffers - MDN</a>
   */
  readonly attribute SourceBufferList sourceBuffers;
  /**
   * The duration property of the MediaSource interface gets and sets the duration of the current media being presented.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/duration">MediaSource.duration - MDN</a>
   */
  attribute unrestricted double duration;
  attribute NullableEventHandler onsourceclose;
  attribute NullableEventHandler onsourceended;
  attribute NullableEventHandler onsourceopen;
  /**
   * The MediaSource.isTypeSupported() static method returns a Boolean value which is true if the given MIME type is likely to be supported by the current user agent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/isTypeSupported">MediaSource.isTypeSupported - MDN</a>
   */
  static boolean isTypeSupported( DOMString type );
  /**
   * The addSourceBuffer() method of the MediaSource interface creates a new SourceBuffer of the given MIME type and adds it to the MediaSource's sourceBuffers list. The new SourceBuffer is also returned.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer">MediaSource.addSourceBuffer - MDN</a>
   */
  SourceBuffer addSourceBuffer( DOMString type );
  /**
   * The clearLiveSeekableRange() method of the MediaSource interface clears a seekable range previously set with a call to setLiveSeekableRange().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/clearLiveSeekableRange">MediaSource.clearLiveSeekableRange - MDN</a>
   */
  void clearLiveSeekableRange();
  /**
   * The endOfStream() method of the MediaSource interface signals the end of the stream.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/endOfStream">MediaSource.endOfStream - MDN</a>
   */
  void endOfStream( optional EndOfStreamError error );
  /**
   * The removeSourceBuffer() method of the MediaSource interface removes the given SourceBuffer from the SourceBuffers list associated with this MediaSource object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/removeSourceBuffer">MediaSource.removeSourceBuffer - MDN</a>
   */
  void removeSourceBuffer( SourceBuffer sourceBuffer );
  /**
   * The setLiveSeekableRange() method of the MediaSource interface sets the range that the user can seek to in the media element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange">MediaSource.setLiveSeekableRange - MDN</a>
   */
  void setLiveSeekableRange( double start, double end );
};

/**
 * The MediaStream interface represents a stream of media content. A stream consists of several tracks such as video or audio tracks. Each track is specified as an instance of MediaStreamTrack.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream">MediaStream - MDN</a>
 */
[Exposed=Window]
interface MediaStream : EventTarget {
  /**
   * The active read-only property of the MediaStream interface returns a Boolean value which is true if the stream is currently active; otherwise, it returns false. A stream is considered active if at least one of its MediaStreamTracks is not in the MediaStreamTrack.ended state. Once every track has ended, the stream's active property becomes false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/active">MediaStream.active - MDN</a>
   */
  readonly attribute boolean active;
  readonly attribute DOMString id;
  /**
   * The MediaStream.onaddtrack property is an EventHandler which specifies a function to be called when the addtrack event occurs on a MediaStream instance. This happens when a new track of any kind is added to the media stream.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/onaddtrack">MediaStream.onaddtrack - MDN</a>
   */
  attribute NullableEventHandler onaddtrack;
  /**
   * The MediaStream.onremovetrack property is an EventHandler which specifies a function to be called when the removetrack event occurs on a MediaStream instance. This happens when a track of any kind is removed from the media stream.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/onremovetrack">MediaStream.onremovetrack - MDN</a>
   */
  attribute NullableEventHandler onremovetrack;
  /**
   * The addtrack event is fired when a new MediaStreamTrack object has been added to a MediaStream.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/addtrack_event">addtrack event - MDN</a>
   */
  event MediaStreamTrackEvent addtrack;
  /**
   * The removetrack event is fired when a new MediaStreamTrack object has been removed from a MediaStream.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/removetrack_event">removetrack event - MDN</a>
   */
  event MediaStreamTrackEvent removetrack;
  /**
   * The MediaStream() constructor returns a newly-created MediaStream, which serves as a collection of media tracks, each represented by a MediaStreamTrack object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/MediaStream">MediaStream.MediaStream - MDN</a>
   */
  constructor();
  /**
   * The MediaStream() constructor returns a newly-created MediaStream, which serves as a collection of media tracks, each represented by a MediaStreamTrack object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/MediaStream">MediaStream.MediaStream - MDN</a>
   */
  constructor( MediaStream stream );
  /**
   * The MediaStream() constructor returns a newly-created MediaStream, which serves as a collection of media tracks, each represented by a MediaStreamTrack object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/MediaStream">MediaStream.MediaStream - MDN</a>
   */
  constructor( sequence<MediaStreamTrack> tracks );
  /**
   * The MediaStream.addTrack() method adds a new track to the stream. The track is specified as a parameter of type MediaStreamTrack.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/addTrack">MediaStream.addTrack - MDN</a>
   */
  void addTrack( MediaStreamTrack track );
  MediaStream clone();
  sequence<MediaStreamTrack> getAudioTracks();
  MediaStreamTrack? getTrackById( DOMString trackId );
  sequence<MediaStreamTrack> getTracks();
  sequence<MediaStreamTrack> getVideoTracks();
  void removeTrack( MediaStreamTrack track );
};

/**
 * Inherits properties from its parent, AudioNode.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode">MediaStreamAudioDestinationNode - MDN</a>
 */
[Exposed=Window]
interface MediaStreamAudioDestinationNode : AudioNode {
  /**
   * A MediaStream.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode/stream">MediaStreamAudioDestinationNode.stream - MDN</a>
   */
  readonly attribute MediaStream stream;
  constructor( AudioContext context, optional AudioNodeOptions options = {} );
};

/**
 * The MediaStreamAudioSourceNode interface is a type of AudioNode which operates as an audio source whose media is received from a MediaStream obtained using the WebRTC or Media Capture and Streams APIs.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode">MediaStreamAudioSourceNode - MDN</a>
 */
[Exposed=Window]
interface MediaStreamAudioSourceNode : AudioNode {
  /**
   * The MediaStreamAudioSourceNode interface's read-only mediaStream property indicates the MediaStream that contains the audio track from which the node is receiving audio.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode/mediaStream">MediaStreamAudioSourceNode.mediaStream - MDN</a>
   */
  [SameObject]
  readonly attribute MediaStream mediaStream;
  constructor( AudioContext context, MediaStreamAudioSourceOptions options );
};

/**
 * The MediaStreamTrack interface represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack">MediaStreamTrack - MDN</a>
 */
[Exposed=Window]
interface MediaStreamTrack : EventTarget {
  /**
   * The MediaStreamTrack.id read-only property returns a DOMString containing a unique identifier (GUID) for the track, which is generated by the user agent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/id">MediaStreamTrack.id - MDN</a>
   */
  readonly attribute DOMString id;
  readonly attribute boolean isolated;
  /**
   * The MediaStreamTrack.kind read-only property returns a DOMString set to "audio" if the track is an audio track and to "video", if it is a video track.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/kind">MediaStreamTrack.kind - MDN</a>
   */
  readonly attribute DOMString kind;
  /**
   * The MediaStreamTrack.label read-only property returns a DOMString containing a user agent-assigned label that identifies the track source, as in "internal microphone".
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/label">MediaStreamTrack.label - MDN</a>
   */
  readonly attribute DOMString label;
  /**
   * The muted read-only property of the MediaStreamTrack interface returns a Boolean value indicating whether or not the track is currently unable to provide media output.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/muted">MediaStreamTrack.muted - MDN</a>
   */
  readonly attribute boolean muted;
  /**
   * The MediaStreamTrack.readyState read-only property returns an enumerated value giving the status of the track.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/readyState">MediaStreamTrack.readyState - MDN</a>
   */
  readonly attribute MediaStreamTrackState readyState;
  /**
   * The enabled property on the MediaStreamTrack interface is a Boolean value which is true if the track is allowed to render the source stream or false if it is not. This can be used to intentionally mute a track.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/enabled">MediaStreamTrack.enabled - MDN</a>
   */
  attribute boolean enabled;
  /**
   * The MediaStreamTrack.onended event handler is used to specify a function which serves as an EventHandler to be called when the ended event occurs on the track. This event occurs when the track will no longer provide data to the stream for any reason, including the end of the media input being reached, the user revoking needed permissions, the source device being removed, or the remote peer ending a connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onended">MediaStreamTrack.onended - MDN</a>
   */
  attribute NullableEventHandler onended;
  attribute NullableEventHandler onisolationchange;
  /**
   * MediaStreamTrack's onmute event handler is called when the mute event is received.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onmute">MediaStreamTrack.onmute - MDN</a>
   */
  attribute NullableEventHandler onmute;
  /**
   * MediaStreamTrack's onunmute event handler is called when the unmute event is received. Such an event is sent when the track is again able to send data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onunmute">MediaStreamTrack.onunmute - MDN</a>
   */
  attribute NullableEventHandler onunmute;
  /**
   * The ended event of the MediaStreamTrack interface is fired when playback or streaming has stopped because the end of the media was reached or because no further data is available.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/ended_event">ended event - MDN</a>
   */
  event Event ended;
  /**
   * The mute event is sent to a MediaStreamTrack when the track's source is temporarily unable to provide media data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/mute_event">mute event - MDN</a>
   */
  event Event mute;
  /**
   * The unmute event is sent to a MediaStreamTrack when the track's source is once again able to provide media data after a period of not being able to do so.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/unmute_event">unmute event - MDN</a>
   */
  event Event unmute;
  /**
   * The applyConstraints() method of the MediaStreamTrack interface applies a set of constraints to the track; these constraints let the Web site or app establish ideal values and acceptable ranges of values for the constrainable properties of the track, such as frame rate, dimensions, echo cancelation, and so forth.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/applyConstraints">MediaStreamTrack.applyConstraints - MDN</a>
   */
  Promise<void> applyConstraints( optional MediaTrackConstraints constraints = {} );
  /**
   * The clone() method of the MediaStreamTrack interface creates a duplicate of the MediaStreamTrack. This new MediaStreamTrack object is identical except for its unique id.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/clone">MediaStreamTrack.clone - MDN</a>
   */
  MediaStreamTrack clone();
  /**
   * The getCapabilities() method of the MediaStreamTrack interface returns a MediaTrackCapabilities object which specifies the values or range of values which each constrainable property, based upon the platform and user agent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getCapabilities">MediaStreamTrack.getCapabilities - MDN</a>
   */
  MediaTrackCapabilities getCapabilities();
  /**
   * The getConstraints() method of the MediaStreamTrack interface returns a MediaTrackConstraints object containing the set of constraints most recently established for the track using a prior call to applyConstraints(). These constraints indicate values and ranges of values that the Web site or application has specified are required or acceptable for the included constrainable properties.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getConstraints">MediaStreamTrack.getConstraints - MDN</a>
   */
  MediaTrackConstraints getConstraints();
  /**
   * The getSettings() method of the MediaStreamTrack interface returns a MediaTrackSettings object containing the current values of each of the constrainable properties for the current MediaStreamTrack.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getSettings">MediaStreamTrack.getSettings - MDN</a>
   */
  MediaTrackSettings getSettings();
  /**
   * The MediaStreamTrack.stop() method stops the track.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/stop">MediaStreamTrack.stop - MDN</a>
   */
  void stop();
};

/**
 * The MediaStreamTrackAudioSourceNode interface is a type of AudioNode which represents a source of audio data taken from a specific MediaStreamTrack obtained through the WebRTC or Media Capture and Streams APIs.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackAudioSourceNode">MediaStreamTrackAudioSourceNode - MDN</a>
 */
[Exposed=Window]
interface MediaStreamTrackAudioSourceNode : AudioNode {
  constructor( AudioContext context, MediaStreamTrackAudioSourceOptions options );
};

/**
 * The MediaStreamTrackEvent interface represents events which indicate that a MediaStream has had tracks added to or removed from the stream through calls to Media Stream API methods. These events are sent to the stream when these changes occur.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackEvent">MediaStreamTrackEvent - MDN</a>
 */
[Exposed=Window]
interface MediaStreamTrackEvent : Event {
  [SameObject]
  readonly attribute MediaStreamTrack track;
  /**
   * The MediaStreamTrackEvent() constructor returns a newly created MediaStreamTrackEvent object, which represents an event announcing that a MediaStreamTrack has been added to or removed from a MediaStream.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackEvent/MediaStreamTrackEvent">MediaStreamTrackEvent.MediaStreamTrackEvent - MDN</a>
   */
  constructor( DOMString type, MediaStreamTrackEventInit eventInitDict );
};

/**
 * The WebAssembly.Memory object is a resizable ArrayBuffer or SharedArrayBuffer that holds the raw bytes of memory accessed by a WebAssembly Instance.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory">WebAssembly.Memory - MDN</a>
 */
[LegacyNamespace=WebAssembly, Exposed=(Window,Worker,Worklet)]
interface Memory {
  /**
   * The buffer prototype property of the WebAssembly.Memory object returns the buffer contained in the memory.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory/buffer">WebAssembly.Memory.buffer - MDN</a>
   */
  readonly attribute ArrayBuffer buffer;
  constructor( MemoryDescriptor descriptor );
  /**
   * The grow() protoype method of the Memory object increases the size of the memory instance by a specified number of WebAssembly pages.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory/grow">WebAssembly.Memory.grow - MDN</a>
   */
  unsigned long grow( [EnforceRange] unsigned long delta );
};

/**
 * The MessageChannel interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel">MessageChannel - MDN</a>
 */
[Exposed=(Window,Worker)]
interface MessageChannel {
  /**
   * The port1 read-only property of the MessageChannel interface returns the first port of the message channel — the port attached to the context that originated the channel.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/port1">MessageChannel.port1 - MDN</a>
   */
  readonly attribute MessagePort port1;
  /**
   * The port2 read-only property of the MessageChannel interface returns the second port of the message channel — the port attached to the context at the other end of the channel, which the message is initially sent to.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/port2">MessageChannel.port2 - MDN</a>
   */
  readonly attribute MessagePort port2;
  /**
   * The MessageChannel() constructor of the MessageChannel interface returns a new MessageChannel object with two new MessagePort objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/MessageChannel">MessageChannel.MessageChannel - MDN</a>
   */
  constructor();
};

/**
 * The MessageEvent interface represents a message received by a target object.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent">MessageEvent - MDN</a>
 */
[Exposed=(Window,Worker,AudioWorklet)]
interface MessageEvent : Event {
  /**
   * The data read-only property of the MessageEvent interface represents the data sent by the message emitter.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/data">MessageEvent.data - MDN</a>
   */
  readonly attribute any data;
  /**
   * The lastEventId read-only property of the MessageEvent interface is a DOMString representing a unique ID for the event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/lastEventId">MessageEvent.lastEventId - MDN</a>
   */
  readonly attribute DOMString lastEventId;
  /**
   * The origin read-only property of the MessageEvent interface is a USVString representing the origin of the message emitter.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/origin">MessageEvent.origin - MDN</a>
   */
  readonly attribute USVString origin;
  /**
   * The ports read-only property of the MessageEvent interface is an array of MessagePort objects representing the ports associated with the channel the message is being sent through (where appropriate, e.g. in channel messaging or when sending a message to a shared worker).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/ports">MessageEvent.ports - MDN</a>
   */
  readonly attribute FrozenArray<MessagePort> ports;
  /**
   * The source read-only property of the MessageEvent interface is a MessageEventSource (which can be a WindowProxy, MessagePort, or ServiceWorker object) representing the message emitter.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/source">MessageEvent.source - MDN</a>
   */
  readonly attribute MessageEventSource? source;
  /**
   * The MessageEvent() constructor creates a new MessageEvent object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/MessageEvent">MessageEvent.MessageEvent - MDN</a>
   */
  constructor( DOMString type, optional MessageEventInit eventInitDict = {} );
  void initMessageEvent( DOMString type, optional boolean bubbles = false, optional boolean cancelable = false, optional any data = null, optional USVString origin = "", optional DOMString lastEventId = "", optional MessageEventSource? source = null, optional sequence<MessagePort> ports = [] );
};

/**
 * The MessagePort interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessagePort">MessagePort - MDN</a>
 */
[Exposed=(Window,Worker,AudioWorklet), Transferable]
interface MessagePort : EventTarget {
  /**
   * The onmessage event handler of the MessagePort interface is an EventListener, called whenever an MessageEvent of type message is fired on the port — that is, when the port receives a message.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage">MessagePort.onmessage - MDN</a>
   */
  attribute NullableEventHandler onmessage;
  /**
   * The onmessageerror event handler of the MessagePort interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the port—that is, when it receives a message that cannot be deserialized.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessageerror">MessagePort.onmessageerror - MDN</a>
   */
  attribute NullableEventHandler onmessageerror;
  /**
   * The message event is fired on a MessagePort object when a message arrives on that channel.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/message_event">message event - MDN</a>
   */
  event MessageEvent message;
  /**
   * The messageerror event is fired on a MessagePort object when it receives a message that can't be deserialized.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/messageerror_event">messageerror event - MDN</a>
   */
  event MessageEvent messageerror;
  /**
   * The close() method of the MessagePort interface disconnects the port, so it is no longer active. This stops the flow of messages to that port.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/close">MessagePort.close - MDN</a>
   */
  void close();
  /**
   * The postMessage() method of the MessagePort interface sends a message from the port, and optionally, transfers ownership of objects to other browsing contexts.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage">MessagePort.postMessage - MDN</a>
   */
  void postMessage( any message, sequence<object> transfer );
  /**
   * The postMessage() method of the MessagePort interface sends a message from the port, and optionally, transfers ownership of objects to other browsing contexts.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage">MessagePort.postMessage - MDN</a>
   */
  void postMessage( any message, optional PostMessageOptions options = {} );
  /**
   * The start() method of the MessagePort interface starts the sending of messages queued on the port. This method is only needed when using EventTarget.addEventListener; it is implied when using MessageChannel.onmessage.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/start">MessagePort.start - MDN</a>
   */
  void start();
};

/**
 * The MimeType interface provides contains information about a MIME type associated with a particular plugin. NavigatorPlugins.mimeTypes returns an array of this object.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MimeType">MimeType - MDN</a>
 */
[Exposed=Window]
interface MimeType {
  readonly attribute DOMString description;
  readonly attribute Plugin enabledPlugin;
  readonly attribute DOMString suffixes;
  readonly attribute DOMString type;
};

/**
 * The MimeTypeArray interface returns an array of MimeType instances, each of which contains information about a supported browser plugins. This object is returned by NavigatorPlugins.mimeTypes.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray">MimeTypeArray - MDN</a>
 */
[Exposed=Window, LegacyUnenumerableNamedProperties]
interface MimeTypeArray {
  readonly attribute unsigned long length;
  getter MimeType? item( unsigned long index );
  getter MimeType? namedItem( DOMString name );
};

/**
 * A WebAssembly.Module object contains stateless WebAssembly code that has already been compiled by the browser — this can be efficiently shared with Workers, and instantiated multiple times.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module">WebAssembly.Module - MDN</a>
 */
[LegacyNamespace=WebAssembly, Exposed=(Window,Worker,Worklet)]
interface Module {
  static sequence<ArrayBuffer> customSections( Module moduleObject, DOMString sectionName );
  static sequence<ModuleExportDescriptor> exports( Module moduleObject );
  static sequence<ModuleImportDescriptor> imports( Module moduleObject );
  constructor( BufferSource bytes );
};

/**
 * The MouseEvent interface represents events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include click, dblclick, mouseup, mousedown.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent">MouseEvent - MDN</a>
 */
[Exposed=Window]
interface MouseEvent : UIEvent {
  /**
   * The MouseEvent.altKey read-only property is a Boolean that indicates whether the alt key was pressed or not when a given mouse event occurs.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/altKey">MouseEvent.altKey - MDN</a>
   */
  readonly attribute boolean altKey;
  /**
   * The MouseEvent.button read-only property indicates which button was pressed on the mouse to trigger the event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button">MouseEvent.button - MDN</a>
   */
  readonly attribute short button;
  /**
   * The MouseEvent.buttons read-only property indicates which buttons are pressed on the mouse (or other input device) when a mouse event is triggered.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons">MouseEvent.buttons - MDN</a>
   */
  readonly attribute unsigned short buttons;
  /**
   * The clientX read-only property of the MouseEvent interface provides the horizontal coordinate within the application's client area at which the event occurred (as opposed to the coordinate within the page).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX">MouseEvent.clientX - MDN</a>
   */
  readonly attribute double clientX;
  /**
   * The clientY read-only property of the MouseEvent interface provides the vertical coordinate within the application's client area at which the event occurred (as opposed to the coordinate within the page).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY">MouseEvent.clientY - MDN</a>
   */
  readonly attribute double clientY;
  /**
   * The MouseEvent.ctrlKey read-only property is a Boolean that indicates whether the ctrl key was pressed or not when a given mouse event occurs.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/ctrlKey">MouseEvent.ctrlKey - MDN</a>
   */
  readonly attribute boolean ctrlKey;
  /**
   * The MouseEvent.metaKey read-only property is a Boolean that indicates whether the meta key was pressed or not when a given mouse event occurs.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/metaKey">MouseEvent.metaKey - MDN</a>
   */
  readonly attribute boolean metaKey;
  /**
   * The movementX read-only property of the MouseEvent interface provides the difference in the X coordinate of the mouse pointer between the given event and the previous mousemove event. In other words, the value of the property is computed like this: currentEvent.movementX = currentEvent.screenX - previousEvent.screenX.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX">MouseEvent.movementX - MDN</a>
   */
  readonly attribute long movementX;
  /**
   * The movementY read-only property of the MouseEvent interface provides the difference in the Y coordinate of the mouse pointer between the given event and the previous mousemove event. In other words, the value of the property is computed like this: currentEvent.movementY = currentEvent.screenY - previousEvent.screenY.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementY">MouseEvent.movementY - MDN</a>
   */
  readonly attribute long movementY;
  /**
   * The offsetX read-only property of the MouseEvent interface provides the offset in the X coordinate of the mouse pointer between that event and the padding edge of the target node.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetX">MouseEvent.offsetX - MDN</a>
   */
  readonly attribute double offsetX;
  /**
   * The offsetY read-only property of the MouseEvent interface provides the offset in the Y coordinate of the mouse pointer between that event and the padding edge of the target node.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetY">MouseEvent.offsetY - MDN</a>
   */
  readonly attribute double offsetY;
  /**
   * The pageX read-only property of the MouseEvent interface returns the X (horizontal) coordinate (in pixels) at which the mouse was clicked, relative to the left edge of the entire document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageX">MouseEvent.pageX - MDN</a>
   */
  readonly attribute double pageX;
  /**
   * The pageY read-only property of the MouseEvent interface returns the Y (vertical) coordinate in pixels of the event relative to the whole document. This property takes into account any vertical scrolling of the page.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageY">MouseEvent.pageY - MDN</a>
   */
  readonly attribute double pageY;
  /**
   * The MouseEvent.relatedTarget read-only property is the secondary target for the mouse event, if there is one. That is:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget">MouseEvent.relatedTarget - MDN</a>
   */
  readonly attribute EventTarget? relatedTarget;
  /**
   * The screenX read-only property of the MouseEvent interface provides the horizontal coordinate (offset) of the mouse pointer in global (screen) coordinates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenX">MouseEvent.screenX - MDN</a>
   */
  readonly attribute double screenX;
  /**
   * The screenY read-only property of the MouseEvent interface provides the vertical coordinate (offset) of the mouse pointer in global (screen) coordinates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenY">MouseEvent.screenY - MDN</a>
   */
  readonly attribute double screenY;
  /**
   * The MouseEvent.shiftKey read-only property is a Boolean that indicates whether the shift key was pressed or not when a given mouse event occurs.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/shiftKey">MouseEvent.shiftKey - MDN</a>
   */
  readonly attribute boolean shiftKey;
  /**
   * The MouseEvent.x property is an alias for the MouseEvent.clientX property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/x">MouseEvent.x - MDN</a>
   */
  readonly attribute double x;
  /**
   * The MouseEvent.y property is an alias for the MouseEvent.clientY property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/y">MouseEvent.y - MDN</a>
   */
  readonly attribute double y;
  /**
   * The MouseEvent() constructor creates a new MouseEvent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent">MouseEvent.MouseEvent - MDN</a>
   */
  constructor( DOMString type, optional MouseEventInit eventInitDict );
  /**
   * The MouseEvent.getModifierState() method returns the current state of the specified modifier key: true if the modifier is active (i.e., the modifier key is pressed or locked), otherwise, false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/getModifierState">MouseEvent.getModifierState - MDN</a>
   */
  boolean getModifierState( DOMString keyArg );
};

/**
 * The MutationObserver interface provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature, which was part of the DOM3 Events specification.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver">MutationObserver - MDN</a>
 */
[Exposed=Window]
interface MutationObserver {
  /**
   * The DOM MutationObserver() constructor — part of the MutationObserver interface — creates and returns a new observer which invokes a specified callback when DOM events occur.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/MutationObserver">MutationObserver.MutationObserver - MDN</a>
   */
  constructor( MutationCallback callback );
  /**
   * The MutationObserver method disconnect() tells the observer to stop watching for mutations.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/disconnect">MutationObserver.disconnect - MDN</a>
   */
  void disconnect();
  /**
   * The MutationObserver method observe() configures the MutationObserver callback to begin receiving notifications of changes to the DOM that match the given options.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe">MutationObserver.observe - MDN</a>
   */
  void observe( Node target, optional MutationObserverInit options = {} );
  /**
   * The MutationObserver method takeRecords() returns a list of all matching DOM changes that have been detected but not yet processed by the observer's callback function, leaving the mutation queue empty.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/takeRecords">MutationObserver.takeRecords - MDN</a>
   */
  sequence<MutationRecord> takeRecords();
};

/**
 * A MutationRecord represents an individual DOM mutation. It is the object that is passed to MutationObserver's callback.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord">MutationRecord - MDN</a>
 */
[Exposed=Window]
interface MutationRecord {
  [SameObject]
  readonly attribute NodeList addedNodes;
  readonly attribute DOMString? attributeName;
  readonly attribute DOMString? attributeNamespace;
  readonly attribute Node? nextSibling;
  readonly attribute DOMString? oldValue;
  readonly attribute Node? previousSibling;
  [SameObject]
  readonly attribute NodeList removedNodes;
  [SameObject]
  readonly attribute Node target;
  readonly attribute DOMString type;
};

/**
 * The NamedNodeMap interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap">NamedNodeMap - MDN</a>
 */
[Exposed=Window, LegacyUnenumerableNamedProperties]
interface NamedNodeMap {
  readonly attribute unsigned long length;
  Attr? getNamedItemNS( DOMString? namespace, DOMString localName );
  [CEReactions]
  Attr removeNamedItem( DOMString qualifiedName );
  [CEReactions]
  Attr removeNamedItemNS( DOMString? namespace, DOMString localName );
  [CEReactions]
  Attr? setNamedItem( Attr attr );
  [CEReactions]
  Attr? setNamedItemNS( Attr attr );
  /**
   * The getNamedItem() method of the NamedNodeMap interface returns the Attr corresponding to the given name, or null if there is no corresponding attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/getNamedItem">NamedNodeMap.getNamedItem - MDN</a>
   */
  getter Attr? getNamedItem( DOMString qualifiedName );
  getter Attr? item( unsigned long index );
};

/**
 * The NavigationPreloadManager interface of the the Service Worker API provides methods for managing the preloading of resources with a service worker.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigationPreloadManager">NavigationPreloadManager - MDN</a>
 */
[SecureContext, Exposed=(Window,Worker)]
interface NavigationPreloadManager {
  Promise<void> disable();
  Promise<void> enable();
  Promise<NavigationPreloadState> getState();
  Promise<void> setHeaderValue( ByteString value );
};

/**
 * The Navigator interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator">Navigator - MDN</a>
 */
[Exposed=Window]
interface Navigator {
  /**
   * The value of the NavigatorID.appCodeName property is always "Mozilla", in any browser. This property is kept only for compatibility purposes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appCodeName">NavigatorID.appCodeName - MDN</a>
   */
  readonly attribute DOMString appCodeName;
  /**
   * The value of the NavigatorID.appName property is always "Netscape", in any browser. This property is kept only for compatibility purposes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appName">NavigatorID.appName - MDN</a>
   */
  readonly attribute DOMString appName;
  /**
   * Returns either "4.0" or a string representing version information about the browser.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appVersion">NavigatorID.appVersion - MDN</a>
   */
  readonly attribute DOMString appVersion;
  [SameObject]
  readonly attribute Bluetooth bluetooth;
  [SecureContext, SameObject]
  readonly attribute Clipboard clipboard;
  readonly attribute boolean cookieEnabled;
  /**
   * The credentials property of the Navigator interface returns the CredentialsContainer interface, which exposes methods to request credentials. The CredentialsContainer interface also notifies the user agent when an interesting event occurs, such as a successful sign-in or sign-out. This interface can be used for feature detection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/credentials">Navigator.credentials - MDN</a>
   */
  [SecureContext, SameObject]
  readonly attribute CredentialsContainer credentials;
  readonly attribute Geolocation geolocation;
  /**
   * The navigator.hardwareConcurrency read-only property returns the number of logical processors available to run threads on the user's computer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency">NavigatorConcurrentHardware.hardwareConcurrency - MDN</a>
   */
  readonly attribute unsigned long long hardwareConcurrency;
  /**
   * The NavigatorLanguage.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/language">NavigatorLanguage.language - MDN</a>
   */
  readonly attribute DOMString language;
  /**
   * The NavigatorLanguage.languages read-only property returns an array of DOMStrings representing the user's preferred languages. The language is described using BCP 47 language tags. In the returned array they are ordered by preference with the most preferred language first.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/languages">NavigatorLanguage.languages - MDN</a>
   */
  readonly attribute FrozenArray<DOMString> languages;
  readonly attribute long maxTouchPoints;
  /**
   * The Navigator.mediaDevices read-only property returns a MediaDevices object, which provides access to connected media input devices like cameras and microphones, as well as screen sharing.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaDevices">Navigator.mediaDevices - MDN</a>
   */
  [SameObject, SecureContext]
  readonly attribute MediaDevices mediaDevices;
  /**
   * Returns a MimeTypeArray object, which contains a list of MimeType objects representing the MIME types recognized by the browser.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/mimeTypes">NavigatorPlugins.mimeTypes - MDN</a>
   */
  [SameObject]
  readonly attribute MimeTypeArray mimeTypes;
  /**
   * Returns the online status of the browser. The property returns a boolean value, with true meaning online and false meaning offline. The property sends updates whenever the browser's ability to connect to the network changes. The update occurs when the user follows links or when a script requests a remote page. For example, the property should return false when users click links soon after they lose internet connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine">NavigatorOnLine.onLine - MDN</a>
   */
  readonly attribute boolean onLine;
  /**
   * The Navigator.oscpu property returns a string that identifies the current operating system.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/oscpu">Navigator.oscpu - MDN</a>
   */
  [Exposed=Window]
  readonly attribute DOMString oscpu;
  readonly attribute Permissions permissions;
  /**
   * Returns a string representing the platform of the browser. The specification allows browsers to always return the empty string, so don't rely on this property to get a reliable answer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform">NavigatorID.platform - MDN</a>
   */
  readonly attribute DOMString platform;
  /**
   * Returns a PluginArray object, listing the Plugin objects describing the plugins installed in the application.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/plugins">NavigatorPlugins.plugins - MDN</a>
   */
  [SameObject]
  readonly attribute PluginArray plugins;
  /**
   * The value of the NavigatorID.product property is always "Gecko", in any browser. This property is kept only for compatibility purposes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/product">NavigatorID.product - MDN</a>
   */
  readonly attribute DOMString product;
  /**
   * The Navigator.productSub read-only property returns the build number of the current browser.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/productSub">Navigator.productSub - MDN</a>
   */
  [Exposed=Window]
  readonly attribute DOMString productSub;
  [SecureContext, SameObject]
  readonly attribute ServiceWorkerContainer serviceWorker;
  /**
   * The NavigatorStorage.storage read-only property returns the singleton StorageManager object used to access the overall storage capabilities of the browser for the current site or app.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorStorage/storage">NavigatorStorage.storage - MDN</a>
   */
  [SameObject]
  readonly attribute StorageManager storage;
  /**
   * The NavigatorID.userAgent read-only property returns the user agent string for the current browser.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/userAgent">NavigatorID.userAgent - MDN</a>
   */
  readonly attribute DOMString userAgent;
  /**
   * The value of the Navigator vendor property is always either "Google Inc.", "Apple Computer, Inc.", or (in Firefox) the empty string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vendor">Navigator.vendor - MDN</a>
   */
  [Exposed=Window]
  readonly attribute DOMString vendor;
  /**
   * The value of the Navigator.vendorSub property is always the empty string, in any browser.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vendorSub">Navigator.vendorSub - MDN</a>
   */
  [Exposed=Window]
  readonly attribute DOMString vendorSub;
  readonly attribute boolean webdriver;
  [SecureContext, SameObject]
  readonly attribute XR xr;
  sequence<Gamepad?> getGamepads();
  /**
   * This method indicates whether the current browser is Java-enabled or not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/javaEnabled">NavigatorPlugins.javaEnabled - MDN</a>
   */
  boolean javaEnabled();
  [SecureContext]
  void registerProtocolHandler( DOMString scheme, USVString url );
  [SecureContext]
  Promise<MediaKeySystemAccess> requestMediaKeySystemAccess( DOMString keySystem, sequence<MediaKeySystemConfiguration> supportedConfigurations );
  boolean sendBeacon( USVString url, optional BodyInit? data = null );
  [SecureContext]
  Promise<void> share( optional ShareData data = {} );
  /**
   * The NavigatorID.taintEnabled() method always returns false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/taintEnabled">NavigatorID.taintEnabled - MDN</a>
   */
  [Exposed=Window]
  boolean taintEnabled();
  [SecureContext]
  void unregisterProtocolHandler( DOMString scheme, USVString url );
  boolean vibrate( VibratePattern pattern );
};

/**
 * The DOM Node interface is a key base class upon which many other DOM API objects are based, thus letting those object types to be used similarly and often interchangeably.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node">Node - MDN</a>
 */
[Exposed=Window]
interface Node : EventTarget {
  const unsigned short ATTRIBUTE_NODE = 2;
  const unsigned short CDATA_SECTION_NODE = 4;
  const unsigned short COMMENT_NODE = 8;
  const unsigned short DOCUMENT_FRAGMENT_NODE = 11;
  const unsigned short DOCUMENT_NODE = 9;
  const unsigned short DOCUMENT_POSITION_CONTAINED_BY = 0x10;
  const unsigned short DOCUMENT_POSITION_CONTAINS = 0x08;
  const unsigned short DOCUMENT_POSITION_DISCONNECTED = 0x01;
  const unsigned short DOCUMENT_POSITION_FOLLOWING = 0x04;
  const unsigned short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;
  const unsigned short DOCUMENT_POSITION_PRECEDING = 0x02;
  const unsigned short DOCUMENT_TYPE_NODE = 10;
  const unsigned short ELEMENT_NODE = 1;
  const unsigned short ENTITY_NODE = 6;
  const unsigned short ENTITY_REFERENCE_NODE = 5;
  const unsigned short NOTATION_NODE = 12;
  const unsigned short PROCESSING_INSTRUCTION_NODE = 7;
  const unsigned short TEXT_NODE = 3;
  /**
   * The baseURI read-only property returns the absolute base URL of a Node.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI">Node.baseURI - MDN</a>
   */
  readonly attribute USVString baseURI;
  /**
   * The Node.childNodes read-only property returns a live NodeList of child nodes of the given element where the first child node is assigned index 0.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes">Node.childNodes - MDN</a>
   */
  [SameObject]
  readonly attribute NodeList childNodes;
  /**
   * The Node.firstChild read-only property returns the node's first child in the tree, or null if the node has no children.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild">Node.firstChild - MDN</a>
   */
  readonly attribute Node? firstChild;
  /**
   * The isConnected read-only property of the Node interface returns a boolean indicating whether the node is connected (directly or indirectly) to the context object, for example the Document object in the case of the normal DOM, or the ShadowRoot in the case of a shadow DOM.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected">Node.isConnected - MDN</a>
   */
  readonly attribute boolean isConnected;
  /**
   * The Node.lastChild read-only property returns the last child of the node. If its parent is an element, then the child is generally an element node, a text node, or a comment node. It returns null if there are no child elements.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild">Node.lastChild - MDN</a>
   */
  readonly attribute Node? lastChild;
  /**
   * The Node.nextSibling read-only property returns the node immediately following the specified one in their parent's childNodes, or returns null if the specified node is the last child in the parent element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling">Node.nextSibling - MDN</a>
   */
  readonly attribute Node? nextSibling;
  /**
   * The nodeName read-only property returns the name of the current Node as a string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName">Node.nodeName - MDN</a>
   */
  readonly attribute DOMString nodeName;
  /**
   * The read-only Node.nodeType property is an integer that identifies what the node is. It distinguishes different kind of nodes from each other, such as elements, text and comments.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType">Node.nodeType - MDN</a>
   */
  readonly attribute unsigned short nodeType;
  /**
   * The ownerDocument read-only property of the Node interface returns the top-level document object of the node.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument">Node.ownerDocument - MDN</a>
   */
  readonly attribute Document? ownerDocument;
  /**
   * The Node.parentElement read-only property returns the DOM node's parent Element, or null if the node either has no parent, or its parent isn't a DOM Element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement">Node.parentElement - MDN</a>
   */
  readonly attribute Element? parentElement;
  /**
   * The Node.parentNode read-only property returns the parent of the specified node in the DOM tree.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode">Node.parentNode - MDN</a>
   */
  readonly attribute Node? parentNode;
  /**
   * The Node.previousSibling read-only property returns the node immediately preceding the specified one in its parent's childNodes list, or null if the specified node is the first in that list.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling">Node.previousSibling - MDN</a>
   */
  readonly attribute Node? previousSibling;
  /**
   * The nodeValue property of the Node interface returns or sets the value of the current node.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue">Node.nodeValue - MDN</a>
   */
  [CEReactions]
  attribute DOMString? nodeValue;
  /**
   * The textContent property of the Node interface represents the text content of the node and its descendants.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent">Node.textContent - MDN</a>
   */
  [CEReactions]
  attribute DOMString? textContent;
  /**
   * The Node.appendChild() method adds a node to the end of the list of children of a specified parent node. If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position (there is no requirement to remove the node from its parent node before appending it to some other node).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild">Node.appendChild - MDN</a>
   */
  [CEReactions]
  Node appendChild( Node node );
  /**
   * The Node.cloneNode() method returns a duplicate of the node on which this method was called.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode">Node.cloneNode - MDN</a>
   */
  [CEReactions, NewObject]
  Node cloneNode( optional boolean deep = false );
  /**
   * The Node.compareDocumentPosition() method reports the position of the given node relative to another node in any document — not just the given node’s document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition">Node.compareDocumentPosition - MDN</a>
   */
  unsigned short compareDocumentPosition( Node other );
  /**
   * The Node.contains() method returns a Boolean value indicating whether a node is a descendant of a given node, i.e. the node itself, one of its direct children (childNodes), one of the children's direct children, and so on.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/contains">Node.contains - MDN</a>
   */
  boolean contains( Node? other );
  /**
   * The getRootNode() method of the Node interface returns the context object's root, which optionally includes the shadow root if it is available.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode">Node.getRootNode - MDN</a>
   */
  Node getRootNode( optional GetRootNodeOptions options = {} );
  /**
   * The Node.hasChildNodes() method returns a Boolean value indicating whether the given Node has child nodes or not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes">Node.hasChildNodes - MDN</a>
   */
  boolean hasChildNodes();
  /**
   * The Node.insertBefore() method inserts a node before a reference node as a child of a specified parent node.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore">Node.insertBefore - MDN</a>
   */
  [CEReactions]
  Node insertBefore( Node node, Node? child );
  /**
   * The Node.isDefaultNamespace() method accepts a namespace URI as an argument and returns a Boolean with a value of true if the namespace is the default namespace on the given node or false if not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace">Node.isDefaultNamespace - MDN</a>
   */
  boolean isDefaultNamespace( DOMString? namespace );
  /**
   * The Node.isEqualNode() method tests whether two nodes are equal. Two nodes are equal when they have the same type, defining characteristics (for elements, this would be their ID, number of children, and so forth), its attributes match, and so on. The specific set of data points that must match varies depending on the types of the nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode">Node.isEqualNode - MDN</a>
   */
  boolean isEqualNode( Node? otherNode );
  /**
   * The isSameNode() method for Node objects tests whether two nodes are the same (that is, whether they reference the same object).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/isSameNode">Node.isSameNode - MDN</a>
   */
  boolean isSameNode( Node? otherNode );
  /**
   * The Node.lookupNamespaceURI() method accepts a prefix and returns the namespace URI associated with it on the given node if found (and null if not).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupNamespaceURI">Node.lookupNamespaceURI - MDN</a>
   */
  DOMString? lookupNamespaceURI( DOMString? prefix );
  /**
   * The Node.lookupPrefix() method returns a DOMString containing the prefix for a given namespace URI, if present, and null if not. When multiple prefixes are possible, the result is implementation-dependent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix">Node.lookupPrefix - MDN</a>
   */
  DOMString? lookupPrefix( DOMString? namespace );
  /**
   * The Node.normalize() method puts the specified node and all of its sub-tree into a "normalized" form. In a normalized sub-tree, no text nodes in the sub-tree are empty and there are no adjacent text nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize">Node.normalize - MDN</a>
   */
  [CEReactions]
  void normalize();
  /**
   * The Node.removeChild() method removes a child node from the DOM and returns the removed node.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild">Node.removeChild - MDN</a>
   */
  [CEReactions]
  Node removeChild( Node child );
  /**
   * The Node.replaceChild() method replaces a child node within the given (parent) node.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild">Node.replaceChild - MDN</a>
   */
  [CEReactions]
  Node replaceChild( Node node, Node child );
};

/**
 * The NodeIterator interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator">NodeIterator - MDN</a>
 */
[Exposed=Window]
interface NodeIterator {
  /**
   * The NodeIterator.filter read-only method returns a NodeFilter object, that is an object implement an acceptNode(node) method, used to screen nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/filter">NodeIterator.filter - MDN</a>
   */
  readonly attribute NodeFilter? filter;
  /**
   * The NodeIterator.pointerBeforeReferenceNode read-only property returns a Boolean flag that indicates whether the NodeFilter is anchored before (if this value is true) or after (if this value is false) the anchor node indicated by the NodeIterator.referenceNode property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/pointerBeforeReferenceNode">NodeIterator.pointerBeforeReferenceNode - MDN</a>
   */
  readonly attribute boolean pointerBeforeReferenceNode;
  /**
   * The NodeIterator.referenceNode read-only returns the Node to which the iterator is anchored; as new nodes are inserted, the iterator remains anchored to the reference node as specified by this property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/referenceNode">NodeIterator.referenceNode - MDN</a>
   */
  readonly attribute Node referenceNode;
  /**
   * The NodeIterator.root read-only property represents the Node that is the root of what the NodeIterator traverses.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/root">NodeIterator.root - MDN</a>
   */
  [SameObject]
  readonly attribute Node root;
  /**
   * The NodeIterator.whatToShow read-only property represents an unsigned integer representing a bitmask signifying what types of nodes should be returned by the NodeIterator.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/whatToShow">NodeIterator.whatToShow - MDN</a>
   */
  readonly attribute unsigned long whatToShow;
  /**
   * The NodeIterator.detach() method is a no-op, kept for backward compatibility only.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/detach">NodeIterator.detach - MDN</a>
   */
  void detach();
  /**
   * The NodeIterator.nextNode() method returns the next node in the set represented by the NodeIterator and advances the position of the iterator within the set.  The first call to nextNode() returns the first node in the set.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/nextNode">NodeIterator.nextNode - MDN</a>
   */
  Node? nextNode();
  /**
   * The NodeIterator.previousNode() method returns the previous node in the set represented by the NodeIterator and moves the position of the iterator backwards within the set.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/previousNode">NodeIterator.previousNode - MDN</a>
   */
  Node? previousNode();
};

/**
 * NodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList">NodeList - MDN</a>
 */
[Exposed=Window]
interface NodeList {
  iterable<Node>;
  /**
   * The NodeList.length property returns the number of items in a NodeList.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList/length">NodeList.length - MDN</a>
   */
  readonly attribute unsigned long length;
  /**
   * Returns a node from a NodeList by index. This method doesn't throw exceptions as long as you provide arguments. A value of null is returned if the index is out of range, and a TypeError is thrown if no argument is provided.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList/item">NodeList.item - MDN</a>
   */
  getter Node? item( unsigned long index );
};

/**
 * The Notification interface of the Notifications API is used to configure and display desktop notifications to the user.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Notification">Notification - MDN</a>
 */
[Exposed=(Window,Worker)]
interface Notification : EventTarget {
  static readonly attribute unsigned long maxActions;
  static readonly attribute NotificationPermission permission;
  [SameObject]
  readonly attribute FrozenArray<NotificationAction> actions;
  readonly attribute USVString badge;
  readonly attribute DOMString body;
  [SameObject]
  readonly attribute any data;
  readonly attribute NotificationDirection dir;
  readonly attribute USVString icon;
  readonly attribute USVString image;
  readonly attribute DOMString lang;
  readonly attribute boolean renotify;
  readonly attribute boolean requireInteraction;
  readonly attribute boolean silent;
  readonly attribute DOMString tag;
  readonly attribute DOMTimeStamp timestamp;
  readonly attribute DOMString title;
  [SameObject]
  readonly attribute FrozenArray<unsigned long> vibrate;
  attribute NullableEventHandler onclick;
  attribute NullableEventHandler onclose;
  attribute NullableEventHandler onerror;
  attribute NullableEventHandler onshow;
  /**
   * The requestPermission() method of the Notification interface requests permission from the user for the current origin to display notifications.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission">Notification.requestPermission - MDN</a>
   */
  [Exposed=Window]
  static Promise<NotificationPermission> requestPermission( optional NotificationPermissionCallback deprecatedCallback );
  /**
   * The Notification() constructor creates a new Notification object instance, which represents a user notification.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification">Notification.Notification - MDN</a>
   */
  constructor( DOMString title, optional NotificationOptions options = {} );
  void close();
};

/**
 * The OES_element_index_uint extension is part of the WebGL API and adds support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements().
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OES_element_index_uint">OES_element_index_uint - MDN</a>
 */
[LegacyNoInterfaceObject]
interface OES_element_index_uint {
};

/**
 * The OES_standard_derivatives extension is part of the WebGL API and adds the GLSL derivative functions dFdx, dFdy, and fwidth.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives">OES_standard_derivatives - MDN</a>
 */
[LegacyNoInterfaceObject]
interface OES_standard_derivatives {
  const GLenum FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B;
};

/**
 * The OES_texture_float extension is part of the WebGL API and exposes floating-point pixel types for textures.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float">OES_texture_float - MDN</a>
 */
[LegacyNoInterfaceObject]
interface OES_texture_float {
};

/**
 * The OES_texture_float_linear extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float_linear">OES_texture_float_linear - MDN</a>
 */
[LegacyNoInterfaceObject]
interface OES_texture_float_linear {
};

/**
 * The OES_texture_half_float extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float">OES_texture_half_float - MDN</a>
 */
[LegacyNoInterfaceObject]
interface OES_texture_half_float {
  const GLenum HALF_FLOAT_OES = 0x8D61;
};

/**
 * The OES_texture_half_float_linear extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float_linear">OES_texture_half_float_linear - MDN</a>
 */
[LegacyNoInterfaceObject]
interface OES_texture_half_float_linear {
};

/**
 * The OES_vertex_array_object extension is part of the WebGL API and provides vertex array objects (VAOs) which encapsulate vertex array states. These objects keep pointers to vertex data and provide names for different sets of vertex data.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object">OES_vertex_array_object - MDN</a>
 */
[LegacyNoInterfaceObject]
interface OES_vertex_array_object {
  const GLenum VERTEX_ARRAY_BINDING_OES = 0x85B5;
  void bindVertexArrayOES( WebGLVertexArrayObjectOES? arrayObject );
  WebGLVertexArrayObjectOES? createVertexArrayOES();
  void deleteVertexArrayOES( WebGLVertexArrayObjectOES? arrayObject );
  [WebGLHandlesContextLoss]
  GLboolean isVertexArrayOES( WebGLVertexArrayObjectOES? arrayObject );
};

/**
 * The Web Audio API OfflineAudioCompletionEvent interface represents events that occur when the processing of an OfflineAudioContext is terminated. The complete event implements this interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent">OfflineAudioCompletionEvent - MDN</a>
 */
[Exposed=Window]
interface OfflineAudioCompletionEvent : Event {
  /**
   * The renderedBuffer read-only property of the OfflineAudioCompletionEvent interface is an AudioBuffer containing the result of processing an OfflineAudioContext.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent/renderedBuffer">OfflineAudioCompletionEvent.renderedBuffer - MDN</a>
   */
  readonly attribute AudioBuffer renderedBuffer;
  constructor( DOMString type, OfflineAudioCompletionEventInit eventInitDict );
};

/**
 * The OfflineAudioContext interface is an AudioContext interface representing an audio-processing graph built from linked together AudioNodes. In contrast with a standard AudioContext, an OfflineAudioContext doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an AudioBuffer.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext">OfflineAudioContext - MDN</a>
 */
[Exposed=Window, LegacyNoInterfaceObject]
interface OfflineAudioContext : BaseAudioContext {
  /**
   * The length property of the OfflineAudioContext interface returns an integer representing the size of the buffer in sample-frames.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/length">OfflineAudioContext.length - MDN</a>
   */
  readonly attribute unsigned long length;
  /**
   * When processing is complete, you might want to use the oncomplete handler the prompt the user that the audio can now be played, and enable the play button.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/oncomplete">OfflineAudioContext.oncomplete - MDN</a>
   */
  attribute NullableEventHandler oncomplete;
  /**
   * The complete event of the OfflineAudioContext interface is fired when the rendering of an offline audio context is complete.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/complete_event">complete event - MDN</a>
   */
  event OfflineAudioCompletionEvent complete;
  constructor( OfflineAudioContextOptions contextOptions );
  constructor( unsigned long numberOfChannels, unsigned long length, float sampleRate );
  Promise<void> resume();
  /**
   * The startRendering() method of the OfflineAudioContext Interface starts rendering the audio graph, taking into account the current connections and the current scheduled changes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/startRendering">OfflineAudioContext.startRendering - MDN</a>
   */
  Promise<AudioBuffer> startRendering();
  /**
   * The suspend() method of the OfflineAudioContext interface schedules a suspension of the time progression in the audio context at the specified time and returns a promise. This is generally useful at the time of manipulating the audio graph synchronously on OfflineAudioContext.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/suspend">OfflineAudioContext.suspend - MDN</a>
   */
  Promise<void> suspend( double suspendTime );
};

/**
 * The OffscreenCanvas interface provides a canvas that can be rendered off screen. It is available in both the window and worker contexts.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas">OffscreenCanvas - MDN</a>
 */
[Exposed=(Window,Worker), Transferable]
interface OffscreenCanvas : EventTarget {
  /**
   * The height property returns and sets the height of an OffscreenCanvas object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/height">OffscreenCanvas.height - MDN</a>
   */
  attribute [EnforceRange] unsigned long long height;
  /**
   * The width property returns and sets the width of an OffscreenCanvas object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/width">OffscreenCanvas.width - MDN</a>
   */
  attribute [EnforceRange] unsigned long long width;
  /**
   * The OffscreenCanvas() constructor returns a newly instantiated OffscreenCanvas object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/OffscreenCanvas">OffscreenCanvas.OffscreenCanvas - MDN</a>
   */
  constructor( [EnforceRange] unsigned long long width, [EnforceRange] unsigned long long height );
  Promise<Blob> convertToBlob( optional ImageEncodeOptions options = {} );
  /**
   * The OffscreenCanvas.getContext() method returns a drawing context for an offscreen canvas, or null if the context identifier is not supported.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/getContext">OffscreenCanvas.getContext - MDN</a>
   */
  OffscreenRenderingContext? getContext( OffscreenRenderingContextId contextId, optional any options = null );
  ImageBitmap transferToImageBitmap();
};

[Exposed=(Window,Worker)]
interface OffscreenCanvasRenderingContext2D {
  readonly attribute OffscreenCanvas canvas;
  attribute CanvasDirection direction;
  attribute ( DOMString or CanvasGradient or CanvasPattern ) fillStyle;
  attribute DOMString filter;
  attribute DOMString font;
  attribute unrestricted double globalAlpha;
  attribute DOMString globalCompositeOperation;
  attribute boolean imageSmoothingEnabled;
  attribute ImageSmoothingQuality imageSmoothingQuality;
  attribute CanvasLineCap lineCap;
  attribute unrestricted double lineDashOffset;
  attribute CanvasLineJoin lineJoin;
  attribute unrestricted double lineWidth;
  attribute unrestricted double miterLimit;
  attribute unrestricted double shadowBlur;
  attribute DOMString shadowColor;
  attribute unrestricted double shadowOffsetX;
  attribute unrestricted double shadowOffsetY;
  attribute ( DOMString or CanvasGradient or CanvasPattern ) strokeStyle;
  attribute CanvasTextAlign textAlign;
  attribute CanvasTextBaseline textBaseline;
  void arc( unrestricted double x, unrestricted double y, unrestricted double radius, unrestricted double startAngle, unrestricted double endAngle, optional boolean anticlockwise = false );
  void arcTo( unrestricted double x1, unrestricted double y1, unrestricted double x2, unrestricted double y2, unrestricted double radius );
  void beginPath();
  void bezierCurveTo( unrestricted double cp1x, unrestricted double cp1y, unrestricted double cp2x, unrestricted double cp2y, unrestricted double x, unrestricted double y );
  void clearRect( unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h );
  void clip( optional CanvasFillRule fillRule = "nonzero" );
  void clip( Path2D path, optional CanvasFillRule fillRule = "nonzero" );
  void closePath();
  void commit();
  ImageData createImageData( long sw, long sh );
  ImageData createImageData( ImageData imagedata );
  CanvasGradient createLinearGradient( double x0, double y0, double x1, double y1 );
  CanvasPattern? createPattern( CanvasImageSource image, [LegacyNullToEmptyString] DOMString repetition );
  CanvasGradient createRadialGradient( double x0, double y0, double r0, double x1, double y1, double r1 );
  void drawImage( CanvasImageSource image, unrestricted double dx, unrestricted double dy );
  void drawImage( CanvasImageSource image, unrestricted double dx, unrestricted double dy, unrestricted double dw, unrestricted double dh );
  void drawImage( CanvasImageSource image, unrestricted double sx, unrestricted double sy, unrestricted double sw, unrestricted double sh, unrestricted double dx, unrestricted double dy, unrestricted double dw, unrestricted double dh );
  void ellipse( unrestricted double x, unrestricted double y, unrestricted double radiusX, unrestricted double radiusY, unrestricted double rotation, unrestricted double startAngle, unrestricted double endAngle, optional boolean anticlockwise = false );
  void fill( optional CanvasFillRule fillRule = "nonzero" );
  void fill( Path2D path, optional CanvasFillRule fillRule = "nonzero" );
  void fillRect( unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h );
  void fillText( DOMString text, unrestricted double x, unrestricted double y, optional unrestricted double maxWidth );
  ImageData getImageData( long sx, long sy, long sw, long sh );
  sequence<unrestricted double> getLineDash();
  [NewObject]
  DOMMatrix getTransform();
  boolean isPointInPath( unrestricted double x, unrestricted double y, optional CanvasFillRule fillRule = "nonzero" );
  boolean isPointInPath( Path2D path, unrestricted double x, unrestricted double y, optional CanvasFillRule fillRule = "nonzero" );
  boolean isPointInStroke( unrestricted double x, unrestricted double y );
  boolean isPointInStroke( Path2D path, unrestricted double x, unrestricted double y );
  void lineTo( unrestricted double x, unrestricted double y );
  TextMetrics measureText( DOMString text );
  void moveTo( unrestricted double x, unrestricted double y );
  void putImageData( ImageData imagedata, long dx, long dy );
  void putImageData( ImageData imagedata, long dx, long dy, long dirtyX, long dirtyY, long dirtyWidth, long dirtyHeight );
  void quadraticCurveTo( unrestricted double cpx, unrestricted double cpy, unrestricted double x, unrestricted double y );
  void rect( unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h );
  void resetTransform();
  void restore();
  void rotate( unrestricted double angle );
  void save();
  void scale( unrestricted double x, unrestricted double y );
  void setLineDash( sequence<unrestricted double> segments );
  void setTransform( unrestricted double a, unrestricted double b, unrestricted double c, unrestricted double d, unrestricted double e, unrestricted double f );
  void setTransform( optional DOMMatrix2DInit transform = {} );
  void stroke();
  void stroke( Path2D path );
  void strokeRect( unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h );
  void strokeText( DOMString text, unrestricted double x, unrestricted double y, optional unrestricted double maxWidth );
  void transform( unrestricted double a, unrestricted double b, unrestricted double c, unrestricted double d, unrestricted double e, unrestricted double f );
  void translate( unrestricted double x, unrestricted double y );
};

/**
 * The OscillatorNode interface represents a periodic waveform, such as a sine wave. It is an AudioScheduledSourceNode audio-processing module that causes a specified frequency of a given wave to be created—in effect, a constant tone.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode">OscillatorNode - MDN</a>
 */
[Exposed=Window]
interface OscillatorNode : AudioScheduledSourceNode {
  readonly attribute AudioParam detune;
  /**
   * An a-rate AudioParam.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/frequency">OscillatorNode.frequency - MDN</a>
   */
  readonly attribute AudioParam frequency;
  attribute OscillatorType type;
  /**
   * The OscillatorNode() constructor of the Web Audio API creates a new OscillatorNode object which is an AudioNode that represents a periodic waveform, like a sine wave, optionally setting the node's properties' values to match values in a specified object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/OscillatorNode">OscillatorNode.OscillatorNode - MDN</a>
   */
  constructor( BaseAudioContext context, optional OscillatorOptions options = {} );
  /**
   * The setPeriodicWave() method of the OscillatorNode interface is used to point to a PeriodicWave defining a periodic waveform that can be used to shape the oscillator's output, when type is custom.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/setPeriodicWave">OscillatorNode.setPeriodicWave - MDN</a>
   */
  void setPeriodicWave( PeriodicWave periodicWave );
};

/**
 * The PageTransitionEvent event object is available inside handler functions for the pageshow and pagehide events, fired when a document is being loaded or unloaded.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent">PageTransitionEvent - MDN</a>
 */
[Exposed=Window]
interface PageTransitionEvent : Event {
  /**
   * The persisted read-only property indicates if a webpage is loading from a cache.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent/persisted">PageTransitionEvent.persisted - MDN</a>
   */
  readonly attribute boolean persisted;
  constructor( DOMString type, optional PageTransitionEventInit eventInitDict = {} );
};

/**
 * A PannerNode always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels!
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PannerNode">PannerNode - MDN</a>
 */
[Exposed=Window]
interface PannerNode : AudioNode {
  readonly attribute AudioParam orientationX;
  readonly attribute AudioParam orientationY;
  readonly attribute AudioParam orientationZ;
  readonly attribute AudioParam positionX;
  readonly attribute AudioParam positionY;
  readonly attribute AudioParam positionZ;
  attribute double coneInnerAngle;
  attribute double coneOuterAngle;
  attribute double coneOuterGain;
  attribute DistanceModelType distanceModel;
  attribute double maxDistance;
  attribute PanningModelType panningModel;
  attribute double refDistance;
  attribute double rolloffFactor;
  constructor( BaseAudioContext context, optional PannerOptions options = {} );
  void setOrientation( float x, float y, float z );
  /**
   * Void.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setPosition">PannerNode.setPosition - MDN</a>
   */
  void setPosition( float x, float y, float z );
};

/**
 * The interface of the Credential Management API provides information about a username/password pair. In supporting browsers an instance of this class may be passed in the credential member of the init object for global fetch.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential">PasswordCredential - MDN</a>
 */
[Exposed=Window, SecureContext]
interface PasswordCredential : Credential {
  /**
   * The iconURL read-only property of the PasswordCredential interface returns a USVString containing a URL pointing to an image for an icon. This image is intended for display in a credential chooser. The URL must be accessible without authentication.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/iconURL">PasswordCredential.iconURL - MDN</a>
   */
  readonly attribute USVString iconURL;
  /**
   * The name read-only property of the PasswordCredential interface returns a USVSTring containing a human-readable public name for display in a credential chooser.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/name">PasswordCredential.name - MDN</a>
   */
  readonly attribute USVString name;
  /**
   * The password read-only property of the PasswordCredential interface returns a USVString containing the password of the credential.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/password">PasswordCredential.password - MDN</a>
   */
  readonly attribute USVString password;
  /**
   * The PasswordCredential constructor creates a new PasswordCredential object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/PasswordCredential">PasswordCredential.PasswordCredential - MDN</a>
   */
  constructor( HTMLFormElement form );
  /**
   * The PasswordCredential constructor creates a new PasswordCredential object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/PasswordCredential">PasswordCredential.PasswordCredential - MDN</a>
   */
  constructor( PasswordCredentialData data );
};

/**
 * The Path2D interface of the Canvas 2D API is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Path2D">Path2D - MDN</a>
 */
[Exposed=(Window,Worker)]
interface Path2D {
  /**
   * The Path2D() constructor returns a newly instantiated Path2D object, optionally with another path as an argument (creates a copy), or optionally with a string consisting of SVG path data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Path2D/Path2D">Path2D.Path2D - MDN</a>
   */
  constructor( optional ( Path2D or DOMString ) path );
  /**
   * The Path2D.addPath() method of the Canvas 2D API adds one Path2D object to another Path2D object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Path2D/addPath">Path2D.addPath - MDN</a>
   */
  void addPath( Path2D path, optional DOMMatrix2DInit transform = {} );
  void arc( unrestricted double x, unrestricted double y, unrestricted double radius, unrestricted double startAngle, unrestricted double endAngle, optional boolean anticlockwise = false );
  void arcTo( unrestricted double x1, unrestricted double y1, unrestricted double x2, unrestricted double y2, unrestricted double radius );
  void bezierCurveTo( unrestricted double cp1x, unrestricted double cp1y, unrestricted double cp2x, unrestricted double cp2y, unrestricted double x, unrestricted double y );
  void closePath();
  void ellipse( unrestricted double x, unrestricted double y, unrestricted double radiusX, unrestricted double radiusY, unrestricted double rotation, unrestricted double startAngle, unrestricted double endAngle, optional boolean anticlockwise = false );
  void lineTo( unrestricted double x, unrestricted double y );
  void moveTo( unrestricted double x, unrestricted double y );
  void quadraticCurveTo( unrestricted double cpx, unrestricted double cpy, unrestricted double x, unrestricted double y );
  void rect( unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h );
};

/**
 * The Performance interface provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance">Performance - MDN</a>
 */
[Exposed=(Window,Worker)]
interface Performance : EventTarget {
  /**
   * The legacy Performance.navigation read-only property returns a PerformanceNavigation object representing the type of navigation that occurs in the given browsing context, such as the number of redirections needed to fetch the resource.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/navigation">Performance.navigation - MDN</a>
   */
  [SameObject]
  readonly attribute PerformanceNavigation navigation;
  /**
   * The timeOrigin read-only property of the Performance interface returns the high resolution timestamp of the start time of the performance measurement.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/timeOrigin">Performance.timeOrigin - MDN</a>
   */
  readonly attribute DOMHighResTimeStamp timeOrigin;
  /**
   * The legacy Performance.timing read-only property returns a PerformanceTiming object containing latency-related performance information.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/timing">Performance.timing - MDN</a>
   */
  [SameObject]
  readonly attribute PerformanceTiming timing;
  /**
   * The onresourcetimingbufferfull property is an event handler that will be called when the resourcetimingbufferfull event is fired. This event is fired when the browser's resource timing performance buffer is full.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/onresourcetimingbufferfull">Performance.onresourcetimingbufferfull - MDN</a>
   */
  attribute NullableEventHandler onresourcetimingbufferfull;
  /**
   * The resourcetimingbufferfull event is fired when the browser's resource timing buffer is full.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/resourcetimingbufferfull_event">resourcetimingbufferfull event - MDN</a>
   */
  [NoBubble, NoCancel]
  event Event resourcetimingbufferfull;
  /**
   * The clearMarks() method removes the named mark from the browser's performance entry buffer. If the method is called with no arguments, all performance entries with an entry type of "mark" will be removed from the performance entry buffer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMarks">Performance.clearMarks - MDN</a>
   */
  void clearMarks( optional DOMString markName );
  /**
   * The clearMeasures() method removes the named measure from the browser's performance entry buffer. If the method is called with no arguments, all performance entries with an entry type of "measure" will be removed from the performance entry buffer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMeasures">Performance.clearMeasures - MDN</a>
   */
  void clearMeasures( optional DOMString measureName );
  /**
   * The clearResourceTimings() method removes all performance entries with an entryType of "resource" from the browser's performance data buffer and sets the size of the performance data buffer to zero. To set the size of the browser's performance data buffer, use the Performance.setResourceTimingBufferSize() method.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearResourceTimings">Performance.clearResourceTimings - MDN</a>
   */
  void clearResourceTimings();
  /**
   * The getEntries() method returns a list of all PerformanceEntry objects for the page. The list's members (entries) can be created by making performance marks or measures (for example by calling the mark() method) at explicit points in time. If you are only interested in performance entries of certain types or that have certain names, see getEntriesByType() and getEntriesByName().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntries">Performance.getEntries - MDN</a>
   */
  PerformanceEntryList getEntries();
  /**
   * The getEntriesByName() method returns a list of PerformanceEntry objects for the given name and type. The list's members (entries) can be created by making performance marks or measures (for example by calling the mark() method) at explicit points in time.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByName">Performance.getEntriesByName - MDN</a>
   */
  PerformanceEntryList getEntriesByName( DOMString name, optional DOMString type );
  /**
   * The getEntriesByType() method returns a list of PerformanceEntry objects for a given type. The list's members (entries) can be created by making performance marks or measures (for example by calling the mark() method) at explicit points in time.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType">Performance.getEntriesByType - MDN</a>
   */
  PerformanceEntryList getEntriesByType( DOMString type );
  /**
   * The mark() method creates a timestamp in the browser's performance entry buffer with the given name.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark">Performance.mark - MDN</a>
   */
  void mark( DOMString markName );
  /**
   * The measure() method creates a named timestamp in the browser's performance entry buffer between marks, the navigation start time, or the current time. When measuring between two marks, there is a start mark and end mark, respectively. The named timestamp is referred to as a measure.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure">Performance.measure - MDN</a>
   */
  void measure( DOMString measureName, optional DOMString startMark, optional DOMString endMark );
  /**
   * The performance.now() method returns a DOMHighResTimeStamp, measured in milliseconds.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/now">Performance.now - MDN</a>
   */
  DOMHighResTimeStamp now();
  /**
   * The setResourceTimingBufferSize() method sets the browser's resource timing buffer size to the specified number of "resource" performance entry type objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/setResourceTimingBufferSize">Performance.setResourceTimingBufferSize - MDN</a>
   */
  void setResourceTimingBufferSize( unsigned long maxSize );
  /**
   * The toJSON() method of the Performance interface is a standard serializer: it returns a JSON representation of the performance object's properties.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/toJSON">Performance.toJSON - MDN</a>
   */
  [Default]
  object toJSON();
};

/**
 * The PerformanceEntry object encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry">PerformanceEntry - MDN</a>
 */
[Exposed=(Window,Worker)]
interface PerformanceEntry {
  /**
   * The duration property returns a timestamp that is the duration of the performance entry.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration">PerformanceEntry.duration - MDN</a>
   */
  readonly attribute DOMHighResTimeStamp duration;
  /**
   * The entryType property returns a DOMString representing the type of performance metric such as, for example, "mark". This property is read only.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType">PerformanceEntry.entryType - MDN</a>
   */
  readonly attribute DOMString entryType;
  /**
   * The name property of the PerformanceEntry interface returns a value that further specifies the value returned by the PerformanceEntry.entryType property. This property is read only.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/name">PerformanceEntry.name - MDN</a>
   */
  readonly attribute DOMString name;
  /**
   * The startTime property returns the first recorded timestamp of the performance entry.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/startTime">PerformanceEntry.startTime - MDN</a>
   */
  readonly attribute DOMHighResTimeStamp startTime;
  /**
   * The toJSON() method is a serializer; it returns a JSON representation of the performance entry object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/toJSON">PerformanceEntry.toJSON - MDN</a>
   */
  [Default]
  object toJSON();
};

/**
 * PerformanceMark is an abstract interface for PerformanceEntry objects with an entryType of "mark". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark">PerformanceMark - MDN</a>
 */
[Exposed=(Window,Worker)]
interface PerformanceMark : PerformanceEntry {
};

/**
 * PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of "measure". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure">PerformanceMeasure - MDN</a>
 */
[Exposed=(Window,Worker)]
interface PerformanceMeasure : PerformanceEntry {
};

/**
 * The legacy PerformanceNavigation interface represents information about how the navigation to the current document was done.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation">PerformanceNavigation - MDN</a>
 */
[Exposed=Window]
interface PerformanceNavigation {
  const unsigned short TYPE_BACK_FORWARD = 2;
  const unsigned short TYPE_NAVIGATE = 0;
  const unsigned short TYPE_RELOAD = 1;
  const unsigned short TYPE_RESERVED = 255;
  /**
   * The legacy PerformanceNavigation.redirectCount read-only property returns an unsigned short representing the number of REDIRECTs done before reaching the page.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation/redirectCount">PerformanceNavigation.redirectCount - MDN</a>
   */
  readonly attribute unsigned short redirectCount;
  /**
   * The legacy PerformanceNavigation.type read-only property returns an unsigned short containing a constant describing how the navigation to this page was done. Possible values are:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation/type">PerformanceNavigation.type - MDN</a>
   */
  readonly attribute unsigned short type;
  [Default]
  object toJSON();
};

/**
 * The PerformanceNavigationTiming interface provides methods and properties to store and retrieve metrics regarding the browser's document navigation events. For example, this interface can be used to determine how much time it takes to load or unload a document.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming">PerformanceNavigationTiming - MDN</a>
 */
[Exposed=Window]
interface PerformanceNavigationTiming : PerformanceResourceTiming {
  readonly attribute DOMHighResTimeStamp domComplete;
  readonly attribute DOMHighResTimeStamp domContentLoadedEventEnd;
  readonly attribute DOMHighResTimeStamp domContentLoadedEventStart;
  readonly attribute DOMHighResTimeStamp domInteractive;
  readonly attribute DOMHighResTimeStamp loadEventEnd;
  readonly attribute DOMHighResTimeStamp loadEventStart;
  readonly attribute unsigned short redirectCount;
  readonly attribute NavigationType type;
  readonly attribute DOMHighResTimeStamp unloadEventEnd;
  readonly attribute DOMHighResTimeStamp unloadEventStart;
  /**
   * The toJSON() method is a serializer - it returns a JSON representation of the PerformanceNavigationTiming object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/toJSON">PerformanceNavigationTiming.toJSON - MDN</a>
   */
  [Default]
  object toJSON();
};

/**
 * The PerformanceObserver interface is used to observe performance measurement events and be notified of new performance entries as they are recorded in the browser's performance timeline.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver">PerformanceObserver - MDN</a>
 */
[Exposed=(Window,Worker)]
interface PerformanceObserver {
  [SameObject]
  static readonly attribute FrozenArray<DOMString> supportedEntryTypes;
  /**
   * The PerformanceObserver() constructor creates a new PerformanceObserver object with the given observer callback. The observer callback is invoked when performance entry events are recorded for the entry types that have been registered, via the observe() method.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/PerformanceObserver">PerformanceObserver.PerformanceObserver - MDN</a>
   */
  constructor( PerformanceObserverCallback callback );
  /**
   * The disconnect() method of the PerformanceObserver interface is used to stop the performance observer from receiving any performance entry events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/disconnect">PerformanceObserver.disconnect - MDN</a>
   */
  void disconnect();
  /**
   * The observe() method of the PerformanceObserver interface is used to specify the set of performance entry types to observe.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/observe">PerformanceObserver.observe - MDN</a>
   */
  void observe( optional PerformanceObserverInit options = {} );
  /**
   * The takeRecords() method of the PerformanceObserver interface returns the current list of performance entries stored in the performance observer, emptying it out.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/takeRecords">PerformanceObserver.takeRecords - MDN</a>
   */
  PerformanceEntryList takeRecords();
};

/**
 * The PerformanceObserverEntryList interface is a list of peformance events that were explicitly observed via the observe() method.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList">PerformanceObserverEntryList - MDN</a>
 */
[Exposed=(Window,Worker)]
interface PerformanceObserverEntryList {
  /**
   * The getEntries() method of the PerformanceObserverEntryList interface returns a list of explicitly observed performance entry objects for a given filter. The list's members are determined by the set of entry types specified in the call to the observe() method. The list is available in the observer's callback function (as the first parameter in the callback).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList/getEntries">PerformanceObserverEntryList.getEntries - MDN</a>
   */
  PerformanceEntryList getEntries();
  /**
   * The getEntriesByName() method of the PerformanceObserverEntryList interface returns a list of explicitly observed performance entry objects for a given name and entry type. The list's members are determined by the set of entry types specified in the call to the observe() method. The list is available in the observer's callback function (as the first parameter in the callback).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList/getEntriesByName">PerformanceObserverEntryList.getEntriesByName - MDN</a>
   */
  PerformanceEntryList getEntriesByName( DOMString name, optional DOMString type );
  /**
   * The getEntriesByType() method of the PerformanceObserverEntryList returns a list of explicitly observed performance entry objects for a given performance entry type. The list's members are determined by the set of entry types specified in the call to the observe() method. The list is available in the observer's callback function (as the first parameter in the callback).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList/getEntriesByType">PerformanceObserverEntryList.getEntriesByType - MDN</a>
   */
  PerformanceEntryList getEntriesByType( DOMString type );
};

/**
 * The PerformanceResourceTiming interface enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, SVG, image, or script.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming">PerformanceResourceTiming - MDN</a>
 */
[Exposed=(Window,Worker)]
interface PerformanceResourceTiming : PerformanceEntry {
  readonly attribute DOMHighResTimeStamp connectEnd;
  readonly attribute DOMHighResTimeStamp connectStart;
  readonly attribute unsigned long long decodedBodySize;
  readonly attribute DOMHighResTimeStamp domainLookupEnd;
  readonly attribute DOMHighResTimeStamp domainLookupStart;
  readonly attribute unsigned long long encodedBodySize;
  readonly attribute DOMHighResTimeStamp fetchStart;
  readonly attribute DOMString initiatorType;
  readonly attribute DOMString nextHopProtocol;
  readonly attribute DOMHighResTimeStamp redirectEnd;
  readonly attribute DOMHighResTimeStamp redirectStart;
  readonly attribute DOMHighResTimeStamp requestStart;
  readonly attribute DOMHighResTimeStamp responseEnd;
  readonly attribute DOMHighResTimeStamp responseStart;
  readonly attribute DOMHighResTimeStamp secureConnectionStart;
  readonly attribute unsigned long long transferSize;
  readonly attribute DOMHighResTimeStamp workerStart;
  /**
   * The toJSON() method is a serializer that returns a JSON representation of the PerformanceResourceTiming object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/toJSON">PerformanceResourceTiming.toJSON - MDN</a>
   */
  [Default]
  object toJSON();
};

/**
 * The PerformanceTiming interface is a legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page. You get a PerformanceTiming object describing your page using the window.performance.timing property.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming">PerformanceTiming - MDN</a>
 */
[Exposed=Window]
interface PerformanceTiming {
  readonly attribute unsigned long long connectEnd;
  readonly attribute unsigned long long connectStart;
  readonly attribute unsigned long long domComplete;
  readonly attribute unsigned long long domContentLoadedEventEnd;
  readonly attribute unsigned long long domContentLoadedEventStart;
  readonly attribute unsigned long long domInteractive;
  readonly attribute unsigned long long domLoading;
  readonly attribute unsigned long long domainLookupEnd;
  readonly attribute unsigned long long domainLookupStart;
  readonly attribute unsigned long long fetchStart;
  readonly attribute unsigned long long loadEventEnd;
  readonly attribute unsigned long long loadEventStart;
  readonly attribute unsigned long long navigationStart;
  readonly attribute unsigned long long redirectEnd;
  readonly attribute unsigned long long redirectStart;
  readonly attribute unsigned long long requestStart;
  readonly attribute unsigned long long responseEnd;
  readonly attribute unsigned long long responseStart;
  readonly attribute unsigned long long secureConnectionStart;
  readonly attribute unsigned long long unloadEventEnd;
  readonly attribute unsigned long long unloadEventStart;
  [Default]
  object toJSON();
};

/**
 * PeriodicWave has no inputs or outputs; it is used to define custom oscillators when calling OscillatorNode.setPeriodicWave(). The PeriodicWave itself is created/returned by AudioContext.createPeriodicWave().
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave">PeriodicWave - MDN</a>
 */
[Exposed=Window]
interface PeriodicWave {
  constructor( BaseAudioContext context, optional PeriodicWaveOptions options = {} );
};

/**
 * The PermissionStatus interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus">PermissionStatus - MDN</a>
 */
[Exposed=(Window,Worker)]
interface PermissionStatus : EventTarget {
  /**
   * The state read-only property of the PermissionStatus interface returns the state of a requested permission. This property returns one of 'granted', 'denied', or 'prompt'.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus/state">PermissionStatus.state - MDN</a>
   */
  readonly attribute PermissionState state;
  attribute NullableEventHandler onchange;
};

/**
 * The Permissions interface of the Permissions API provides the core Permission API functionality, such as methods for querying and revoking permissions
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions">Permissions - MDN</a>
 */
[Exposed=(Window,Worker)]
interface Permissions {
  /**
   * The Permissions.query() method of the Permissions interface returns the state of a user permission on the global scope.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions/query">Permissions.query - MDN</a>
   */
  Promise<PermissionStatus> query( object permissionDesc );
};

/**
 * The Plugin interface provides information about a browser plugin.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Plugin">Plugin - MDN</a>
 */
[Exposed=Window, LegacyUnenumerableNamedProperties]
interface Plugin {
  readonly attribute DOMString description;
  readonly attribute DOMString filename;
  readonly attribute unsigned long length;
  readonly attribute DOMString name;
  getter MimeType? item( unsigned long index );
  getter MimeType? namedItem( DOMString name );
};

/**
 * The PluginArray interface is used to store a list of Plugin objects describing the available plugins; it's returned by the window.navigator.plugins property. The PluginArray is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index) and namedItem("name") methods.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PluginArray">PluginArray - MDN</a>
 */
[Exposed=Window, LegacyUnenumerableNamedProperties]
interface PluginArray {
  readonly attribute unsigned long length;
  void refresh( optional boolean reload = false );
  getter Plugin? item( unsigned long index );
  getter Plugin? namedItem( DOMString name );
};

/**
 * The PointerEvent interface represents the state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent">PointerEvent - MDN</a>
 */
[Exposed=Window]
interface PointerEvent : MouseEvent {
  /**
   * The height read-only property of the PointerEvent interface represents the height of the pointer's contact geometry, along the y-axis (in CSS pixels). Depending on the source of the pointer device (for example a finger), for a given pointer, each event may produce a different value.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height">PointerEvent.height - MDN</a>
   */
  readonly attribute double height;
  /**
   * The isPrimary read-only property of the PointerEvent interface indicates whether or not the pointer device that created the event is the primary pointer. It returns true if the pointer that caused the event to be fired is the primary device and returns false otherwise.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary">PointerEvent.isPrimary - MDN</a>
   */
  readonly attribute boolean isPrimary;
  /**
   * The pointerId read-only property of the PointerEvent interface is an identifier assigned to a given pointer event. The identifier is unique, being different from the identifiers of all other active pointer events. Since the value may be randomly generated, it is not guaranteed to convey any particular meaning.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId">PointerEvent.pointerId - MDN</a>
   */
  readonly attribute long pointerId;
  /**
   * The pointerType read-only property of the PointerEvent interface indicates the device type (mouse, pen, or touch) that caused a given pointer event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType">PointerEvent.pointerType - MDN</a>
   */
  readonly attribute DOMString pointerType;
  /**
   * The pressure read-only property of the PointerEvent interface indicates the normalized pressure of the pointer input.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure">PointerEvent.pressure - MDN</a>
   */
  readonly attribute float pressure;
  /**
   * The tangentialPressure read-only property of the PointerEvent interface represents the normalized tangential pressure of the pointer input (also known as barrel pressure or cylinder stress).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tangentialPressure">PointerEvent.tangentialPressure - MDN</a>
   */
  readonly attribute float tangentialPressure;
  /**
   * The tiltX read-only property of the PointerEvent interface is the angle (in degrees) between the Y-Z plane of the pointer and the screen. This property is typically only useful for a pen/stylus pointer type.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX">PointerEvent.tiltX - MDN</a>
   */
  readonly attribute long tiltX;
  /**
   * The tiltY read-only property of the PointerEvent interface is the angle (in degrees) between the X-Z plane of the pointer and the screen. This property is typically only useful for a pen/stylus pointer type.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY">PointerEvent.tiltY - MDN</a>
   */
  readonly attribute long tiltY;
  /**
   * The twist read-only property of the PointerEvent interface represents the clockwise rotation of the pointer (e.g., pen stylus) around its major axis, in degrees.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/twist">PointerEvent.twist - MDN</a>
   */
  readonly attribute long twist;
  /**
   * The width read-only property of the PointerEvent interface represents the width of the pointer's contact geometry along the x-axis, measured in CSS pixels. Depending on the source of the pointer device (such as a finger), for a given pointer, each event may produce a different value.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width">PointerEvent.width - MDN</a>
   */
  readonly attribute double width;
  constructor( DOMString type, optional PointerEventInit eventInitDict );
};

/**
 * PopStateEvent is an event handler for the popstate event on the window.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent">PopStateEvent - MDN</a>
 */
[Exposed=Window]
interface PopStateEvent : Event {
  readonly attribute any state;
  constructor( DOMString type, optional PopStateEventInit eventInitDict = {} );
};

/**
 * The GeolocationPosition interface represents the position of the concerned device at a given time. The position, represented by a GeolocationCoordinates object, comprehends the 2D position of the device, on a spheroid representing the Earth, but also its altitude and its speed.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Position">Position - MDN</a>
 */
[LegacyNoInterfaceObject]
interface Position {
  /**
   * The GeolocationPosition.coords read-only property returns a GeolocationCoordinates object representing a geographic position. It contains the location, that is longitude and latitude on the Earth, the altitude, and the speed of the object concerned, regrouped inside the returned value. It also contains accuracy information about these values.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Position/coords">Position.coords - MDN</a>
   */
  readonly attribute Coordinates coords;
  /**
   * The GeolocationPosition.timestamp read-only property returns a DOMTimeStamp object, represents the date and the time of the creation of the GeolocationPosition object it belongs to. The precision is to the millisecond.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Position/timestamp">Position.timestamp - MDN</a>
   */
  readonly attribute DOMTimeStamp timestamp;
};

/**
 * The GeolocationPositionError interface represents the reason of an error occurring when using the geolocating device.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PositionError">PositionError - MDN</a>
 */
[LegacyNoInterfaceObject]
interface PositionError {
  const unsigned short PERMISSION_DENIED = 1;
  const unsigned short POSITION_UNAVAILABLE = 2;
  const unsigned short TIMEOUT = 3;
  /**
   * The GeolocationPositionError.code read-only property is an unsigned short representing the error code.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PositionError/code">PositionError.code - MDN</a>
   */
  readonly attribute unsigned short code;
  /**
   * The GeolocationPositionError.message read-only property returns a human-readable DOMString describing the details of the error.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PositionError/message">PositionError.message - MDN</a>
   */
  readonly attribute DOMString message;
};

/**
 * The ProcessingInstruction interface represents a processing instruction; that is, a Node which embeds an instruction targeting a specific application but that can be ignored by any other applications which don't recognize the instruction.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction">ProcessingInstruction - MDN</a>
 */
[Exposed=Window]
interface ProcessingInstruction : CharacterData {
  readonly attribute CSSStyleSheet? sheet;
  readonly attribute DOMString target;
};

/**
 * The ProgressEvent interface represents events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an img, audio, video, style or link).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent">ProgressEvent - MDN</a>
 */
[Exposed=(Window,DedicatedWorker,SharedWorker)]
interface ProgressEvent : Event {
  /**
   * The ProgressEvent.lengthComputable read-only property is a Boolean flag indicating if the resource concerned by the ProgressEvent has a length that can be calculated. If not, the ProgressEvent.total property has no significant value.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/lengthComputable">ProgressEvent.lengthComputable - MDN</a>
   */
  readonly attribute boolean lengthComputable;
  /**
   * The ProgressEvent.loaded read-only property is an integer representing the amount of work already performed by the underlying process. The ratio of work done can be calculated with the property and ProgressEvent.total. When downloading a resource using HTTP, this only represent the part of the content itself, not headers and other overhead.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/loaded">ProgressEvent.loaded - MDN</a>
   */
  readonly attribute unsigned long long loaded;
  /**
   * The ProgressEvent.total read-only property is an integer representing the total amount of work that the underlying process is in the progress of performing. When downloading a resource using HTTP, this only represent the content itself, not headers and other overhead.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/total">ProgressEvent.total - MDN</a>
   */
  readonly attribute unsigned long long total;
  /**
   * The ProgressEvent() constructor returns a newly created ProgressEvent, representing the current completion of a long process.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/ProgressEvent">ProgressEvent.ProgressEvent - MDN</a>
   */
  constructor( DOMString type, optional ProgressEventInit eventInitDict = {} );
};

/**
 * The PromiseRejectionEvent interface represents events which are sent to the global script context when JavaScript Promises are rejected.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent">PromiseRejectionEvent - MDN</a>
 */
[Exposed=(Window,Worker)]
interface PromiseRejectionEvent : Event {
  /**
   * The PromiseRejectionEvent interface's promise read-only property indicates the JavaScript Promise which was rejected. You can examine the event's PromiseRejectionEvent.reason property to learn why the promise was rejected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/promise">PromiseRejectionEvent.promise - MDN</a>
   */
  readonly attribute Promise<any> promise;
  /**
   * The PromiseRejectionEvent reason read-only property is any JavaScript value or Object which provides the reason passed into Promise.reject(). This in theory provides information about why the promise was rejected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/reason">PromiseRejectionEvent.reason - MDN</a>
   */
  readonly attribute any reason;
  /**
   * The PromiseRejectionEvent() constructor returns a newly created PromiseRejectionEvent, which represents events fired when a JavaScript Promise is rejected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/PromiseRejectionEvent">PromiseRejectionEvent.PromiseRejectionEvent - MDN</a>
   */
  constructor( DOMString type, PromiseRejectionEventInit eventInitDict );
};

/**
 * The PublicKeyCredential interface provides information about a public key / private key pair, which is a credential for logging in to a service using an un-phishable and data-breach resistant asymmetric key pair instead of a password. It inherits from Credential, and was created by the Web Authentication API extension to the Credential Management API. Other interfaces that inherit from Credential are PasswordCredential and FederatedCredential.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential">PublicKeyCredential - MDN</a>
 */
[SecureContext, Exposed=Window]
interface PublicKeyCredential : Credential {
  /**
   * The rawId read-only property of the PublicKeyCredential interface is an ArrayBuffer object containing the identifier of the credentials.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/rawId">PublicKeyCredential.rawId - MDN</a>
   */
  [SameObject]
  readonly attribute ArrayBuffer rawId;
  /**
   * The response read-only property of the PublicKeyCredential interface is an AuthenticatorResponse object which is sent from the authenticator to the user agent for the creation/fetching of credentials. The information contained in this response will be used by the relying party's server to verify the demand is legitimate.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/response">PublicKeyCredential.response - MDN</a>
   */
  [SameObject]
  readonly attribute AuthenticatorResponse response;
  /**
   * isUserVerifyingPlatformAuthenticatorAvailable() is a static method of the PublicKeyCredential interface that returns a Promise which resolves to true if a user-verifying platform authenticator is available.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/isUserVerifyingPlatformAuthenticatorAvailable">PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable - MDN</a>
   */
  static Promise<boolean> isUserVerifyingPlatformAuthenticatorAvailable();
  /**
   * getClientExtensionResults() is a method of the PublicKeyCredential interface that returns an ArrayBuffer which contains a map between the extensions identifiers and their results after having being processed by the client.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/getClientExtensionResults">PublicKeyCredential.getClientExtensionResults - MDN</a>
   */
  AuthenticationExtensionsClientOutputs getClientExtensionResults();
};

/**
 * The PushManager interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PushManager">PushManager - MDN</a>
 */
[Exposed=(Window,Worker), SecureContext]
interface PushManager {
  /**
   * The supportedContentEncodings read-only property of the PushManager interface returns an array of supported content codings that can be used to encrypt the payload of a push message.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PushManager/supportedContentEncodings">PushManager.supportedContentEncodings - MDN</a>
   */
  [SameObject]
  static readonly attribute FrozenArray<DOMString> supportedContentEncodings;
  /**
   * The PushManager.getSubscription() method of the PushManager interface retrieves an existing push subscription.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PushManager/getSubscription">PushManager.getSubscription - MDN</a>
   */
  Promise<PushSubscription?> getSubscription();
  /**
   * The permissionState() method of the PushManager interface returns a Promise that resolves to a DOMString indicating the permission state of the push manager. Possible values are  'prompt', 'denied', or 'granted'.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PushManager/permissionState">PushManager.permissionState - MDN</a>
   */
  Promise<PushPermissionState> permissionState( optional PushSubscriptionOptionsInit options = {} );
  /**
   * The subscribe() method of the PushManager interface subscribes to a push service.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PushManager/subscribe">PushManager.subscribe - MDN</a>
   */
  Promise<PushSubscription> subscribe( optional PushSubscriptionOptionsInit options = {} );
};

/**
 * The PushSubscription interface of the Push API provides a subcription's URL endpoint and allows unsubscription from a push service.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription">PushSubscription - MDN</a>
 */
[Exposed=(Window,Worker), SecureContext]
interface PushSubscription {
  /**
   * The endpoint read-only property of the PushSubscription interface returns a USVString containing the endpoint associated with the push subscription.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/endpoint">PushSubscription.endpoint - MDN</a>
   */
  readonly attribute USVString endpoint;
  /**
   * The expirationTime read-only property of the PushSubscription interface returns a DOMHighResTimeStamp of the subscription expiration time associated with the push subscription, if there is one, or null otherwise.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/expirationTime">PushSubscription.expirationTime - MDN</a>
   */
  readonly attribute DOMTimeStamp? expirationTime;
  /**
   * The options read-only property of the PushSubscription interface is an object containing containing the options used to create the subscription.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/options">PushSubscription.options - MDN</a>
   */
  [SameObject]
  readonly attribute PushSubscriptionOptions options;
  /**
   * The getKey() method of the PushSubscription interface returns an ArrayBuffer representing a client public key, which can then be sent to a server and used in encrypting push message data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/getKey">PushSubscription.getKey - MDN</a>
   */
  ArrayBuffer? getKey( PushEncryptionKeyName name );
  /**
   * The toJSON() method of the PushSubscription interface is a standard serializer: it returns a JSON representation of the subscription properties, providing a useful shortcut.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/toJSON">PushSubscription.toJSON - MDN</a>
   */
  PushSubscriptionJSON toJSON();
  /**
   * The unsubscribe() method of the PushSubscription interface returns a Promise that resolves to a Boolean when the current subscription is successfully unsubscribed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/unsubscribe">PushSubscription.unsubscribe - MDN</a>
   */
  Promise<boolean> unsubscribe();
};

[Exposed=(Window,Worker), SecureContext]
interface PushSubscriptionOptions {
  [SameObject]
  readonly attribute ArrayBuffer? applicationServerKey;
  readonly attribute boolean userVisibleOnly;
};

/**
 * The interface of the the WebRTC API provides an object represents a certificate that an RTCPeerConnection uses to authenticate.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCCertificate">RTCCertificate - MDN</a>
 */
[Exposed=Window, Serializable]
interface RTCCertificate {
  readonly attribute DOMTimeStamp expires;
  sequence<RTCDtlsFingerprint> getFingerprints();
};

/**
 * Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFSender">RTCDTMFSender - MDN</a>
 */
[Exposed=Window]
interface RTCDTMFSender : EventTarget {
  readonly attribute boolean canInsertDTMF;
  /**
   * The RTCDTMFSender interface's toneBuffer property returns a string containing a list of the DTMF tones currently queued for sending to the remote peer over the RTCPeerConnection. To place tones into the buffer, call insertDTMF().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFSender/toneBuffer">RTCDTMFSender.toneBuffer - MDN</a>
   */
  readonly attribute DOMString toneBuffer;
  /**
   * The ontonechange property of the RTCDTMFSender interface is used to set the event handler for the tonechange event, which is sent to the RTCDTMFSender each time a tone begins or ends. The event handler receives as input a single parameter of type RTCDTMFToneChangeEvent, which describes the change.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFSender/ontonechange">RTCDTMFSender.ontonechange - MDN</a>
   */
  attribute NullableEventHandler ontonechange;
  /**
   * The tonechange event is sent to an RTCDTMFSender by the WebRTC API to indicate when DTMF tones previously queued for sending (by calling RTCDTMFSender.insertDTMF()) begin and end.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFSender/tonechange_event">tonechange event - MDN</a>
   */
  event RTCDTMFToneChangeEvent tonechange;
  void insertDTMF( DOMString tones, optional unsigned long duration = 100, optional unsigned long interToneGap = 70 );
};

/**
 * The RTCDTMFToneChangeEvent interface represents events sent to indicate that DTMF tones have started or finished playing. This interface is used by the tonechange event.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFToneChangeEvent">RTCDTMFToneChangeEvent - MDN</a>
 */
[Exposed=Window]
interface RTCDTMFToneChangeEvent : Event {
  /**
   * The read-only property RTCDTMFToneChangeEvent.tone returns the DTMF character which has just begun to play, or an empty string (""). if all queued tones have finished playing (that is, RTCDTMFSender.toneBuffer is empty).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFToneChangeEvent/tone">RTCDTMFToneChangeEvent.tone - MDN</a>
   */
  readonly attribute DOMString tone;
  /**
   * The RTCDTMFToneChangeEvent() constructor creates a new RTCDTMFToneChangeEvent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFToneChangeEvent/RTCDTMFToneChangeEvent">RTCDTMFToneChangeEvent.RTCDTMFToneChangeEvent - MDN</a>
   */
  constructor( DOMString type, optional RTCDTMFToneChangeEventInit eventInitDict = {} );
};

/**
 * The RTCDataChannel interface represents a network channel which can be used for bidirectional peer-to-peer transfers of arbitrary data. Every data channel is associated with an RTCPeerConnection, and each peer connection can have up to a theoretical maximum of 65,534 data channels (the actual limit may vary from browser to browser).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel">RTCDataChannel - MDN</a>
 */
[Exposed=Window]
interface RTCDataChannel : EventTarget {
  /**
   * The read-only RTCDataChannel property bufferedAmount returns the number of bytes of data currently queued to be sent over the data channel.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/bufferedAmount">RTCDataChannel.bufferedAmount - MDN</a>
   */
  readonly attribute unsigned long bufferedAmount;
  /**
   * The read-only RTCDataChannel property id returns an ID number (between 0 and 65,534) which uniquely identifies the RTCDataChannel.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/id">RTCDataChannel.id - MDN</a>
   */
  readonly attribute unsigned short? id;
  /**
   * The read-only RTCDataChannel property label returns a DOMString containing a name describing the data channel. These labels are not required to be unique.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/label">RTCDataChannel.label - MDN</a>
   */
  readonly attribute USVString label;
  /**
   * The read-only RTCDataChannel property maxPacketLifeTime returns the amount of time, in milliseconds, the browser is allowed to take to attempt to transmit a message, as set when the data channel was created, or null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/maxPacketLifeTime">RTCDataChannel.maxPacketLifeTime - MDN</a>
   */
  readonly attribute unsigned short? maxPacketLifeTime;
  /**
   * The read-only RTCDataChannel property maxRetransmits returns the maximum number of times the browser should try to retransmit a message before giving up, as set when the data channel was created, or null, which indicates that there is no maximum.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/maxRetransmits">RTCDataChannel.maxRetransmits - MDN</a>
   */
  readonly attribute unsigned short? maxRetransmits;
  /**
   * The read-only RTCDataChannel property negotiated indicates whether the RTCDataChannel's connection was negotiated by the Web app (true) or by the WebRTC layer (false).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/negotiated">RTCDataChannel.negotiated - MDN</a>
   */
  readonly attribute boolean negotiated;
  /**
   * The read-only RTCDataChannel property ordered indicates whether or not the data channel guarantees in-order delivery of messages; the default is true, which indicates that the data channel is indeed ordered.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/ordered">RTCDataChannel.ordered - MDN</a>
   */
  readonly attribute boolean ordered;
  readonly attribute RTCPriorityType priority;
  /**
   * The read-only RTCDataChannel property protocol returns a DOMString containing the name of the subprotocol in use. If no protocol was specified when the data channel was created, then this property's value is "" (the empty string).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/protocol">RTCDataChannel.protocol - MDN</a>
   */
  readonly attribute USVString protocol;
  /**
   * The read-only RTCDataChannel property readyState returns an enum of type RTCDataChannelState which indicates the state of the data channel's underlying data connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/readyState">RTCDataChannel.readyState - MDN</a>
   */
  readonly attribute RTCDataChannelState readyState;
  /**
   * The property binaryType on the RTCDataChannel interface is a DOMString which specifies the type of JavaScript object which should be used to represent binary data received on the RTCDataChannel. Values allowed by the WebSocket.binaryType property are also permitted here: "blob" if Blob objects are being used or "arraybuffer" if ArrayBuffer objects are being used. The default is "blob".
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/binaryType">RTCDataChannel.binaryType - MDN</a>
   */
  attribute DOMString binaryType;
  /**
   * The RTCDataChannel property bufferedAmountLowThreshold is used to specify the number of bytes of buffered outgoing data that is considered "low." The default value is 0.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/bufferedAmountLowThreshold">RTCDataChannel.bufferedAmountLowThreshold - MDN</a>
   */
  [EnforceRange]
  attribute unsigned long bufferedAmountLowThreshold;
  /**
   * The RTCDataChannel.onbufferedamountlow property is an EventHandler which specifies a function the browser calls when the bufferedamountlow event is sent to the RTCDataChannel. This event, which is represented by a simple Event object, is sent when the amount of data buffered to be sent falls to or below the threshold specified by the channel's bufferedAmountLowThreshold.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onbufferedamountlow">RTCDataChannel.onbufferedamountlow - MDN</a>
   */
  attribute NullableEventHandler onbufferedamountlow;
  /**
   * The RTCDataChannel.onclose property is an EventHandler which specifies a function to be called by the browser when the close event is received by the RTCDataChannel. This is a simple Event which indicates that the data channel has closed down.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onclose">RTCDataChannel.onclose - MDN</a>
   */
  attribute NullableEventHandler onclose;
  attribute NullableEventHandler onclosing;
  /**
   * The RTCDataChannel.onerror property is an EventHandler which specifies a function to be called when the error event is received. When an error occurs on the data channel, the function receives as input an ErrorEvent object describing the error which occurred.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onerror">RTCDataChannel.onerror - MDN</a>
   */
  attribute NullableEventHandler onerror;
  /**
   * The RTCDataChannel.onmessage property stores an EventHandler which specifies a function to be called when the message event is fired on the channel. This event is represented by the MessageEvent interface. This event is sent to the channel when a message is received from the other peer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onmessage">RTCDataChannel.onmessage - MDN</a>
   */
  attribute NullableEventHandler onmessage;
  /**
   * The RTCDataChannel.onopen property is an EventHandler which specifies a function to be called when the open event is fired; this is a simple Event which is sent when the data channel's underlying data transport—the link over which the RTCDataChannel's messages flow—is established or re-established.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onopen">RTCDataChannel.onopen - MDN</a>
   */
  attribute NullableEventHandler onopen;
  /**
   * A bufferedamountlow event is sent to an RTCDataChannel when the number of bytes currently in the outbound data transfer buffer falls below the threshold specified in bufferedAmountLowThreshold.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/bufferedamountlow_event">bufferedamountlow event - MDN</a>
   */
  event Event bufferedamountlow;
  /**
   * The close event is sent to the onclose event handler on an RTCDataChannel instance when the data transport being used for the data channel has closed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/close_event">close event - MDN</a>
   */
  event Event close;
  /**
   * A WebRTC error event is sent to an RTCDataChannel object's onerror error handler when an error occurs on the data channel.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/error_event">error event - MDN</a>
   */
  [NoBubble]
  event RTCErrorEvent error;
  /**
   * The WebRTC message event is sent to the onmessage event handler on an RTCDataChannel object when a message has been received from the remote peer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/message_event">message event - MDN</a>
   */
  event MessageEvent message;
  /**
   * The WebRTC open event is sent to an RTCDataChannel object's onopen event handler when the underlying transport used to send and receive the data channel's messages is opened or re-opened.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/open_event">open event - MDN</a>
   */
  event RTCDataChannelEvent open;
  /**
   * The RTCDataChannel.close() method closes the RTCDataChannel. Either peer is permitted to call this method to initiate closure of the channel.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/close">RTCDataChannel.close - MDN</a>
   */
  void close();
  /**
   * The send() method of the RTCDataChannel interface sends data across the data channel to the remote peer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/send">RTCDataChannel.send - MDN</a>
   */
  void send( USVString data );
  /**
   * The send() method of the RTCDataChannel interface sends data across the data channel to the remote peer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/send">RTCDataChannel.send - MDN</a>
   */
  void send( Blob data );
  /**
   * The send() method of the RTCDataChannel interface sends data across the data channel to the remote peer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/send">RTCDataChannel.send - MDN</a>
   */
  void send( ArrayBuffer data );
  /**
   * The send() method of the RTCDataChannel interface sends data across the data channel to the remote peer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/send">RTCDataChannel.send - MDN</a>
   */
  void send( ArrayBufferView data );
};

/**
 * The RTCDataChannelEvent() constructor returns a new RTCDataChannelEvent object, which represents a datachannel event. These events sent to an RTCPeerConnection when its remote peer is asking to open an RTCDataChannel between the two peers.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent">RTCDataChannelEvent - MDN</a>
 */
[Exposed=Window]
interface RTCDataChannelEvent : Event {
  /**
   * The read-only property RTCDataChannelEvent.channel returns the RTCDataChannel associated with the event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent/channel">RTCDataChannelEvent.channel - MDN</a>
   */
  readonly attribute RTCDataChannel channel;
  /**
   * The RTCDataChannelEvent() constructor creates a new RTCDataChannelEvent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent/RTCDataChannelEvent">RTCDataChannelEvent.RTCDataChannelEvent - MDN</a>
   */
  constructor( DOMString type, RTCDataChannelEventInit eventInitDict );
};

/**
 * The RTCDtlsTransport interface provides information which describes a Datagram Transport Layer Security (DTLS) transport.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDtlsTransport">RTCDtlsTransport - MDN</a>
 */
[Exposed=Window]
interface RTCDtlsTransport : EventTarget {
  /**
   * The read-only RTCDtlsTransport property iceTransport contains a reference to the underlying RTCIceTransport.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDtlsTransport/iceTransport">RTCDtlsTransport.iceTransport - MDN</a>
   */
  [SameObject]
  readonly attribute RTCIceTransport iceTransport;
  /**
   * The state read-only property of the RTCDtlsTransport interface provides information which describes a Datagram Transport Layer Security (DTLS) transport state.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCDtlsTransport/state">RTCDtlsTransport.state - MDN</a>
   */
  readonly attribute RTCDtlsTransportState state;
  attribute NullableEventHandler onerror;
  attribute NullableEventHandler onstatechange;
  sequence<ArrayBuffer> getRemoteCertificates();
};

/**
 * The RTCError interface describes an error which has occurred while handling WebRTC operations. It's based upon the standard DOMException interface that describes general DOM errors.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCError">RTCError - MDN</a>
 */
[Exposed=Window]
interface RTCError : DOMException {
  readonly attribute RTCErrorDetailType errorDetail;
  readonly attribute long? httpRequestStatusCode;
  readonly attribute unsigned long? receivedAlert;
  readonly attribute long? sctpCauseCode;
  readonly attribute long? sdpLineNumber;
  readonly attribute unsigned long? sentAlert;
  constructor( RTCErrorInit init, optional DOMString message = "" );
};

[Exposed=Window]
interface RTCErrorEvent : Event {
  [SameObject]
  readonly attribute RTCError error;
  constructor( DOMString type, RTCErrorEventInit eventInitDict );
};

/**
 * The RTCIceCandidate interface—part of the WebRTC API—represents a candidate Internet Connectivity Establishment (ICE) configuration which may be used to establish an RTCPeerConnection.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate">RTCIceCandidate - MDN</a>
 */
[Exposed=Window]
interface RTCIceCandidate {
  readonly attribute DOMString? address;
  /**
   * The read-only property candidate on the RTCIceCandidate interface returns a DOMString describing the candidate in detail.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/candidate">RTCIceCandidate.candidate - MDN</a>
   */
  readonly attribute DOMString candidate;
  /**
   * The read-only component property on the RTCIceCandidate interface is a string which indicates whether the candidate is an RTP or an RTCP candidate.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/component">RTCIceCandidate.component - MDN</a>
   */
  readonly attribute RTCIceComponent? component;
  /**
   * The RTCIceCandidate interface's read-only foundation property is a string which uniquely identifies the candidate across multiple transports.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/foundation">RTCIceCandidate.foundation - MDN</a>
   */
  readonly attribute DOMString? foundation;
  /**
   * The RTCIceCandidate interface's read-only port property contains the port number on the device at the address given by ip at which the candidate's peer can be reached.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/port">RTCIceCandidate.port - MDN</a>
   */
  readonly attribute unsigned short? port;
  /**
   * The RTCIceCandidate interface's read-only priority property specifies the candidate's priority according to the remote peer; the higher this value is, the better the remote peer considers the candidate to be.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/priority">RTCIceCandidate.priority - MDN</a>
   */
  readonly attribute unsigned long? priority;
  /**
   * The RTCIceCandidate interface's read-only protocol property is a string which indicates whether the candidate uses UDP or TCP as its transport protocol.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/protocol">RTCIceCandidate.protocol - MDN</a>
   */
  readonly attribute RTCIceProtocol? protocol;
  /**
   * The RTCIceCandidate interface's read-only relatedAddress property is a string indicating the related address of a relay or reflexive candidate.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/relatedAddress">RTCIceCandidate.relatedAddress - MDN</a>
   */
  readonly attribute DOMString? relatedAddress;
  /**
   * The RTCIceCandidate interface's read-only relatedPort property indicates the port number of reflexive or relay candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/relatedPort">RTCIceCandidate.relatedPort - MDN</a>
   */
  readonly attribute unsigned short? relatedPort;
  /**
   * The read-only sdpMLineIndex property on the RTCIceCandidate interface is a zero-based index of the m-line describing the media associated with the candidate.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/sdpMLineIndex">RTCIceCandidate.sdpMLineIndex - MDN</a>
   */
  readonly attribute unsigned short? sdpMLineIndex;
  /**
   * The read-only property sdpMid on the RTCIceCandidate interface returns a DOMString specifying the media stream identification tag of the media component with which the candidate is associated.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/sdpMid">RTCIceCandidate.sdpMid - MDN</a>
   */
  readonly attribute DOMString? sdpMid;
  /**
   * The RTCIceCandidate interface's read-only tcpType property is included on TCP candidates to provide additional details about the candidate type.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/tcpType">RTCIceCandidate.tcpType - MDN</a>
   */
  readonly attribute RTCIceTcpCandidateType? tcpType;
  /**
   * The RTCIceCandidate interface's read-only type specifies the type of candidate the object represents.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/type">RTCIceCandidate.type - MDN</a>
   */
  readonly attribute RTCIceCandidateType? type;
  /**
   * The read-only usernameFragment property on the RTCIceCandidate interface is a string indicating the username fragment ("ufrag") that uniquely identifies a single ICE interaction session.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/usernameFragment">RTCIceCandidate.usernameFragment - MDN</a>
   */
  readonly attribute DOMString? usernameFragment;
  /**
   * The RTCIceCandidate() constructor creates and returns a new RTCIceCandidate object, which can be configured to represent a single ICE candidate.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/RTCIceCandidate">RTCIceCandidate.RTCIceCandidate - MDN</a>
   */
  constructor( optional RTCIceCandidateInit candidateInitDict = {} );
  /**
   * The RTCIceCandidate method toJSON() converts the RTCIceCandidate on which it's called into JSON in the form of an RTCIceCandidateInit object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/toJSON">RTCIceCandidate.toJSON - MDN</a>
   */
  RTCIceCandidateInit toJSON();
};

/**
 * The RTCIceTransport interface provides access to information about the ICE transport layer over which the data is being sent and received.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport">RTCIceTransport - MDN</a>
 */
[Exposed=Window]
interface RTCIceTransport : EventTarget {
  /**
   * The read-only RTCIceTransport property component specifies whether the object is serving to transport RTP or RTCP. The value is one of the strings in RTCIceComponent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/component">RTCIceTransport.component - MDN</a>
   */
  readonly attribute RTCIceComponent component;
  /**
   * The read-only RTCIceTransport property gatheringState returns a DOMString from the enumerated type RTCIceGathererState that indicates what gathering state the ICE agent is currently in: "new", "gathering", or "complete".
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/gatheringState">RTCIceTransport.gatheringState - MDN</a>
   */
  readonly attribute RTCIceGathererState gatheringState;
  /**
   * The read-only RTCIceTransport property role indicates which ICE role the transport is fulfilling: that of the controlling agent, or the agent that is being controlled.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/role">RTCIceTransport.role - MDN</a>
   */
  readonly attribute RTCIceRole role;
  /**
   * The read-only RTCIceTransport property state returns the current state of the ICE transport, so you can determine the state of ICE gathering in which the ICE agent currently is operating.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/state">RTCIceTransport.state - MDN</a>
   */
  readonly attribute RTCIceTransportState state;
  /**
   * The ongatheringstatechange event handler for the RTCIceTransport interface specifies an event handler that is to be called when the gatheringstatechange event occurs on the transport.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/ongatheringstatechange">RTCIceTransport.ongatheringstatechange - MDN</a>
   */
  attribute NullableEventHandler ongatheringstatechange;
  /**
   * The RTCIceTransport interface's onselectedcandidatepairchange event handler specifies a function to be called to handle the selectedcandidatepairchange event, which is fired when the ICE agent selects a new candidate pair to be used for the connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/onselectedcandidatepairchange">RTCIceTransport.onselectedcandidatepairchange - MDN</a>
   */
  attribute NullableEventHandler onselectedcandidatepairchange;
  /**
   * The onstatechange event handler for the RTCIceTransport interface is a property which specifies a function to serve as the EventHandler for the statechange event that is fired whenever the transport's state changes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/onstatechange">RTCIceTransport.onstatechange - MDN</a>
   */
  attribute NullableEventHandler onstatechange;
  /**
   * A gatheringstatechange event is sent to an RTCIceTransport when its ICE candidate gathering state changes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/gatheringstatechange_event">gatheringstatechange event - MDN</a>
   */
  event Event gatheringstatechange;
  /**
   * A selectedcandidatepairchange event is sent to an RTCIceTransport when the ICE agent selects a new pair of candidates that describe the endpoints of a viable connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/selectedcandidatepairchange_event">selectedcandidatepairchange event - MDN</a>
   */
  event Event selectedcandidatepairchange;
  /**
   * A statechange event occurs when the RTCIceTransport changes state. The state can be used to determine how far through the process of examining, verifying, and selecting a valid candidate pair is prior to successfully connecting the two peers for WebRTC communications.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/statechange_event">statechange event - MDN</a>
   */
  event Event statechange;
  /**
   * The RTCIceTransport method getLocalCandidates() returns an array of RTCIceCandidate objects, one for each of the candidates that have been gathered by the local device during the current ICE agent session.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getLocalCandidates">RTCIceTransport.getLocalCandidates - MDN</a>
   */
  sequence<RTCIceCandidate> getLocalCandidates();
  /**
   * The RTCIceTransport method getLocalParameters() returns an RTCIceParameters object which provides information uniquely identifying the local peer for the duration of the ICE session.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getLocalParameters">RTCIceTransport.getLocalParameters - MDN</a>
   */
  RTCIceParameters? getLocalParameters();
  /**
   * The RTCIceTransport method getRemoteCandidates() returns an array which contains one RTCIceCandidate for each of the candidates that have been received from the remote peer so far during the current ICE gathering session.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getRemoteCandidates">RTCIceTransport.getRemoteCandidates - MDN</a>
   */
  sequence<RTCIceCandidate> getRemoteCandidates();
  /**
   * The RTCIceTransport method getRemoteParameters() returns an RTCIceParameters object which provides information uniquely identifying the remote peer for the duration of the ICE session.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getRemoteParameters">RTCIceTransport.getRemoteParameters - MDN</a>
   */
  RTCIceParameters? getRemoteParameters();
  /**
   * The RTCIceTransport method getSelectedCandidatePair() returns an RTCIceCandidatePair object containing the current best-choice pair of ICE candidates describing the configuration of the endpoints of the transport.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getSelectedCandidatePair">RTCIceTransport.getSelectedCandidatePair - MDN</a>
   */
  RTCIceCandidatePair? getSelectedCandidatePair();
};

/**
 * The RTCIdentityAssertion interface of the the WebRTC API represents the identity of the a remote peer of the current connection. If no peer has yet been set and verified this interface returns null. Once set it can't be changed.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIdentityAssertion">RTCIdentityAssertion - MDN</a>
 */
[Exposed=Window]
interface RTCIdentityAssertion {
  attribute DOMString idp;
  attribute DOMString name;
  constructor( DOMString idp, DOMString name );
};

/**
 * The RTCPeerConnection interface represents a WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection">RTCPeerConnection - MDN</a>
 */
[Exposed=Window]
interface RTCPeerConnection : EventTarget {
  /**
   * The read-only RTCPeerConnection property canTrickleIceCandidates returns a Boolean which indicates whether or not the remote peer can accept trickled ICE candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates">RTCPeerConnection.canTrickleIceCandidates - MDN</a>
   */
  readonly attribute boolean? canTrickleIceCandidates;
  /**
   * The read-only connectionState property of the RTCPeerConnection interface indicates the current state of the peer connection by returning one of the string values specified by the enum RTCPeerConnectionState.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/connectionState">RTCPeerConnection.connectionState - MDN</a>
   */
  readonly attribute RTCPeerConnectionState connectionState;
  /**
   * The read-only property RTCPeerConnection.currentLocalDescription returns an RTCSessionDescription object describing the local end of the connection as it was most recently successfully negotiated since the last time the  RTCPeerConnection finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/currentLocalDescription">RTCPeerConnection.currentLocalDescription - MDN</a>
   */
  readonly attribute RTCSessionDescription? currentLocalDescription;
  /**
   * The read-only property RTCPeerConnection.currentRemoteDescription returns an RTCSessionDescription object describing the remote end of the connection as it was most recently successfully negotiated since the last time the RTCPeerConnection finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/currentRemoteDescription">RTCPeerConnection.currentRemoteDescription - MDN</a>
   */
  readonly attribute RTCSessionDescription? currentRemoteDescription;
  /**
   * The read-only property RTCPeerConnection.iceConnectionState returns an enum of type RTCIceConnectionState which state of the ICE agent associated with the RTCPeerConnection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState">RTCPeerConnection.iceConnectionState - MDN</a>
   */
  readonly attribute RTCIceConnectionState iceConnectionState;
  /**
   * The read-only property RTCPeerConnection.iceGatheringState returns an enum of type RTCIceGatheringState that describes connection's ICE gathering state. This lets you detect, for example, when collection of ICE candidates has finished.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceGatheringState">RTCPeerConnection.iceGatheringState - MDN</a>
   */
  readonly attribute RTCIceGatheringState iceGatheringState;
  readonly attribute DOMString? idpErrorInfo;
  readonly attribute DOMString? idpLoginUrl;
  /**
   * The read-only property RTCPeerConnection.localDescription returns an RTCSessionDescription describing the session for the local end of the connection. If it has not yet been set, this is
   * null
   * .
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/localDescription">RTCPeerConnection.localDescription - MDN</a>
   */
  readonly attribute RTCSessionDescription? localDescription;
  /**
   * The read-only RTCPeerConnection property peerIdentity returns a JavaScript Promise that resolves to an RTCIdentityAssertion which contains a DOMString identifying the remote peer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/peerIdentity">RTCPeerConnection.peerIdentity - MDN</a>
   */
  readonly attribute Promise<RTCIdentityAssertion> peerIdentity;
  /**
   * The read-only property RTCPeerConnection.pendingLocalDescription returns an RTCSessionDescription object describing a pending configuration change for the local end of the connection. This does not describe the connection as it currently stands, but as it may exist in the near future. Use RTCPeerConnection.currentLocalDescription or RTCPeerConnection.localDescription to get the current state of the endpoint. For details on the difference, see Pending and current descriptions in WebRTC connectivity.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/pendingLocalDescription">RTCPeerConnection.pendingLocalDescription - MDN</a>
   */
  readonly attribute RTCSessionDescription? pendingLocalDescription;
  /**
   * The read-only property RTCPeerConnection.pendingRemoteDescription returns an RTCSessionDescription object describing a pending configuration change for the remote end of the connection. This does not describe the connection as it currently stands, but as it may exist in the near future. Use RTCPeerConnection.currentRemoteDescription or RTCPeerConnection.remoteDescription to get the current session description for the remote endpoint. For details on the difference, see Pending and current descriptions in WebRTC connectivity.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/pendingRemoteDescription">RTCPeerConnection.pendingRemoteDescription - MDN</a>
   */
  readonly attribute RTCSessionDescription? pendingRemoteDescription;
  /**
   * The read-only property RTCPeerConnection.remoteDescription returns a RTCSessionDescription describing the session (which includes configuration and media information) for the remote end of the connection. If this hasn't been set yet, this is null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/remoteDescription">RTCPeerConnection.remoteDescription - MDN</a>
   */
  readonly attribute RTCSessionDescription? remoteDescription;
  /**
   * The read-only sctp property on the RTCPeerConnection interface returns an RTCSctpTransport describing the SCTP transport over which SCTP data is being sent and received. If SCTP hasn't been negotiated, this value is null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/sctp">RTCPeerConnection.sctp - MDN</a>
   */
  readonly attribute RTCSctpTransport? sctp;
  /**
   * The read-only signalingState property on the RTCPeerConnection interface returns one of the string values specified by the RTCSignalingState enum; these values describe the state of the signaling process on the local end of the connection while connecting or reconnecting to another peer. See Signaling in Lifetime of a WebRTC session for more details about the signaling process.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/signalingState">RTCPeerConnection.signalingState - MDN</a>
   */
  readonly attribute RTCSignalingState signalingState;
  /**
   * The RTCPeerConnection.onconnectionstatechange property specifies an EventHandler which is called to handle the connectionstatechange event when it occurs on an instance of RTCPeerConnection. This happens whenever the aggregate state of the connection changes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onconnectionstatechange">RTCPeerConnection.onconnectionstatechange - MDN</a>
   */
  attribute NullableEventHandler onconnectionstatechange;
  /**
   * The RTCPeerConnection.ondatachannel property is an EventHandler which specifies a function which is called when the datachannel event occurs on an RTCPeerConnection. This event, of type RTCDataChannelEvent, is sent when an RTCDataChannel is added to the connection by the remote peer calling createDataChannel().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ondatachannel">RTCPeerConnection.ondatachannel - MDN</a>
   */
  attribute NullableEventHandler ondatachannel;
  /**
   * The RTCPeerConnection property onicecandidate property is an EventHandler which specifies a function to be called when the icecandidate event occurs on an RTCPeerConnection instance. This happens whenever the local ICE agent needs to deliver a message to the other peer through the signaling server.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicecandidate">RTCPeerConnection.onicecandidate - MDN</a>
   */
  attribute NullableEventHandler onicecandidate;
  /**
   * The RTCPeerConnection.onicecandidateerror property is an EventHandler which specifies a function which is called to handle the icecandidateerror event when it occurs on an RTCPeerConnection instance. This event is fired when an error occurs during the ICE candidate gathering process.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicecandidateerror">RTCPeerConnection.onicecandidateerror - MDN</a>
   */
  attribute NullableEventHandler onicecandidateerror;
  /**
   * The RTCPeerConnection.oniceconnectionstatechange property is an event handler which specifies a function to be called when the iceconnectionstatechange event is fired on an RTCPeerConnection instance. This happens when the state of the connection's ICE agent, as represented by the iceConnectionState property, changes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/oniceconnectionstatechange">RTCPeerConnection.oniceconnectionstatechange - MDN</a>
   */
  attribute NullableEventHandler oniceconnectionstatechange;
  /**
   * The RTCPeerConnection.onicegatheringstatechange property is an EventHandler which specifies a function to be called when the icegatheringstatechange event is sent to an RTCPeerConnection instance. This happens when the ICE gathering state—that is, whether or not the ICE agent is actively gathering candidates—changes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicegatheringstatechange">RTCPeerConnection.onicegatheringstatechange - MDN</a>
   */
  attribute NullableEventHandler onicegatheringstatechange;
  /**
   * The RTCPeerConnection interface's onnegotiationneeded property is an EventListener which specifies a function which is called to handle the negotiationneeded event when it occurs on an RTCPeerConnection instance. This event is fired when a change has occurred which requires session negotiation. This negotiation should be carried out as the offerer, because some session changes cannot be negotiated as the answerer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onnegotiationneeded">RTCPeerConnection.onnegotiationneeded - MDN</a>
   */
  attribute NullableEventHandler onnegotiationneeded;
  /**
   * The onsignalingstatechange event handler property of the RTCPeerConnection interface specifies a function to be called when the signalingstatechange event occurs on an RTCPeerConnection interface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onsignalingstatechange">RTCPeerConnection.onsignalingstatechange - MDN</a>
   */
  attribute NullableEventHandler onsignalingstatechange;
  /**
   * The RTCPeerConnection property ontrack is an EventHandler which specifies a function to be called when the track event occurs, indicating that a track has been added to the RTCPeerConnection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ontrack">RTCPeerConnection.ontrack - MDN</a>
   */
  attribute NullableEventHandler ontrack;
  /**
   * The connectionstatechange event is sent to the ontrack event handler on an RTCPeerConnection object after a new track has been added to an RTCRtpReceiver which is part of the connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/connectionstatechange_event">connectionstatechange event - MDN</a>
   */
  event Event connectionstatechange;
  /**
   * A datachannel event is sent to an RTCPeerConnection instance when an RTCDataChannel has been added to the connection, as a result of the remote peer calling RTCPeerConnection.createDataChannel().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/datachannel_event">datachannel event - MDN</a>
   */
  event RTCDataChannelEvent datachannel;
  /**
   * An icecandidate event is sent to an RTCPeerConnection  when an RTCIceCandidate has been identified and added to the local peer by a call to RTCPeerConnection.setLocalDescription(). The event handler should transmit the candidate to the remote peer over the signaling channel so the remote peer can add it to its set of remote candidates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/icecandidate_event">icecandidate event - MDN</a>
   */
  event RTCPeerConnectionIceEvent icecandidate;
  /**
   * The WebRTC API event icecandidateerror is sent to an RTCPeerConnection if an error occurs while performing ICE negotiations through a STUN or TURN server. The event object is of type RTCPeerConnectionIceErrorEvent, and contains information describing the error in some amount of detail.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/icecandidateerror_event">icecandidateerror event - MDN</a>
   */
  event RTCPeerConnectionIceErrorEvent icecandidateerror;
  /**
   * An iceconnectionstatechange event is sent to an RTCPeerConnection object each time the ICE connection state changes during the negotiation process.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceconnectionstatechange_event">iceconnectionstatechange event - MDN</a>
   */
  event Event iceconnectionstatechange;
  /**
   * The icegatheringstatechange event is sent to the onicegatheringstatechange event handler on an RTCPeerConnection when the state of the ICE candidate gathering process changes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event">icegatheringstatechange event - MDN</a>
   */
  event Event icegatheringstatechange;
  /**
   * A negotiationneeded event is sent to the RTCPeerConnection when negotiation of the connection through the signaling channel is required.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/negotiationneeded_event">negotiationneeded event - MDN</a>
   */
  event Event negotiationneeded;
  /**
   * The peeridentity event is sent to the connection concerned when peer identity has been set and verified on it. The new identiy can be access using the RTCPeerConnection.peerIdentity property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/peeridentity_event">peeridentity event - MDN</a>
   */
  event Event peeridentity;
  /**
   * An signalingstatechange event is sent to an RTCPeerConnection to notify it that its signaling state, as indicated by the signalingState property, has changed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/signalingstatechange_event">signalingstatechange event - MDN</a>
   */
  event Event signalingstatechange;
  /**
   * The track event is sent to the ontrack event handler on RTCPeerConnections after a new track has been added to an RTCRtpReceiver which is part of the connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/track_event">track event - MDN</a>
   */
  [NoBubble]
  event RTCTrackEvent track;
  /**
   * The generateCertificate() method of the RTCPeerConnection interface creates and stores an X.509 certificate and corresponding private key then returns an RTCCertificate, providing access to it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/generateCertificate">RTCPeerConnection.generateCertificate - MDN</a>
   */
  static Promise<RTCCertificate> generateCertificate( AlgorithmIdentifier keygenAlgorithm );
  /**
   * The RTCPeerConnection() constructor returns a newly-created RTCPeerConnection, which represents a connection between the local device and a remote peer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection">RTCPeerConnection.RTCPeerConnection - MDN</a>
   */
  constructor( optional RTCConfiguration configuration = {} );
  /**
   * When a web site or app using RTCPeerConnection receives a new ICE candidate from the remote peer over its signaling channel, it delivers the newly-received candidate to the browser's ICE agent by calling RTCPeerConnection.addIceCandidate().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addIceCandidate">RTCPeerConnection.addIceCandidate - MDN</a>
   */
  Promise<void> addIceCandidate( optional RTCIceCandidateInit candidate = {} );
  /**
   * When a web site or app using RTCPeerConnection receives a new ICE candidate from the remote peer over its signaling channel, it delivers the newly-received candidate to the browser's ICE agent by calling RTCPeerConnection.addIceCandidate().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addIceCandidate">RTCPeerConnection.addIceCandidate - MDN</a>
   */
  Promise<void> addIceCandidate( RTCIceCandidateInit candidate, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback );
  /**
   * The RTCPeerConnection method addTrack() adds a new media track to the set of tracks which will be transmitted to the other peer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addTrack">RTCPeerConnection.addTrack - MDN</a>
   */
  RTCRtpSender addTrack( MediaStreamTrack track, MediaStream... streams );
  RTCRtpTransceiver addTransceiver( ( MediaStreamTrack or DOMString ) trackOrKind, optional RTCRtpTransceiverInit init = {} );
  /**
   * The RTCPeerConnection.close() method closes the current peer connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/close">RTCPeerConnection.close - MDN</a>
   */
  void close();
  /**
   * The createAnswer() method on the RTCPeerConnection interface creates an SDP answer to an offer received from a remote peer during the offer/answer negotiation of a WebRTC connection. The answer contains information about any media already attached to the session, codecs and options supported by the browser, and any ICE candidates already gathered. The answer is delivered to the returned Promise, and should then be sent to the source of the offer to continue the negotiation process.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer">RTCPeerConnection.createAnswer - MDN</a>
   */
  Promise<RTCSessionDescriptionInit> createAnswer( optional RTCAnswerOptions options = {} );
  /**
   * The createAnswer() method on the RTCPeerConnection interface creates an SDP answer to an offer received from a remote peer during the offer/answer negotiation of a WebRTC connection. The answer contains information about any media already attached to the session, codecs and options supported by the browser, and any ICE candidates already gathered. The answer is delivered to the returned Promise, and should then be sent to the source of the offer to continue the negotiation process.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer">RTCPeerConnection.createAnswer - MDN</a>
   */
  Promise<void> createAnswer( RTCSessionDescriptionCallback successCallback, RTCPeerConnectionErrorCallback failureCallback );
  /**
   * The createDataChannel() method on the RTCPeerConnection interface creates a new channel linked with the remote peer, over which any kind of data may be transmitted.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createDataChannel">RTCPeerConnection.createDataChannel - MDN</a>
   */
  RTCDataChannel createDataChannel( USVString label, optional RTCDataChannelInit dataChannelDict = {} );
  /**
   * The createOffer() method of the RTCPeerConnection interface initiates the creation of an SDP offer for the purpose of starting a new WebRTC connection to a remote peer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer">RTCPeerConnection.createOffer - MDN</a>
   */
  Promise<RTCSessionDescriptionInit> createOffer( optional RTCOfferOptions options = {} );
  /**
   * The createOffer() method of the RTCPeerConnection interface initiates the creation of an SDP offer for the purpose of starting a new WebRTC connection to a remote peer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer">RTCPeerConnection.createOffer - MDN</a>
   */
  Promise<void> createOffer( RTCSessionDescriptionCallback successCallback, RTCPeerConnectionErrorCallback failureCallback, optional RTCOfferOptions options = {} );
  /**
   * The RTCPeerConnection.getConfiguration() method returns an RTCConfiguration object which indicates the current configuration of the RTCPeerConnection on which the method is called.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getConfiguration">RTCPeerConnection.getConfiguration - MDN</a>
   */
  RTCConfiguration getConfiguration();
  /**
   * The RTCPeerConnection.getIdentityAssertion() method initiates the gathering of an identity assertion. This has an effect only if the signalingState is not "closed".
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getIdentityAssertion">RTCPeerConnection.getIdentityAssertion - MDN</a>
   */
  Promise<DOMString> getIdentityAssertion();
  /**
   * The RTCPeerConnection.getReceivers() method returns an array of RTCRtpReceiver objects, each of which represents one RTP receiver. Each RTP receiver manages the reception and decoding of data for a MediaStreamTrack on an RTCPeerConnection
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getReceivers">RTCPeerConnection.getReceivers - MDN</a>
   */
  sequence<RTCRtpReceiver> getReceivers();
  /**
   * The RTCPeerConnection method getSenders() returns an array of RTCRtpSender objects, each of which represents the RTP sender responsible for transmitting one track's data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getSenders">RTCPeerConnection.getSenders - MDN</a>
   */
  sequence<RTCRtpSender> getSenders();
  /**
   * The RTCPeerConnection method getStats() returns a promise which resolves with data providing statistics about either the overall connection or about the specified MediaStreamTrack.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getStats">RTCPeerConnection.getStats - MDN</a>
   */
  Promise<RTCStatsReport> getStats( optional MediaStreamTrack? selector = null );
  /**
   * The RTCPeerConnection interface's getTransceivers() method returns a list of the RTCRtpTransceiver objects being used to send and receive data on the connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getTransceivers">RTCPeerConnection.getTransceivers - MDN</a>
   */
  sequence<RTCRtpTransceiver> getTransceivers();
  /**
   * The RTCPeerConnection.removeTrack() method tells the local end of the connection to stop sending media from the specified track, without actually removing the corresponding RTCRtpSender from the list of senders as reported by RTCPeerConnection.getSenders().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/removeTrack">RTCPeerConnection.removeTrack - MDN</a>
   */
  void removeTrack( RTCRtpSender sender );
  /**
   * The WebRTC API's RTCPeerConnection interface offers the restartIce() method to allow a web application to easily request that ICE candidate gathering be redone on both ends of the connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/restartIce">RTCPeerConnection.restartIce - MDN</a>
   */
  void restartIce();
  /**
   * The RTCPeerConnection.setConfiguration() method sets the current configuration of the RTCPeerConnection based on the values included in the specified RTCConfiguration object. This lets you change the ICE servers used by the connection and which transport policies to use.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setConfiguration">RTCPeerConnection.setConfiguration - MDN</a>
   */
  void setConfiguration( optional RTCConfiguration configuration = {} );
  /**
   * The RTCPeerConnection.setIdentityProvider() method sets the Identity Provider (IdP) to the triplet given in parameter: its name, the protocol used to communicate with it (optional) and an optional username. The IdP will be used only when an assertion is needed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setIdentityProvider">RTCPeerConnection.setIdentityProvider - MDN</a>
   */
  void setIdentityProvider( DOMString provider, optional RTCIdentityProviderOptions options = {} );
  /**
   * The RTCPeerConnection method setLocalDescription() changes the local description associated with the connection. This description specifies the properties of the local end of the connection, including the media format.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription">RTCPeerConnection.setLocalDescription - MDN</a>
   */
  Promise<void> setLocalDescription( optional RTCLocalSessionDescriptionInit description = {} );
  /**
   * The RTCPeerConnection method setLocalDescription() changes the local description associated with the connection. This description specifies the properties of the local end of the connection, including the media format.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription">RTCPeerConnection.setLocalDescription - MDN</a>
   */
  Promise<void> setLocalDescription( optional RTCLocalSessionDescriptionInit description = {}, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback );
  /**
   * The RTCPeerConnection method setRemoteDescription() sets the specified session description as the remote peer's current offer or answer. The description specifies the properties of the remote end of the connection, including the media format.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription">RTCPeerConnection.setRemoteDescription - MDN</a>
   */
  Promise<void> setRemoteDescription( RTCSessionDescriptionInit description );
  /**
   * The RTCPeerConnection method setRemoteDescription() sets the specified session description as the remote peer's current offer or answer. The description specifies the properties of the remote end of the connection, including the media format.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription">RTCPeerConnection.setRemoteDescription - MDN</a>
   */
  Promise<void> setRemoteDescription( RTCSessionDescriptionInit description, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback );
};

[Exposed=Window]
interface RTCPeerConnectionIceErrorEvent : Event {
  readonly attribute DOMString? address;
  readonly attribute unsigned short errorCode;
  readonly attribute USVString errorText;
  readonly attribute unsigned short? port;
  readonly attribute DOMString url;
  constructor( DOMString type, RTCPeerConnectionIceErrorEventInit eventInitDict );
};

/**
 * The RTCPeerConnectionIceEvent interface represents events that occurs in relation to ICE candidates with the target, usually an RTCPeerConnection.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent">RTCPeerConnectionIceEvent - MDN</a>
 */
[Exposed=Window]
interface RTCPeerConnectionIceEvent : Event {
  /**
   * The read-only candidate property of the RTCPeerConnectionIceEvent interface returns the RTCIceCandidate associated with the event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent/candidate">RTCPeerConnectionIceEvent.candidate - MDN</a>
   */
  readonly attribute RTCIceCandidate? candidate;
  readonly attribute DOMString? url;
  /**
   * The RTCPeerConnectionIceEvent() constructor creates a new RTCPeerConnectionIceEvent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent/RTCPeerConnectionIceEvent">RTCPeerConnectionIceEvent.RTCPeerConnectionIceEvent - MDN</a>
   */
  constructor( DOMString type, optional RTCPeerConnectionIceEventInit eventInitDict = {} );
};

/**
 * The RTCRtpReceiver interface of the WebRTC API manages the reception and decoding of data for a MediaStreamTrack on an RTCPeerConnection.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver">RTCRtpReceiver - MDN</a>
 */
[Exposed=Window]
interface RTCRtpReceiver {
  /**
   * The track read-only property of the RTCRtpReceiver interface returns the MediaStreamTrack associated with the current RTCRtpReceiver instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver/track">RTCRtpReceiver.track - MDN</a>
   */
  readonly attribute MediaStreamTrack track;
  readonly attribute RTCDtlsTransport? transport;
  static RTCRtpCapabilities? getCapabilities( DOMString kind );
  /**
   * The getContributingSources() method of the RTCRtpReceiver interface returns an array of RTCRtpContributingSource instances, each corresponding to one CSRC (contributing source) identifier received by the current RTCRtpReceiver in the last ten seconds.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver/getContributingSources">RTCRtpReceiver.getContributingSources - MDN</a>
   */
  sequence<RTCRtpContributingSource> getContributingSources();
  RTCRtpReceiveParameters getParameters();
  /**
   * The RTCRtpReceiver method getStats() asynchronously requests an RTCStatsReport object which provides statistics about incoming traffic on the owning RTCPeerConnection, returning a Promise whose fulfillment handler will be called once the results are available.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver/getStats">RTCRtpReceiver.getStats - MDN</a>
   */
  Promise<RTCStatsReport> getStats();
  /**
   * The getSynchronizationSources() method of the RTCRtpReceiver interface returns an array of RTCRtpContributingSource instances, each corresponding to one SSRC (synchronization source) identifier received by the current RTCRtpReceiver in the last ten seconds.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver/getSynchronizationSources">RTCRtpReceiver.getSynchronizationSources - MDN</a>
   */
  sequence<RTCRtpSynchronizationSource> getSynchronizationSources();
};

/**
 * The RTCRtpSender interface provides the ability to control and obtain details about how a particular MediaStreamTrack is encoded and sent to a remote peer.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender">RTCRtpSender - MDN</a>
 */
[Exposed=Window]
interface RTCRtpSender {
  /**
   * The read-only dtmf property on the RTCRtpSender interface returns a RTCDTMFSender object which can be used to send DTMF tones over the RTCPeerConnection. See Using DTMF for details on how to make use of the returned RTCDTMFSender object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/dtmf">RTCRtpSender.dtmf - MDN</a>
   */
  readonly attribute RTCDTMFSender? dtmf;
  /**
   * The track read-only property of the RTCRtpSender interface returns the MediaStreamTrack which is being handled by the RTCRtpSender.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/track">RTCRtpSender.track - MDN</a>
   */
  readonly attribute MediaStreamTrack? track;
  readonly attribute RTCDtlsTransport? transport;
  static RTCRtpCapabilities? getCapabilities( DOMString kind );
  RTCRtpSendParameters getParameters();
  Promise<RTCStatsReport> getStats();
  Promise<void> replaceTrack( MediaStreamTrack? withTrack );
  Promise<void> setParameters( RTCRtpSendParameters parameters );
  void setStreams( MediaStream... streams );
};

/**
 * The WebRTC interface RTCRtpTransceiver describes a permanent pairing of an RTCRtpSender and an RTCRtpReceiver, along with some shared state.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver">RTCRtpTransceiver - MDN</a>
 */
[Exposed=Window]
interface RTCRtpTransceiver {
  /**
   * The read-only RTCRtpTransceiver property currentDirection is a string which indicates the current directionality of the transceiver.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/currentDirection">RTCRtpTransceiver.currentDirection - MDN</a>
   */
  readonly attribute RTCRtpTransceiverDirection? currentDirection;
  /**
   * The read-only RTCRtpTransceiver interface's mid property specifies the negotiated media ID (mid) which the local and remote peers have agreed upon to uniquely identify the stream's pairing of sender and receiver.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/mid">RTCRtpTransceiver.mid - MDN</a>
   */
  readonly attribute DOMString? mid;
  /**
   * The read-only  receiver property of WebRTC's RTCRtpTransceiver interface indicates the RTCRtpReceiver responsible for receiving and decoding incoming media data for the transceiver's stream.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/receiver">RTCRtpTransceiver.receiver - MDN</a>
   */
  [SameObject]
  readonly attribute RTCRtpReceiver receiver;
  /**
   * The read-only  sender property of WebRTC's RTCRtpTransceiver interface indicates the RTCRtpSender responsible for encoding and sending outgoing media data for the transceiver's stream.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/sender">RTCRtpTransceiver.sender - MDN</a>
   */
  [SameObject]
  readonly attribute RTCRtpSender sender;
  /**
   * The RTCRtpTransceiver property direction is a string which indicates the transceiver's preferred directionality.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/direction">RTCRtpTransceiver.direction - MDN</a>
   */
  attribute RTCRtpTransceiverDirection direction;
  /**
   * The RTCRtpTransceiver method setCodecPreferences() configures the transceiver's codecs given a list of RTCRtpCodecCapability objects specifying the new preferences for each codec.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/setCodecPreferences">RTCRtpTransceiver.setCodecPreferences - MDN</a>
   */
  void setCodecPreferences( sequence<RTCRtpCodecCapability> codecs );
  /**
   * The stop() method in the RTCRtpTransceiver interface permanently stops the transceiver by stopping both the associated RTCRtpSender and RTCRtpReceiver.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/stop">RTCRtpTransceiver.stop - MDN</a>
   */
  void stop();
};

/**
 * The RTCSctpTransport interface provides information which describes a Stream Control Transmission Protocol (SCTP) transport. This provides information about limitations of the transport, but also provides a way to access the underlying Datagram Transport Layer Security (DTLS) transport over which SCTP packets for all of an RTCPeerConnection's data channels are sent and received.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCSctpTransport">RTCSctpTransport - MDN</a>
 */
[Exposed=Window]
interface RTCSctpTransport : EventTarget {
  readonly attribute unsigned short? maxChannels;
  readonly attribute unrestricted double maxMessageSize;
  /**
   * The state read-only property of the RTCSctpTransport interface provides information which describes a Stream Control Transmission Protocol (SCTP) transport state.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCSctpTransport/state">RTCSctpTransport.state - MDN</a>
   */
  readonly attribute RTCSctpTransportState state;
  readonly attribute RTCDtlsTransport transport;
  attribute NullableEventHandler onstatechange;
};

/**
 * The RTCSessionDescription interface describes one end of a connection—or potential connection—and how it's configured. Each RTCSessionDescription consists of a description type indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription">RTCSessionDescription - MDN</a>
 */
[Exposed=Window]
interface RTCSessionDescription {
  readonly attribute DOMString sdp;
  /**
   * The property RTCSessionDescription.type is a read-only value of type RTCSdpType which describes the description's type.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription/type">RTCSessionDescription.type - MDN</a>
   */
  readonly attribute RTCSdpType type;
  /**
   * The RTCSessionDescription() constructor creates a new RTCSessionDescription with its properties initialized as described in the specified object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription/RTCSessionDescription">RTCSessionDescription.RTCSessionDescription - MDN</a>
   */
  constructor( RTCSessionDescriptionInit descriptionInitDict );
  /**
   * The RTCSessionDescription.toJSON() method generates a JSON description of the object. Both properties, type and sdp, are contained in the generated JSON.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription/toJSON">RTCSessionDescription.toJSON - MDN</a>
   */
  [Default]
  object toJSON();
};

/**
 * The RTCStatsReport interface provides a statistics report obtained by calling one of the RTCPeerConnection.getStats(), RTCRtpReceiver.getStats(), and RTCRtpSender.getStats() methods.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport">RTCStatsReport - MDN</a>
 */
[Exposed=Window]
interface RTCStatsReport {
  readonly maplike<DOMString, object>;
};

/**
 * The WebRTC API interface RTCTrackEvent represents the track event, which is sent when a new MediaStreamTrack is added to an RTCRtpReceiver which is part of the RTCPeerConnection.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent">RTCTrackEvent - MDN</a>
 */
[Exposed=Window]
interface RTCTrackEvent : Event {
  /**
   * The read-only receiver property of the RTCTrackEvent interface indicates the RTCRtpReceiver which is used to receive data containing media for the track to which the event refers.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent/receiver">RTCTrackEvent.receiver - MDN</a>
   */
  readonly attribute RTCRtpReceiver receiver;
  /**
   * The WebRTC API interface RTCTrackEvent's read-only streams property specifies an array of MediaStream objects, one for each of the streams that comprise the track being added to the RTCPeerConnection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent/streams">RTCTrackEvent.streams - MDN</a>
   */
  [SameObject]
  readonly attribute FrozenArray<MediaStream> streams;
  /**
   * The WebRTC API interface RTCTrackEvent's read-only track property specifies the MediaStreamTrack that has been added to the RTCPeerConnection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent/track">RTCTrackEvent.track - MDN</a>
   */
  readonly attribute MediaStreamTrack track;
  /**
   * The WebRTC API interface RTCTrackEvent's read-only transceiver property indicates the RTCRtpTransceiver affiliated with the event's track.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent/transceiver">RTCTrackEvent.transceiver - MDN</a>
   */
  readonly attribute RTCRtpTransceiver transceiver;
  /**
   * The RTCTrackEvent() constructor creates and returns a new RTCTrackEvent object, configured to describe the track which has been added to the RTCPeerConnection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent/RTCTrackEvent">RTCTrackEvent.RTCTrackEvent - MDN</a>
   */
  constructor( DOMString type, RTCTrackEventInit eventInitDict );
};

/**
 * The RadioNodeList interface represents a collection of radio elements in a form or a fieldset element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList">RadioNodeList - MDN</a>
 */
[Exposed=Window]
interface RadioNodeList : NodeList {
  /**
   * If the underlying element collection contains radio buttons, the RadioNodeList.value property represents the checked radio button. On retrieving the value property, the value of the currently checked radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in checked state, the empty string is returned. On setting the value property, the first radio button input element whose value property is equal to the new value will be set to checked.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList/value">RadioNodeList.value - MDN</a>
   */
  attribute DOMString value;
};

/**
 * The Range interface represents a fragment of a document that can contain nodes and parts of text nodes.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range">Range - MDN</a>
 */
[Exposed=Window]
interface Range : AbstractRange {
  const unsigned short END_TO_END = 2;
  const unsigned short END_TO_START = 3;
  const unsigned short START_TO_END = 1;
  const unsigned short START_TO_START = 0;
  /**
   * The Range.commonAncestorContainer read-only property returns the deepest — or furthest down the document tree — Node that contains both boundary points of the Range. This means that if Range.startContainer and Range.endContainer both refer to the same node, this node is the common ancestor container.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/commonAncestorContainer">Range.commonAncestorContainer - MDN</a>
   */
  readonly attribute Node commonAncestorContainer;
  /**
   * The Range() constructor returns a newly created Range object whose start and end is the global Document object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/Range">Range.Range - MDN</a>
   */
  constructor();
  /**
   * The Range.cloneContents() returns a DocumentFragment copying the objects of type Node included in the Range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/cloneContents">Range.cloneContents - MDN</a>
   */
  [CEReactions, NewObject]
  DocumentFragment cloneContents();
  /**
   * The Range.cloneRange() method returns a Range object with boundary points identical to the cloned Range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/cloneRange">Range.cloneRange - MDN</a>
   */
  [NewObject]
  Range cloneRange();
  /**
   * The Range.collapse() method collapses the Range to one of its boundary points.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/collapse">Range.collapse - MDN</a>
   */
  void collapse( optional boolean toStart = false );
  /**
   * The Range.compareBoundaryPoints() method compares the boundary points of the Range with those of another range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/compareBoundaryPoints">Range.compareBoundaryPoints - MDN</a>
   */
  short compareBoundaryPoints( unsigned short how, Range sourceRange );
  /**
   * The Range.comparePoint() method returns -1, 0, or 1 depending on whether the referenceNode is before, the same as, or after the Range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/comparePoint">Range.comparePoint - MDN</a>
   */
  short comparePoint( Node node, unsigned long offset );
  /**
   * The Range.createContextualFragment() method returns a DocumentFragment by invoking the HTML fragment parsing algorithm or the XML fragment parsing algorithm with the start of the range (the parent of the selected node) as the context node. The HTML fragment parsing algorithm is used if the range belongs to a Document whose HTMLness bit is set. In the HTML case, if the context node would be html, for historical reasons the fragment parsing algorithm is invoked with body as the context instead.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/createContextualFragment">Range.createContextualFragment - MDN</a>
   */
  [CEReactions, NewObject]
  DocumentFragment createContextualFragment( DOMString fragment );
  /**
   * The Range.deleteContents() method removes the contents of the Range from the Document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/deleteContents">Range.deleteContents - MDN</a>
   */
  [CEReactions]
  void deleteContents();
  /**
   * The Range.detach() method does nothing. It used to disable the Range object and enable the browser to release associated resources. The method has been kept for compatibility.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/detach">Range.detach - MDN</a>
   */
  void detach();
  /**
   * The Range.extractContents() method moves contents of the Range from the document tree into a DocumentFragment.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/extractContents">Range.extractContents - MDN</a>
   */
  [CEReactions, NewObject]
  DocumentFragment extractContents();
  /**
   * The Range.getBoundingClientRect() method returns a DOMRect object that bounds the contents of the range; this is a rectangle enclosing the union of the bounding rectangles for all the elements in the range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/getBoundingClientRect">Range.getBoundingClientRect - MDN</a>
   */
  [NewObject]
  DOMRect getBoundingClientRect();
  /**
   * The Range.getClientRects() method returns a list of DOMRect objects representing the area of the screen occupied by the range. This is created by aggregating the results of calls to Element.getClientRects() for all the elements in the range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/getClientRects">Range.getClientRects - MDN</a>
   */
  DOMRectList getClientRects();
  /**
   * The Range.insertNode() method inserts a node at the start of the Range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/insertNode">Range.insertNode - MDN</a>
   */
  [CEReactions]
  void insertNode( Node node );
  /**
   * The Range.intersectsNode() method returns a boolean indicating whether the given Node intersects the Range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/intersectsNode">Range.intersectsNode - MDN</a>
   */
  boolean intersectsNode( Node node );
  /**
   * The Range.isPointInRange() method returns a boolean indicating whether the given point is in the Range. It returns true if the point (cursor position) at offset within ReferenceNode is within this range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/isPointInRange">Range.isPointInRange - MDN</a>
   */
  boolean isPointInRange( Node node, unsigned long offset );
  /**
   * The Range.selectNode() method sets the Range to contain the Node and its contents. The parent Node of the start and end of the Range will be the same as the parent of the referenceNode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/selectNode">Range.selectNode - MDN</a>
   */
  void selectNode( Node node );
  /**
   * The Range.selectNodeContents() method sets the Range to contain the contents of a Node.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/selectNodeContents">Range.selectNodeContents - MDN</a>
   */
  void selectNodeContents( Node node );
  /**
   * The Range.setEnd() method sets the end position of a Range to be located at the given offset into the specified node x.Setting the end point above (higher in the document) than the start point will result in a collapsed range with the start and end points both set to the specified end position.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/setEnd">Range.setEnd - MDN</a>
   */
  void setEnd( Node node, unsigned long offset );
  /**
   * The Range.setEndAfter() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndAfter">Range.setEndAfter - MDN</a>
   */
  void setEndAfter( Node node );
  /**
   * The Range.setEndBefore() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndBefore">Range.setEndBefore - MDN</a>
   */
  void setEndBefore( Node node );
  /**
   * The Range.setStart() method sets the start position of a Range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/setStart">Range.setStart - MDN</a>
   */
  void setStart( Node node, unsigned long offset );
  /**
   * The Range.setStartAfter() method sets the start position of a Range relative to a Node. The parent Node of the start of the Range will be the same as that for the referenceNode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartAfter">Range.setStartAfter - MDN</a>
   */
  void setStartAfter( Node node );
  /**
   * The Range.setStartBefore() method sets the start position of a Range relative to another Node. The parent Node of the start of the Range will be the same as that for the referenceNode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartBefore">Range.setStartBefore - MDN</a>
   */
  void setStartBefore( Node node );
  /**
   * The Range.surroundContents() method moves content of the Range into a new node, placing the new node at the start of the specified range.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/surroundContents">Range.surroundContents - MDN</a>
   */
  [CEReactions]
  void surroundContents( Node newParent );
  /**
   * The Range interface represents a fragment of a document that can contain nodes and parts of text nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Range">Range - MDN</a>
   */
  stringifier;
};

/**
 * The ReadableStream interface of the Streams API represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream">ReadableStream - MDN</a>
 */
[LegacyNoInterfaceObject, Exposed=(Window,Worker)]
interface ReadableStream {
};

/**
 * The Report interface of the Reporting API represents a single report.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Report">Report - MDN</a>
 */
[Exposed=(Window,Worker)]
interface Report {
  /**
   * The body read-only property of the Report interface returns the body of the report, which is a ReportBody object containing the detailed report information.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Report/body">Report.body - MDN</a>
   */
  readonly attribute ReportBody? body;
  /**
   * The type read-only property of the Report interface returns the type of report generated, e.g. deprecation or intervention.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Report/type">Report.type - MDN</a>
   */
  readonly attribute DOMString type;
  /**
   * The url read-only property of the Report interface returns the URL of the document that generated the report.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Report/url">Report.url - MDN</a>
   */
  readonly attribute DOMString url;
  [Default]
  object toJSON();
};

[Exposed=(Window,Worker)]
interface ReportBody {
  [Default]
  object toJSON();
};

/**
 * The ReportingObserver interface of the Reporting API allows you to collect and access reports.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver">ReportingObserver - MDN</a>
 */
[Exposed=(Window,Worker)]
interface ReportingObserver {
  /**
   * The ReportingObserver() constructor of the Reporting API creates a new ReportingObserver object instance, which can be used to collect and access reports.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver/ReportingObserver">ReportingObserver.ReportingObserver - MDN</a>
   */
  constructor( ReportingObserverCallback callback, optional ReportingObserverOptions options = {} );
  /**
   * The disconnect() method of the ReportingObserver interface stops a reporting observer that had previously started observing from collecting reports.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver/disconnect">ReportingObserver.disconnect - MDN</a>
   */
  void disconnect();
  /**
   * The observe() method of the ReportingObserver interface instructs a reporting observer to start collecting reports in its report queue.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver/observe">ReportingObserver.observe - MDN</a>
   */
  void observe();
  /**
   * The takeRecords() method of the ReportingObserver interface returns the current list of reports contained in the observer's report queue, and empties the queue.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver/takeRecords">ReportingObserver.takeRecords - MDN</a>
   */
  ReportList takeRecords();
};

/**
 * The Request interface of the Fetch API represents a resource request.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request">Request - MDN</a>
 */
[Exposed=(Window,Worker)]
interface Request {
  /**
   * The body read-only property of the Body mixin is a simple getter used to expose a ReadableStream of the body contents.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/body">Body.body - MDN</a>
   */
  readonly attribute ReadableStream? body;
  /**
   * The bodyUsed read-only property of the Body mixin contains a Boolean that indicates whether the body has been read yet.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed">Body.bodyUsed - MDN</a>
   */
  readonly attribute boolean bodyUsed;
  /**
   * The cache read-only property of the Request interface contains the cache mode of the request. It controls how the request will interact with the browser's HTTP cache.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/cache">Request.cache - MDN</a>
   */
  readonly attribute RequestCache cache;
  /**
   * The credentials read-only property of the Request interface indicates whether the user agent should send cookies from the other domain in the case of cross-origin requests.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials">Request.credentials - MDN</a>
   */
  readonly attribute RequestCredentials credentials;
  /**
   * The destination read-only property of the Request interface returns a string describing the type of content being requested.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/destination">Request.destination - MDN</a>
   */
  readonly attribute RequestDestination destination;
  /**
   * The headers read-only property of the Request interface contains the Headers object associated with the request.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/headers">Request.headers - MDN</a>
   */
  [SameObject]
  readonly attribute Headers headers;
  /**
   * The integrity read-only property of the Request interface contains the subresource integrity value of the request.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/integrity">Request.integrity - MDN</a>
   */
  readonly attribute DOMString integrity;
  readonly attribute boolean isHistoryNavigation;
  readonly attribute boolean isReloadNavigation;
  readonly attribute boolean keepalive;
  /**
   * The method read-only property of the Request interface contains the request's method (GET, POST, etc.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/method">Request.method - MDN</a>
   */
  readonly attribute ByteString method;
  /**
   * The mode read-only property of the Request interface contains the mode of the request (e.g., cors, no-cors, same-origin, or navigate.) This is used to determine if cross-origin requests lead to valid responses, and which properties of the response are readable.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/mode">Request.mode - MDN</a>
   */
  readonly attribute RequestMode mode;
  /**
   * The redirect read-only property of the Request interface contains the mode for how redirects are handled.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/redirect">Request.redirect - MDN</a>
   */
  readonly attribute RequestRedirect redirect;
  /**
   * The referrer read-only property of the Request interface is set by the user agent to be the referrer of the Request. (e.g., client, no-referrer, or a URL.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/referrer">Request.referrer - MDN</a>
   */
  readonly attribute USVString referrer;
  /**
   * The referrerPolicy read-only property of the Request interface returns the referrer policy, which governs what referrer information, sent in the Referer header, should be included with the request.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/referrerPolicy">Request.referrerPolicy - MDN</a>
   */
  readonly attribute ReferrerPolicy referrerPolicy;
  readonly attribute AbortSignal signal;
  /**
   * The url read-only property of the Request interface contains the URL of the request.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/url">Request.url - MDN</a>
   */
  readonly attribute USVString url;
  /**
   * The Request() constructor creates a new Request object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/Request">Request.Request - MDN</a>
   */
  constructor( RequestInfo input, optional RequestInit init = {} );
  /**
   * The arrayBuffer() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with an ArrayBuffer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/arrayBuffer">Body.arrayBuffer - MDN</a>
   */
  [NewObject]
  Promise<ArrayBuffer> arrayBuffer();
  /**
   * The blob() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a Blob.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/blob">Body.blob - MDN</a>
   */
  [NewObject]
  Promise<Blob> blob();
  /**
   * The clone() method of the Request interface creates a copy of the current Request object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/clone">Request.clone - MDN</a>
   */
  [NewObject]
  Request clone();
  /**
   * The formData() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a FormData object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/formData">Body.formData - MDN</a>
   */
  [NewObject]
  Promise<FormData> formData();
  /**
   * The json() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with the result of parsing the body text as JSON.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/json">Body.json - MDN</a>
   */
  [NewObject]
  Promise<any> json();
  /**
   * The text() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a USVString object (text). The response is always decoded using UTF-8.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/text">Body.text - MDN</a>
   */
  [NewObject]
  Promise<USVString> text();
};

/**
 * The Response interface of the Fetch API represents the response to a request.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response">Response - MDN</a>
 */
[Exposed=(Window,Worker)]
interface Response {
  /**
   * The body read-only property of the Body mixin is a simple getter used to expose a ReadableStream of the body contents.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/body">Body.body - MDN</a>
   */
  readonly attribute ReadableStream? body;
  /**
   * The bodyUsed read-only property of the Body mixin contains a Boolean that indicates whether the body has been read yet.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed">Body.bodyUsed - MDN</a>
   */
  readonly attribute boolean bodyUsed;
  /**
   * The headers read-only property of the Response interface contains the Headers object associated with the response.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/headers">Response.headers - MDN</a>
   */
  [SameObject]
  readonly attribute Headers headers;
  /**
   * The ok read-only property of the Response interface contains a Boolean stating whether the response was successful (status in the range 200-299) or not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/ok">Response.ok - MDN</a>
   */
  readonly attribute boolean ok;
  /**
   * The read-only redirected property of the Response interface indicates whether or not the response is the result of a request you made which was redirected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/redirected">Response.redirected - MDN</a>
   */
  readonly attribute boolean redirected;
  /**
   * The status read-only property of the Response interface contains the status code of the response (e.g., 200 for a success).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/status">Response.status - MDN</a>
   */
  readonly attribute unsigned short status;
  /**
   * The statusText read-only property of the Response interface contains the status message corresponding to the status code (e.g., OK for 200).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/statusText">Response.statusText - MDN</a>
   */
  readonly attribute ByteString statusText;
  /**
   * The type read-only property of the Response interface contains the type of the response. It can be one of the following:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/type">Response.type - MDN</a>
   */
  readonly attribute ResponseType type;
  /**
   * The url read-only property of the Response interface contains the URL of the response. The value of the url property will be the final URL obtained after any redirects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/url">Response.url - MDN</a>
   */
  readonly attribute USVString url;
  /**
   * The error() method of the Response interface returns a new Response object associated with a network error.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/error">Response.error - MDN</a>
   */
  [NewObject]
  static Response error();
  /**
   * The redirect() method of the Response interface returns a Response resulting in a redirect to the specified URL.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/redirect">Response.redirect - MDN</a>
   */
  [NewObject]
  static Response redirect( USVString url, optional unsigned short status = 302 );
  /**
   * The Response() constructor creates a new Response object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/Response">Response.Response - MDN</a>
   */
  constructor( optional BodyInit? body = null, optional ResponseInit init = {} );
  /**
   * The arrayBuffer() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with an ArrayBuffer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/arrayBuffer">Body.arrayBuffer - MDN</a>
   */
  [NewObject]
  Promise<ArrayBuffer> arrayBuffer();
  /**
   * The blob() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a Blob.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/blob">Body.blob - MDN</a>
   */
  [NewObject]
  Promise<Blob> blob();
  /**
   * The clone() method of the Response interface creates a clone of a response object, identical in every way, but stored in a different variable.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/clone">Response.clone - MDN</a>
   */
  [NewObject]
  Response clone();
  /**
   * The formData() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a FormData object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/formData">Body.formData - MDN</a>
   */
  [NewObject]
  Promise<FormData> formData();
  /**
   * The json() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with the result of parsing the body text as JSON.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/json">Body.json - MDN</a>
   */
  [NewObject]
  Promise<any> json();
  /**
   * The text() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a USVString object (text). The response is always decoded using UTF-8.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/text">Body.text - MDN</a>
   */
  [NewObject]
  Promise<USVString> text();
};

/**
 * The WebAssembly.RuntimeError object is the error type that is thrown whenever WebAssembly specifies a trap.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/RuntimeError">WebAssembly.RuntimeError - MDN</a>
 */
[LegacyNamespace=WebAssembly]
interface RuntimeError {
};

/**
 * The SVGAElement interface provides access to the properties of a element, as well as methods to manipulate them.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAElement">SVGAElement - MDN</a>
 */
[Exposed=Window]
interface SVGAElement : SVGGraphicsElement {
  readonly attribute USVString origin;
  [SameObject, PutsForward=value]
  readonly attribute DOMTokenList relList;
  /**
   * The SVGAElement.target read-only property of SVGAElement returns an SVGAnimatedString object that specifies the portion of a target window, frame, pane into which a document is to be opened when a link is activated.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAElement/target">SVGAElement.target - MDN</a>
   */
  [SameObject]
  readonly attribute SVGAnimatedString target;
  attribute DOMString download;
  [CEReactions]
  attribute USVString hash;
  [CEReactions]
  attribute USVString host;
  [CEReactions]
  attribute USVString hostname;
  attribute DOMString hreflang;
  [CEReactions]
  attribute USVString password;
  [CEReactions]
  attribute USVString pathname;
  attribute USVString ping;
  [CEReactions]
  attribute USVString port;
  [CEReactions]
  attribute USVString protocol;
  attribute DOMString referrerPolicy;
  attribute DOMString rel;
  [CEReactions]
  attribute USVString search;
  attribute DOMString text;
  attribute DOMString type;
  [CEReactions]
  attribute USVString username;
  [CEReactions]
  stringifier attribute USVString href;
};

/**
 * The SVGAngle interface is used to represent a value that can be an angle or number value. An SVGAngle reflected through the animVal attribute is always read only.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle">SVGAngle - MDN</a>
 */
[Exposed=Window]
interface SVGAngle {
  const unsigned short SVG_ANGLETYPE_DEG = 2;
  const unsigned short SVG_ANGLETYPE_GRAD = 4;
  const unsigned short SVG_ANGLETYPE_RAD = 3;
  const unsigned short SVG_ANGLETYPE_UNKNOWN = 0;
  const unsigned short SVG_ANGLETYPE_UNSPECIFIED = 1;
  readonly attribute unsigned short unitType;
  attribute float value;
  attribute DOMString valueAsString;
  attribute float valueInSpecifiedUnits;
  void convertToSpecifiedUnits( unsigned short unitType );
  void newValueSpecifiedUnits( unsigned short unitType, float valueInSpecifiedUnits );
};

/**
 * The SVGAnimatedAngle interface is used for attributes of basic type angle which can be animated.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedAngle">SVGAnimatedAngle - MDN</a>
 */
[Exposed=Window]
interface SVGAnimatedAngle {
  [SameObject]
  readonly attribute SVGAngle animVal;
  [SameObject]
  readonly attribute SVGAngle baseVal;
};

/**
 * The SVGAnimatedBoolean interface is used for attributes of type boolean which can be animated.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedBoolean">SVGAnimatedBoolean - MDN</a>
 */
[Exposed=Window]
interface SVGAnimatedBoolean {
  readonly attribute boolean animVal;
  attribute boolean baseVal;
};

/**
 * The SVGAnimatedEnumeration interface is used for attributes whose value must be a constant from a particular enumeration and which can be animated.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedEnumeration">SVGAnimatedEnumeration - MDN</a>
 */
[Exposed=Window]
interface SVGAnimatedEnumeration {
  readonly attribute unsigned short animVal;
  attribute unsigned short baseVal;
};

/**
 * The SVGAnimatedInteger interface is used for attributes of basic type integer which can be animated.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedInteger">SVGAnimatedInteger - MDN</a>
 */
[Exposed=Window]
interface SVGAnimatedInteger {
  readonly attribute long animVal;
  attribute long baseVal;
};

/**
 * The SVGAnimatedLength interface is used for attributes of basic type length which can be animated.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength">SVGAnimatedLength - MDN</a>
 */
[Exposed=Window]
interface SVGAnimatedLength {
  [SameObject]
  readonly attribute SVGLength animVal;
  [SameObject]
  readonly attribute SVGLength baseVal;
};

/**
 * The SVGAnimatedLengthList interface is used for attributes of type SVGLengthList which can be animated.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLengthList">SVGAnimatedLengthList - MDN</a>
 */
[Exposed=Window]
interface SVGAnimatedLengthList {
  [SameObject]
  readonly attribute SVGLengthList animVal;
  [SameObject]
  readonly attribute SVGLengthList baseVal;
};

/**
 * The SVGAnimatedNumber interface is used for attributes of basic type Number which can be animated.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumber">SVGAnimatedNumber - MDN</a>
 */
[Exposed=Window]
interface SVGAnimatedNumber {
  readonly attribute float animVal;
  attribute float baseVal;
};

/**
 * The SVGAnimatedNumber interface is used for attributes which take a list of numbers and which can be animated.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumberList">SVGAnimatedNumberList - MDN</a>
 */
[Exposed=Window]
interface SVGAnimatedNumberList {
  [SameObject]
  readonly attribute SVGNumberList animVal;
  [SameObject]
  readonly attribute SVGNumberList baseVal;
};

/**
 * The SVGAnimatedPreserveAspectRatio interface is used for attributes of type SVGPreserveAspectRatio which can be animated.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio">SVGAnimatedPreserveAspectRatio - MDN</a>
 */
[Exposed=Window]
interface SVGAnimatedPreserveAspectRatio {
  [SameObject]
  readonly attribute SVGPreserveAspectRatio animVal;
  [SameObject]
  readonly attribute SVGPreserveAspectRatio baseVal;
};

/**
 * The SVGAnimatedRect interface is used for attributes of basic SVGRect which can be animated.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect">SVGAnimatedRect - MDN</a>
 */
[Exposed=Window]
interface SVGAnimatedRect {
  [SameObject]
  readonly attribute DOMRectReadOnly animVal;
  [SameObject]
  readonly attribute DOMRect baseVal;
};

/**
 * The SVGAnimatedString interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString">SVGAnimatedString - MDN</a>
 */
[Exposed=Window]
interface SVGAnimatedString {
  /**
   * AnimVal attribute or animVal property contains the same value as the baseVal property.If the given attribute or property is being animated, contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, then it contains the same value as baseVal
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString/animVal">SVGAnimatedString.animVal - MDN</a>
   */
  readonly attribute DOMString animVal;
  /**
   * BaseVal gets or sets the base value of the given attribute before any animations are applied.The base value of the given attribute before applying any animations. Setter throws DOMException.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString/baseVal">SVGAnimatedString.baseVal - MDN</a>
   */
  attribute DOMString baseVal;
};

/**
 * The SVGAnimatedTransformList interface is used for attributes which take a list of numbers and which can be animated.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList">SVGAnimatedTransformList - MDN</a>
 */
[Exposed=Window]
interface SVGAnimatedTransformList {
  [SameObject]
  readonly attribute SVGTransformList animVal;
  [SameObject]
  readonly attribute SVGTransformList baseVal;
};

/**
 * The SVGCircleElement interface is an interface for the circle element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement">SVGCircleElement - MDN</a>
 */
[Exposed=Window]
interface SVGCircleElement : SVGGeometryElement {
  /**
   * The cx read-only property of the SVGCircleElement interface reflects the cx attribute of a circle element and by that defines the x-coordinate of the circleʼs center.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement/cx">SVGCircleElement.cx - MDN</a>
   */
  [SameObject]
  readonly attribute SVGAnimatedLength cx;
  /**
   * The cy read-only property of the SVGCircleElement interface reflects the cy attribute of a circle element and by that defines the y-coordinate of the circleʼs center.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement/cy">SVGCircleElement.cy - MDN</a>
   */
  [SameObject]
  readonly attribute SVGAnimatedLength cy;
  /**
   * The r read-only property of the SVGCircleElement interface reflects the r attribute of a circle element and by that defines the radius of the circle.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement/r">SVGCircleElement.r - MDN</a>
   */
  [SameObject]
  readonly attribute SVGAnimatedLength r;
};

/**
 * The SVGClipPathElement interface provides access to the properties of clipPath elements, as well as methods to manipulate them.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGClipPathElement">SVGClipPathElement - MDN</a>
 */
[Exposed=Window]
interface SVGClipPathElement : SVGElement {
  readonly attribute SVGAnimatedEnumeration clipPathUnits;
  readonly attribute SVGAnimatedTransformList transform;
};

/**
 * The SVGComponentTransferFunctionElement interface defines a base interface used by the component transfer function interfaces.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGComponentTransferFunctionElement">SVGComponentTransferFunctionElement - MDN</a>
 */
interface SVGComponentTransferFunctionElement : SVGElement {
  const unsigned short SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE = 3;
  const unsigned short SVG_FECOMPONENTTRANSFER_TYPE_GAMMA = 5;
  const unsigned short SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY = 1;
  const unsigned short SVG_FECOMPONENTTRANSFER_TYPE_LINEAR = 4;
  const unsigned short SVG_FECOMPONENTTRANSFER_TYPE_TABLE = 2;
  const unsigned short SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN = 0;
  readonly attribute SVGAnimatedNumber amplitude;
  readonly attribute SVGAnimatedNumber exponent;
  readonly attribute SVGAnimatedNumber intercept;
  readonly attribute SVGAnimatedNumber offset;
  readonly attribute SVGAnimatedNumber slope;
  readonly attribute SVGAnimatedNumberList tableValues;
  readonly attribute SVGAnimatedEnumeration type;
};

/**
 * The SVGDefsElement interface corresponds to the defs element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGDefsElement">SVGDefsElement - MDN</a>
 */
[Exposed=Window]
interface SVGDefsElement : SVGGraphicsElement {
};

/**
 * The SVGDescElement interface corresponds to the desc element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGDescElement">SVGDescElement - MDN</a>
 */
[Exposed=Window]
interface SVGDescElement : SVGElement {
};

/**
 * All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the SVGElement interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGElement">SVGElement - MDN</a>
 */
[Exposed=Window]
interface SVGElement : Element {
  [SameObject]
  readonly attribute SVGAnimatedString className;
  [SameObject]
  readonly attribute SVGElement? correspondingElement;
  [SameObject]
  readonly attribute SVGUseElement? correspondingUseElement;
  /**
   * The dataset read-only property of the HTMLOrForeignElement interface provides read/write access to all the custom data attributes (data-*) set on the element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGElement/dataset">SVGElement.dataset - MDN</a>
   */
  [SameObject]
  readonly attribute DOMStringMap dataset;
  readonly attribute SVGSVGElement? ownerSVGElement;
  /**
   * The style property is used to get as well as set the inline style of an element. When getting, it returns a CSSStyleDeclaration object that contains a list of all styles properties for that element with values assigned for the attributes that are defined in the element's inline style attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style">ElementCSSInlineStyle.style - MDN</a>
   */
  [SameObject, PutForwards=cssText]
  readonly attribute CSSStyleDeclaration style;
  readonly attribute SVGElement? viewportElement;
  [CEReactions]
  attribute boolean autofocus;
  attribute DOMString nonce;
  /**
   * The onabort property of the GlobalEventHandlers mixin is the EventHandler for processing abort events sent to the window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort">GlobalEventHandlers.onabort - MDN</a>
   */
  attribute NullableEventHandler onabort;
  /**
   * The onanimationcancel property of the GlobalEventHandlers mixin is the EventHandler for processing animationcancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationcancel">GlobalEventHandlers.onanimationcancel - MDN</a>
   */
  attribute NullableEventHandler onanimationcancel;
  /**
   * The onanimationend property of the GlobalEventHandlers mixin is the EventHandler for processing animationend events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend">GlobalEventHandlers.onanimationend - MDN</a>
   */
  attribute NullableEventHandler onanimationend;
  /**
   * The onanimationiteration property of the GlobalEventHandlers mixin is the EventHandler for processing animationiteration events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationiteration">GlobalEventHandlers.onanimationiteration - MDN</a>
   */
  attribute NullableEventHandler onanimationiteration;
  /**
   * An event handler for the animationstart event. This event is sent when a CSS Animation starts to play.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationstart">GlobalEventHandlers.onanimationstart - MDN</a>
   */
  attribute NullableEventHandler onanimationstart;
  /**
   * The onauxclick property of the GlobalEventHandlers mixin is an EventHandler for processing auxclick events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onauxclick">GlobalEventHandlers.onauxclick - MDN</a>
   */
  attribute NullableEventHandler onauxclick;
  /**
   * The onblur property of the GlobalEventHandlers mixin is the EventHandler for processing blur events. It's available on Element, Document, and Window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur">GlobalEventHandlers.onblur - MDN</a>
   */
  attribute NullableEventHandler onblur;
  /**
   * The oncancel property of the GlobalEventHandlers mixin is an EventHandler for processing cancel events sent to a dialog element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncancel">GlobalEventHandlers.oncancel - MDN</a>
   */
  attribute NullableEventHandler oncancel;
  /**
   * The oncanplay property of the GlobalEventHandlers mixin is the EventHandler for processing canplay events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplay">GlobalEventHandlers.oncanplay - MDN</a>
   */
  attribute NullableEventHandler oncanplay;
  /**
   * The oncanplaythrough property of the GlobalEventHandlers mixin is the EventHandler for processing canplaythrough events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough">GlobalEventHandlers.oncanplaythrough - MDN</a>
   */
  attribute NullableEventHandler oncanplaythrough;
  /**
   * The onchange property of the GlobalEventHandlers mixin is an EventHandler for processing change events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange">GlobalEventHandlers.onchange - MDN</a>
   */
  attribute NullableEventHandler onchange;
  /**
   * The onclick property of the GlobalEventHandlers mixin is the EventHandler for processing click events on a given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick">GlobalEventHandlers.onclick - MDN</a>
   */
  attribute NullableEventHandler onclick;
  /**
   * The onclose property of the GlobalEventHandlers mixin is an EventHandler for processing close events sent to a dialog element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose">GlobalEventHandlers.onclose - MDN</a>
   */
  attribute NullableEventHandler onclose;
  /**
   * The oncontextmenu property of the GlobalEventHandlers mixin is an EventHandler that processes contextmenu events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu">GlobalEventHandlers.oncontextmenu - MDN</a>
   */
  attribute NullableEventHandler oncontextmenu;
  attribute NullableEventHandler oncopy;
  /**
   * The oncuechange property of the GlobalEventHandlers mixin is the EventHandler for processing cuechange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncuechange">GlobalEventHandlers.oncuechange - MDN</a>
   */
  attribute NullableEventHandler oncuechange;
  attribute NullableEventHandler oncut;
  /**
   * The ondblclick property of the GlobalEventHandlers mixin is an EventHandler that processes dblclick events on the given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick">GlobalEventHandlers.ondblclick - MDN</a>
   */
  attribute NullableEventHandler ondblclick;
  /**
   * A global event handler for the drag event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondrag">GlobalEventHandlers.ondrag - MDN</a>
   */
  attribute NullableEventHandler ondrag;
  /**
   * A global event handler for the dragend event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragend">GlobalEventHandlers.ondragend - MDN</a>
   */
  attribute NullableEventHandler ondragend;
  /**
   * A global event handler for the dragenter event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragenter">GlobalEventHandlers.ondragenter - MDN</a>
   */
  attribute NullableEventHandler ondragenter;
  /**
   * The GlobalEventHandler.ondragexit property is an event handler for the dragexit event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragexit">GlobalEventHandlers.ondragexit - MDN</a>
   */
  attribute NullableEventHandler ondragexit;
  /**
   * A global event handler for the dragleave event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragleave">GlobalEventHandlers.ondragleave - MDN</a>
   */
  attribute NullableEventHandler ondragleave;
  /**
   * A global event handler for the dragover event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragover">GlobalEventHandlers.ondragover - MDN</a>
   */
  attribute NullableEventHandler ondragover;
  /**
   * A global event handler for the dragstart event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragstart">GlobalEventHandlers.ondragstart - MDN</a>
   */
  attribute NullableEventHandler ondragstart;
  /**
   * A global event handler for the drop event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondrop">GlobalEventHandlers.ondrop - MDN</a>
   */
  attribute NullableEventHandler ondrop;
  /**
   * The ondurationchange property of the GlobalEventHandlers mixin is the EventHandler for processing durationchange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondurationchange">GlobalEventHandlers.ondurationchange - MDN</a>
   */
  attribute NullableEventHandler ondurationchange;
  /**
   * The onemptied property sets and returns the event handler for the emptied event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onemptied">GlobalEventHandlers.onemptied - MDN</a>
   */
  attribute NullableEventHandler onemptied;
  /**
   * The onended property of the GlobalEventHandlers mixin is the EventHandler for processing ended events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onended">GlobalEventHandlers.onended - MDN</a>
   */
  attribute NullableEventHandler onended;
  /**
   * The onerror property of the GlobalEventHandlers mixin is an EventHandler that processes error events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror">GlobalEventHandlers.onerror - MDN</a>
   */
  attribute NullableOnErrorEventHandler onerror;
  /**
   * The onfocus property of the GlobalEventHandlers mixin is an EventHandler that processes focus events on the given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus">GlobalEventHandlers.onfocus - MDN</a>
   */
  attribute NullableEventHandler onfocus;
  /**
   * The onformdata property of the GlobalEventHandlers mixin is the EventHandler for processing formdata events, fired after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a FormData() constructor. onformdata is available on HTMLFormElement.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onformdata">GlobalEventHandlers.onformdata - MDN</a>
   */
  attribute NullableEventHandler onformdata;
  /**
   * The ongotpointercapture property of the GlobalEventHandlers mixin is an EventHandler that processes gotpointercapture events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ongotpointercapture">GlobalEventHandlers.ongotpointercapture - MDN</a>
   */
  attribute NullableEventHandler ongotpointercapture;
  /**
   * The oninput property of the GlobalEventHandlers mixin is an EventHandler that processes input events on the input, select, and textarea elements. It also handles these events on elements where contenteditable or designMode are turned on.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput">GlobalEventHandlers.oninput - MDN</a>
   */
  attribute NullableEventHandler oninput;
  /**
   * The oninvalid property of the GlobalEventHandlers mixin is an EventHandler that processes invalid events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninvalid">GlobalEventHandlers.oninvalid - MDN</a>
   */
  attribute NullableEventHandler oninvalid;
  /**
   * The onkeydown property of the GlobalEventHandlers mixin is an EventHandler that processes keydown events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown">GlobalEventHandlers.onkeydown - MDN</a>
   */
  attribute NullableEventHandler onkeydown;
  /**
   * The onkeypress property of the GlobalEventHandlers mixin is an EventHandler that processes keypress events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress">GlobalEventHandlers.onkeypress - MDN</a>
   */
  attribute NullableEventHandler onkeypress;
  /**
   * The onkeyup property of the GlobalEventHandlers mixin is an EventHandler that processes keyup events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup">GlobalEventHandlers.onkeyup - MDN</a>
   */
  attribute NullableEventHandler onkeyup;
  /**
   * The onload property of the GlobalEventHandlers mixin is an EventHandler that processes load events on a Window, XMLHttpRequest, img element, etc.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload">GlobalEventHandlers.onload - MDN</a>
   */
  attribute NullableEventHandler onload;
  /**
   * The onloadeddata property of the GlobalEventHandlers mixin is the EventHandler for processing loadeddata events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadeddata">GlobalEventHandlers.onloadeddata - MDN</a>
   */
  attribute NullableEventHandler onloadeddata;
  /**
   * The onloadedmetadata property of the GlobalEventHandlers mixin is the EventHandler for processing loadedmetadata events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadedmetadata">GlobalEventHandlers.onloadedmetadata - MDN</a>
   */
  attribute NullableEventHandler onloadedmetadata;
  /**
   * The onloadstart property of the GlobalEventHandlers mixin is an EventHandler representing the code to be called when the loadstart event is raised (when progress has begun on the loading of a resource.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart">GlobalEventHandlers.onloadstart - MDN</a>
   */
  attribute NullableEventHandler onloadstart;
  /**
   * The onlostpointercapture property of the GlobalEventHandlers mixin is an EventHandler that processes lostpointercapture events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onlostpointercapture">GlobalEventHandlers.onlostpointercapture - MDN</a>
   */
  attribute NullableEventHandler onlostpointercapture;
  /**
   * The onmousedown property of the GlobalEventHandlers mixin is an EventHandler that processes mousedown events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown">GlobalEventHandlers.onmousedown - MDN</a>
   */
  attribute NullableEventHandler onmousedown;
  /**
   * The onmouseenter property of the GlobalEventHandlers mixin is the EventHandler for processing mouseenter events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseenter">GlobalEventHandlers.onmouseenter - MDN</a>
   */
  [LegacyLenientThis]
  attribute NullableEventHandler onmouseenter;
  /**
   * The onmouseleave property of the GlobalEventHandlers mixin is the EventHandler for processing mouseleave events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseleave">GlobalEventHandlers.onmouseleave - MDN</a>
   */
  [LegacyLenientThis]
  attribute NullableEventHandler onmouseleave;
  /**
   * The onmousemove property of the GlobalEventHandlers mixin is an EventHandler that processes mousemove events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove">GlobalEventHandlers.onmousemove - MDN</a>
   */
  attribute NullableEventHandler onmousemove;
  /**
   * The onmouseout property of the GlobalEventHandlers mixin is an EventHandler that processes mouseout events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout">GlobalEventHandlers.onmouseout - MDN</a>
   */
  attribute NullableEventHandler onmouseout;
  /**
   * The onmouseover property of the GlobalEventHandlers mixin is an EventHandler that processes mouseover events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover">GlobalEventHandlers.onmouseover - MDN</a>
   */
  attribute NullableEventHandler onmouseover;
  /**
   * The onmouseup property of the GlobalEventHandlers mixin is an EventHandler that processes mouseup events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup">GlobalEventHandlers.onmouseup - MDN</a>
   */
  attribute NullableEventHandler onmouseup;
  attribute NullableEventHandler onpaste;
  /**
   * The onpause property of the GlobalEventHandlers mixin is the EventHandler for processing pause events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause">GlobalEventHandlers.onpause - MDN</a>
   */
  attribute NullableEventHandler onpause;
  /**
   * The onplay property of the GlobalEventHandlers mixin is the EventHandler for processing play events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay">GlobalEventHandlers.onplay - MDN</a>
   */
  attribute NullableEventHandler onplay;
  /**
   * The onplaying property of the GlobalEventHandlers mixin is the EventHandler for processing playing events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplaying">GlobalEventHandlers.onplaying - MDN</a>
   */
  attribute NullableEventHandler onplaying;
  /**
   * The onpointercancel property of the GlobalEventHandlers mixin is an EventHandler that processes pointercancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel">GlobalEventHandlers.onpointercancel - MDN</a>
   */
  attribute NullableEventHandler onpointercancel;
  /**
   * The GlobalEventHandlers event handler onpointerdown is used to specify the event handler for the pointerdown event, which is fired when the pointing device is initially pressed. This event can be sent to Window, Document, and Element objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown">GlobalEventHandlers.onpointerdown - MDN</a>
   */
  attribute NullableEventHandler onpointerdown;
  /**
   * The onpointerenter property of the GlobalEventHandlers mixin is an EventHandler that processes pointerenter events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerenter">GlobalEventHandlers.onpointerenter - MDN</a>
   */
  attribute NullableEventHandler onpointerenter;
  /**
   * The global event handler for the pointerleave event, which is delivered to a Node when the pointer (mouse cursor, fingertip, etc.) exits its hit test area (for example, if the cursor exits an Element or Window's content area). This event is part of the Pointer Events API.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave">GlobalEventHandlers.onpointerleave - MDN</a>
   */
  attribute NullableEventHandler onpointerleave;
  /**
   * The onpointermove property of the GlobalEventHandlers mixin is an EventHandler that processes pointermove events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove">GlobalEventHandlers.onpointermove - MDN</a>
   */
  attribute NullableEventHandler onpointermove;
  /**
   * The onpointerout property of the GlobalEventHandlers mixin is an EventHandler that processes pointerout events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout">GlobalEventHandlers.onpointerout - MDN</a>
   */
  attribute NullableEventHandler onpointerout;
  /**
   * The onpointerover property of the GlobalEventHandlers mixin is an EventHandler that processes pointerover events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerover">GlobalEventHandlers.onpointerover - MDN</a>
   */
  attribute NullableEventHandler onpointerover;
  /**
   * The onpointerup property of the GlobalEventHandlers mixin is an EventHandler that processes pointerup events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerup">GlobalEventHandlers.onpointerup - MDN</a>
   */
  attribute NullableEventHandler onpointerup;
  attribute NullableEventHandler onprogress;
  attribute NullableEventHandler onratechange;
  /**
   * The onreset property of the GlobalEventHandlers mixin is an EventHandler that processes reset events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset">GlobalEventHandlers.onreset - MDN</a>
   */
  attribute NullableEventHandler onreset;
  /**
   * The onresize property of the GlobalEventHandlers interface is an EventHandler that processes resize events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize">GlobalEventHandlers.onresize - MDN</a>
   */
  attribute NullableEventHandler onresize;
  /**
   * The onscroll property of the GlobalEventHandlers mixin is an EventHandler that processes scroll events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll">GlobalEventHandlers.onscroll - MDN</a>
   */
  attribute NullableEventHandler onscroll;
  attribute NullableEventHandler onsecuritypolicyviolation;
  attribute NullableEventHandler onseeked;
  attribute NullableEventHandler onseeking;
  /**
   * The onselect property of the GlobalEventHandlers mixin is an EventHandler that processes select events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect">GlobalEventHandlers.onselect - MDN</a>
   */
  attribute NullableEventHandler onselect;
  /**
   * The onselectionchange property of the GlobalEventHandlers mixin is an EventHandler that processes selectionchange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange">GlobalEventHandlers.onselectionchange - MDN</a>
   */
  attribute NullableEventHandler onselectionchange;
  /**
   * The onselectstart property of the GlobalEventHandlers mixin is an EventHandler that processes selectstart events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart">GlobalEventHandlers.onselectstart - MDN</a>
   */
  attribute NullableEventHandler onselectstart;
  attribute NullableEventHandler onslotchange;
  attribute NullableEventHandler onstalled;
  /**
   * The onsubmit property of the GlobalEventHandlers mixin is an EventHandler that processes submit events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit">GlobalEventHandlers.onsubmit - MDN</a>
   */
  attribute NullableEventHandler onsubmit;
  attribute NullableEventHandler onsuspend;
  attribute NullableEventHandler ontimeupdate;
  attribute NullableEventHandler ontoggle;
  /**
   * The ontouchcancel property of the GlobalEventHandlers mixin is an EventHandler that processes touchcancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel">GlobalEventHandlers.ontouchcancel - MDN</a>
   */
  attribute NullableEventHandler ontouchcancel;
  /**
   * A global event handler for the touchend event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchend">GlobalEventHandlers.ontouchend - MDN</a>
   */
  attribute NullableEventHandler ontouchend;
  /**
   * A global event handler for the touchmove event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchmove">GlobalEventHandlers.ontouchmove - MDN</a>
   */
  attribute NullableEventHandler ontouchmove;
  /**
   * The ontouchstart property of the GlobalEventHandlers mixin is an EventHandler that processes touchstart events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart">GlobalEventHandlers.ontouchstart - MDN</a>
   */
  attribute NullableEventHandler ontouchstart;
  /**
   * The ontransitioncancel property of the GlobalEventHandlers mixin is an EventHandler that processes transitioncancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitioncancel">GlobalEventHandlers.ontransitioncancel - MDN</a>
   */
  attribute NullableEventHandler ontransitioncancel;
  /**
   * The ontransitionend property of the GlobalEventHandlers mixin is an EventHandler that processes transitionend events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitionend">GlobalEventHandlers.ontransitionend - MDN</a>
   */
  attribute NullableEventHandler ontransitionend;
  attribute NullableEventHandler ontransitionrun;
  attribute NullableEventHandler ontransitionstart;
  attribute NullableEventHandler onvolumechange;
  attribute NullableEventHandler onwaiting;
  attribute NullableEventHandler onwebkitanimationend;
  attribute NullableEventHandler onwebkitanimationiteration;
  attribute NullableEventHandler onwebkitanimationstart;
  attribute NullableEventHandler onwebkittransitionend;
  /**
   * The onwheel property of the GlobalEventHandlers mixin is an EventHandler that processes wheel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel">GlobalEventHandlers.onwheel - MDN</a>
   */
  attribute NullableEventHandler onwheel;
  [CEReactions]
  attribute long tabIndex;
  void blur();
  void focus( optional FocusOptions options = {} );
};

/**
 * The SVGEllipseElement interface provides access to the properties of ellipse elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGEllipseElement">SVGEllipseElement - MDN</a>
 */
[Exposed=Window]
interface SVGEllipseElement : SVGGeometryElement {
  [SameObject]
  readonly attribute SVGAnimatedLength cx;
  [SameObject]
  readonly attribute SVGAnimatedLength cy;
  [SameObject]
  readonly attribute SVGAnimatedLength rx;
  [SameObject]
  readonly attribute SVGAnimatedLength ry;
};

/**
 * The SVGFEBlendElement interface corresponds to the feBlend element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEBlendElement">SVGFEBlendElement - MDN</a>
 */
interface SVGFEBlendElement : SVGElement {
  const unsigned short SVG_FEBLEND_MODE_COLOR = 15;
  const unsigned short SVG_FEBLEND_MODE_COLOR_BURN = 8;
  const unsigned short SVG_FEBLEND_MODE_COLOR_DODGE = 7;
  const unsigned short SVG_FEBLEND_MODE_DARKEN = 4;
  const unsigned short SVG_FEBLEND_MODE_DIFFERENCE = 11;
  const unsigned short SVG_FEBLEND_MODE_EXCLUSION = 12;
  const unsigned short SVG_FEBLEND_MODE_HARD_LIGHT = 9;
  const unsigned short SVG_FEBLEND_MODE_HUE = 13;
  const unsigned short SVG_FEBLEND_MODE_LIGHTEN = 5;
  const unsigned short SVG_FEBLEND_MODE_LUMINOSITY = 16;
  const unsigned short SVG_FEBLEND_MODE_MULTIPLY = 2;
  const unsigned short SVG_FEBLEND_MODE_NORMAL = 1;
  const unsigned short SVG_FEBLEND_MODE_OVERLAY = 6;
  const unsigned short SVG_FEBLEND_MODE_SATURATION = 14;
  const unsigned short SVG_FEBLEND_MODE_SCREEN = 3;
  const unsigned short SVG_FEBLEND_MODE_SOFT_LIGHT = 10;
  const unsigned short SVG_FEBLEND_MODE_UNKNOWN = 0;
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedString in1;
  readonly attribute SVGAnimatedString in2;
  readonly attribute SVGAnimatedEnumeration mode;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGFEColorMatrixElement interface corresponds to the feColorMatrix element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEColorMatrixElement">SVGFEColorMatrixElement - MDN</a>
 */
interface SVGFEColorMatrixElement : SVGElement {
  const unsigned short SVG_FECOLORMATRIX_TYPE_HUEROTATE = 3;
  const unsigned short SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA = 4;
  const unsigned short SVG_FECOLORMATRIX_TYPE_MATRIX = 1;
  const unsigned short SVG_FECOLORMATRIX_TYPE_SATURATE = 2;
  const unsigned short SVG_FECOLORMATRIX_TYPE_UNKNOWN = 0;
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedString in1;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedEnumeration type;
  readonly attribute SVGAnimatedNumberList values;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGFEComponentTransferElement interface corresponds to the feComponentTransfer element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEComponentTransferElement">SVGFEComponentTransferElement - MDN</a>
 */
interface SVGFEComponentTransferElement : SVGElement {
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedString in1;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGFECompositeElement interface corresponds to the feComposite element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFECompositeElement">SVGFECompositeElement - MDN</a>
 */
interface SVGFECompositeElement : SVGElement {
  const unsigned short SVG_FECOMPOSITE_OPERATOR_ARITHMETIC = 6;
  const unsigned short SVG_FECOMPOSITE_OPERATOR_ATOP = 4;
  const unsigned short SVG_FECOMPOSITE_OPERATOR_IN = 2;
  const unsigned short SVG_FECOMPOSITE_OPERATOR_OUT = 3;
  const unsigned short SVG_FECOMPOSITE_OPERATOR_OVER = 1;
  const unsigned short SVG_FECOMPOSITE_OPERATOR_UNKNOWN = 0;
  const unsigned short SVG_FECOMPOSITE_OPERATOR_XOR = 5;
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedString in1;
  readonly attribute SVGAnimatedString in2;
  readonly attribute SVGAnimatedNumber k1;
  readonly attribute SVGAnimatedNumber k2;
  readonly attribute SVGAnimatedNumber k3;
  readonly attribute SVGAnimatedNumber k4;
  readonly attribute SVGAnimatedEnumeration operator;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGFEConvolveMatrixElement interface corresponds to the feConvolveMatrix element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEConvolveMatrixElement">SVGFEConvolveMatrixElement - MDN</a>
 */
interface SVGFEConvolveMatrixElement : SVGElement {
  const unsigned short SVG_EDGEMODE_DUPLICATE = 1;
  const unsigned short SVG_EDGEMODE_NONE = 3;
  const unsigned short SVG_EDGEMODE_UNKNOWN = 0;
  const unsigned short SVG_EDGEMODE_WRAP = 2;
  readonly attribute SVGAnimatedNumber bias;
  readonly attribute SVGAnimatedNumber divisor;
  readonly attribute SVGAnimatedEnumeration edgeMode;
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedString in1;
  readonly attribute SVGAnimatedNumberList kernelMatrix;
  readonly attribute SVGAnimatedNumber kernelUnitLengthX;
  readonly attribute SVGAnimatedNumber kernelUnitLengthY;
  readonly attribute SVGAnimatedInteger orderX;
  readonly attribute SVGAnimatedInteger orderY;
  readonly attribute SVGAnimatedBoolean preserveAlpha;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedInteger targetX;
  readonly attribute SVGAnimatedInteger targetY;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGFEDiffuseLightingElement interface corresponds to the feDiffuseLighting element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDiffuseLightingElement">SVGFEDiffuseLightingElement - MDN</a>
 */
interface SVGFEDiffuseLightingElement : SVGElement {
  readonly attribute SVGAnimatedNumber diffuseConstant;
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedString in1;
  readonly attribute SVGAnimatedNumber kernelUnitLengthX;
  readonly attribute SVGAnimatedNumber kernelUnitLengthY;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedNumber surfaceScale;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGFEDisplacementMapElement interface corresponds to the feDisplacementMap element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDisplacementMapElement">SVGFEDisplacementMapElement - MDN</a>
 */
interface SVGFEDisplacementMapElement : SVGElement {
  const unsigned short SVG_CHANNEL_A = 4;
  const unsigned short SVG_CHANNEL_B = 3;
  const unsigned short SVG_CHANNEL_G = 2;
  const unsigned short SVG_CHANNEL_R = 1;
  const unsigned short SVG_CHANNEL_UNKNOWN = 0;
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedString in1;
  readonly attribute SVGAnimatedString in2;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedNumber scale;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedEnumeration xChannelSelector;
  readonly attribute SVGAnimatedLength y;
  readonly attribute SVGAnimatedEnumeration yChannelSelector;
};

/**
 * The SVGFEDistantLightElement interface corresponds to the feDistantLight element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDistantLightElement">SVGFEDistantLightElement - MDN</a>
 */
interface SVGFEDistantLightElement : SVGElement {
  readonly attribute SVGAnimatedNumber azimuth;
  readonly attribute SVGAnimatedNumber elevation;
};

/**
 * The SVGFEDropShadowElement interface corresponds to the feDropShadow element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDropShadowElement">SVGFEDropShadowElement - MDN</a>
 */
interface SVGFEDropShadowElement : SVGElement {
  readonly attribute SVGAnimatedNumber dx;
  readonly attribute SVGAnimatedNumber dy;
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedString in1;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedNumber stdDeviationX;
  readonly attribute SVGAnimatedNumber stdDeviationY;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
  void setStdDeviation( float stdDeviationX, float stdDeviationY );
};

/**
 * The SVGFEFloodElement interface corresponds to the feFlood element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFloodElement">SVGFEFloodElement - MDN</a>
 */
interface SVGFEFloodElement : SVGElement {
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGFEFuncAElement interface corresponds to the feFuncA element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncAElement">SVGFEFuncAElement - MDN</a>
 */
interface SVGFEFuncAElement : SVGComponentTransferFunctionElement {
};

/**
 * The SVGFEFuncBElement interface corresponds to the feFuncB element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncBElement">SVGFEFuncBElement - MDN</a>
 */
interface SVGFEFuncBElement : SVGComponentTransferFunctionElement {
};

/**
 * The SVGFEFuncGElement interface corresponds to the feFuncG element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncGElement">SVGFEFuncGElement - MDN</a>
 */
interface SVGFEFuncGElement : SVGComponentTransferFunctionElement {
};

/**
 * The SVGFEFuncRElement interface corresponds to the feFuncR element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncRElement">SVGFEFuncRElement - MDN</a>
 */
interface SVGFEFuncRElement : SVGComponentTransferFunctionElement {
};

/**
 * The SVGFEGaussianBlurElement interface corresponds to the feGaussianBlur element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEGaussianBlurElement">SVGFEGaussianBlurElement - MDN</a>
 */
interface SVGFEGaussianBlurElement : SVGElement {
  const unsigned short SVG_EDGEMODE_DUPLICATE = 1;
  const unsigned short SVG_EDGEMODE_NONE = 3;
  const unsigned short SVG_EDGEMODE_UNKNOWN = 0;
  const unsigned short SVG_EDGEMODE_WRAP = 2;
  readonly attribute SVGAnimatedEnumeration edgeMode;
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedString in1;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedNumber stdDeviationX;
  readonly attribute SVGAnimatedNumber stdDeviationY;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
  void setStdDeviation( float stdDeviationX, float stdDeviationY );
};

/**
 * The SVGFEImageElement interface corresponds to the feImage element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEImageElement">SVGFEImageElement - MDN</a>
 */
interface SVGFEImageElement : SVGElement {
  readonly attribute SVGAnimatedString crossOrigin;
  readonly attribute SVGAnimatedLength height;
  [SameObject]
  readonly attribute SVGAnimatedString href;
  readonly attribute SVGAnimatedPreserveAspectRatio preserveAspectRatio;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGFEMergeElement interface corresponds to the feMerge element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMergeElement">SVGFEMergeElement - MDN</a>
 */
interface SVGFEMergeElement : SVGElement {
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGFEMergeNodeElement interface corresponds to the feMergeNode element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMergeNodeElement">SVGFEMergeNodeElement - MDN</a>
 */
interface SVGFEMergeNodeElement : SVGElement {
  readonly attribute SVGAnimatedString in1;
};

/**
 * The SVGFEMorphologyElement interface corresponds to the feMorphology element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMorphologyElement">SVGFEMorphologyElement - MDN</a>
 */
interface SVGFEMorphologyElement : SVGElement {
  const unsigned short SVG_MORPHOLOGY_OPERATOR_DILATE = 2;
  const unsigned short SVG_MORPHOLOGY_OPERATOR_ERODE = 1;
  const unsigned short SVG_MORPHOLOGY_OPERATOR_UNKNOWN = 0;
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedString in1;
  readonly attribute SVGAnimatedEnumeration operator;
  readonly attribute SVGAnimatedNumber radiusX;
  readonly attribute SVGAnimatedNumber radiusY;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGFEOffsetElement interface corresponds to the feOffset element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEOffsetElement">SVGFEOffsetElement - MDN</a>
 */
interface SVGFEOffsetElement : SVGElement {
  readonly attribute SVGAnimatedNumber dx;
  readonly attribute SVGAnimatedNumber dy;
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedString in1;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGFEPointLightElement interface corresponds to the fePointLight element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFEPointLightElement">SVGFEPointLightElement - MDN</a>
 */
interface SVGFEPointLightElement : SVGElement {
  readonly attribute SVGAnimatedNumber x;
  readonly attribute SVGAnimatedNumber y;
  readonly attribute SVGAnimatedNumber z;
};

/**
 * The SVGFESpecularLightingElement interface corresponds to the feSpecularLighting element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFESpecularLightingElement">SVGFESpecularLightingElement - MDN</a>
 */
interface SVGFESpecularLightingElement : SVGElement {
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedString in1;
  readonly attribute SVGAnimatedNumber kernelUnitLengthX;
  readonly attribute SVGAnimatedNumber kernelUnitLengthY;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedNumber specularConstant;
  readonly attribute SVGAnimatedNumber specularExponent;
  readonly attribute SVGAnimatedNumber surfaceScale;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGFESpotLightElement interface corresponds to the feSpotLight element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFESpotLightElement">SVGFESpotLightElement - MDN</a>
 */
interface SVGFESpotLightElement : SVGElement {
  readonly attribute SVGAnimatedNumber limitingConeAngle;
  readonly attribute SVGAnimatedNumber pointsAtX;
  readonly attribute SVGAnimatedNumber pointsAtY;
  readonly attribute SVGAnimatedNumber pointsAtZ;
  readonly attribute SVGAnimatedNumber specularExponent;
  readonly attribute SVGAnimatedNumber x;
  readonly attribute SVGAnimatedNumber y;
  readonly attribute SVGAnimatedNumber z;
};

/**
 * The SVGFETileElement interface corresponds to the feTile element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFETileElement">SVGFETileElement - MDN</a>
 */
interface SVGFETileElement : SVGElement {
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedString in1;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGFETurbulenceElement interface corresponds to the feTurbulence element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFETurbulenceElement">SVGFETurbulenceElement - MDN</a>
 */
interface SVGFETurbulenceElement : SVGElement {
  const unsigned short SVG_STITCHTYPE_NOSTITCH = 2;
  const unsigned short SVG_STITCHTYPE_STITCH = 1;
  const unsigned short SVG_STITCHTYPE_UNKNOWN = 0;
  const unsigned short SVG_TURBULENCE_TYPE_FRACTALNOISE = 1;
  const unsigned short SVG_TURBULENCE_TYPE_TURBULENCE = 2;
  const unsigned short SVG_TURBULENCE_TYPE_UNKNOWN = 0;
  readonly attribute SVGAnimatedNumber baseFrequencyX;
  readonly attribute SVGAnimatedNumber baseFrequencyY;
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedInteger numOctaves;
  readonly attribute SVGAnimatedString result;
  readonly attribute SVGAnimatedNumber seed;
  readonly attribute SVGAnimatedEnumeration stitchTiles;
  readonly attribute SVGAnimatedEnumeration type;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGFilterElement interface provides access to the properties of filter elements, as well as methods to manipulate them.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGFilterElement">SVGFilterElement - MDN</a>
 */
interface SVGFilterElement : SVGElement {
  readonly attribute SVGAnimatedEnumeration filterUnits;
  readonly attribute SVGAnimatedLength height;
  [SameObject]
  readonly attribute SVGAnimatedString href;
  readonly attribute SVGAnimatedEnumeration primitiveUnits;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGForeignObjectElement interface provides access to the properties of foreignObject elements, as well as methods to manipulate them.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGForeignObjectElement">SVGForeignObjectElement - MDN</a>
 */
[Exposed=Window]
interface SVGForeignObjectElement : SVGGraphicsElement {
  [SameObject]
  readonly attribute SVGAnimatedLength height;
  [SameObject]
  readonly attribute SVGAnimatedLength width;
  [SameObject]
  readonly attribute SVGAnimatedLength x;
  [SameObject]
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGGElement interface corresponds to the g element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGGElement">SVGGElement - MDN</a>
 */
[Exposed=Window]
interface SVGGElement : SVGGraphicsElement {
};

/**
 * The SVGGeometryElement interface represents SVG elements whose rendering is defined by geometry with an equivalent path, and which can be filled and stroked. This includes paths and the basic shapes.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement">SVGGeometryElement - MDN</a>
 */
[Exposed=Window]
interface SVGGeometryElement : SVGGraphicsElement {
  /**
   * The SVGGeometryElement.pathLength property reflects the pathLength attribute and returns the total length of the path, in user units.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement/pathLength">SVGGeometryElement.pathLength - MDN</a>
   */
  [SameObject]
  readonly attribute SVGAnimatedNumber pathLength;
  /**
   * The SVGGeometryElement.getPointAtLength() method returns the point at a given distance along the path.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement/getPointAtLength">SVGGeometryElement.getPointAtLength - MDN</a>
   */
  DOMPoint getPointAtLength( float distance );
  /**
   * The SVGGeometryElement.getTotalLength() method returns the user agent's computed value for the total length of the path in user units.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement/getTotalLength">SVGGeometryElement.getTotalLength - MDN</a>
   */
  float getTotalLength();
  /**
   * The SVGGeometryElement.isPointInFill() method determines whether a given point is within the fill shape of an element. Normal hit testing rules apply; the value of the pointer-events property on the element determines whether a point is considered to be within the fill. The point argument is interpreted as a point in the local coordiante system of the element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement/isPointInFill">SVGGeometryElement.isPointInFill - MDN</a>
   */
  boolean isPointInFill( optional DOMPointInit point );
  /**
   * The SVGGeometryElement.isPointInStroke() method determines whether a given point is within the stroke shape of an element. Normal hit testing rules apply; the value of the pointer-events property on the element determines whether a point is considered to be within the stroke. The point argument is interpreted as a point in the local coordiante system of the element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement/isPointInStroke">SVGGeometryElement.isPointInStroke - MDN</a>
   */
  boolean isPointInStroke( optional DOMPointInit point );
};

/**
 * The SVGGradient interface is a base interface used by SVGLinearGradientElement and SVGRadialGradientElement.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGGradientElement">SVGGradientElement - MDN</a>
 */
[Exposed=Window]
interface SVGGradientElement : SVGElement {
  const unsigned short SVG_SPREADMETHOD_PAD = 1;
  const unsigned short SVG_SPREADMETHOD_REFLECT = 2;
  const unsigned short SVG_SPREADMETHOD_REPEAT = 3;
  const unsigned short SVG_SPREADMETHOD_UNKNOWN = 0;
  [SameObject]
  readonly attribute SVGAnimatedTransformList gradientTransform;
  [SameObject]
  readonly attribute SVGAnimatedEnumeration gradientUnits;
  [SameObject]
  readonly attribute SVGAnimatedString href;
  [SameObject]
  readonly attribute SVGAnimatedEnumeration spreadMethod;
};

/**
 * The SVGGraphicsElement interface represents SVG elements whose primary purpose is to directly render graphics into a group.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement">SVGGraphicsElement - MDN</a>
 */
interface SVGGraphicsElement : SVGElement {
  [SameObject]
  readonly attribute SVGStringList requiredExtensions;
  [SameObject]
  readonly attribute SVGStringList systemLanguage;
  [SameObject]
  readonly attribute SVGAnimatedTransformList transform;
  /**
   * The SVGGraphicsElement.getBBox() allows us to determine the coordinates of the smallest rectangle in which the object fits. The coordinates returned are with respect to the current SVG space (after the application of all geometry attributes on all the elements contained in the target element).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement/getBBox">SVGGraphicsElement.getBBox - MDN</a>
   */
  DOMRect getBBox( optional SVGBoundingBoxOptions options );
  DOMMatrix? getCTM();
  DOMMatrix? getScreenCTM();
};

/**
 * The SVGImageElement interface corresponds to the image element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement">SVGImageElement - MDN</a>
 */
[Exposed=Window]
interface SVGImageElement : SVGGraphicsElement {
  /**
   * The height read-only property of the SVGImageElement interface returns an SVGAnimatedLength corresponding to the height attribute of the given image element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement/height">SVGImageElement.height - MDN</a>
   */
  [SameObject]
  readonly attribute SVGAnimatedLength height;
  [SameObject]
  readonly attribute SVGAnimatedString href;
  /**
   * The preserveAspectRatio read-only property of the SVGImageElement interface returns an SVGAnimatedPreserveAspectRatio corresponding to the preserveAspectRatio attribute of the given image element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement/preserveAspectRatio">SVGImageElement.preserveAspectRatio - MDN</a>
   */
  [SameObject]
  readonly attribute SVGAnimatedPreserveAspectRatio preserveAspectRatio;
  /**
   * The width read-only property of the SVGImageElement interface returns an SVGAnimatedLength corresponding to the width attribute of the given image element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement/width">SVGImageElement.width - MDN</a>
   */
  [SameObject]
  readonly attribute SVGAnimatedLength width;
  /**
   * The x read-only property of the SVGImageElement interface returns an SVGAnimatedLength corresponding to the x attribute of the given image element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement/x">SVGImageElement.x - MDN</a>
   */
  [SameObject]
  readonly attribute SVGAnimatedLength x;
  /**
   * The y read-only property of the SVGImageElement interface returns an SVGAnimatedLength corresponding to the y attribute of the given image element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement/y">SVGImageElement.y - MDN</a>
   */
  [SameObject]
  readonly attribute SVGAnimatedLength y;
  attribute DOMString? crossOrigin;
};

/**
 * The SVGLength interface correspond to the length basic data type.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGLength">SVGLength - MDN</a>
 */
[Exposed=Window]
interface SVGLength {
  const unsigned short SVG_LENGTHTYPE_CM = 6;
  const unsigned short SVG_LENGTHTYPE_EMS = 3;
  const unsigned short SVG_LENGTHTYPE_EXS = 4;
  const unsigned short SVG_LENGTHTYPE_IN = 8;
  const unsigned short SVG_LENGTHTYPE_MM = 7;
  const unsigned short SVG_LENGTHTYPE_NUMBER = 1;
  const unsigned short SVG_LENGTHTYPE_PC = 10;
  const unsigned short SVG_LENGTHTYPE_PERCENTAGE = 2;
  const unsigned short SVG_LENGTHTYPE_PT = 9;
  const unsigned short SVG_LENGTHTYPE_PX = 5;
  const unsigned short SVG_LENGTHTYPE_UNKNOWN = 0;
  readonly attribute unsigned short unitType;
  attribute float value;
  attribute DOMString valueAsString;
  attribute float valueInSpecifiedUnits;
  void convertToSpecifiedUnits( unsigned short unitType );
  void newValueSpecifiedUnits( unsigned short unitType, float valueInSpecifiedUnits );
};

/**
 * The SVGLengthList defines a list of SVGLength objects.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGLengthList">SVGLengthList - MDN</a>
 */
[Exposed=Window]
interface SVGLengthList {
  readonly attribute unsigned long length;
  readonly attribute unsigned long numberOfItems;
  SVGLength appendItem( SVGLength newItem );
  void clear();
  SVGLength initialize( SVGLength newItem );
  SVGLength insertItemBefore( SVGLength newItem, unsigned long index );
  SVGLength removeItem( unsigned long index );
  SVGLength replaceItem( SVGLength newItem, unsigned long index );
  getter SVGLength getItem( unsigned long index );
  /**
   * The SVGLengthList defines a list of SVGLength objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGLengthList">SVGLengthList - MDN</a>
   */
  setter void ( unsigned long index, SVGLength newItem );
};

/**
 * The SVGLineElement interface provides access to the properties of line elements, as well as methods to manipulate them.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGLineElement">SVGLineElement - MDN</a>
 */
[Exposed=Window]
interface SVGLineElement : SVGGeometryElement {
  [SameObject]
  readonly attribute SVGAnimatedLength x1;
  [SameObject]
  readonly attribute SVGAnimatedLength x2;
  [SameObject]
  readonly attribute SVGAnimatedLength y1;
  [SameObject]
  readonly attribute SVGAnimatedLength y2;
};

/**
 * The SVGLinearGradientElement interface corresponds to the linearGradient element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGLinearGradientElement">SVGLinearGradientElement - MDN</a>
 */
[Exposed=Window]
interface SVGLinearGradientElement : SVGGradientElement {
  [SameObject]
  readonly attribute SVGAnimatedLength x1;
  [SameObject]
  readonly attribute SVGAnimatedLength x2;
  [SameObject]
  readonly attribute SVGAnimatedLength y1;
  [SameObject]
  readonly attribute SVGAnimatedLength y2;
};

[Exposed=Window]
interface SVGMarkerElement : SVGElement {
  const unsigned short SVG_MARKERUNITS_STROKEWIDTH = 2;
  const unsigned short SVG_MARKERUNITS_UNKNOWN = 0;
  const unsigned short SVG_MARKERUNITS_USERSPACEONUSE = 1;
  const unsigned short SVG_MARKER_ORIENT_ANGLE = 2;
  const unsigned short SVG_MARKER_ORIENT_AUTO = 1;
  const unsigned short SVG_MARKER_ORIENT_UNKNOWN = 0;
  [SameObject]
  readonly attribute SVGAnimatedLength markerHeight;
  [SameObject]
  readonly attribute SVGAnimatedEnumeration markerUnits;
  [SameObject]
  readonly attribute SVGAnimatedLength markerWidth;
  [SameObject]
  readonly attribute SVGAnimatedAngle orientAngle;
  [SameObject]
  readonly attribute SVGAnimatedEnumeration orientType;
  [SameObject]
  readonly attribute SVGAnimatedPreserveAspectRatio preserveAspectRatio;
  [SameObject]
  readonly attribute SVGAnimatedLength refX;
  [SameObject]
  readonly attribute SVGAnimatedLength refY;
  [SameObject]
  readonly attribute SVGAnimatedRect viewBox;
  attribute DOMString orient;
  void setOrientToAngle( SVGAngle angle );
  void setOrientToAuto();
};

/**
 * The SVGMaskElement interface provides access to the properties of mask elements, as well as methods to manipulate them.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGMaskElement">SVGMaskElement - MDN</a>
 */
[Exposed=Window]
interface SVGMaskElement : SVGElement {
  readonly attribute SVGAnimatedLength height;
  readonly attribute SVGAnimatedEnumeration maskContentUnits;
  readonly attribute SVGAnimatedEnumeration maskUnits;
  readonly attribute SVGAnimatedLength width;
  readonly attribute SVGAnimatedLength x;
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGMetadataElement interface corresponds to the metadata element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGMetadataElement">SVGMetadataElement - MDN</a>
 */
[Exposed=Window]
interface SVGMetadataElement : SVGElement {
};

/**
 * The SVGNumber interface corresponds to the number basic data type.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber">SVGNumber - MDN</a>
 */
[Exposed=Window]
interface SVGNumber {
  attribute float value;
};

/**
 * The SVGNumberList defines a list of SVGNumber objects.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGNumberList">SVGNumberList - MDN</a>
 */
[Exposed=Window]
interface SVGNumberList {
  readonly attribute unsigned long length;
  readonly attribute unsigned long numberOfItems;
  SVGNumber appendItem( SVGNumber newItem );
  void clear();
  SVGNumber initialize( SVGNumber newItem );
  SVGNumber insertItemBefore( SVGNumber newItem, unsigned long index );
  SVGNumber removeItem( unsigned long index );
  SVGNumber replaceItem( SVGNumber newItem, unsigned long index );
  getter SVGNumber getItem( unsigned long index );
  /**
   * The SVGNumberList defines a list of SVGNumber objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGNumberList">SVGNumberList - MDN</a>
   */
  setter void ( unsigned long index, SVGNumber newItem );
};

/**
 * The SVGPathElement interface corresponds to the path element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement">SVGPathElement - MDN</a>
 */
[Exposed=Window]
interface SVGPathElement : SVGGeometryElement {
};

/**
 * The SVGPatternElement interface corresponds to the pattern element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGPatternElement">SVGPatternElement - MDN</a>
 */
[Exposed=Window]
interface SVGPatternElement : SVGElement {
  [SameObject]
  readonly attribute SVGAnimatedLength height;
  [SameObject]
  readonly attribute SVGAnimatedString href;
  [SameObject]
  readonly attribute SVGAnimatedEnumeration patternContentUnits;
  [SameObject]
  readonly attribute SVGAnimatedTransformList patternTransform;
  [SameObject]
  readonly attribute SVGAnimatedEnumeration patternUnits;
  [SameObject]
  readonly attribute SVGAnimatedPreserveAspectRatio preserveAspectRatio;
  [SameObject]
  readonly attribute SVGAnimatedRect viewBox;
  [SameObject]
  readonly attribute SVGAnimatedLength width;
  [SameObject]
  readonly attribute SVGAnimatedLength x;
  [SameObject]
  readonly attribute SVGAnimatedLength y;
};

[Exposed=Window]
interface SVGPointList {
  readonly attribute unsigned long length;
  readonly attribute unsigned long numberOfItems;
  DOMPoint appendItem( DOMPoint newItem );
  void clear();
  DOMPoint initialize( DOMPoint newItem );
  DOMPoint insertItemBefore( DOMPoint newItem, unsigned long index );
  DOMPoint removeItem( unsigned long index );
  DOMPoint replaceItem( DOMPoint newItem, unsigned long index );
  getter DOMPoint getItem( unsigned long index );
  setter void ( unsigned long index, DOMPoint newItem );
};

/**
 * The SVGPolygonElement interface provides access to the properties of polygon elements, as well as methods to manipulate them.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGPolygonElement">SVGPolygonElement - MDN</a>
 */
[Exposed=Window]
interface SVGPolygonElement : SVGGeometryElement {
  [SameObject]
  readonly attribute SVGPointList animatedPoints;
  [SameObject]
  readonly attribute SVGPointList points;
};

/**
 * The SVGPolylineElement interface provides access to the properties of polyline elements, as well as methods to manipulate them.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGPolylineElement">SVGPolylineElement - MDN</a>
 */
[Exposed=Window]
interface SVGPolylineElement : SVGGeometryElement {
  [SameObject]
  readonly attribute SVGPointList animatedPoints;
  [SameObject]
  readonly attribute SVGPointList points;
};

/**
 * The SVGPreserveAspectRatio interface corresponds to the preserveAspectRatio attribute, which is available for some of SVG's elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio">SVGPreserveAspectRatio - MDN</a>
 */
[Exposed=Window]
interface SVGPreserveAspectRatio {
  const unsigned short SVG_MEETORSLICE_MEET = 1;
  const unsigned short SVG_MEETORSLICE_SLICE = 2;
  const unsigned short SVG_MEETORSLICE_UNKNOWN = 0;
  const unsigned short SVG_PRESERVEASPECTRATIO_NONE = 1;
  const unsigned short SVG_PRESERVEASPECTRATIO_UNKNOWN = 0;
  const unsigned short SVG_PRESERVEASPECTRATIO_XMAXYMAX = 10;
  const unsigned short SVG_PRESERVEASPECTRATIO_XMAXYMID = 7;
  const unsigned short SVG_PRESERVEASPECTRATIO_XMAXYMIN = 4;
  const unsigned short SVG_PRESERVEASPECTRATIO_XMIDYMAX = 9;
  const unsigned short SVG_PRESERVEASPECTRATIO_XMIDYMID = 6;
  const unsigned short SVG_PRESERVEASPECTRATIO_XMIDYMIN = 3;
  const unsigned short SVG_PRESERVEASPECTRATIO_XMINYMAX = 8;
  const unsigned short SVG_PRESERVEASPECTRATIO_XMINYMID = 5;
  const unsigned short SVG_PRESERVEASPECTRATIO_XMINYMIN = 2;
  attribute unsigned short align;
  attribute unsigned short meetOrSlice;
};

/**
 * The SVGRadialGradientElement interface corresponds to the RadialGradient element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGRadialGradientElement">SVGRadialGradientElement - MDN</a>
 */
[Exposed=Window]
interface SVGRadialGradientElement : SVGGradientElement {
  [SameObject]
  readonly attribute SVGAnimatedLength cx;
  [SameObject]
  readonly attribute SVGAnimatedLength cy;
  [SameObject]
  readonly attribute SVGAnimatedLength fr;
  [SameObject]
  readonly attribute SVGAnimatedLength fx;
  [SameObject]
  readonly attribute SVGAnimatedLength fy;
  [SameObject]
  readonly attribute SVGAnimatedLength r;
};

/**
 * The SVGRectElement interface provides access to the properties of rect elements, as well as methods to manipulate them.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGRectElement">SVGRectElement - MDN</a>
 */
[Exposed=Window]
interface SVGRectElement : SVGGeometryElement {
  [SameObject]
  readonly attribute SVGAnimatedLength height;
  [SameObject]
  readonly attribute SVGAnimatedLength rx;
  [SameObject]
  readonly attribute SVGAnimatedLength ry;
  [SameObject]
  readonly attribute SVGAnimatedLength width;
  [SameObject]
  readonly attribute SVGAnimatedLength x;
  [SameObject]
  readonly attribute SVGAnimatedLength y;
};

/**
 * The SVGSVGElement interface provides access to the properties of svg elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement">SVGSVGElement - MDN</a>
 */
[Exposed=Window]
interface SVGSVGElement : SVGGraphicsElement {
  const unsigned short SVG_ZOOMANDPAN_DISABLE = 1;
  const unsigned short SVG_ZOOMANDPAN_MAGNIFY = 2;
  const unsigned short SVG_ZOOMANDPAN_UNKNOWN = 0;
  [SameObject]
  readonly attribute DOMPointReadOnly currentTranslate;
  [SameObject]
  readonly attribute SVGAnimatedLength height;
  [SameObject]
  readonly attribute SVGAnimatedPreserveAspectRatio preserveAspectRatio;
  [SameObject]
  readonly attribute SVGAnimatedRect viewBox;
  [SameObject]
  readonly attribute SVGAnimatedLength width;
  [SameObject]
  readonly attribute SVGAnimatedLength x;
  [SameObject]
  readonly attribute SVGAnimatedLength y;
  attribute float currentScale;
  /**
   * The onafterprint property of the WindowEventHandlers mixin is the EventHandler for processing afterprint events for the current window. These events are raised after the user prints, or if they abort the print dialog.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint">WindowEventHandlers.onafterprint - MDN</a>
   */
  attribute NullableEventHandler onafterprint;
  /**
   * The onbeforeprint property of the WindowEventHandlers mixin is the EventHandler for processing beforeprint events for the current window. These events are raised before the print dialog window is opened.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeprint">WindowEventHandlers.onbeforeprint - MDN</a>
   */
  attribute NullableEventHandler onbeforeprint;
  /**
   * The onbeforeunload property of the WindowEventHandlers mixin is the EventHandler for processing beforeunload events. These events fire when a window is about to unload its resources. At this point, the document is still visible and the event is still cancelable.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload">WindowEventHandlers.onbeforeunload - MDN</a>
   */
  attribute NullableOnBeforeUnloadEventHandler onbeforeunload;
  /**
   * The WindowEventHandlers.onhashchange property of the WindowEventHandlers mixin is the EventHandler for processing hashchange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange">WindowEventHandlers.onhashchange - MDN</a>
   */
  attribute NullableEventHandler onhashchange;
  /**
   * The onlanguagechange property of the WindowEventHandlers mixin is the EventHandler for processing languagechange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange">WindowEventHandlers.onlanguagechange - MDN</a>
   */
  attribute NullableEventHandler onlanguagechange;
  /**
   * The onmessage property of the WindowEventHandlers mixin is the EventHandler called whenever an object receives a message event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessage">WindowEventHandlers.onmessage - MDN</a>
   */
  attribute NullableEventHandler onmessage;
  /**
   * The onmessageerror event handler of the WindowEventHandlers interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on a window—that is, when it receives a message that cannot be deserialized.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessageerror">WindowEventHandlers.onmessageerror - MDN</a>
   */
  attribute NullableEventHandler onmessageerror;
  attribute NullableEventHandler onoffline;
  attribute NullableEventHandler ononline;
  attribute NullableEventHandler onpagehide;
  attribute NullableEventHandler onpageshow;
  /**
   * The onpopstate property of the WindowEventHandlers mixin is the EventHandler for processing popstate events on the window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate">WindowEventHandlers.onpopstate - MDN</a>
   */
  attribute NullableEventHandler onpopstate;
  /**
   * The onrejectionhandled property of the WindowEventHandlers mixin is the EventHandler for processing rejectionhandled events. These events are raised when Promises are rejected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled">WindowEventHandlers.onrejectionhandled - MDN</a>
   */
  attribute NullableEventHandler onrejectionhandled;
  /**
   * The onstorage property of the WindowEventHandlers mixin is an EventHandler for processing storage events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage">WindowEventHandlers.onstorage - MDN</a>
   */
  attribute NullableEventHandler onstorage;
  /**
   * The onunhandledrejection property of the WindowEventHandlers mixin is the EventHandler for processing unhandledrejection events. These events are raised for unhandled Promise rejections.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection">WindowEventHandlers.onunhandledrejection - MDN</a>
   */
  attribute NullableEventHandler onunhandledrejection;
  /**
   * The onunload property of the WindowEventHandlers mixin is the EventHandler for processing unload events. These events fire when the window is unloading its content and resources. The resource removal is processed after the unload event occurs.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload">WindowEventHandlers.onunload - MDN</a>
   */
  attribute NullableEventHandler onunload;
  attribute unsigned short zoomAndPan;
  boolean checkEnclosure( SVGElement element, DOMRectReadOnly rect );
  boolean checkIntersection( SVGElement element, DOMRectReadOnly rect );
  SVGAngle createSVGAngle();
  SVGLength createSVGLength();
  DOMMatrix createSVGMatrix();
  SVGNumber createSVGNumber();
  DOMPoint createSVGPoint();
  DOMRect createSVGRect();
  SVGTransform createSVGTransform();
  SVGTransform createSVGTransformFromMatrix( DOMMatrixReadOnly matrix );
  void deselectAll();
  void forceRedraw();
  Element getElementById( DOMString elementId );
  NodeList getEnclosureList( DOMRectReadOnly rect, SVGElement? referenceElement );
  NodeList getIntersectionList( DOMRectReadOnly rect, SVGElement? referenceElement );
  unsigned long suspendRedraw( unsigned long maxWaitMilliseconds );
  void unsuspendRedraw( unsigned long suspendHandleID );
  void unsuspendRedrawAll();
};

/**
 * The SVGScriptElement interface corresponds to the SVG script element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGScriptElement">SVGScriptElement - MDN</a>
 */
[Exposed=Window]
interface SVGScriptElement : SVGElement {
  [SameObject]
  readonly attribute SVGAnimatedString href;
  attribute DOMString? crossOrigin;
  attribute DOMString type;
};

/**
 * The SVGStopElement interface corresponds to the stop element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGStopElement">SVGStopElement - MDN</a>
 */
[Exposed=Window]
interface SVGStopElement : SVGElement {
  [SameObject]
  readonly attribute SVGAnimatedNumber offset;
};

/**
 * The SVGStringList defines a list of DOMString objects.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList">SVGStringList - MDN</a>
 */
[Exposed=Window]
interface SVGStringList {
  readonly attribute unsigned long length;
  readonly attribute unsigned long numberOfItems;
  DOMString appendItem( DOMString newItem );
  void clear();
  DOMString initialize( DOMString newItem );
  DOMString insertItemBefore( DOMString newItem, unsigned long index );
  DOMString removeItem( unsigned long index );
  DOMString replaceItem( DOMString newItem, unsigned long index );
  getter DOMString getItem( unsigned long index );
  /**
   * The SVGStringList defines a list of DOMString objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList">SVGStringList - MDN</a>
   */
  setter void ( unsigned long index, DOMString newItem );
};

/**
 * The SVGStyleElement interface corresponds to the SVG style element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGStyleElement">SVGStyleElement - MDN</a>
 */
[Exposed=Window]
interface SVGStyleElement : SVGElement {
  readonly attribute CSSStyleSheet? sheet;
  attribute DOMString media;
  attribute DOMString title;
  attribute DOMString type;
};

/**
 * The SVGSwitchElement interface corresponds to the switch element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGSwitchElement">SVGSwitchElement - MDN</a>
 */
[Exposed=Window]
interface SVGSwitchElement : SVGGraphicsElement {
};

/**
 * The SVGSymbolElement interface corresponds to the symbol element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGSymbolElement">SVGSymbolElement - MDN</a>
 */
[Exposed=Window]
interface SVGSymbolElement : SVGGraphicsElement {
  [SameObject]
  readonly attribute SVGAnimatedPreserveAspectRatio preserveAspectRatio;
  [SameObject]
  readonly attribute SVGAnimatedRect viewBox;
};

/**
 * The SVGTSpanElement interface represents a tspan element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGTSpanElement">SVGTSpanElement - MDN</a>
 */
[Exposed=Window]
interface SVGTSpanElement : SVGTextPositioningElement {
};

/**
 * The SVGTextContentElement interface is implemented by elements that support rendering child text content. It is inherited by various text-related interfaces, such as SVGTextElement, SVGTSpanElement, SVGTRefElement, SVGAltGlyphElement and SVGTextPathElement.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGTextContentElement">SVGTextContentElement - MDN</a>
 */
[Exposed=Window]
interface SVGTextContentElement : SVGGraphicsElement {
  const unsigned short LENGTHADJUST_SPACING = 1;
  const unsigned short LENGTHADJUST_SPACINGANDGLYPHS = 2;
  const unsigned short LENGTHADJUST_UNKNOWN = 0;
  [SameObject]
  readonly attribute SVGAnimatedEnumeration lengthAdjust;
  [SameObject]
  readonly attribute SVGAnimatedLength textLength;
  long getCharNumAtPosition( optional DOMPointInit point );
  float getComputedTextLength();
  DOMPoint getEndPositionOfChar( unsigned long charnum );
  DOMRect getExtentOfChar( unsigned long charnum );
  long getNumberOfChars();
  float getRotationOfChar( unsigned long charnum );
  DOMPoint getStartPositionOfChar( unsigned long charnum );
  float getSubStringLength( unsigned long charnum, unsigned long nchars );
  void selectSubString( unsigned long charnum, unsigned long nchars );
};

/**
 * The SVGTextElement interface corresponds to the text elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGTextElement">SVGTextElement - MDN</a>
 */
[Exposed=Window]
interface SVGTextElement : SVGTextPositioningElement {
};

/**
 * The SVGTextPathElement interface corresponds to the textPath element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPathElement">SVGTextPathElement - MDN</a>
 */
[Exposed=Window]
interface SVGTextPathElement : SVGTextContentElement {
  const unsigned short TEXTPATH_METHODTYPE_ALIGN = 1;
  const unsigned short TEXTPATH_METHODTYPE_STRETCH = 2;
  const unsigned short TEXTPATH_METHODTYPE_UNKNOWN = 0;
  const unsigned short TEXTPATH_SPACINGTYPE_AUTO = 1;
  const unsigned short TEXTPATH_SPACINGTYPE_EXACT = 2;
  const unsigned short TEXTPATH_SPACINGTYPE_UNKNOWN = 0;
  [SameObject]
  readonly attribute SVGAnimatedString href;
  [SameObject]
  readonly attribute SVGAnimatedEnumeration method;
  [SameObject]
  readonly attribute SVGAnimatedEnumeration spacing;
  [SameObject]
  readonly attribute SVGAnimatedLength startOffset;
};

/**
 * The SVGTextPositioningElement interface is implemented by elements that support attributes that position individual text glyphs. It is inherited by SVGTextElement, SVGTSpanElement, SVGTRefElement and SVGAltGlyphElement.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPositioningElement">SVGTextPositioningElement - MDN</a>
 */
[Exposed=Window]
interface SVGTextPositioningElement : SVGTextContentElement {
  [SameObject]
  readonly attribute SVGAnimatedLengthList dx;
  [SameObject]
  readonly attribute SVGAnimatedLengthList dy;
  [SameObject]
  readonly attribute SVGAnimatedNumberList rotate;
  [SameObject]
  readonly attribute SVGAnimatedLengthList x;
  [SameObject]
  readonly attribute SVGAnimatedLengthList y;
};

/**
 * The SVGTitleElement interface corresponds to the title element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGTitleElement">SVGTitleElement - MDN</a>
 */
[Exposed=Window]
interface SVGTitleElement : SVGElement {
};

/**
 * SVGTransform is the interface for one of the component transformations within an SVGTransformList; thus, an SVGTransform object corresponds to a single component (e.g., scale(…) or matrix(…)) within a transform attribute.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform">SVGTransform - MDN</a>
 */
[Exposed=Window]
interface SVGTransform {
  const unsigned short SVG_TRANSFORM_MATRIX = 1;
  const unsigned short SVG_TRANSFORM_ROTATE = 4;
  const unsigned short SVG_TRANSFORM_SCALE = 3;
  const unsigned short SVG_TRANSFORM_SKEWX = 5;
  const unsigned short SVG_TRANSFORM_SKEWY = 6;
  const unsigned short SVG_TRANSFORM_TRANSLATE = 2;
  const unsigned short SVG_TRANSFORM_UNKNOWN = 0;
  readonly attribute float angle;
  [SameObject]
  readonly attribute DOMMatrix matrix;
  readonly attribute unsigned short type;
  void setMatrix( DOMMatrixReadOnly matrix );
  void setRotate( float angle, float cx, float cy );
  void setScale( float sx, float sy );
  void setSkewX( float angle );
  void setSkewY( float angle );
  void setTranslate( float tx, float ty );
};

/**
 * The SVGTransformList defines a list of SVGTransform objects.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList">SVGTransformList - MDN</a>
 */
[Exposed=Window]
interface SVGTransformList {
  readonly attribute unsigned long length;
  readonly attribute unsigned long numberOfItems;
  SVGTransform appendItem( SVGTransform newItem );
  void clear();
  SVGTransform? consolidate();
  SVGTransform createSVGTransformFromMatrix( DOMMatrixReadOnly matrix );
  SVGTransform initialize( SVGTransform newItem );
  SVGTransform insertItemBefore( SVGTransform newItem, unsigned long index );
  SVGTransform removeItem( unsigned long index );
  SVGTransform replaceItem( SVGTransform newItem, unsigned long index );
  getter SVGTransform getItem( unsigned long index );
  /**
   * The SVGTransformList defines a list of SVGTransform objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList">SVGTransformList - MDN</a>
   */
  setter void ( unsigned long index, SVGTransform newItem );
};

/**
 * The SVGUnitTypes interface defines a commonly used set of constants used for reflecting gradientUnits, patternContentUnits and other similar attributes.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGUnitTypes">SVGUnitTypes - MDN</a>
 */
[Exposed=Window]
interface SVGUnitTypes {
  const unsigned short SVG_UNIT_TYPE_OBJECTBOUNDINGBOX = 2;
  const unsigned short SVG_UNIT_TYPE_UNKNOWN = 0;
  const unsigned short SVG_UNIT_TYPE_USERSPACEONUSE = 1;
};

[Exposed=Window]
interface SVGUnknownElement : SVGGraphicsElement {
};

/**
 * The SVGUseElement interface corresponds to the use element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGUseElement">SVGUseElement - MDN</a>
 */
[Exposed=Window]
interface SVGUseElement : SVGGraphicsElement {
  [SameObject]
  readonly attribute SVGElement? animatedInstanceRoot;
  [SameObject]
  readonly attribute SVGAnimatedLength height;
  [SameObject]
  readonly attribute SVGAnimatedString href;
  [SameObject]
  readonly attribute SVGElement? instanceRoot;
  [SameObject]
  readonly attribute SVGAnimatedLength width;
  [SameObject]
  readonly attribute SVGAnimatedLength x;
  [SameObject]
  readonly attribute SVGAnimatedLength y;
};

[Exposed=Window]
interface SVGUseElementShadowRoot : ShadowRoot {
};

/**
 * The SVGViewElement interface provides access to the properties of view elements, as well as methods to manipulate them.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGViewElement">SVGViewElement - MDN</a>
 */
[Exposed=Window]
interface SVGViewElement : SVGElement {
  const unsigned short SVG_ZOOMANDPAN_DISABLE = 1;
  const unsigned short SVG_ZOOMANDPAN_MAGNIFY = 2;
  const unsigned short SVG_ZOOMANDPAN_UNKNOWN = 0;
  [SameObject]
  readonly attribute SVGAnimatedPreserveAspectRatio preserveAspectRatio;
  [SameObject]
  readonly attribute SVGAnimatedRect viewBox;
  attribute unsigned short zoomAndPan;
};

/**
 * The Screen interface represents a screen, usually the one on which the current window is being rendered, and is obtained using window.screen.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Screen">Screen - MDN</a>
 */
[Exposed=Window]
interface Screen {
  readonly attribute long availHeight;
  readonly attribute long availWidth;
  readonly attribute unsigned long colorDepth;
  readonly attribute long height;
  [SameObject]
  readonly attribute ScreenOrientation orientation;
  readonly attribute unsigned long pixelDepth;
  readonly attribute long width;
};

/**
 * The ScreenOrientation interface of the the Screen Orientation API provides information about the current orientation of the document.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation">ScreenOrientation - MDN</a>
 */
[Exposed=Window]
interface ScreenOrientation : EventTarget {
  /**
   * The angle read-only property of the ScreenOrientation interface returns the document's current orientation angle.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/angle">ScreenOrientation.angle - MDN</a>
   */
  readonly attribute unsigned short angle;
  /**
   * The type read-only property of the ScreenOrientation interface returns the document's current orientation type, one of "portrait-primary", "portrait-secondary", "landscape-primary", or "landscape-secondary".
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/type">ScreenOrientation.type - MDN</a>
   */
  readonly attribute OrientationType type;
  attribute NullableEventHandler onchange;
  /**
   * The lock() property of the ScreenOrientation interface locks the orientation of the containing document to its default orientation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/lock">ScreenOrientation.lock - MDN</a>
   */
  Promise<void> lock( OrientationLockType orientation );
  /**
   * The unlock() property of the ScreenOrientation interface unlocks the orientation of the containing document from its default orientation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/unlock">ScreenOrientation.unlock - MDN</a>
   */
  void unlock();
};

/**
 * The ScriptProcessorNode interface allows the generation, processing, or analyzing of audio using JavaScript.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode">ScriptProcessorNode - MDN</a>
 */
[Exposed=Window]
interface ScriptProcessorNode : AudioNode {
  /**
   * The following example shows basic usage of a ScriptProcessorNode to take a track loaded via AudioContext.decodeAudioData(), process it, adding a bit of white noise to each audio sample of the input track (buffer) and play it through the AudioDestinationNode. For each channel and each sample frame, the scriptNode.onaudioprocess function takes the associated audioProcessingEvent and uses it to loop through each channel of the input buffer, and each sample in each channel, and add a small amount of white noise, before setting that result to be the output sample in each case.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/bufferSize">ScriptProcessorNode.bufferSize - MDN</a>
   */
  readonly attribute long bufferSize;
  /**
   * The following example shows basic usage of a ScriptProcessorNode to take a track loaded via AudioContext.decodeAudioData(), process it, adding a bit of white noise to each audio sample of the input track (buffer) and play it through the AudioDestinationNode. For each channel and each sample frame, the scriptNode.onaudioprocess function takes the associated audioProcessingEvent and uses it to loop through each channel of the input buffer, and each sample in each channel, and add a small amount of white noise, before setting that result to be the output sample in each case.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/onaudioprocess">ScriptProcessorNode.onaudioprocess - MDN</a>
   */
  attribute NullableEventHandler onaudioprocess;
  /**
   * The audioprocess event of the ScriptProcessorNode interface is fired when an input buffer of a script processor is ready to be processed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/audioprocess_event">audioprocess event - MDN</a>
   */
  event AudioProcessingEvent audioprocess;
};

/**
 * The SecurityPolicyViolationEvent interface inherits from Event, and represents the event object of an event sent on a document or worker when its content security policy is violated.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent">SecurityPolicyViolationEvent - MDN</a>
 */
[Exposed=(Window,Worker)]
interface SecurityPolicyViolationEvent : Event {
  /**
   * The blockedURI read-only property of the SecurityPolicyViolationEvent interface is a USVString representing the URI of the resource that was blocked because it violates a policy.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent/blockedURI">SecurityPolicyViolationEvent.blockedURI - MDN</a>
   */
  readonly attribute USVString blockedURI;
  readonly attribute USVString blockedURL;
  readonly attribute unsigned long colno;
  /**
   * The columnNumber read-only property of the SecurityPolicyViolationEvent interface is the column number in the document or worker at which the violation occurred.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent/columnNumber">SecurityPolicyViolationEvent.columnNumber - MDN</a>
   */
  readonly attribute unsigned long columnNumber;
  /**
   * The disposition read-only property of the SecurityPolicyViolationEvent interface indicates how the violated policy is configured to be treated by the user agent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent/disposition">SecurityPolicyViolationEvent.disposition - MDN</a>
   */
  readonly attribute SecurityPolicyViolationEventDisposition disposition;
  /**
   * The documentURI read-only property of the SecurityPolicyViolationEvent interface is a USVString representing the URI of the document or worker in which the violation was found.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent/documentURI">SecurityPolicyViolationEvent.documentURI - MDN</a>
   */
  readonly attribute USVString documentURI;
  readonly attribute USVString documentURL;
  /**
   * The effectiveDirective read-only property of the SecurityPolicyViolationEvent interface is a DOMString representing the directive whose enforcement uncovered the violation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent/effectiveDirective">SecurityPolicyViolationEvent.effectiveDirective - MDN</a>
   */
  readonly attribute DOMString effectiveDirective;
  /**
   * The lineNumber read-only property of the SecurityPolicyViolationEvent interface is the line number in the document or worker at which the violation occurred.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent/lineNumber">SecurityPolicyViolationEvent.lineNumber - MDN</a>
   */
  readonly attribute unsigned long lineNumber;
  readonly attribute unsigned long lineno;
  /**
   * The originalPolicy read-only property of the SecurityPolicyViolationEvent interface is a DOMString containing the policy whose enforcement uncovered the violation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent/originalPolicy">SecurityPolicyViolationEvent.originalPolicy - MDN</a>
   */
  readonly attribute DOMString originalPolicy;
  /**
   * The referrer read-only property of the SecurityPolicyViolationEvent interface is a USVString representing the referrer of the resources whose policy was violated. This will be a URL or null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent/referrer">SecurityPolicyViolationEvent.referrer - MDN</a>
   */
  readonly attribute USVString referrer;
  /**
   * The sample read-only property of the SecurityPolicyViolationEvent interface is a DOMString representing a sample of the resource that caused the violation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent/sample">SecurityPolicyViolationEvent.sample - MDN</a>
   */
  readonly attribute DOMString sample;
  /**
   * The sourceFile read-only property of the SecurityPolicyViolationEvent interface is a USVString representing the URI of the document or worker in which the violation was found.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent/sourceFile">SecurityPolicyViolationEvent.sourceFile - MDN</a>
   */
  readonly attribute USVString sourceFile;
  /**
   * The statusCode read-only property of the SecurityPolicyViolationEvent interface is a number representing the HTTP status code of the document or worker in which the violation occurred.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent/statusCode">SecurityPolicyViolationEvent.statusCode - MDN</a>
   */
  readonly attribute unsigned short statusCode;
  /**
   * The violatedDirective read-only property of the SecurityPolicyViolationEvent interface is a DOMString representing the directive whose enforcement uncovered the violation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent/violatedDirective">SecurityPolicyViolationEvent.violatedDirective - MDN</a>
   */
  readonly attribute DOMString violatedDirective;
  /**
   * The SecurityPolicyViolationEvent constructor creates a new SecurityPolicyViolationEvent object instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent/SecurityPolicyViolationEvent">SecurityPolicyViolationEvent.SecurityPolicyViolationEvent - MDN</a>
   */
  constructor( DOMString type, optional SecurityPolicyViolationEventInit eventInitDict );
};

/**
 * A Selection object represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination or manipulation, call window.getSelection().
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection">Selection - MDN</a>
 */
[Exposed=Window]
interface Selection {
  /**
   * The Selection.anchorNode read-only property returns the Node in which the selection begins.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/anchorNode">Selection.anchorNode - MDN</a>
   */
  readonly attribute Node? anchorNode;
  /**
   * The Selection.anchorOffset read-only property returns the number of characters that the selection's anchor is offset within the Selection.anchorNode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/anchorOffset">Selection.anchorOffset - MDN</a>
   */
  readonly attribute unsigned long anchorOffset;
  /**
   * The Selection.focusNode read-only property returns the Node in which the selection ends.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/focusNode">Selection.focusNode - MDN</a>
   */
  readonly attribute Node? focusNode;
  /**
   * The Selection.focusOffset read-only property returns the number of characters that the selection's focus is offset within the Selection.focusNode.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/focusOffset">Selection.focusOffset - MDN</a>
   */
  readonly attribute unsigned long focusOffset;
  /**
   * The Selection.isCollapsed read-only property returns a Boolean which indicates whether or not there is currently any text selected. No text is selected when the selection's start and end points are at the same position in the content.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/isCollapsed">Selection.isCollapsed - MDN</a>
   */
  readonly attribute boolean isCollapsed;
  /**
   * The Selection.rangeCount read-only property returns the number of ranges in the selection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/rangeCount">Selection.rangeCount - MDN</a>
   */
  readonly attribute unsigned long rangeCount;
  /**
   * The type read-only property of the Selection interface returns a DOMString describing the type of the current selection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/type">Selection.type - MDN</a>
   */
  readonly attribute DOMString type;
  /**
   * The Selection.addRange() method adds a Range to a Selection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/addRange">Selection.addRange - MDN</a>
   */
  void addRange( Range range );
  /**
   * The Selection.collapse() method collapses the current selection to a single point. The document is not modified. If the content is focused and editable, the caret will blink there.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/collapse">Selection.collapse - MDN</a>
   */
  void collapse( Node? node, optional unsigned long offset = 0 );
  /**
   * The Selection.collapseToEnd() method collapses the selection to the end of the last range in the selection. If the content of the selection is focused and editable, the caret will blink there.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/collapseToEnd">Selection.collapseToEnd - MDN</a>
   */
  void collapseToEnd();
  /**
   * The Selection.collapseToStart() method collapses the selection to the start of the first range in the selection. If the content of the selection is focused and editable, the caret will blink there.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/collapseToStart">Selection.collapseToStart - MDN</a>
   */
  void collapseToStart();
  /**
   * The Selection.containsNode() method indicates whether a specfied node is part of the selection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/containsNode">Selection.containsNode - MDN</a>
   */
  boolean containsNode( Node node, optional boolean allowPartialContainment = false );
  /**
   * The deleteFromDocument() method of the Selection interface deletes the selected text from the document's DOM.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/deleteFromDocument">Selection.deleteFromDocument - MDN</a>
   */
  [CEReactions]
  void deleteFromDocument();
  /**
   * The Selection.removeAllRanges() method removes all ranges from the selection, leaving the anchorNode and focusNode properties equal to null and leaving nothing selected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/empty">Selection.empty - MDN</a>
   */
  void empty();
  /**
   * The Selection.extend() method moves the focus of the selection to a specified point. The anchor of the selection does not move. The selection will be from the anchor to the new focus, regardless of direction.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/extend">Selection.extend - MDN</a>
   */
  void extend( Node node, optional unsigned long offset = 0 );
  /**
   * The Selection.getRangeAt() method returns a range object representing one of the ranges currently selected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/getRangeAt">Selection.getRangeAt - MDN</a>
   */
  Range getRangeAt( unsigned long index );
  /**
   * The Selection.removeAllRanges() method removes all ranges from the selection, leaving the anchorNode and focusNode properties equal to null and leaving nothing selected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/removeAllRanges">Selection.removeAllRanges - MDN</a>
   */
  void removeAllRanges();
  /**
   * The Selection.removeRange() method removes a range from a selection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/removeRange">Selection.removeRange - MDN</a>
   */
  void removeRange( Range range );
  /**
   * The Selection.selectAllChildren() method adds all the children of the specified node to the selection. Previous selection is lost.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/selectAllChildren">Selection.selectAllChildren - MDN</a>
   */
  void selectAllChildren( Node node );
  /**
   * The setBaseAndExtent() method of the Selection interface sets the selection to be a range including all or parts of two specified DOM nodes, and any content located between them.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/setBaseAndExtent">Selection.setBaseAndExtent - MDN</a>
   */
  void setBaseAndExtent( Node anchorNode, unsigned long anchorOffset, Node focusNode, unsigned long focusOffset );
  /**
   * The Selection.collapse() method collapses the current selection to a single point. The document is not modified. If the content is focused and editable, the caret will blink there.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection/setPosition">Selection.setPosition - MDN</a>
   */
  void setPosition( Node? node, optional unsigned long offset = 0 );
  /**
   * A Selection object represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination or manipulation, call window.getSelection().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection">Selection - MDN</a>
   */
  stringifier;
};

/**
 * The ServiceWorker interface of the ServiceWorker API provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker">ServiceWorker - MDN</a>
 */
[SecureContext, Exposed=(Window,Worker)]
interface ServiceWorker : EventTarget {
  /**
   * Returns the ServiceWorker serialized script URL defined as part of ServiceWorkerRegistration. Must be on the same origin as the document that registers the ServiceWorker.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/scriptURL">ServiceWorker.scriptURL - MDN</a>
   */
  readonly attribute USVString scriptURL;
  /**
   * The state read-only property of the ServiceWorker interface returns a string representing the current state of the service worker. It can be one of the following values: installing, installed, activating, activated, or redundant.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state">ServiceWorker.state - MDN</a>
   */
  readonly attribute ServiceWorkerState state;
  attribute NullableEventHandler onerror;
  attribute NullableEventHandler onstatechange;
  void postMessage( any message, sequence<object> transfer );
  void postMessage( any message, optional PostMessageOptions options = {} );
};

/**
 * The ServiceWorkerContainer interface of the Service Worker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer">ServiceWorkerContainer - MDN</a>
 */
[SecureContext, Exposed=(Window,Worker)]
interface ServiceWorkerContainer : EventTarget {
  /**
   * The controller read-only property of the ServiceWorkerContainer interface returns a ServiceWorker object if its state is activated (the same object returned by ServiceWorkerRegistration.active). This property returns null if the request is a force refresh (Shift + refresh) or if there is no active worker.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/controller">ServiceWorkerContainer.controller - MDN</a>
   */
  readonly attribute ServiceWorker? controller;
  readonly attribute Promise<ServiceWorkerRegistration> ready;
  attribute NullableEventHandler oncontrollerchange;
  /**
   * The onmessage property of the ServiceWorkerContainer interface is an event handler fired whenever a message event occurs — when incoming messages are received to the ServiceWorkerContainer object (e.g., via a Client.postMessage() call).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/onmessage">ServiceWorkerContainer.onmessage - MDN</a>
   */
  attribute NullableEventHandler onmessage;
  attribute NullableEventHandler onmessageerror;
  /**
   * The message event is used in a page controlled by a service worker to receive messages from the service worker.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/message_event">message event - MDN</a>
   */
  event MessageEvent message;
  /**
   * The getRegistration() method of the ServiceWorkerContainer interface gets a ServiceWorkerRegistration object whose scope URL matches the provided document URL.  The method returns a Promise that resolves to a ServiceWorkerRegistration or undefined.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/getRegistration">ServiceWorkerContainer.getRegistration - MDN</a>
   */
  [NewObject]
  Promise<any> getRegistration( optional USVString clientURL = "" );
  /**
   * The getRegistrations() method of the ServiceWorkerContainer interface gets all ServiceWorkerRegistrations associated with a ServiceWorkerContainer, in an array. The method returns a Promise that resolves to an array of ServiceWorkerRegistration.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/getRegistrations">ServiceWorkerContainer.getRegistrations - MDN</a>
   */
  [NewObject]
  Promise<FrozenArray<ServiceWorkerRegistration>> getRegistrations();
  /**
   * The register() method of the ServiceWorkerContainer interface creates or updates a ServiceWorkerRegistration for the given scriptURL.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register">ServiceWorkerContainer.register - MDN</a>
   */
  [NewObject]
  Promise<ServiceWorkerRegistration> register( USVString scriptURL, optional RegistrationOptions options = {} );
  /**
   * The startMessages() method of the ServiceWorkerContainer interface explicitly starts the flow of messages being dispatched from a service worker to pages under its control (e.g. sent via Client.postMessage()). This can be used to react to sent messages earlier, even before that page's content has finished loading.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/startMessages">ServiceWorkerContainer.startMessages - MDN</a>
   */
  void startMessages();
};

/**
 * The ServiceWorkerRegistration interface of the Service Worker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration">ServiceWorkerRegistration - MDN</a>
 */
[SecureContext, Exposed=(Window,Worker)]
interface ServiceWorkerRegistration : EventTarget {
  /**
   * The active property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is activated. This property is initially set to null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/active">ServiceWorkerRegistration.active - MDN</a>
   */
  readonly attribute ServiceWorker? active;
  /**
   * The installing property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installing. This property is initially set to null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/installing">ServiceWorkerRegistration.installing - MDN</a>
   */
  readonly attribute ServiceWorker? installing;
  /**
   * The navigationPreload read-only property of the ServiceWorkerRegistration interface returns the NavigationPreloadManager associated with the current service worker registration.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/navigationPreload">ServiceWorkerRegistration.navigationPreload - MDN</a>
   */
  [SameObject]
  readonly attribute NavigationPreloadManager navigationPreload;
  /**
   * The pushManager property of the ServiceWorkerRegistration interface returns a reference to the PushManager interface for managing push subscriptions; this includes support for subscribing, getting an active subscription, and accessing push permission status.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/pushManager">ServiceWorkerRegistration.pushManager - MDN</a>
   */
  readonly attribute PushManager pushManager;
  /**
   * The scope read-only property of the ServiceWorkerRegistration interface returns a unique identifier for a service worker registration. The service worker must be on the same origin as the document that registers the ServiceWorker.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/scope">ServiceWorkerRegistration.scope - MDN</a>
   */
  readonly attribute USVString scope;
  /**
   * The sync property of the ServiceWorkerRegistration interface returns a reference to the SyncManager interface, which manages background synchronization processes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/sync">ServiceWorkerRegistration.sync - MDN</a>
   */
  readonly attribute SyncManager sync;
  readonly attribute ServiceWorkerUpdateViaCache updateViaCache;
  /**
   * The waiting property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installed. This property is initially set to null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/waiting">ServiceWorkerRegistration.waiting - MDN</a>
   */
  readonly attribute ServiceWorker? waiting;
  attribute NullableEventHandler onupdatefound;
  /**
   * The getNotifications() method of the ServiceWorkerRegistration interface returns a list of the notifications in the order that they were created from the current origin via the current service worker registration. Origins can have many active but differently-scoped service worker registrations. Notifications created by one service worker on the same origin will not be available to other active services workers on that same origin.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/getNotifications">ServiceWorkerRegistration.getNotifications - MDN</a>
   */
  Promise<sequence<Notification>> getNotifications( optional GetNotificationOptions filter = {} );
  /**
   * The showNotification() method of the ServiceWorkerRegistration interface creates a notification on an active service worker.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/showNotification">ServiceWorkerRegistration.showNotification - MDN</a>
   */
  Promise<void> showNotification( DOMString title, optional NotificationOptions options = {} );
  /**
   * The unregister() method of the ServiceWorkerRegistration interface unregisters the service worker registration and returns a Promise. The promise will resolve to false if no registration was found, otherwise it resolves to true irrespective of whether unregistration happened or not (it may not unregister if someone else just called ServiceWorkerContainer.register() with the same scope.) The service worker will finish any ongoing operations before it is unregistered.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/unregister">ServiceWorkerRegistration.unregister - MDN</a>
   */
  [NewObject]
  Promise<boolean> unregister();
  /**
   * The update() method of the ServiceWorkerRegistration interface attempts to update the service worker. It fetches the worker's script URL, and if the new worker is not byte-by-byte identical to the current worker, it installs the new worker. The fetch of the worker bypasses any browser caches if the previous fetch occurred over 24 hours ago.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/update">ServiceWorkerRegistration.update - MDN</a>
   */
  [NewObject]
  Promise<void> update();
};

[Exposed=Window]
interface ShadowAnimation : Animation {
  [SameObject]
  readonly attribute Animation sourceAnimation;
  constructor( Animation source, ( CSSPseudoElement or Element ) newTarget );
};

/**
 * The ShadowRoot interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot">ShadowRoot - MDN</a>
 */
[Exposed=Window]
interface ShadowRoot : DocumentFragment {
  /**
   * The activeElement read-only property of the Document and ShadowRoot interfaces returns the Element within the DOM or shadow DOM tree that currently has focus.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/activeElement">DocumentOrShadowRoot.activeElement - MDN</a>
   */
  readonly attribute Element? activeElement;
  /**
   * The DocumentOrShadowRoot.fullscreenElement read-only property returns the Element that is currently being presented in full-screen mode in this document, or null if full-screen mode is not currently in use.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/fullscreenElement">DocumentOrShadowRoot.fullscreenElement - MDN</a>
   */
  [LegacyLenientSetter]
  readonly attribute Element? fullscreenElement;
  /**
   * The host read-only property of the ShadowRoot returns a reference to the DOM element the ShadowRoot is attached to.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/host">ShadowRoot.host - MDN</a>
   */
  readonly attribute Element host;
  /**
   * The mode property of the ShadowRoot specifies its mode — either open or closed. This defines whether or not the shadow root's internal features are accessible from JavaScript.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/mode">ShadowRoot.mode - MDN</a>
   */
  readonly attribute ShadowRootMode mode;
  /**
   * The pointerLockElement property of the Document and ShadowRoot interfaces provides the element set as the target for mouse events while the pointer is locked. It is null if lock is pending, pointer is unlocked, or the target is in another document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/pointerLockElement">DocumentOrShadowRoot.pointerLockElement - MDN</a>
   */
  readonly attribute Element? pointerLockElement;
  /**
   * The styleSheets read-only property of the DocumentOrShadowRoot interface returns a StyleSheetList of CSSStyleSheet objects, for stylesheets explicitly linked into or embedded in a document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/styleSheets">DocumentOrShadowRoot.styleSheets - MDN</a>
   */
  [SameObject]
  readonly attribute StyleSheetList styleSheets;
  /**
   * The innerHTML property of the ShadowRoot interface sets or returns a reference to the DOM tree inside the ShadowRoot.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/innerHTML">ShadowRoot.innerHTML - MDN</a>
   */
  [CEReactions]
  attribute [LegacyNullToEmptyString] DOMString innerHTML;
  attribute NullableEventHandler onslotchange;
};

/**
 * The SharedWorker interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, SharedWorkerGlobalScope.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker">SharedWorker - MDN</a>
 */
[Exposed=Window]
interface SharedWorker : EventTarget {
  /**
   * The port property of the SharedWorker interface returns a MessagePort object used to communicate and control the shared worker.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/port">SharedWorker.port - MDN</a>
   */
  readonly attribute MessagePort port;
  attribute NullableEventHandler onerror;
  /**
   * The SharedWorker() constructor creates a SharedWorker object that executes the script at the specified URL. This script must obey the same-origin policy.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/SharedWorker">SharedWorker.SharedWorker - MDN</a>
   */
  constructor( USVString scriptURL, optional ( DOMString or WorkerOptions ) options = {} );
};

/**
 * The SourceBuffer interface represents a chunk of media to be passed into an HTMLMediaElement and played, via a MediaSource object. This can be made up of one or several media segments.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer">SourceBuffer - MDN</a>
 */
interface SourceBuffer : EventTarget {
  /**
   * The audioTracks read-only property of the SourceBuffer interface returns a list of the audio tracks currently contained inside the SourceBuffer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/audioTracks">SourceBuffer.audioTracks - MDN</a>
   */
  readonly attribute AudioTrackList audioTracks;
  /**
   * The buffered read-only property of the SourceBuffer interface returns the time ranges that are currently buffered in the SourceBuffer as a normalized TimeRanges object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/buffered">SourceBuffer.buffered - MDN</a>
   */
  readonly attribute TimeRanges buffered;
  /**
   * The textTracks read-only property of the SourceBuffer interface returns a list of the text tracks currently contained inside the SourceBuffer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/textTracks">SourceBuffer.textTracks - MDN</a>
   */
  readonly attribute TextTrackList textTracks;
  /**
   * The updating read-only property of the SourceBuffer interface indicates whether the SourceBuffer is currently being updated — i.e. whether an SourceBuffer.appendBuffer(),  SourceBuffer.appendStream(), or SourceBuffer.remove() operation is currently in progress.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/updating">SourceBuffer.updating - MDN</a>
   */
  readonly attribute boolean updating;
  /**
   * The videoTracks read-only property of the SourceBuffer interface returns a list of the video tracks currently contained inside the SourceBuffer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/videoTracks">SourceBuffer.videoTracks - MDN</a>
   */
  readonly attribute VideoTrackList videoTracks;
  /**
   * The appendWindowEnd property of the SourceBuffer interface controls the timestamp for the end of the append window, a timestamp range that can be used to filter what media data is appended to the SourceBuffer. Coded media frames with timestamps wthin this range will be appended, whereas those outside the range will be filtered out.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendWindowEnd">SourceBuffer.appendWindowEnd - MDN</a>
   */
  attribute unrestricted double appendWindowEnd;
  /**
   * The appendWindowStart property of the SourceBuffer interface controls the timestamp for the start of the append window, a timestamp range that can be used to filter what media data is appended to the SourceBuffer. Coded media frames with timestamps wthin this range will be appended, whereas those outside the range will be filtered out.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendWindowStart">SourceBuffer.appendWindowStart - MDN</a>
   */
  attribute double appendWindowStart;
  /**
   * The mode property of the SourceBuffer interface controls whether media segments can be appended to the SourceBuffer in any order, or in a strict sequence.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/mode">SourceBuffer.mode - MDN</a>
   */
  attribute AppendMode mode;
  attribute NullableEventHandler onabort;
  attribute NullableEventHandler onerror;
  attribute NullableEventHandler onupdate;
  attribute NullableEventHandler onupdateend;
  attribute NullableEventHandler onupdatestart;
  /**
   * The timestampOffset property of the SourceBuffer interface controls the offset applied to timestamps inside media segments that are appended to the SourceBuffer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/timestampOffset">SourceBuffer.timestampOffset - MDN</a>
   */
  attribute double timestampOffset;
  /**
   * The abort() method of the SourceBuffer interface aborts the current segment and resets the segment parser.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort">SourceBuffer.abort - MDN</a>
   */
  void abort();
  /**
   * The appendBuffer() method of the SourceBuffer interface appends media segment data from an ArrayBuffer or ArrayBufferView object to the SourceBuffer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer">SourceBuffer.appendBuffer - MDN</a>
   */
  void appendBuffer( BufferSource data );
  /**
   * The remove() method of the SourceBuffer interface removes media segments within a specific time range from the SourceBuffer. This method can only be called when SourceBuffer.updating equals false. If SourceBuffer.updating is not equal to false, call SourceBuffer.abort().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove">SourceBuffer.remove - MDN</a>
   */
  void remove( double start, unrestricted double end );
};

/**
 * The SourceBufferList interface represents a simple container list for multiple SourceBuffer objects.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBufferList">SourceBufferList - MDN</a>
 */
interface SourceBufferList : EventTarget {
  /**
   * The length read-only property of the SourceBufferList interface returns the number of SourceBuffer objects in the list.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBufferList/length">SourceBufferList.length - MDN</a>
   */
  readonly attribute unsigned long length;
  attribute NullableEventHandler onaddsourcebuffer;
  attribute NullableEventHandler onremovesourcebuffer;
  /**
   * The SourceBufferList interface represents a simple container list for multiple SourceBuffer objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SourceBufferList">SourceBufferList - MDN</a>
   */
  getter SourceBuffer ( unsigned long index );
};

/**
 * The SpeechGrammar interface of the Web Speech API represents a set of words or patterns of words that we want the recognition service to recognize.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammar">SpeechGrammar - MDN</a>
 */
[Exposed=Window, LegacyNoInterfaceObject]
interface SpeechGrammar {
  /**
   * The src property of the SpeechGrammar interface sets and returns a string containing the grammar from within in the SpeechGrammar object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammar/src">SpeechGrammar.src - MDN</a>
   */
  attribute DOMString src;
  /**
   * The optional weight property of the SpeechGrammar interface sets and returns the weight of the SpeechGrammar object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammar/weight">SpeechGrammar.weight - MDN</a>
   */
  attribute float weight;
};

/**
 * The SpeechGrammarList interface of the Web Speech API represents a list of SpeechGrammar objects containing words or patterns of words that we want the recognition service to recognize.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList">SpeechGrammarList - MDN</a>
 */
[Exposed=Window, LegacyNoInterfaceObject]
interface SpeechGrammarList {
  /**
   * The length read-only property of the SpeechGrammarList interface returns the number of SpeechGrammar objects contained in the SpeechGrammarList.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList/length">SpeechGrammarList.length - MDN</a>
   */
  readonly attribute unsigned long length;
  constructor();
  /**
   * The addFromString() method of the SpeechGrammarList interface takes a grammar present in a specific DOMString within the code base (e.g. stored in a variable) and adds it to the SpeechGrammarList as a new SpeechGrammar object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList/addFromString">SpeechGrammarList.addFromString - MDN</a>
   */
  void addFromString( DOMString string, optional float weight = 1.0 );
  /**
   * The addFromURI() method of the SpeechGrammarList interface takes a grammar present at a specific URI and adds it to the SpeechGrammarList as a new SpeechGrammar object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList/addFromURI">SpeechGrammarList.addFromURI - MDN</a>
   */
  void addFromURI( DOMString src, optional float weight = 1.0 );
  /**
   * The item getter of the SpeechGrammarList interface is a standard getter — it allows individual SpeechGrammar objects to be retrieved from the SpeechGrammarList using array syntax.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList/item">SpeechGrammarList.item - MDN</a>
   */
  getter SpeechGrammar item( unsigned long index );
};

/**
 * The SpeechRecognition interface of the Web Speech API is the controller interface for the recognition service; this also handles the SpeechRecognitionEvent sent from the recognition service.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition">SpeechRecognition - MDN</a>
 */
[Exposed=Window, LegacyNoInterfaceObject]
interface SpeechRecognition : EventTarget {
  /**
   * The continuous property of the SpeechRecognition interface controls whether continuous results are returned for each recognition, or only a single result.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/continuous">SpeechRecognition.continuous - MDN</a>
   */
  attribute boolean continuous;
  /**
   * The grammars property of the SpeechRecognition interface returns and sets a collection of SpeechGrammar objects that represent the grammars that will be understood by the current SpeechRecognition.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/grammars">SpeechRecognition.grammars - MDN</a>
   */
  attribute SpeechGrammarList grammars;
  /**
   * The interimResults property of the SpeechRecognition interface controls whether interim results should be returned (true) or not (false.) Interim results are results that are not yet final (e.g. the SpeechRecognitionResult.isFinal property is false.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/interimResults">SpeechRecognition.interimResults - MDN</a>
   */
  attribute boolean interimResults;
  /**
   * The lang property of the SpeechRecognition interface returns and sets the language of the current SpeechRecognition. If not specified, this defaults to the HTML lang attribute value, or the user agent's language setting if that isn't set either.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/lang">SpeechRecognition.lang - MDN</a>
   */
  attribute DOMString lang;
  /**
   * The maxAlternatives property of the SpeechRecognition interface sets the maximum number of SpeechRecognitionAlternatives provided per SpeechRecognitionResult.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/maxAlternatives">SpeechRecognition.maxAlternatives - MDN</a>
   */
  attribute unsigned long maxAlternatives;
  /**
   * The onaudioend property of the SpeechRecognition interface represents an event handler that will run when the user agent has finished capturing audio (when the audioend event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onaudioend">SpeechRecognition.onaudioend - MDN</a>
   */
  attribute NullableEventHandler onaudioend;
  /**
   * The onaudiostart property of the SpeechRecognition interface represents an event handler that will run when the user agent has started to capture audio (when the audiostart event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onaudiostart">SpeechRecognition.onaudiostart - MDN</a>
   */
  attribute NullableEventHandler onaudiostart;
  /**
   * The onend property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service has disconnected (when the end event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onend">SpeechRecognition.onend - MDN</a>
   */
  attribute NullableEventHandler onend;
  /**
   * The onerror property of the SpeechRecognition interface represents an event handler that will run when a speech recognition error occurs (when the error event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onerror">SpeechRecognition.onerror - MDN</a>
   */
  attribute NullableEventHandler onerror;
  /**
   * The onnomatch property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service returns a final result with no significant recognition (when the nomatch event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onnomatch">SpeechRecognition.onnomatch - MDN</a>
   */
  attribute NullableEventHandler onnomatch;
  /**
   * The onresult property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service returns a result — a word or phrase has been positively recognized and this has been communicated back to the app (when the result event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onresult">SpeechRecognition.onresult - MDN</a>
   */
  attribute NullableEventHandler onresult;
  /**
   * The onsoundend property of the SpeechRecognition interface represents an event handler that will run when any sound — recognisable speech or not — has stopped being detected (when the soundend event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onsoundend">SpeechRecognition.onsoundend - MDN</a>
   */
  attribute NullableEventHandler onsoundend;
  /**
   * The onsoundstart property of the SpeechRecognition interface represents an event handler that will run when any sound — recognisable speech or not — has been detected (when the soundstart event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onsoundstart">SpeechRecognition.onsoundstart - MDN</a>
   */
  attribute NullableEventHandler onsoundstart;
  /**
   * The onspeechend property of the SpeechRecognition interface represents an event handler that will run when speech recognised by the speech recognition service has stopped being detected (when the speechend event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onspeechend">SpeechRecognition.onspeechend - MDN</a>
   */
  attribute NullableEventHandler onspeechend;
  /**
   * The onspeechstart property of the SpeechRecognition interface represents an event handler that will run when sound recognised by the speech recognition service as speech has been detected (when the speechstart event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onspeechstart">SpeechRecognition.onspeechstart - MDN</a>
   */
  attribute NullableEventHandler onspeechstart;
  /**
   * The onstart property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition (when the start event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onstart">SpeechRecognition.onstart - MDN</a>
   */
  attribute NullableEventHandler onstart;
  /**
   * You can use the audioend event in an addEventListener method:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/audioend_event">audioend event - MDN</a>
   */
  event Event audioend;
  /**
   * You can use the audiostart event in an onaudiostart method:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/audiostart_event">audiostart event - MDN</a>
   */
  event Event audiostart;
  /**
   * You can use the end event in an addEventListener method:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/end_event">end event - MDN</a>
   */
  event Event end;
  /**
   * You can use the error event in an addEventListener method:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/error_event">error event - MDN</a>
   */
  event SpeechRecognitionErrorEvent error;
  /**
   * The nomatch event of the Web Speech API is fired when the speech recognition service returns a final result with no significant recognition.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/nomatch_event">nomatch event - MDN</a>
   */
  event SpeechRecognitionEvent nomatch;
  /**
   * The result event of the Web Speech API is fired when the speech recognition service returns a result — a word or phrase has been positively recognized and this has been communicated back to the app
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/result_event">result event - MDN</a>
   */
  event SpeechRecognitionEvent result;
  /**
   * You can use the soundend event in an addEventListener method:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/soundend_event">soundend event - MDN</a>
   */
  event Event soundend;
  /**
   * The soundstart event of the Web Speech API is fired when any sound — recognisable speech or not — has been detected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/soundstart_event">soundstart event - MDN</a>
   */
  event Event soundstart;
  /**
   * The speechend event of the Web Speech API is fired when speech recognized by the speech recognition service has stopped being detected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/speechend_event">speechend event - MDN</a>
   */
  event Event speechend;
  /**
   * You can use the speechstart event in an addEventListener method:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/speechstart_event">speechstart event - MDN</a>
   */
  event Event speechstart;
  /**
   * The start event of the Web Speech API SpeechRecognition object is fired when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/start_event">start event - MDN</a>
   */
  event Event start;
  constructor();
  /**
   * The abort() method of the Web Speech API stops the speech recognition service from listening to incoming audio, and doesn't attempt to return a SpeechRecognitionResult.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/abort">SpeechRecognition.abort - MDN</a>
   */
  void abort();
  /**
   * The start() method of the Web Speech API starts the speech recognition service listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/start">SpeechRecognition.start - MDN</a>
   */
  void start();
  /**
   * The stop() method of the Web Speech API stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/stop">SpeechRecognition.stop - MDN</a>
   */
  void stop();
};

/**
 * The SpeechRecognitionAlternative interface of the Web Speech API represents a single word that has been recognised by the speech recognition service.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionAlternative">SpeechRecognitionAlternative - MDN</a>
 */
[Exposed=Window, LegacyNoInterfaceObject]
interface SpeechRecognitionAlternative {
  /**
   * The confidence read-only property of the SpeechRecognitionResult interface returns a numeric estimate of how confident the speech recognition system is that the recognition is correct.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionAlternative/confidence">SpeechRecognitionAlternative.confidence - MDN</a>
   */
  readonly attribute float confidence;
  /**
   * The transcript read-only property of the SpeechRecognitionResult interface returns a string containing the transcript of the recognised word(s).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionAlternative/transcript">SpeechRecognitionAlternative.transcript - MDN</a>
   */
  readonly attribute DOMString transcript;
};

/**
 * The SpeechRecognitionErrorEvent interface of the Web Speech API represents error messages from the recognition service.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionErrorEvent">SpeechRecognitionErrorEvent - MDN</a>
 */
[Exposed=Window]
interface SpeechRecognitionErrorEvent : Event {
  /**
   * The error read-only property of the SpeechRecognitionErrorEvent interface returns the type of error raised.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionErrorEvent/error">SpeechRecognitionErrorEvent.error - MDN</a>
   */
  readonly attribute SpeechRecognitionErrorCode error;
  /**
   * The message read-only property of the SpeechRecognitionErrorEvent interface returns a message describing the error in more detail.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionErrorEvent/message">SpeechRecognitionErrorEvent.message - MDN</a>
   */
  readonly attribute DOMString message;
  constructor( DOMString type, SpeechRecognitionErrorEventInit eventInitDict );
};

/**
 * The SpeechRecognitionEvent interface of the Web Speech API represents the event object for the result and nomatch events, and contains all the data associated with an interim or final speech recognition result.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent">SpeechRecognitionEvent - MDN</a>
 */
[Exposed=Window, LegacyNoInterfaceObject]
interface SpeechRecognitionEvent : Event {
  /**
   * The resultIndex read-only property of the SpeechRecognitionEvent interface returns the lowest index value result in the SpeechRecognitionResultList "array" that has actually changed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent/resultIndex">SpeechRecognitionEvent.resultIndex - MDN</a>
   */
  readonly attribute unsigned long resultIndex;
  /**
   * The results read-only property of the SpeechRecognitionEvent interface returns a SpeechRecognitionResultList object representing all the speech recognition results for the current session.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent/results">SpeechRecognitionEvent.results - MDN</a>
   */
  readonly attribute SpeechRecognitionResultList results;
  constructor( DOMString type, SpeechRecognitionEventInit eventInitDict );
};

/**
 * The SpeechRecognitionResult interface of the Web Speech API represents a single recognition match, which may contain multiple SpeechRecognitionAlternative objects.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult">SpeechRecognitionResult - MDN</a>
 */
[Exposed=Window, LegacyNoInterfaceObject]
interface SpeechRecognitionResult {
  /**
   * The isFinal read-only property of the SpeechRecognitionResult interface is a Boolean that states whether this result is final (true) or not (false) — if so, then this is the final time this result will be returned; if not, then this result is an interim result, and may be updated later on.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult/isFinal">SpeechRecognitionResult.isFinal - MDN</a>
   */
  readonly attribute boolean isFinal;
  /**
   * The length read-only property of the SpeechRecognitionResult interface returns the length of the "array" — the number of SpeechRecognitionAlternative objects contained in the result (also referred to as "n-best alternatives".)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult/length">SpeechRecognitionResult.length - MDN</a>
   */
  readonly attribute unsigned long length;
  /**
   * The item getter of the SpeechRecognitionResult interface is a standard getter that allows SpeechRecognitionAlternative objects within the result to be accessed via array syntax.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult/item">SpeechRecognitionResult.item - MDN</a>
   */
  getter SpeechRecognitionAlternative item( unsigned long index );
};

/**
 * The SpeechRecognitionResultList interface of the Web Speech API represents a list of SpeechRecognitionResult objects, or a single one if results are being captured in continuous mode.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList">SpeechRecognitionResultList - MDN</a>
 */
[Exposed=Window, LegacyNoInterfaceObject]
interface SpeechRecognitionResultList {
  /**
   * The length read-only property of the SpeechRecognitionResultList interface returns the length of the "array" — the number of SpeechRecognitionResult objects in the list.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList/length">SpeechRecognitionResultList.length - MDN</a>
   */
  readonly attribute unsigned long length;
  /**
   * The item getter of the SpeechRecognitionResultList interface is a standard getter — it allows SpeechRecognitionResult objects in the list to be accessed via array syntax.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList/item">SpeechRecognitionResultList.item - MDN</a>
   */
  getter SpeechRecognitionResult item( unsigned long index );
};

/**
 * The SpeechSynthesis interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis">SpeechSynthesis - MDN</a>
 */
[Exposed=Window, LegacyNoInterfaceObject]
interface SpeechSynthesis : EventTarget {
  /**
   * The paused read-only property of the SpeechSynthesis interface is a Boolean that returns true if the SpeechSynthesis object is in a paused state, or false if not.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/paused">SpeechSynthesis.paused - MDN</a>
   */
  readonly attribute boolean paused;
  /**
   * The pending read-only property of the SpeechSynthesis interface is a Boolean that returns true if the utterance queue contains as-yet-unspoken utterances.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/pending">SpeechSynthesis.pending - MDN</a>
   */
  readonly attribute boolean pending;
  /**
   * The speaking read-only property of the SpeechSynthesis interface is a Boolean that returns true if an utterance is currently in the process of being spoken — even if SpeechSynthesis is in a paused state.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/speaking">SpeechSynthesis.speaking - MDN</a>
   */
  readonly attribute boolean speaking;
  /**
   * The onvoiceschanged property of the SpeechSynthesis interface represents an event handler that will run when the list of SpeechSynthesisVoice objects that would be returned by the SpeechSynthesis.getVoices() method has changed (when the voiceschanged event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/onvoiceschanged">SpeechSynthesis.onvoiceschanged - MDN</a>
   */
  attribute NullableEventHandler onvoiceschanged;
  /**
   * The voiceschanged event of the Web Speech API is fired when the list of SpeechSynthesisVoice objects that would be returned by the SpeechSynthesis.getVoices() method has changed (when the voiceschanged event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/voiceschanged_event">voiceschanged event - MDN</a>
   */
  event Event voiceschanged;
  /**
   * The cancel() method of the SpeechSynthesis interface removes all utterances from the utterance queue.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/cancel">SpeechSynthesis.cancel - MDN</a>
   */
  void cancel();
  /**
   * The getVoices() method of the SpeechSynthesis interface returns a list of SpeechSynthesisVoice objects representing all the available voices on the current device.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/getVoices">SpeechSynthesis.getVoices - MDN</a>
   */
  sequence<SpeechSynthesisVoice> getVoices();
  /**
   * The pause() method of the SpeechSynthesis interface puts the SpeechSynthesis object into a paused state.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/pause">SpeechSynthesis.pause - MDN</a>
   */
  void pause();
  /**
   * The resume() method of the SpeechSynthesis interface puts the SpeechSynthesis object into a non-paused state: resumes it if it was already paused.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/resume">SpeechSynthesis.resume - MDN</a>
   */
  void resume();
  /**
   * The speak() method of the SpeechSynthesis interface adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/speak">SpeechSynthesis.speak - MDN</a>
   */
  void speak( SpeechSynthesisUtterance utterance );
};

/**
 * The SpeechSynthesisErrorEvent interface of the Web Speech API contains information about any errors that occur while processing SpeechSynthesisUtterance objects in the speech service.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisErrorEvent">SpeechSynthesisErrorEvent - MDN</a>
 */
[Exposed=Window]
interface SpeechSynthesisErrorEvent : SpeechSynthesisEvent {
  /**
   * The error property of the SpeechSynthesisErrorEvent interface returns an error code indicating what has gone wrong with a speech synthesis attempt.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisErrorEvent/error">SpeechSynthesisErrorEvent.error - MDN</a>
   */
  readonly attribute SpeechSynthesisErrorCode error;
  constructor( DOMString type, SpeechSynthesisErrorEventInit eventInitDict );
};

/**
 * The SpeechSynthesisEvent interface of the Web Speech API contains information about the current state of SpeechSynthesisUtterance objects that have been processed in the speech service.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent">SpeechSynthesisEvent - MDN</a>
 */
[Exposed=Window]
interface SpeechSynthesisEvent : Event {
  /**
   * The charIndex read-only property of the SpeechSynthesisUtterance interface returns the index position of the character in the SpeechSynthesisUtterance.text that was being spoken when the event was triggered.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent/charIndex">SpeechSynthesisEvent.charIndex - MDN</a>
   */
  readonly attribute unsigned long charIndex;
  readonly attribute unsigned long charLength;
  /**
   * The elapsedTime read-only property of the SpeechSynthesisUtterance interface returns the elapsed time in seconds after the SpeechSynthesisUtterance.text started being spoken that the event was triggered at.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent/elapsedTime">SpeechSynthesisEvent.elapsedTime - MDN</a>
   */
  readonly attribute float elapsedTime;
  /**
   * The name read-only property of the SpeechSynthesisUtterance interface returns the name associated with certain types of events occuring as the SpeechSynthesisUtterance.text is being spoken: the name of the SSML marker reached in the case of a mark event, or the type of boundary reached in the case of a boundary event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent/name">SpeechSynthesisEvent.name - MDN</a>
   */
  readonly attribute DOMString name;
  /**
   * The utterance read-only property of the SpeechSynthesisUtterance interface returns the SpeechSynthesisUtterance instance that the event was triggered on.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent/utterance">SpeechSynthesisEvent.utterance - MDN</a>
   */
  readonly attribute SpeechSynthesisUtterance utterance;
  constructor( DOMString type, SpeechSynthesisEventInit eventInitDict );
};

/**
 * The SpeechSynthesisUtterance interface of the Web Speech API represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance">SpeechSynthesisUtterance - MDN</a>
 */
[Exposed=Window]
interface SpeechSynthesisUtterance : EventTarget {
  /**
   * The lang property of the SpeechSynthesisUtterance interface gets and sets the language of the utterance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/lang">SpeechSynthesisUtterance.lang - MDN</a>
   */
  attribute DOMString lang;
  /**
   * The onboundary property of the SpeechSynthesisUtterance interface represents an event handler that will run when the spoken utterance reaches a word or sentence boundary (when the boundary event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onboundary">SpeechSynthesisUtterance.onboundary - MDN</a>
   */
  attribute NullableEventHandler onboundary;
  /**
   * The onend property of the SpeechSynthesisUtterance interface represents an event handler that will run when the utterance has finished being spoken (when the end event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onend">SpeechSynthesisUtterance.onend - MDN</a>
   */
  attribute NullableEventHandler onend;
  /**
   * The onerror property of the SpeechSynthesisUtterance interface represents an event handler that will run when an error occurs that prevents the utterance from being succesfully spoken (when the error event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onerror">SpeechSynthesisUtterance.onerror - MDN</a>
   */
  attribute NullableEventHandler onerror;
  /**
   * The onmark property of the SpeechSynthesisUtterance interface represents an event handler that will run when the spoken utterance reaches a named SSML mark tag (when the mark event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onmark">SpeechSynthesisUtterance.onmark - MDN</a>
   */
  attribute NullableEventHandler onmark;
  /**
   * The onpause property of the SpeechSynthesisUtterance interface represents an event handler that will run when the utterance is paused part way through (when the pause event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onpause">SpeechSynthesisUtterance.onpause - MDN</a>
   */
  attribute NullableEventHandler onpause;
  /**
   * The onresume property of the SpeechSynthesisUtterance interface represents an event handler that will run when a paused utterance is resumed (when the resume event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onresume">SpeechSynthesisUtterance.onresume - MDN</a>
   */
  attribute NullableEventHandler onresume;
  /**
   * The onstart property of the SpeechSynthesisUtterance interface represents an event handler that will run when the utterance has begun to be spoken (when the start event fires.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onstart">SpeechSynthesisUtterance.onstart - MDN</a>
   */
  attribute NullableEventHandler onstart;
  /**
   * The pitch property of the SpeechSynthesisUtterance interface gets and sets the pitch at which the utterance will be spoken at.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/pitch">SpeechSynthesisUtterance.pitch - MDN</a>
   */
  attribute float pitch;
  /**
   * The rate property of the SpeechSynthesisUtterance interface gets and sets the speed at which the utterance will be spoken at.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/rate">SpeechSynthesisUtterance.rate - MDN</a>
   */
  attribute float rate;
  /**
   * The text property of the SpeechSynthesisUtterance interface gets and sets the text that will be synthesised when the utterance is spoken.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/text">SpeechSynthesisUtterance.text - MDN</a>
   */
  attribute DOMString text;
  /**
   * The voice property of the SpeechSynthesisUtterance interface gets and sets the voice that will be used to speak the utterance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/voice">SpeechSynthesisUtterance.voice - MDN</a>
   */
  attribute SpeechSynthesisVoice? voice;
  /**
   * The volume property of the SpeechSynthesisUtterance interface gets and sets the volume that the utterance will be spoken at.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/volume">SpeechSynthesisUtterance.volume - MDN</a>
   */
  attribute float volume;
  /**
   * You can use the boundary event in an addEventListener method:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/boundary_event">boundary event - MDN</a>
   */
  event SpeechSynthesisEvent boundary;
  /**
   * You can use the end event in an addEventListener method:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/end_event">end event - MDN</a>
   */
  event SpeechSynthesisEvent end;
  /**
   * You can use the error event in an addEventListener method:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/error_event">error event - MDN</a>
   */
  event SpeechSynthesisErrorEvent error;
  /**
   * You can use the mark event in an addEventListener method:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/mark_event">mark event - MDN</a>
   */
  event SpeechSynthesisEvent mark;
  /**
   * You can use the pause event in an addEventListener method:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/pause_event">pause event - MDN</a>
   */
  event SpeechSynthesisEvent pause;
  /**
   * The resume event of the Web Speech API SpeechSynthesisUtterance object is fired when a paused utterance is resumed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/resume_event">resume event - MDN</a>
   */
  event SpeechSynthesisEvent resume;
  /**
   * You can use the start event in an addEventListener method:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/start_event">start event - MDN</a>
   */
  event SpeechSynthesisEvent start;
  constructor( optional DOMString text );
};

/**
 * The SpeechSynthesisVoice interface of the Web Speech API represents a voice that the system supports. Every SpeechSynthesisVoice has its own relative speech service including information about language, name and URI.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice">SpeechSynthesisVoice - MDN</a>
 */
[Exposed=Window, LegacyNoInterfaceObject]
interface SpeechSynthesisVoice {
  /**
   * The default read-only property of the SpeechSynthesisVoice interface returns a Boolean indicating whether the voice is the default voice for the current app (true), or not (false.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice/default">SpeechSynthesisVoice.default - MDN</a>
   */
  readonly attribute boolean default;
  /**
   * The lang read-only property of the SpeechSynthesisVoice interface returns a BCP 47 language tag indicating the language of the voice.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice/lang">SpeechSynthesisVoice.lang - MDN</a>
   */
  readonly attribute DOMString lang;
  /**
   * The localService read-only property of the SpeechSynthesisVoice interface returns a Boolean indicating whether the voice is supplied by a local speech synthesizer service (true), or a remote speech synthesizer service (false.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice/localService">SpeechSynthesisVoice.localService - MDN</a>
   */
  readonly attribute boolean localService;
  /**
   * The name read-only property of the SpeechSynthesisVoice interface returns a human-readable name that represents the voice.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice/name">SpeechSynthesisVoice.name - MDN</a>
   */
  readonly attribute DOMString name;
  /**
   * The voiceURI read-only property of the SpeechSynthesisVoice interface returns the type of URI and location of the speech synthesis service for this voice.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice/voiceURI">SpeechSynthesisVoice.voiceURI - MDN</a>
   */
  readonly attribute DOMString voiceURI;
};

/**
 * The DOM StaticRange interface extends AbstractRange to provide a method to specify a range of content in the DOM whose contents don't update to reflect changes which occur within the DOM tree.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StaticRange">StaticRange - MDN</a>
 */
[Exposed=Window]
interface StaticRange : AbstractRange {
  /**
   * The StaticRange() constructor creates a new StaticRange object representing a span of content within the DOM.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StaticRange/StaticRange">StaticRange.StaticRange - MDN</a>
   */
  constructor( StaticRangeInit init );
};

/**
 * The pan property takes a unitless value between -1 (full left pan) and 1 (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full PannerNode.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode">StereoPannerNode - MDN</a>
 */
[Exposed=Window]
interface StereoPannerNode : AudioNode {
  /**
   * An a-rate AudioParam containing the panning to apply.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode/pan">StereoPannerNode.pan - MDN</a>
   */
  readonly attribute AudioParam pan;
  /**
   * The StereoPannerNode() constructor of the Web Audio API creates a new StereoPannerNode object which is an AudioNode that represents a simple stereo panner node that can be used to pan an audio stream left or right.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode/StereoPannerNode">StereoPannerNode.StereoPannerNode - MDN</a>
   */
  constructor( BaseAudioContext context, optional StereoPannerOptions options = {} );
};

/**
 * The Storage interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage">Storage - MDN</a>
 */
[Exposed=Window]
interface Storage {
  /**
   * The length read-only property of the Storage interface returns the number of data items stored in a given Storage object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage/length">Storage.length - MDN</a>
   */
  readonly attribute unsigned long length;
  void clear();
  /**
   * The key() method of the Storage interface, when passed a number n, returns the name of the nth key in a given Storage object. The order of keys is user-agent defined, so you should not rely on it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage/key">Storage.key - MDN</a>
   */
  DOMString? key( unsigned long index );
  getter DOMString? getItem( DOMString key );
  setter void setItem( DOMString key, DOMString value );
  deleter void removeItem( DOMString key );
};

/**
 * A StorageEvent is sent to a window when a storage area it has access to is changed within the context of another document.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent">StorageEvent - MDN</a>
 */
[Exposed=Window]
interface StorageEvent : Event {
  readonly attribute DOMString? key;
  readonly attribute DOMString? newValue;
  readonly attribute DOMString? oldValue;
  readonly attribute Storage? storageArea;
  readonly attribute USVString url;
  constructor( DOMString type, optional StorageEventInit eventInitDict = {} );
  void initStorageEvent( DOMString type, optional boolean bubbles = false, optional boolean cancelable = false, optional DOMString? key = null, optional DOMString? oldValue = null, optional DOMString? newValue = null, optional USVString url = "", optional Storage? storageArea = null );
};

/**
 * The StorageManager interface of the the Storage API provides an interface for managing persistance permissions and estimating available storage. You can get a reference to this interface using either navigator.storage or WorkerNavigator.storage.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StorageManager">StorageManager - MDN</a>
 */
[SecureContext, Exposed=(Window,Worker)]
interface StorageManager {
  /**
   * The estimate() method of the StorageManager interface asks the Storage Manager for how much storage the current origin takes up (usage), and how much space is available (quota).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/estimate">StorageManager.estimate - MDN</a>
   */
  Promise<StorageEstimate> estimate();
  /**
   * The persist() method of the StorageManager interface requests permission to use persistent storage, and returns a Promise that resolves to true if permission is granted and box mode is persistent, and false otherwise.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/persist">StorageManager.persist - MDN</a>
   */
  [Exposed=Window]
  Promise<boolean> persist();
  /**
   * The persisted() method of the StorageManager interface returns a Promise that resolves to true if box mode is persistent for your site's storage.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/persisted">StorageManager.persisted - MDN</a>
   */
  Promise<boolean> persisted();
};

/**
 * An object implementing the StyleSheet interface represents a single style sheet. CSS style sheets will further implement the more specialized CSSStyleSheet interface.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet">StyleSheet - MDN</a>
 */
[Exposed=Window]
interface StyleSheet {
  /**
   * The href property of the StyleSheet interface returns the location of the style sheet.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/href">StyleSheet.href - MDN</a>
   */
  readonly attribute USVString? href;
  /**
   * The media property of the StyleSheet interface specifies the intended destination media for style information. It is a read-only, array-like MediaList object and can be removed with deleteMedium() and added with appendMedium().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/media">StyleSheet.media - MDN</a>
   */
  [SameObject, PutForwards=mediaText]
  readonly attribute MediaList media;
  /**
   * The ownerNode property of the StyleSheet interface returns the node that associates this style sheet with the document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/ownerNode">StyleSheet.ownerNode - MDN</a>
   */
  readonly attribute ( Element or ProcessingInstruction )? ownerNode;
  /**
   * The parentStyleSheet property of the StyleSheet interface returns the style sheet, if any, that is including the given style sheet.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/parentStyleSheet">StyleSheet.parentStyleSheet - MDN</a>
   */
  readonly attribute CSSStyleSheet? parentStyleSheet;
  /**
   * The title property of the StyleSheet interface returns the advisory title of the current style sheet.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/title">StyleSheet.title - MDN</a>
   */
  readonly attribute DOMString? title;
  /**
   * The type property of the StyleSheet interface specifies the style sheet language for the given style sheet.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/type">StyleSheet.type - MDN</a>
   */
  readonly attribute CSSOMString type;
  /**
   * The disabled property of the StyleSheet interface determines whether the style sheet is prevented from applying to the document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/disabled">StyleSheet.disabled - MDN</a>
   */
  attribute boolean disabled;
};

/**
 * The StyleSheetList interface represents a list of StyleSheet.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList">StyleSheetList - MDN</a>
 */
[Exposed=Window]
interface StyleSheetList {
  readonly attribute unsigned long length;
  getter CSSStyleSheet? item( unsigned long index );
};

/**
 * The SubmitEvent interface defines the object used to represent an HTML form's submit event. This event is fired at the form when the form's submit action is invoked.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent">SubmitEvent - MDN</a>
 */
[Exposed=Window]
interface SubmitEvent : Event {
  /**
   * The read-only submitter property found on the SubmitEvent interface specifies the submit button or other element that was invoked to cause the form to be submitted.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent/submitter">SubmitEvent.submitter - MDN</a>
   */
  readonly attribute HTMLElement? submitter;
  /**
   * The SubmitEvent() constructor creates and returns a new SubmitEvent object, which is used to represent a submit event fired at an HTML form.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent/SubmitEvent">SubmitEvent.SubmitEvent - MDN</a>
   */
  constructor( DOMString type, optional SubmitEventInit eventInitDict = {} );
};

/**
 * The SubtleCrypto interface of the Web Crypto API provides a number of low-level cryptographic functions. Access to the features of SubtleCrypto is obtained through the subtle property of the Crypto object you get from Window.crypto.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto">SubtleCrypto - MDN</a>
 */
[SecureContext, Exposed=(Window,Worker)]
interface SubtleCrypto {
  /**
   * The decrypt() method of the SubtleCrypto interface decrypts some encrypted data. It takes as arguments a key to decrypt with, some optional extra parameters, and the data to decrypt (also known as "ciphertext"). It returns a Promise which will be fulfilled with the decrypted data (also known as "plaintext").
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/decrypt">SubtleCrypto.decrypt - MDN</a>
   */
  Promise<any> decrypt( AlgorithmIdentifier algorithm, CryptoKey key, BufferSource data );
  /**
   * The deriveBits() method of the SubtleCrypto interface can be used to derive an array of bits from a base key.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits">SubtleCrypto.deriveBits - MDN</a>
   */
  Promise<ArrayBuffer> deriveBits( AlgorithmIdentifier algorithm, CryptoKey baseKey, unsigned long length );
  /**
   * The deriveKey() method of the SubtleCrypto interface can be used to derive a secret key from a master key.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey">SubtleCrypto.deriveKey - MDN</a>
   */
  Promise<any> deriveKey( AlgorithmIdentifier algorithm, CryptoKey baseKey, AlgorithmIdentifier derivedKeyType, boolean extractable, sequence<KeyUsage> keyUsages );
  /**
   * The digest() method of the SubtleCrypto interface generates a digest of the given data. A digest is a short fixed-length value derived from some variable-length input. Cryptographic digests should exhibit collision-resistance, meaning that it's hard to come up with two different inputs that have the same digest value.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest">SubtleCrypto.digest - MDN</a>
   */
  Promise<any> digest( AlgorithmIdentifier algorithm, BufferSource data );
  /**
   * The encrypt() method of the SubtleCrypto interface encrypts data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt">SubtleCrypto.encrypt - MDN</a>
   */
  Promise<any> encrypt( AlgorithmIdentifier algorithm, CryptoKey key, BufferSource data );
  /**
   * The exportKey() method of the SubtleCrypto interface exports a key: that is, it takes as input a CryptoKey object and gives you the key in an external, portable format.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/exportKey">SubtleCrypto.exportKey - MDN</a>
   */
  Promise<any> exportKey( KeyFormat format, CryptoKey key );
  /**
   * Use the generateKey() method of the SubtleCrypto interface to generate a new key (for symmetric algorithms) or key pair (for public-key algorithms).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/generateKey">SubtleCrypto.generateKey - MDN</a>
   */
  Promise<any> generateKey( AlgorithmIdentifier algorithm, boolean extractable, sequence<KeyUsage> keyUsages );
  /**
   * The importKey() method of the SubtleCrypto interface imports a key: that is, it takes as input a key in an external, portable format and gives you a CryptoKey object that you can use in the Web Crypto API.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey">SubtleCrypto.importKey - MDN</a>
   */
  Promise<CryptoKey> importKey( KeyFormat format, ( BufferSource or JsonWebKey ) keyData, AlgorithmIdentifier algorithm, boolean extractable, sequence<KeyUsage> keyUsages );
  /**
   * The sign() method of the SubtleCrypto interface generates a digital signature.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign">SubtleCrypto.sign - MDN</a>
   */
  Promise<any> sign( AlgorithmIdentifier algorithm, CryptoKey key, BufferSource data );
  /**
   * The unwrapKey() method of the SubtleCrypto interface "unwraps" a key. This means that it takes as its input a key that has been exported and then encrypted (also called "wrapped"). It decrypts the key and then imports it, returning a CryptoKey object that can be used in the Web Crypto API.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/unwrapKey">SubtleCrypto.unwrapKey - MDN</a>
   */
  Promise<CryptoKey> unwrapKey( KeyFormat format, BufferSource wrappedKey, CryptoKey unwrappingKey, AlgorithmIdentifier unwrapAlgorithm, AlgorithmIdentifier unwrappedKeyAlgorithm, boolean extractable, sequence<KeyUsage> keyUsages );
  /**
   * The verify() method of the SubtleCrypto interface verifies a digital signature.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/verify">SubtleCrypto.verify - MDN</a>
   */
  Promise<any> verify( AlgorithmIdentifier algorithm, CryptoKey key, BufferSource signature, BufferSource data );
  /**
   * The wrapKey() method of the SubtleCrypto interface "wraps" a key. This means that it exports the key in an external, portable format, then encrypts the exported key. Wrapping a key helps protect it in untrusted environments, such as inside an otherwise unprotected data store or in transmission over an unprotected network.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/wrapKey">SubtleCrypto.wrapKey - MDN</a>
   */
  Promise<any> wrapKey( KeyFormat format, CryptoKey key, CryptoKey wrappingKey, AlgorithmIdentifier wrapAlgorithm );
};

/**
 * The SyncManager interface of the the ServiceWorker API provides an interface for registering and listing sync registrations.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SyncManager">SyncManager - MDN</a>
 */
[Exposed=(Window,Worker)]
interface SyncManager {
  /**
   * The SyncManager.getTags method of the SyncManager interface returns a list of developer-defined identifiers for SyncManager registrations.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SyncManager/getTags">SyncManager.getTags - MDN</a>
   */
  Promise<sequence<DOMString>> getTags();
  /**
   * The SyncManager.register method of the SyncManager interface returns a Promise that resolves to a SyncRegistration instance.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/SyncManager/register">SyncManager.register - MDN</a>
   */
  Promise<void> register( DOMString tag );
};

/**
 * The WebAssembly.Table() object is a JavaScript wrapper object — an array-like structure representing a WebAssembly Table, which stores function references. A table created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table">WebAssembly.Table - MDN</a>
 */
[LegacyNamespace=WebAssembly, Exposed=(Window,Worker,Worklet)]
interface Table {
  /**
   * The length prototype property of the WebAssembly.Table object returns the length of the table, i.e. the number of elements in the table.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/length">WebAssembly.Table.length - MDN</a>
   */
  readonly attribute unsigned long length;
  constructor( TableDescriptor descriptor );
  /**
   * The get() prototype method of the WebAssembly.Table() object retrieves a function reference stored at a given index.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/get">WebAssembly.Table.get - MDN</a>
   */
  Function? get( [EnforceRange] unsigned long index );
  /**
   * The grow() prototype method of the WebAssembly.Table object increases the size of the Table instance by a specified number of elements.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/grow">WebAssembly.Table.grow - MDN</a>
   */
  unsigned long grow( [EnforceRange] unsigned long delta );
  /**
   * The set() prototype method of the WebAssembly.Table object mutates a reference stored at a given index to a different value.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/set">WebAssembly.Table.set - MDN</a>
   */
  void set( [EnforceRange] unsigned long index, Function? value );
};

/**
 * The Text interface represents the textual content of Element or Attr.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Text">Text - MDN</a>
 */
[Exposed=Window]
interface Text : CharacterData {
  /**
   * The assignedSlot property of the Text interface returns the HTMLSlotElement object associated with the element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Text/assignedSlot">Text.assignedSlot - MDN</a>
   */
  readonly attribute HTMLSlotElement? assignedSlot;
  /**
   * The Text.wholeText read-only property returns the full text of all Text nodes logically adjacent to the node.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Text/wholeText">Text.wholeText - MDN</a>
   */
  readonly attribute DOMString wholeText;
  /**
   * The Text() constructor returns a newly created Text object with the optional DOMString given in parameter as its textual content.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Text/Text">Text.Text - MDN</a>
   */
  constructor( optional DOMString data = "" );
  [NewObject]
  Text splitText( unsigned long offset );
};

/**
 * The TextDecoder interface represents a decoder for a specific text encoding, such as UTF-8, ISO-8859-2, KOI8-R, GBK, etc. A decoder takes a stream of bytes as input and emits a stream of code points.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder">TextDecoder - MDN</a>
 */
[Exposed=(Window,Worker)]
interface TextDecoder {
  readonly attribute DOMString encoding;
  readonly attribute boolean fatal;
  readonly attribute boolean ignoreBOM;
  /**
   * The TextDecoder() constructor returns a newly created TextDecoder object for the encoding specified in parameter.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/TextDecoder">TextDecoder.TextDecoder - MDN</a>
   */
  constructor( optional DOMString label = "utf-8", optional TextDecoderOptions options = {} );
  USVString decode( optional [AllowShared] BufferSource input, optional TextDecodeOptions options = {} );
};

[Exposed=(Window,Worker)]
interface TextDecoderStream {
  readonly attribute DOMString encoding;
  readonly attribute boolean fatal;
  readonly attribute boolean ignoreBOM;
  readonly attribute ReadableStream readable;
  readonly attribute WritableStream writable;
  constructor( optional DOMString label = "utf-8", optional TextDecoderOptions options = {} );
};

/**
 * TextEncoder takes a stream of code points as input and emits a stream of UTF-8 bytes.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder">TextEncoder - MDN</a>
 */
[Exposed=(Window,Worker)]
interface TextEncoder {
  readonly attribute DOMString encoding;
  /**
   * The TextEncoder() constructor returns a newly created utf-8 TextEncoder object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder">TextEncoder.TextEncoder - MDN</a>
   */
  constructor();
  [NewObject]
  Uint8Array encode( optional USVString input = "" );
  TextEncoderEncodeIntoResult encodeInto( USVString source, [AllowShared] Uint8Array destination );
};

[Exposed=(Window,Worker)]
interface TextEncoderStream {
  readonly attribute DOMString encoding;
  readonly attribute ReadableStream readable;
  readonly attribute WritableStream writable;
  constructor();
};

/**
 * The TextMetrics interface represents the dimensions of a piece of text in the canvas; a textMetrics() instance can be retrieved using the CanvasRenderingContext2D.measureText() method.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics">TextMetrics - MDN</a>
 */
[Exposed=(Window,Worker)]
interface TextMetrics {
  /**
   * The read-only actualBoundingBoxAscent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the top of the bounding rectangle used to render the text, in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxAscent">TextMetrics.actualBoundingBoxAscent - MDN</a>
   */
  readonly attribute double actualBoundingBoxAscent;
  /**
   * The read-only actualBoundingBoxDescent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle used to render the text, in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxDescent">TextMetrics.actualBoundingBoxDescent - MDN</a>
   */
  readonly attribute double actualBoundingBoxDescent;
  /**
   * The read-only actualBoundingBoxLeft property of the TextMetrics interface is a double giving the distance parallel to the baseline from the alignment point given by the CanvasRenderingContext2D.textAlign property to the left side of the bounding rectangle of the given text, in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxLeft">TextMetrics.actualBoundingBoxLeft - MDN</a>
   */
  readonly attribute double actualBoundingBoxLeft;
  /**
   * The read-only actualBoundingBoxRight property of the TextMetrics interface is a double giving the distance parallel to the baseline from the alignment point given by the CanvasRenderingContext2D.textAlign property to the right side of the bounding rectangle of the given text, in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxRight">TextMetrics.actualBoundingBoxRight - MDN</a>
   */
  readonly attribute double actualBoundingBoxRight;
  /**
   * The read-only alphabeticBaseline property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the alphabetic baseline of the line box, in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/alphabeticBaseline">TextMetrics.alphabeticBaseline - MDN</a>
   */
  readonly attribute double alphabeticBaseline;
  /**
   * The read-only emHeightAscent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the top of the em square in the line box, in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/emHeightAscent">TextMetrics.emHeightAscent - MDN</a>
   */
  readonly attribute double emHeightAscent;
  /**
   * The read-only emHeightDescent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the bottom of the em square in the line box, in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/emHeightDescent">TextMetrics.emHeightDescent - MDN</a>
   */
  readonly attribute double emHeightDescent;
  /**
   * The read-only fontBoundingBoxAscent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the top of the highest bounding rectangle of all the fonts used to render the text, in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/fontBoundingBoxAscent">TextMetrics.fontBoundingBoxAscent - MDN</a>
   */
  readonly attribute double fontBoundingBoxAscent;
  /**
   * The read-only fontBoundingBoxDescent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle of all the fonts used to render the text, in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/fontBoundingBoxDescent">TextMetrics.fontBoundingBoxDescent - MDN</a>
   */
  readonly attribute double fontBoundingBoxDescent;
  /**
   * The read-only hangingBaseline property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the hanging baseline of the line box, in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/hangingBaseline">TextMetrics.hangingBaseline - MDN</a>
   */
  readonly attribute double hangingBaseline;
  /**
   * The read-only ideographicBaseline property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the ideographic baseline of the line box, in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/ideographicBaseline">TextMetrics.ideographicBaseline - MDN</a>
   */
  readonly attribute double ideographicBaseline;
  /**
   * The read-only width property of the TextMetrics interface contains the text's advance width (the width of that inline box) in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/width">TextMetrics.width - MDN</a>
   */
  readonly attribute double width;
};

/**
 * This interface also inherits properties from EventTarget.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextTrack">TextTrack - MDN</a>
 */
[Exposed=Window]
interface TextTrack : EventTarget {
  readonly attribute TextTrackCueList? activeCues;
  readonly attribute TextTrackCueList? cues;
  readonly attribute DOMString id;
  readonly attribute DOMString inBandMetadataTrackDispatchType;
  readonly attribute TextTrackKind kind;
  readonly attribute DOMString label;
  readonly attribute DOMString language;
  readonly attribute SourceBuffer? sourceBuffer;
  /**
   * The TextTrack interface's mode property is a string specifying and controlling the text track's mode: disabled, hidden, or showing.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/mode">TextTrack.mode - MDN</a>
   */
  attribute TextTrackMode mode;
  attribute NullableEventHandler oncuechange;
  /**
   * The cuechange event fires when a TextTrack has changed the currently displaying cues.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/cuechange_event">cuechange event - MDN</a>
   */
  event Event cuechange;
  void addCue( TextTrackCue cue );
  void removeCue( TextTrackCue cue );
};

/**
 * TextTrackCue is an abstract class which is used as the basis for the various derived cue types, such as VTTCue; you will instead work with those derived types.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue">TextTrackCue - MDN</a>
 */
[Exposed=Window]
interface TextTrackCue : EventTarget {
  readonly attribute TextTrack? track;
  attribute double endTime;
  attribute DOMString id;
  attribute NullableEventHandler onenter;
  attribute NullableEventHandler onexit;
  attribute boolean pauseOnExit;
  attribute double startTime;
};

[Exposed=Window]
interface TextTrackCueList {
  readonly attribute unsigned long length;
  TextTrackCue? getCueById( DOMString id );
  getter TextTrackCue ( unsigned long index );
};

/**
 * The TextTrackList interface is used to represent a list of the text tracks defined by the track element, with each track represented by a separate textTrack object in the list.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList">TextTrackList - MDN</a>
 */
[Exposed=Window]
interface TextTrackList : EventTarget {
  /**
   * The read-only TextTrackList property length returns the number of entries in the TextTrackList, each of which is a TextTrack representing one track in the media element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/length">TextTrackList.length - MDN</a>
   */
  readonly attribute unsigned long length;
  /**
   * The TextTrackList property onaddtrack is an event handler which is called when the addtrack event occurs, indicating that a new text track has been added to the media element whose text tracks the TextTrackList represents.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/onaddtrack">TextTrackList.onaddtrack - MDN</a>
   */
  attribute NullableEventHandler onaddtrack;
  /**
   * The TextTrackList property onchange is an event handler which is called when the change event occurs, indicating that a change has occurred on a TextTrack in the VideoTrackList.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/onchange">TextTrackList.onchange - MDN</a>
   */
  attribute NullableEventHandler onchange;
  attribute NullableEventHandler onremovetrack;
  /**
   * The addtrack event is fired when a track is added to a TextTrackList.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/addtrack_event">addtrack event - MDN</a>
   */
  event TrackEvent addtrack;
  /**
   * The change event is fired when a text track is made active or inactive, or a textTrackList is otherwise changed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/change_event">change event - MDN</a>
   */
  event Event change;
  /**
   * The TextTrackList method getTrackById() returns the first TextTrack object from the track list whose id matches the specified string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/getTrackById">TextTrackList.getTrackById - MDN</a>
   */
  TextTrack? getTrackById( DOMString id );
  /**
   * The TextTrackList interface is used to represent a list of the text tracks defined by the track element, with each track represented by a separate textTrack object in the list.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList">TextTrackList - MDN</a>
   */
  getter TextTrack ( unsigned long index );
};

/**
 * The TimeRanges interface is used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the audio and video elements.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges">TimeRanges - MDN</a>
 */
[Exposed=Window]
interface TimeRanges {
  /**
   * The TimeRanges.length read-only property returns the number of ranges in the object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/length">TimeRanges.length - MDN</a>
   */
  readonly attribute unsigned long length;
  /**
   * Returns the time offset at which a specified time range ends.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/end">TimeRanges.end - MDN</a>
   */
  double end( unsigned long index );
  /**
   * Returns the time offset at which a specified time range begins.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/start">TimeRanges.start - MDN</a>
   */
  double start( unsigned long index );
};

/**
 * The Touch interface represents a single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Touch">Touch - MDN</a>
 */
[Exposed=Window]
interface Touch {
  readonly attribute float altitudeAngle;
  readonly attribute float azimuthAngle;
  readonly attribute double clientX;
  readonly attribute double clientY;
  readonly attribute float force;
  readonly attribute long identifier;
  readonly attribute double pageX;
  readonly attribute double pageY;
  readonly attribute float radiusX;
  readonly attribute float radiusY;
  readonly attribute float rotationAngle;
  readonly attribute double screenX;
  readonly attribute double screenY;
  readonly attribute EventTarget target;
  readonly attribute TouchType touchType;
  /**
   * The Touch() constructor creates a new Touch object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Touch/Touch">Touch.Touch - MDN</a>
   */
  constructor( TouchInit touchInitDict );
};

/**
 * The TouchEvent interface represents an UIEvent which is sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent">TouchEvent - MDN</a>
 */
[Exposed=Window]
interface TouchEvent : UIEvent {
  /**
   * A Boolean value indicating whether or not the alt (Alternate) key is enabled when the touch event is created. If the alt key is enabled, the attribute's value is true. Otherwise, it is false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/altKey">TouchEvent.altKey - MDN</a>
   */
  readonly attribute boolean altKey;
  /**
   * The changedTouches read-only property is a TouchList whose touch points (Touch objects) varies depending on the event type, as follows:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/changedTouches">TouchEvent.changedTouches - MDN</a>
   */
  readonly attribute TouchList changedTouches;
  /**
   * A Boolean value indicating whether the control (Control) key is enabled when the touch event is created. If this key is enabled, the attribute's value is true. Otherwise, it is false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/ctrlKey">TouchEvent.ctrlKey - MDN</a>
   */
  readonly attribute boolean ctrlKey;
  /**
   * A Boolean value indicating whether or not the Meta key is enabled when the touch event is created. If this key is enabled, the attribute's value is true. Otherwise, it is false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/metaKey">TouchEvent.metaKey - MDN</a>
   */
  readonly attribute boolean metaKey;
  /**
   * A Boolean value indicating whether or not the shift key is enabled when the touch event is created. If this key is enabled, the attribute's value is true. Otherwise, it is false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/shiftKey">TouchEvent.shiftKey - MDN</a>
   */
  readonly attribute boolean shiftKey;
  /**
   * The targetTouches read-only property is a TouchList listing all the Touch objects for touch points that are still in contact with the touch surface and whose touchstart event occurred inside the same target element as the current target element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/targetTouches">TouchEvent.targetTouches - MDN</a>
   */
  readonly attribute TouchList targetTouches;
  /**
   * touches is a read-only TouchList listing all the Touch objects for touch points that are currently in contact with the touch surface, regardless of whether or not they've changed or what their target element was at touchstart time.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches">TouchEvent.touches - MDN</a>
   */
  readonly attribute TouchList touches;
  /**
   * The TouchEvent() constructor creates a new TouchEvent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent">TouchEvent.TouchEvent - MDN</a>
   */
  constructor( DOMString type, optional TouchEventInit eventInitDict = {} );
};

/**
 * The TouchList interface represents a list of contact points on a touch surface. For example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding TouchList object would have one Touch object for each finger, for a total of three entries.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TouchList">TouchList - MDN</a>
 */
[Exposed=Window]
interface TouchList {
  /**
   * The length read-only property indicates the number of items (touch points) in a given TouchList.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TouchList/length">TouchList.length - MDN</a>
   */
  readonly attribute unsigned long length;
  /**
   * The item() method returns the Touch object at the specified index in the TouchList.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TouchList/item">TouchList.item - MDN</a>
   */
  getter Touch? item( unsigned long index );
};

/**
 * The TrackEvent interface, which is part of the HTML DOM specification, is used for events which represent changes to a set of available tracks on an HTML media element; these events are addtrack and removetrack.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TrackEvent">TrackEvent - MDN</a>
 */
[Exposed=Window]
interface TrackEvent : Event {
  /**
   * The read-only track property of the TrackEvent interface specifies the media track object to which the event applies.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TrackEvent/track">TrackEvent.track - MDN</a>
   */
  readonly attribute ( VideoTrack or AudioTrack or TextTrack )? track;
  /**
   * The TrackEvent() constructor creates and returns a new TrackEvent object describing an event which occurred on a list of tracks (AudioTrackList, VideoTrackList, or TextTrackList).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TrackEvent/TrackEvent">TrackEvent.TrackEvent - MDN</a>
   */
  constructor( DOMString type, optional TrackEventInit eventInitDict = {} );
};

/**
 * The TransformStream interface of the Streams API represents a set of transformable data.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TransformStream">TransformStream - MDN</a>
 */
[LegacyNoInterfaceObject, Exposed=(Window,Worker)]
interface TransformStream {
};

/**
 * The TransitionEvent interface represents events providing information related to transitions.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent">TransitionEvent - MDN</a>
 */
[Exposed=Window]
interface TransitionEvent : Event {
  /**
   * The TransitionEvent.elapsedTime read-only property is a float giving the amount of time the animation has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/elapsedTime">TransitionEvent.elapsedTime - MDN</a>
   */
  readonly attribute double elapsedTime;
  readonly attribute CSSOMString propertyName;
  /**
   * The TransitionEvent.pseudoElement read-only property is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string: ''.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/pseudoElement">TransitionEvent.pseudoElement - MDN</a>
   */
  readonly attribute CSSOMString pseudoElement;
  /**
   * The TransitionEvent() constructor returns a newly created TransitionEvent, representing an event in relation with an transition.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/TransitionEvent">TransitionEvent.TransitionEvent - MDN</a>
   */
  constructor( CSSOMString type, optional TransitionEventInit transitionEventInitDict = {} );
};

/**
 * The TreeWalker object represents the nodes of a document subtree and a position within them.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker">TreeWalker - MDN</a>
 */
[Exposed=Window]
interface TreeWalker {
  /**
   * The TreeWalker.filter read-only property returns a NodeFilter that is the filtering object associated with the TreeWalker.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/filter">TreeWalker.filter - MDN</a>
   */
  readonly attribute NodeFilter? filter;
  /**
   * The TreeWalker.root read-only property returns the node that is the root of what the TreeWalker traverses.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/root">TreeWalker.root - MDN</a>
   */
  [SameObject]
  readonly attribute Node root;
  /**
   * The TreeWalker.whatToShow read-only property returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/whatToShow">TreeWalker.whatToShow - MDN</a>
   */
  readonly attribute unsigned long whatToShow;
  /**
   * The TreeWalker.currentNode property represents the Node on which the TreeWalker is currently pointing at.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/currentNode">TreeWalker.currentNode - MDN</a>
   */
  attribute Node currentNode;
  Node? firstChild();
  Node? lastChild();
  Node? nextNode();
  Node? nextSibling();
  Node? parentNode();
  Node? previousNode();
  Node? previousSibling();
};

/**
 * The UIEvent interface represents simple user interface events.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/UIEvent">UIEvent - MDN</a>
 */
[Exposed=Window]
interface UIEvent : Event {
  readonly attribute long detail;
  readonly attribute Window? view;
  readonly attribute unsigned long which;
  constructor( DOMString type, optional UIEventInit eventInitDict );
};

/**
 * The URL interface is used to parse, construct, normalize, and encode URLs. It works by providing properties which allow you to easily read and modify the components of a URL.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL">URL - MDN</a>
 */
[Exposed=(Window,Worker), LegacyWindowAlias=webkitURL]
interface URL {
  /**
   * The origin read-only property of the URL interface returns a USVString containing the Unicode serialization of the origin of the represented URL.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/origin">URL.origin - MDN</a>
   */
  readonly attribute USVString origin;
  /**
   * The searchParams readonly property of the URL interface returns a URLSearchParams object allowing access to the GET decoded query arguments contained in the URL.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams">URL.searchParams - MDN</a>
   */
  [SameObject]
  readonly attribute URLSearchParams searchParams;
  /**
   * The hash property of the URL interface is a USVString containing a '#' followed by the fragment identifier of the URL.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/hash">URL.hash - MDN</a>
   */
  attribute USVString hash;
  /**
   * The host property of the URL interface is a USVString containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', followed by the port of the URL.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/host">URL.host - MDN</a>
   */
  attribute USVString host;
  /**
   * The hostname property of the URL interface is a USVString containing the domain name of the URL.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/hostname">URL.hostname - MDN</a>
   */
  attribute USVString hostname;
  /**
   * The password property of the URL interface is a USVString containing the password specified before the domain name.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/password">URL.password - MDN</a>
   */
  attribute USVString password;
  /**
   * The pathname property of the URL interface is a USVString containing an initial '/' followed by the path of the URL (or the empty string if there is no path).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/pathname">URL.pathname - MDN</a>
   */
  attribute USVString pathname;
  /**
   * The port property of the URL interface is a USVString containing the port number of the URL. If the URL does not contain an explicit port number, it will be set to ''.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/port">URL.port - MDN</a>
   */
  attribute USVString port;
  /**
   * The protocol property of the URL interface is a USVString representing the protocol scheme of the URL, including the final ':'.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/protocol">URL.protocol - MDN</a>
   */
  attribute USVString protocol;
  /**
   * The search property of the URL interface is a search string, also called a query string, that is a USVString containing a '?' followed by the parameters of the URL.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/search">URL.search - MDN</a>
   */
  attribute USVString search;
  /**
   * The username property of the URL interface is a USVString containing the username specified before the domain name.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/username">URL.username - MDN</a>
   */
  attribute USVString username;
  /**
   * The href property of the URL interface is a USVString containing the whole URL.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/href">URL.href - MDN</a>
   */
  stringifier attribute USVString href;
  /**
   * The URL.createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL">URL.createObjectURL - MDN</a>
   */
  static DOMString createObjectURL( Blob blob );
  /**
   * The URL.createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL">URL.createObjectURL - MDN</a>
   */
  static DOMString createObjectURL( MediaSource mediaSource );
  /**
   * The URL.revokeObjectURL() static method releases an existing object URL which was previously created by calling URL.createObjectURL().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL">URL.revokeObjectURL - MDN</a>
   */
  static void revokeObjectURL( DOMString url );
  constructor( USVString url, optional USVString base );
  /**
   * The toJSON() method of the URL interface returns a USVString containing a serialized version of the URL, although in practice it seems to have the same effect as URL.toString().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/toJSON">URL.toJSON - MDN</a>
   */
  USVString toJSON();
};

/**
 * The URLSearchParams interface defines utility methods to work with the query string of a URL.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams">URLSearchParams - MDN</a>
 */
[Exposed=(Window,Worker)]
interface URLSearchParams {
  iterable<USVString, USVString>;
  /**
   * The URLSearchParams() constructor creates and returns a new URLSearchParams object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/URLSearchParams">URLSearchParams.URLSearchParams - MDN</a>
   */
  constructor( optional ( sequence<sequence<USVString>> or record<USVString, USVString> or USVString ) init = "" );
  /**
   * The append() method of the URLSearchParams interface appends a specified key/value pair as a new search parameter.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/append">URLSearchParams.append - MDN</a>
   */
  void append( USVString name, USVString value );
  /**
   * The delete() method of the URLSearchParams interface deletes the given search parameter and all its associated values, from the list of all search parameters.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/delete">URLSearchParams.delete - MDN</a>
   */
  void delete( USVString name );
  /**
   * The get() method of the URLSearchParams interface returns the first value associated to the given search parameter.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/get">URLSearchParams.get - MDN</a>
   */
  USVString? get( USVString name );
  /**
   * The getAll() method of the URLSearchParams interface returns all the values associated with a given search parameter as an array.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/getAll">URLSearchParams.getAll - MDN</a>
   */
  sequence<USVString> getAll( USVString name );
  /**
   * The has() method of the URLSearchParams interface returns a Boolean that indicates whether a parameter with the specified name exists.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/has">URLSearchParams.has - MDN</a>
   */
  boolean has( USVString name );
  /**
   * The set() method of the URLSearchParams interface sets the value associated with a given search parameter to the given value. If there were several matching values, this method deletes the others. If the search parameter doesn't exist, this method creates it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/set">URLSearchParams.set - MDN</a>
   */
  void set( USVString name, USVString value );
  /**
   * The URLSearchParams.sort() method sorts all key/value pairs contained in this object in place and returns undefined. The sort order is according to unicode code points of the keys. This method uses a stable sorting algorithm (i.e. the relative order between key/value pairs with equal keys will be preserved).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/sort">URLSearchParams.sort - MDN</a>
   */
  void sort();
  /**
   * The URLSearchParams interface defines utility methods to work with the query string of a URL.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams">URLSearchParams - MDN</a>
   */
  stringifier;
};

/**
 * This interface also inherits properties from TextTrackCue.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VTTCue">VTTCue - MDN</a>
 */
[Exposed=Window]
interface VTTCue : TextTrackCue {
  attribute AlignSetting align;
  attribute LineAndPositionSetting line;
  attribute LineAlignSetting lineAlign;
  attribute LineAndPositionSetting position;
  attribute PositionAlignSetting positionAlign;
  attribute VTTRegion? region;
  attribute double size;
  attribute boolean snapToLines;
  attribute DOMString text;
  attribute DirectionSetting vertical;
  /**
   * The VTTCue() constructor creates and returns a new VTTCue object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/VTTCue">VTTCue.VTTCue - MDN</a>
   */
  constructor( double startTime, double endTime, DOMString text );
  DocumentFragment getCueAsHTML();
};

/**
 * The VTTRegion interface—part of the API for handling WebVTT (text tracks on media presentations)—describes a portion of the video to render a VTTCue onto.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion">VTTRegion - MDN</a>
 */
[Exposed=Window, Constructor]
interface VTTRegion {
  attribute DOMString id;
  attribute unsigned long lines;
  attribute double regionAnchorX;
  attribute double regionAnchorY;
  attribute ScrollSetting scroll;
  attribute double viewportAnchorX;
  attribute double viewportAnchorY;
  attribute double width;
};

/**
 * The ValidityState interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ValidityState">ValidityState - MDN</a>
 */
[Exposed=Window]
interface ValidityState {
  /**
   * The read-only badInput property of a ValidityState object indicates if the user has provided input that the browser is unable to convert. For example, if you have a number input element whose content is a string. Note: While this is unsupported in Internet Explorer, any non-numeric value will be dismissed from the field if it is a number input.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/badInput">ValidityState.badInput - MDN</a>
   */
  readonly attribute boolean badInput;
  readonly attribute boolean customError;
  /**
   * If the field supports the pattern attribute -- which means the input is of type text, tel, email, url, password,  or search -- and the pattern value is set to a valid regular expression, if the value don't doesn't conform to the constraints set by the pattern value, the patternMismatch property will be true.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/patternMismatch">ValidityState.patternMismatch - MDN</a>
   */
  readonly attribute boolean patternMismatch;
  /**
   * The read-only rangeOverflow property of a ValidityState object indicates if the value of an input, after having been edited by the user, does not conform to the constraints set by the element's max attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/rangeOverflow">ValidityState.rangeOverflow - MDN</a>
   */
  readonly attribute boolean rangeOverflow;
  /**
   * The read-only rangeUnderflow property of a ValidityState object indicates if the value of an input, after having been edited by the user, does not conform to the constraints set by the element's min attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/rangeUnderflow">ValidityState.rangeUnderflow - MDN</a>
   */
  readonly attribute boolean rangeUnderflow;
  /**
   * The read-only stepMismatch property of a ValidityState object indicates if the value of an input, after having been edited by the user, does not conform to the constraints set by the element's step attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/stepMismatch">ValidityState.stepMismatch - MDN</a>
   */
  readonly attribute boolean stepMismatch;
  /**
   * The read-only tooLong property of a ValidityState object indicates if the value of an input or textarea, after having been edited by the user, exceeds the maximum code-unit length established by the element's maxlength attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooLong">ValidityState.tooLong - MDN</a>
   */
  readonly attribute boolean tooLong;
  /**
   * The read-only tooShort property of a ValidityState object indicates if the value of an input, button, select, output, fieldset or textarea, after having been edited by the user, is less than the minimum code-unit length established by the element's minlength attribute.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooShort">ValidityState.tooShort - MDN</a>
   */
  readonly attribute boolean tooShort;
  /**
   * If the type attribute expects specific strings, such as the email and url types and the value don't doesn't conform to the constraints set by the type, the typeMismatch property will be true.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/typeMismatch">ValidityState.typeMismatch - MDN</a>
   */
  readonly attribute boolean typeMismatch;
  readonly attribute boolean valid;
  readonly attribute boolean valueMissing;
};

[Exposed=Window, SecureContext]
interface ValueEvent : Event {
  readonly attribute any value;
  constructor( DOMString type, optional ValueEventInit initDict = {} );
};

/**
 * A VideoPlaybackQuality object is returned by the HTMLVideoElement.getVideoPlaybackQuality() method and contains metrics that can be used to determine the playback quality of a video.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality">VideoPlaybackQuality - MDN</a>
 */
[Exposed=Window]
interface VideoPlaybackQuality {
  readonly attribute unsigned long corruptedVideoFrames;
  /**
   * The read-only creationTime property on the VideoPlaybackQuality interface reports the number of milliseconds since the browsing context was created this quality sample was recorded.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality/creationTime">VideoPlaybackQuality.creationTime - MDN</a>
   */
  readonly attribute DOMHighResTimeStamp creationTime;
  /**
   * The read-only droppedVideoFrames property of the VideoPlaybackQuality interface returns the number of video frames which have been dropped rather than being displayed since the last time the media was loaded into the HTMLVideoElement.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality/droppedVideoFrames">VideoPlaybackQuality.droppedVideoFrames - MDN</a>
   */
  readonly attribute unsigned long droppedVideoFrames;
  /**
   * The VideoPlaybackQuality interface's totalVideoFrames read-only property returns the total number of video frames that have been displayed or dropped since the media was loaded.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality/totalVideoFrames">VideoPlaybackQuality.totalVideoFrames - MDN</a>
   */
  readonly attribute unsigned long totalVideoFrames;
};

/**
 * The VideoTrack interface represents a single video track from a video element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack">VideoTrack - MDN</a>
 */
[Exposed=Window]
interface VideoTrack {
  /**
   * The id property contains a string which uniquely identifies the track represented by the VideoTrack.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/id">VideoTrack.id - MDN</a>
   */
  readonly attribute DOMString id;
  /**
   * The kind property contains a string indicating the category of video contained in the VideoTrack.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/kind">VideoTrack.kind - MDN</a>
   */
  readonly attribute DOMString kind;
  /**
   * The read-only VideoTrack property label returns a string specifying the video track's human-readable label, if one is available; otherwise, it returns an empty string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/label">VideoTrack.label - MDN</a>
   */
  readonly attribute DOMString label;
  /**
   * The read-only VideoTrack property language returns a string identifying the language used in the video track.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/language">VideoTrack.language - MDN</a>
   */
  readonly attribute DOMString language;
  /**
   * The read-only VideoTrack property sourceBuffer returns the SourceBuffer that created the track, or null if the track was not created by a SourceBuffer or the SourceBuffer has been removed from the MediaSource.sourceBuffers attribute of its parent media source.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/sourceBuffer">VideoTrack.sourceBuffer - MDN</a>
   */
  readonly attribute SourceBuffer? sourceBuffer;
  /**
   * The VideoTrack property selected controls whether or not a particular video track is active.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/selected">VideoTrack.selected - MDN</a>
   */
  attribute boolean selected;
};

/**
 * The VideoTrackList interface is used to represent a list of the video tracks contained within a video element, with each track represented by a separate VideoTrack object in the list.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList">VideoTrackList - MDN</a>
 */
[Exposed=Window]
interface VideoTrackList : EventTarget {
  /**
   * The read-only VideoTrackList property length returns the number of entries in the VideoTrackList, each of which is a VideoTrack representing one video track in the media element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/length">VideoTrackList.length - MDN</a>
   */
  readonly attribute unsigned long length;
  /**
   * The read-only VideoTrackList property selectedIndex returns the index of the currently selected track, if any, or -1 otherwise.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/selectedIndex">VideoTrackList.selectedIndex - MDN</a>
   */
  readonly attribute long selectedIndex;
  /**
   * The VideoTrackList property onaddtrack is an event handler which is called when the addtrack event occurs, indicating that a new video track has been added to the media element whose video tracks the VideoTrackList represents.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/onaddtrack">VideoTrackList.onaddtrack - MDN</a>
   */
  attribute NullableEventHandler onaddtrack;
  /**
   * The VideoTrackList property onchange is an event handler which is called when the change event occurs, indicating that a VideoTrack in the VideoTrackList has been made active.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/onchange">VideoTrackList.onchange - MDN</a>
   */
  attribute NullableEventHandler onchange;
  /**
   * The VideoTrackList onremovetrack event handler is called when the removetrack event occurs, indicating that a video track has been removed from the media element, and therefore also from the VideoTrackList.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/onremovetrack">VideoTrackList.onremovetrack - MDN</a>
   */
  attribute NullableEventHandler onremovetrack;
  /**
   * The addtrack event is fired when a track is added to a VideoTrackList.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/addtrack_event">addtrack event - MDN</a>
   */
  event TrackEvent addtrack;
  /**
   * The change event is fired when a video track is made active or inactive, for example by changing the track's selected property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/change_event">change event - MDN</a>
   */
  event Event change;
  /**
   * The removetrack event is fired when a track is removed from a VideoTrackList.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/removetrack_event">removetrack event - MDN</a>
   */
  event TrackEvent removetrack;
  /**
   * The VideoTrackList method getTrackById() returns the first VideoTrack object from the track list whose id matches the specified string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/getTrackById">VideoTrackList.getTrackById - MDN</a>
   */
  VideoTrack? getTrackById( DOMString id );
  /**
   * The VideoTrackList interface is used to represent a list of the video tracks contained within a video element, with each track represented by a separate VideoTrack object in the list.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList">VideoTrackList - MDN</a>
   */
  getter VideoTrack ( unsigned long index );
};

/**
 * The VisualViewport interface of the Visual Viewport API represents the visual viewport for a given window. For a page containing iframes, each iframe, as well as the containing page, will have a unique window object. Each window on a page will have a unique VisualViewport representing the properties associated with that window.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport">VisualViewport - MDN</a>
 */
[Exposed=Window]
interface VisualViewport : EventTarget {
  /**
   * The height read-only property of the VisualViewport interface returns the height of the visual viewport, in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport/height">VisualViewport.height - MDN</a>
   */
  readonly attribute double height;
  /**
   * The offsetLeft read-only property of the VisualViewport interface returns the offset of the left edge of the visual viewport from the left edge of the layout viewport in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport/offsetLeft">VisualViewport.offsetLeft - MDN</a>
   */
  readonly attribute double offsetLeft;
  /**
   * The offsetTop read-only property of the VisualViewport interface returns the offset of the top edge of the visual viewport from the top edge of the layout viewport in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport/offsetTop">VisualViewport.offsetTop - MDN</a>
   */
  readonly attribute double offsetTop;
  /**
   * The pageLeft read-only property of the VisualViewport interface returns the x coordinate of the left edge of the visual viewport relative to the initial containing block origin, in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport/pageLeft">VisualViewport.pageLeft - MDN</a>
   */
  readonly attribute double pageLeft;
  /**
   * The pageTop read-only property of the VisualViewport interface returns the y coordinate of the top edge of the visual viewport relative to the initial containing block origin, in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport/pageTop">VisualViewport.pageTop - MDN</a>
   */
  readonly attribute double pageTop;
  /**
   * The scale read-only property of the VisualViewport interface returns the pinch-zoom scaling factor applied to the visual viewport.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport/scale">VisualViewport.scale - MDN</a>
   */
  readonly attribute double scale;
  /**
   * The width read-only property of the VisualViewport interface returns the width of the visual viewport, in CSS pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport/width">VisualViewport.width - MDN</a>
   */
  readonly attribute double width;
  /**
   * The onresize event handler of the VisualViewport interface is called when a viewport is resized, i.e. when the resize event is fired.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport/onresize">VisualViewport.onresize - MDN</a>
   */
  attribute NullableEventHandler onresize;
  /**
   * The onscroll event handler of the VisualViewport interface is called when a viewport is scrolled, i.e. when the scroll event is fired.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport/onscroll">VisualViewport.onscroll - MDN</a>
   */
  attribute NullableEventHandler onscroll;
  /**
   * You can use the resize event in an addEventListener method:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport/resize_event">resize event - MDN</a>
   */
  event Event resize;
  /**
   * You can use the scroll event in an addEventListener method:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport/scroll_event">scroll event - MDN</a>
   */
  event Event scroll;
};

/**
 * The WEBGL_color_buffer_float extension is part of the WebGL API and adds the ability to render to 32-bit floating-point color buffers.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float">WEBGL_color_buffer_float - MDN</a>
 */
[LegacyNoInterfaceObject]
interface WEBGL_color_buffer_float {
  const GLenum FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211;
  const GLenum RGBA32F_EXT = 0x8814;
  const GLenum UNSIGNED_NORMALIZED_EXT = 0x8C17;
};

/**
 * The WEBGL_compressed_texture_astc extension is part of the WebGL API and exposes Adaptive Scalable Texture Compression (ASTC) compressed texture formats to WebGL.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc">WEBGL_compressed_texture_astc - MDN</a>
 */
[LegacyNoInterfaceObject]
interface WEBGL_compressed_texture_astc {
  const GLenum COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;
  const GLenum COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;
  const GLenum COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;
  const GLenum COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;
  const GLenum COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;
  const GLenum COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;
  const GLenum COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;
  const GLenum COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;
  const GLenum COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;
  const GLenum COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;
  const GLenum COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;
  const GLenum COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;
  const GLenum COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;
  const GLenum COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;
  const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;
  const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;
  const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;
  const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;
  const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;
  const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;
  const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;
  const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;
  const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;
  const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;
  const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;
  const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;
  const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;
  const GLenum COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;
  sequence<DOMString> getSupportedProfiles();
};

/**
 * The WEBGL_compressed_texture_s3tc extension is part of the WebGL API and exposes four S3TC compressed texture formats.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc">WEBGL_compressed_texture_s3tc - MDN</a>
 */
[LegacyNoInterfaceObject]
interface WEBGL_compressed_texture_s3tc {
  const GLenum COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
  const GLenum COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
  const GLenum COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
  const GLenum COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
};

/**
 * The WEBGL_compressed_texture_s3tc_srgb extension is part of the WebGL API and exposes four S3TC compressed texture formats for the sRGB colorspace.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb">WEBGL_compressed_texture_s3tc_srgb - MDN</a>
 */
[LegacyNoInterfaceObject]
interface WEBGL_compressed_texture_s3tc_srgb {
  const GLenum COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
  const GLenum COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
  const GLenum COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
  const GLenum COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
};

/**
 * The WEBGL_debug_renderer_info extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info">WEBGL_debug_renderer_info - MDN</a>
 */
[LegacyNoInterfaceObject]
interface WEBGL_debug_renderer_info {
  const GLenum UNMASKED_RENDERER_WEBGL = 0x9246;
  const GLenum UNMASKED_VENDOR_WEBGL = 0x9245;
};

/**
 * The WEBGL_debug_shaders extension is part of the WebGL API and exposes a method to debug shaders from privileged contexts.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_shaders">WEBGL_debug_shaders - MDN</a>
 */
[LegacyNoInterfaceObject]
interface WEBGL_debug_shaders {
  /**
   * The WEBGL_debug_shaders.getTranslatedShaderSource() method is part of the WebGL API and allows you to debug a translated shader.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_shaders/getTranslatedShaderSource">WEBGL_debug_shaders.getTranslatedShaderSource - MDN</a>
   */
  DOMString getTranslatedShaderSource( WebGLShader shader );
};

/**
 * The WEBGL_depth_texture extension is part of the WebGL API and defines 2D depth and depth-stencil textures.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture">WEBGL_depth_texture - MDN</a>
 */
[LegacyNoInterfaceObject]
interface WEBGL_depth_texture {
  const GLenum UNSIGNED_INT_24_8_WEBGL = 0x84FA;
};

/**
 * The WEBGL_draw_buffers extension is part of the WebGL API and enables a fragment shader to write to several textures, which is useful for deferred shading, for example.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers">WEBGL_draw_buffers - MDN</a>
 */
[LegacyNoInterfaceObject]
interface WEBGL_draw_buffers {
  const GLenum COLOR_ATTACHMENT0_WEBGL = 0x8CE0;
  const GLenum COLOR_ATTACHMENT10_WEBGL = 0x8CEA;
  const GLenum COLOR_ATTACHMENT11_WEBGL = 0x8CEB;
  const GLenum COLOR_ATTACHMENT12_WEBGL = 0x8CEC;
  const GLenum COLOR_ATTACHMENT13_WEBGL = 0x8CED;
  const GLenum COLOR_ATTACHMENT14_WEBGL = 0x8CEE;
  const GLenum COLOR_ATTACHMENT15_WEBGL = 0x8CEF;
  const GLenum COLOR_ATTACHMENT1_WEBGL = 0x8CE1;
  const GLenum COLOR_ATTACHMENT2_WEBGL = 0x8CE2;
  const GLenum COLOR_ATTACHMENT3_WEBGL = 0x8CE3;
  const GLenum COLOR_ATTACHMENT4_WEBGL = 0x8CE4;
  const GLenum COLOR_ATTACHMENT5_WEBGL = 0x8CE5;
  const GLenum COLOR_ATTACHMENT6_WEBGL = 0x8CE6;
  const GLenum COLOR_ATTACHMENT7_WEBGL = 0x8CE7;
  const GLenum COLOR_ATTACHMENT8_WEBGL = 0x8CE8;
  const GLenum COLOR_ATTACHMENT9_WEBGL = 0x8CE9;
  const GLenum DRAW_BUFFER0_WEBGL = 0x8825;
  const GLenum DRAW_BUFFER10_WEBGL = 0x882F;
  const GLenum DRAW_BUFFER11_WEBGL = 0x8830;
  const GLenum DRAW_BUFFER12_WEBGL = 0x8831;
  const GLenum DRAW_BUFFER13_WEBGL = 0x8832;
  const GLenum DRAW_BUFFER14_WEBGL = 0x8833;
  const GLenum DRAW_BUFFER15_WEBGL = 0x8834;
  const GLenum DRAW_BUFFER1_WEBGL = 0x8826;
  const GLenum DRAW_BUFFER2_WEBGL = 0x8827;
  const GLenum DRAW_BUFFER3_WEBGL = 0x8828;
  const GLenum DRAW_BUFFER4_WEBGL = 0x8829;
  const GLenum DRAW_BUFFER5_WEBGL = 0x882A;
  const GLenum DRAW_BUFFER6_WEBGL = 0x882B;
  const GLenum DRAW_BUFFER7_WEBGL = 0x882C;
  const GLenum DRAW_BUFFER8_WEBGL = 0x882D;
  const GLenum DRAW_BUFFER9_WEBGL = 0x882E;
  const GLenum MAX_COLOR_ATTACHMENTS_WEBGL = 0x8CDF;
  const GLenum MAX_DRAW_BUFFERS_WEBGL = 0x8824;
  void drawBuffersWEBGL( sequence<GLenum> buffers );
};

/**
 * The WEBGL_lose_context extension is part of the WebGL API and exposes functions to simulate losing and restoring a WebGLRenderingContext.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context">WEBGL_lose_context - MDN</a>
 */
[LegacyNoInterfaceObject]
interface WEBGL_lose_context {
  /**
   * The WEBGL_lose_context.loseContext() method is part of the WebGL API and allows you to simulate losing the context of a WebGLRenderingContext context.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context/loseContext">WEBGL_lose_context.loseContext - MDN</a>
   */
  void loseContext();
  /**
   * The WEBGL_lose_context.restoreContext() method is part of the WebGL API and allows you to simulate restoring the context of a WebGLRenderingContext object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context/restoreContext">WEBGL_lose_context.restoreContext - MDN</a>
   */
  void restoreContext();
};

/**
 * A WaveShaperNode always has exactly one input and one output.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode">WaveShaperNode - MDN</a>
 */
[Exposed=Window]
interface WaveShaperNode : AudioNode {
  /**
   * The curve property of the WaveShaperNode interface is a Float32Array of numbers describing the distortion to apply.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/curve">WaveShaperNode.curve - MDN</a>
   */
  attribute Float32Array? curve;
  /**
   * The oversample property of the WaveShaperNode interface is an enumerated value indicating if oversampling must be used. Oversampling is a technique for creating more samples (up-sampling) before applying a distortion effect to the audio signal.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/oversample">WaveShaperNode.oversample - MDN</a>
   */
  attribute OverSampleType oversample;
  /**
   * The WaveShaperNode() constructor of the Web Audio API creates a new WaveShaperNode object which is an AudioNode that represents a non-linear distorter.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/WaveShaperNode">WaveShaperNode.WaveShaperNode - MDN</a>
   */
  constructor( BaseAudioContext context, optional WaveShaperOptions options = {} );
};

/**
 * The WebGL2RenderingContext interface provides the OpenGL ES 3.0 rendering context for the drawing surface of an HTML canvas element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext">WebGL2RenderingContext - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGL2RenderingContext {
  const GLenum ACTIVE_ATTRIBUTES = 0x8B89;
  const GLenum ACTIVE_TEXTURE = 0x84E0;
  const GLenum ACTIVE_UNIFORMS = 0x8B86;
  const GLenum ACTIVE_UNIFORM_BLOCKS = 0x8A36;
  const GLenum ALIASED_LINE_WIDTH_RANGE = 0x846E;
  const GLenum ALIASED_POINT_SIZE_RANGE = 0x846D;
  const GLenum ALPHA = 0x1906;
  const GLenum ALPHA_BITS = 0x0D55;
  const GLenum ALREADY_SIGNALED = 0x911A;
  const GLenum ALWAYS = 0x0207;
  const GLenum ANY_SAMPLES_PASSED = 0x8C2F;
  const GLenum ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
  const GLenum ARRAY_BUFFER = 0x8892;
  const GLenum ARRAY_BUFFER_BINDING = 0x8894;
  const GLenum ATTACHED_SHADERS = 0x8B85;
  const GLenum BACK = 0x0405;
  const GLenum BLEND = 0x0BE2;
  const GLenum BLEND_COLOR = 0x8005;
  const GLenum BLEND_DST_ALPHA = 0x80CA;
  const GLenum BLEND_DST_RGB = 0x80C8;
  const GLenum BLEND_EQUATION = 0x8009;
  const GLenum BLEND_EQUATION_ALPHA = 0x883D;
  const GLenum BLEND_EQUATION_RGB = 0x8009;
  const GLenum BLEND_SRC_ALPHA = 0x80CB;
  const GLenum BLEND_SRC_RGB = 0x80C9;
  const GLenum BLUE_BITS = 0x0D54;
  const GLenum BOOL = 0x8B56;
  const GLenum BOOL_VEC2 = 0x8B57;
  const GLenum BOOL_VEC3 = 0x8B58;
  const GLenum BOOL_VEC4 = 0x8B59;
  const GLenum BROWSER_DEFAULT_WEBGL = 0x9244;
  const GLenum BUFFER_SIZE = 0x8764;
  const GLenum BUFFER_USAGE = 0x8765;
  const GLenum BYTE = 0x1400;
  const GLenum CCW = 0x0901;
  const GLenum CLAMP_TO_EDGE = 0x812F;
  const GLenum COLOR = 0x1800;
  const GLenum COLOR_ATTACHMENT0 = 0x8CE0;
  const GLenum COLOR_ATTACHMENT1 = 0x8CE1;
  const GLenum COLOR_ATTACHMENT10 = 0x8CEA;
  const GLenum COLOR_ATTACHMENT11 = 0x8CEB;
  const GLenum COLOR_ATTACHMENT12 = 0x8CEC;
  const GLenum COLOR_ATTACHMENT13 = 0x8CED;
  const GLenum COLOR_ATTACHMENT14 = 0x8CEE;
  const GLenum COLOR_ATTACHMENT15 = 0x8CEF;
  const GLenum COLOR_ATTACHMENT2 = 0x8CE2;
  const GLenum COLOR_ATTACHMENT3 = 0x8CE3;
  const GLenum COLOR_ATTACHMENT4 = 0x8CE4;
  const GLenum COLOR_ATTACHMENT5 = 0x8CE5;
  const GLenum COLOR_ATTACHMENT6 = 0x8CE6;
  const GLenum COLOR_ATTACHMENT7 = 0x8CE7;
  const GLenum COLOR_ATTACHMENT8 = 0x8CE8;
  const GLenum COLOR_ATTACHMENT9 = 0x8CE9;
  const GLenum COLOR_BUFFER_BIT = 0x00004000;
  const GLenum COLOR_CLEAR_VALUE = 0x0C22;
  const GLenum COLOR_WRITEMASK = 0x0C23;
  const GLenum COMPARE_REF_TO_TEXTURE = 0x884E;
  const GLenum COMPILE_STATUS = 0x8B81;
  const GLenum COMPRESSED_TEXTURE_FORMATS = 0x86A3;
  const GLenum CONDITION_SATISFIED = 0x911C;
  const GLenum CONSTANT_ALPHA = 0x8003;
  const GLenum CONSTANT_COLOR = 0x8001;
  const GLenum CONTEXT_LOST_WEBGL = 0x9242;
  const GLenum COPY_READ_BUFFER = 0x8F36;
  const GLenum COPY_READ_BUFFER_BINDING = 0x8F36;
  const GLenum COPY_WRITE_BUFFER = 0x8F37;
  const GLenum COPY_WRITE_BUFFER_BINDING = 0x8F37;
  const GLenum CULL_FACE = 0x0B44;
  const GLenum CULL_FACE_MODE = 0x0B45;
  const GLenum CURRENT_PROGRAM = 0x8B8D;
  const GLenum CURRENT_QUERY = 0x8865;
  const GLenum CURRENT_VERTEX_ATTRIB = 0x8626;
  const GLenum CW = 0x0900;
  const GLenum DECR = 0x1E03;
  const GLenum DECR_WRAP = 0x8508;
  const GLenum DELETE_STATUS = 0x8B80;
  const GLenum DEPTH = 0x1801;
  const GLenum DEPTH24_STENCIL8 = 0x88F0;
  const GLenum DEPTH32F_STENCIL8 = 0x8CAD;
  const GLenum DEPTH_ATTACHMENT = 0x8D00;
  const GLenum DEPTH_BITS = 0x0D56;
  const GLenum DEPTH_BUFFER_BIT = 0x00000100;
  const GLenum DEPTH_CLEAR_VALUE = 0x0B73;
  const GLenum DEPTH_COMPONENT = 0x1902;
  const GLenum DEPTH_COMPONENT16 = 0x81A5;
  const GLenum DEPTH_COMPONENT24 = 0x81A6;
  const GLenum DEPTH_COMPONENT32F = 0x8CAC;
  const GLenum DEPTH_FUNC = 0x0B74;
  const GLenum DEPTH_RANGE = 0x0B70;
  const GLenum DEPTH_STENCIL = 0x84F9;
  const GLenum DEPTH_STENCIL_ATTACHMENT = 0x821A;
  const GLenum DEPTH_TEST = 0x0B71;
  const GLenum DEPTH_WRITEMASK = 0x0B72;
  const GLenum DITHER = 0x0BD0;
  const GLenum DONT_CARE = 0x1100;
  const GLenum DRAW_BUFFER0 = 0x8825;
  const GLenum DRAW_BUFFER1 = 0x8826;
  const GLenum DRAW_BUFFER10 = 0x882F;
  const GLenum DRAW_BUFFER11 = 0x8830;
  const GLenum DRAW_BUFFER12 = 0x8831;
  const GLenum DRAW_BUFFER13 = 0x8832;
  const GLenum DRAW_BUFFER14 = 0x8833;
  const GLenum DRAW_BUFFER15 = 0x8834;
  const GLenum DRAW_BUFFER2 = 0x8827;
  const GLenum DRAW_BUFFER3 = 0x8828;
  const GLenum DRAW_BUFFER4 = 0x8829;
  const GLenum DRAW_BUFFER5 = 0x882A;
  const GLenum DRAW_BUFFER6 = 0x882B;
  const GLenum DRAW_BUFFER7 = 0x882C;
  const GLenum DRAW_BUFFER8 = 0x882D;
  const GLenum DRAW_BUFFER9 = 0x882E;
  const GLenum DRAW_FRAMEBUFFER = 0x8CA9;
  const GLenum DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
  const GLenum DST_ALPHA = 0x0304;
  const GLenum DST_COLOR = 0x0306;
  const GLenum DYNAMIC_COPY = 0x88EA;
  const GLenum DYNAMIC_DRAW = 0x88E8;
  const GLenum DYNAMIC_READ = 0x88E9;
  const GLenum ELEMENT_ARRAY_BUFFER = 0x8893;
  const GLenum ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
  const GLenum EQUAL = 0x0202;
  const GLenum FASTEST = 0x1101;
  const GLenum FLOAT = 0x1406;
  const GLenum FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
  const GLenum FLOAT_MAT2 = 0x8B5A;
  const GLenum FLOAT_MAT2x3 = 0x8B65;
  const GLenum FLOAT_MAT2x4 = 0x8B66;
  const GLenum FLOAT_MAT3 = 0x8B5B;
  const GLenum FLOAT_MAT3x2 = 0x8B67;
  const GLenum FLOAT_MAT3x4 = 0x8B68;
  const GLenum FLOAT_MAT4 = 0x8B5C;
  const GLenum FLOAT_MAT4x2 = 0x8B69;
  const GLenum FLOAT_MAT4x3 = 0x8B6A;
  const GLenum FLOAT_VEC2 = 0x8B50;
  const GLenum FLOAT_VEC3 = 0x8B51;
  const GLenum FLOAT_VEC4 = 0x8B52;
  const GLenum FRAGMENT_SHADER = 0x8B30;
  const GLenum FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
  const GLenum FRAMEBUFFER = 0x8D40;
  const GLenum FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
  const GLenum FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
  const GLenum FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
  const GLenum FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
  const GLenum FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
  const GLenum FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
  const GLenum FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
  const GLenum FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
  const GLenum FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
  const GLenum FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
  const GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
  const GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
  const GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
  const GLenum FRAMEBUFFER_BINDING = 0x8CA6;
  const GLenum FRAMEBUFFER_COMPLETE = 0x8CD5;
  const GLenum FRAMEBUFFER_DEFAULT = 0x8218;
  const GLenum FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
  const GLenum FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
  const GLenum FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
  const GLenum FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
  const GLenum FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
  const GLenum FRONT = 0x0404;
  const GLenum FRONT_AND_BACK = 0x0408;
  const GLenum FRONT_FACE = 0x0B46;
  const GLenum FUNC_ADD = 0x8006;
  const GLenum FUNC_REVERSE_SUBTRACT = 0x800B;
  const GLenum FUNC_SUBTRACT = 0x800A;
  const GLenum GENERATE_MIPMAP_HINT = 0x8192;
  const GLenum GEQUAL = 0x0206;
  const GLenum GREATER = 0x0204;
  const GLenum GREEN_BITS = 0x0D53;
  const GLenum HALF_FLOAT = 0x140B;
  const GLenum HIGH_FLOAT = 0x8DF2;
  const GLenum HIGH_INT = 0x8DF5;
  const GLenum IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
  const GLenum IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
  const GLenum INCR = 0x1E02;
  const GLenum INCR_WRAP = 0x8507;
  const GLenum INT = 0x1404;
  const GLenum INTERLEAVED_ATTRIBS = 0x8C8C;
  const GLenum INT_2_10_10_10_REV = 0x8D9F;
  const GLenum INT_SAMPLER_2D = 0x8DCA;
  const GLenum INT_SAMPLER_2D_ARRAY = 0x8DCF;
  const GLenum INT_SAMPLER_3D = 0x8DCB;
  const GLenum INT_SAMPLER_CUBE = 0x8DCC;
  const GLenum INT_VEC2 = 0x8B53;
  const GLenum INT_VEC3 = 0x8B54;
  const GLenum INT_VEC4 = 0x8B55;
  const GLenum INVALID_ENUM = 0x0500;
  const GLenum INVALID_FRAMEBUFFER_OPERATION = 0x0506;
  const GLenum INVALID_INDEX = 0xFFFFFFFF;
  const GLenum INVALID_OPERATION = 0x0502;
  const GLenum INVALID_VALUE = 0x0501;
  const GLenum INVERT = 0x150A;
  const GLenum KEEP = 0x1E00;
  const GLenum LEQUAL = 0x0203;
  const GLenum LESS = 0x0201;
  const GLenum LINEAR = 0x2601;
  const GLenum LINEAR_MIPMAP_LINEAR = 0x2703;
  const GLenum LINEAR_MIPMAP_NEAREST = 0x2701;
  const GLenum LINES = 0x0001;
  const GLenum LINE_LOOP = 0x0002;
  const GLenum LINE_STRIP = 0x0003;
  const GLenum LINE_WIDTH = 0x0B21;
  const GLenum LINK_STATUS = 0x8B82;
  const GLenum LOW_FLOAT = 0x8DF0;
  const GLenum LOW_INT = 0x8DF3;
  const GLenum LUMINANCE = 0x1909;
  const GLenum LUMINANCE_ALPHA = 0x190A;
  const GLenum MAX = 0x8008;
  const GLenum MAX_3D_TEXTURE_SIZE = 0x8073;
  const GLenum MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
  const GLenum MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 0x9247;
  const GLenum MAX_COLOR_ATTACHMENTS = 0x8CDF;
  const GLenum MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
  const GLenum MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
  const GLenum MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
  const GLenum MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
  const GLenum MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
  const GLenum MAX_DRAW_BUFFERS = 0x8824;
  const GLenum MAX_ELEMENTS_INDICES = 0x80E9;
  const GLenum MAX_ELEMENTS_VERTICES = 0x80E8;
  const GLenum MAX_ELEMENT_INDEX = 0x8D6B;
  const GLenum MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
  const GLenum MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
  const GLenum MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
  const GLenum MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
  const GLenum MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
  const GLenum MAX_RENDERBUFFER_SIZE = 0x84E8;
  const GLenum MAX_SAMPLES = 0x8D57;
  const GLenum MAX_SERVER_WAIT_TIMEOUT = 0x9111;
  const GLenum MAX_TEXTURE_IMAGE_UNITS = 0x8872;
  const GLenum MAX_TEXTURE_LOD_BIAS = 0x84FD;
  const GLenum MAX_TEXTURE_SIZE = 0x0D33;
  const GLenum MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
  const GLenum MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
  const GLenum MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
  const GLenum MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
  const GLenum MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
  const GLenum MAX_VARYING_COMPONENTS = 0x8B4B;
  const GLenum MAX_VARYING_VECTORS = 0x8DFC;
  const GLenum MAX_VERTEX_ATTRIBS = 0x8869;
  const GLenum MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
  const GLenum MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
  const GLenum MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
  const GLenum MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
  const GLenum MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
  const GLenum MAX_VIEWPORT_DIMS = 0x0D3A;
  const GLenum MEDIUM_FLOAT = 0x8DF1;
  const GLenum MEDIUM_INT = 0x8DF4;
  const GLenum MIN = 0x8007;
  const GLenum MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
  const GLenum MIRRORED_REPEAT = 0x8370;
  const GLenum NEAREST = 0x2600;
  const GLenum NEAREST_MIPMAP_LINEAR = 0x2702;
  const GLenum NEAREST_MIPMAP_NEAREST = 0x2700;
  const GLenum NEVER = 0x0200;
  const GLenum NICEST = 0x1102;
  const GLenum NONE = 0;
  const GLenum NOTEQUAL = 0x0205;
  const GLenum NO_ERROR = 0;
  const GLenum OBJECT_TYPE = 0x9112;
  const GLenum ONE = 1;
  const GLenum ONE_MINUS_CONSTANT_ALPHA = 0x8004;
  const GLenum ONE_MINUS_CONSTANT_COLOR = 0x8002;
  const GLenum ONE_MINUS_DST_ALPHA = 0x0305;
  const GLenum ONE_MINUS_DST_COLOR = 0x0307;
  const GLenum ONE_MINUS_SRC_ALPHA = 0x0303;
  const GLenum ONE_MINUS_SRC_COLOR = 0x0301;
  const GLenum OUT_OF_MEMORY = 0x0505;
  const GLenum PACK_ALIGNMENT = 0x0D05;
  const GLenum PACK_ROW_LENGTH = 0x0D02;
  const GLenum PACK_SKIP_PIXELS = 0x0D04;
  const GLenum PACK_SKIP_ROWS = 0x0D03;
  const GLenum PIXEL_PACK_BUFFER = 0x88EB;
  const GLenum PIXEL_PACK_BUFFER_BINDING = 0x88ED;
  const GLenum PIXEL_UNPACK_BUFFER = 0x88EC;
  const GLenum PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
  const GLenum POINTS = 0x0000;
  const GLenum POLYGON_OFFSET_FACTOR = 0x8038;
  const GLenum POLYGON_OFFSET_FILL = 0x8037;
  const GLenum POLYGON_OFFSET_UNITS = 0x2A00;
  const GLenum QUERY_RESULT = 0x8866;
  const GLenum QUERY_RESULT_AVAILABLE = 0x8867;
  const GLenum R11F_G11F_B10F = 0x8C3A;
  const GLenum R16F = 0x822D;
  const GLenum R16I = 0x8233;
  const GLenum R16UI = 0x8234;
  const GLenum R32F = 0x822E;
  const GLenum R32I = 0x8235;
  const GLenum R32UI = 0x8236;
  const GLenum R8 = 0x8229;
  const GLenum R8I = 0x8231;
  const GLenum R8UI = 0x8232;
  const GLenum R8_SNORM = 0x8F94;
  const GLenum RASTERIZER_DISCARD = 0x8C89;
  const GLenum READ_BUFFER = 0x0C02;
  const GLenum READ_FRAMEBUFFER = 0x8CA8;
  const GLenum READ_FRAMEBUFFER_BINDING = 0x8CAA;
  const GLenum RED = 0x1903;
  const GLenum RED_BITS = 0x0D52;
  const GLenum RED_INTEGER = 0x8D94;
  const GLenum RENDERBUFFER = 0x8D41;
  const GLenum RENDERBUFFER_ALPHA_SIZE = 0x8D53;
  const GLenum RENDERBUFFER_BINDING = 0x8CA7;
  const GLenum RENDERBUFFER_BLUE_SIZE = 0x8D52;
  const GLenum RENDERBUFFER_DEPTH_SIZE = 0x8D54;
  const GLenum RENDERBUFFER_GREEN_SIZE = 0x8D51;
  const GLenum RENDERBUFFER_HEIGHT = 0x8D43;
  const GLenum RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
  const GLenum RENDERBUFFER_RED_SIZE = 0x8D50;
  const GLenum RENDERBUFFER_SAMPLES = 0x8CAB;
  const GLenum RENDERBUFFER_STENCIL_SIZE = 0x8D55;
  const GLenum RENDERBUFFER_WIDTH = 0x8D42;
  const GLenum RENDERER = 0x1F01;
  const GLenum REPEAT = 0x2901;
  const GLenum REPLACE = 0x1E01;
  const GLenum RG = 0x8227;
  const GLenum RG16F = 0x822F;
  const GLenum RG16I = 0x8239;
  const GLenum RG16UI = 0x823A;
  const GLenum RG32F = 0x8230;
  const GLenum RG32I = 0x823B;
  const GLenum RG32UI = 0x823C;
  const GLenum RG8 = 0x822B;
  const GLenum RG8I = 0x8237;
  const GLenum RG8UI = 0x8238;
  const GLenum RG8_SNORM = 0x8F95;
  const GLenum RGB = 0x1907;
  const GLenum RGB10_A2 = 0x8059;
  const GLenum RGB10_A2UI = 0x906F;
  const GLenum RGB16F = 0x881B;
  const GLenum RGB16I = 0x8D89;
  const GLenum RGB16UI = 0x8D77;
  const GLenum RGB32F = 0x8815;
  const GLenum RGB32I = 0x8D83;
  const GLenum RGB32UI = 0x8D71;
  const GLenum RGB565 = 0x8D62;
  const GLenum RGB5_A1 = 0x8057;
  const GLenum RGB8 = 0x8051;
  const GLenum RGB8I = 0x8D8F;
  const GLenum RGB8UI = 0x8D7D;
  const GLenum RGB8_SNORM = 0x8F96;
  const GLenum RGB9_E5 = 0x8C3D;
  const GLenum RGBA = 0x1908;
  const GLenum RGBA16F = 0x881A;
  const GLenum RGBA16I = 0x8D88;
  const GLenum RGBA16UI = 0x8D76;
  const GLenum RGBA32F = 0x8814;
  const GLenum RGBA32I = 0x8D82;
  const GLenum RGBA32UI = 0x8D70;
  const GLenum RGBA4 = 0x8056;
  const GLenum RGBA8 = 0x8058;
  const GLenum RGBA8I = 0x8D8E;
  const GLenum RGBA8UI = 0x8D7C;
  const GLenum RGBA8_SNORM = 0x8F97;
  const GLenum RGBA_INTEGER = 0x8D99;
  const GLenum RGB_INTEGER = 0x8D98;
  const GLenum RG_INTEGER = 0x8228;
  const GLenum SAMPLER_2D = 0x8B5E;
  const GLenum SAMPLER_2D_ARRAY = 0x8DC1;
  const GLenum SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
  const GLenum SAMPLER_2D_SHADOW = 0x8B62;
  const GLenum SAMPLER_3D = 0x8B5F;
  const GLenum SAMPLER_BINDING = 0x8919;
  const GLenum SAMPLER_CUBE = 0x8B60;
  const GLenum SAMPLER_CUBE_SHADOW = 0x8DC5;
  const GLenum SAMPLES = 0x80A9;
  const GLenum SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
  const GLenum SAMPLE_BUFFERS = 0x80A8;
  const GLenum SAMPLE_COVERAGE = 0x80A0;
  const GLenum SAMPLE_COVERAGE_INVERT = 0x80AB;
  const GLenum SAMPLE_COVERAGE_VALUE = 0x80AA;
  const GLenum SCISSOR_BOX = 0x0C10;
  const GLenum SCISSOR_TEST = 0x0C11;
  const GLenum SEPARATE_ATTRIBS = 0x8C8D;
  const GLenum SHADER_TYPE = 0x8B4F;
  const GLenum SHADING_LANGUAGE_VERSION = 0x8B8C;
  const GLenum SHORT = 0x1402;
  const GLenum SIGNALED = 0x9119;
  const GLenum SIGNED_NORMALIZED = 0x8F9C;
  const GLenum SRC_ALPHA = 0x0302;
  const GLenum SRC_ALPHA_SATURATE = 0x0308;
  const GLenum SRC_COLOR = 0x0300;
  const GLenum SRGB = 0x8C40;
  const GLenum SRGB8 = 0x8C41;
  const GLenum SRGB8_ALPHA8 = 0x8C43;
  const GLenum STATIC_COPY = 0x88E6;
  const GLenum STATIC_DRAW = 0x88E4;
  const GLenum STATIC_READ = 0x88E5;
  const GLenum STENCIL = 0x1802;
  const GLenum STENCIL_ATTACHMENT = 0x8D20;
  const GLenum STENCIL_BACK_FAIL = 0x8801;
  const GLenum STENCIL_BACK_FUNC = 0x8800;
  const GLenum STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
  const GLenum STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
  const GLenum STENCIL_BACK_REF = 0x8CA3;
  const GLenum STENCIL_BACK_VALUE_MASK = 0x8CA4;
  const GLenum STENCIL_BACK_WRITEMASK = 0x8CA5;
  const GLenum STENCIL_BITS = 0x0D57;
  const GLenum STENCIL_BUFFER_BIT = 0x00000400;
  const GLenum STENCIL_CLEAR_VALUE = 0x0B91;
  const GLenum STENCIL_FAIL = 0x0B94;
  const GLenum STENCIL_FUNC = 0x0B92;
  const GLenum STENCIL_INDEX8 = 0x8D48;
  const GLenum STENCIL_PASS_DEPTH_FAIL = 0x0B95;
  const GLenum STENCIL_PASS_DEPTH_PASS = 0x0B96;
  const GLenum STENCIL_REF = 0x0B97;
  const GLenum STENCIL_TEST = 0x0B90;
  const GLenum STENCIL_VALUE_MASK = 0x0B93;
  const GLenum STENCIL_WRITEMASK = 0x0B98;
  const GLenum STREAM_COPY = 0x88E2;
  const GLenum STREAM_DRAW = 0x88E0;
  const GLenum STREAM_READ = 0x88E1;
  const GLenum SUBPIXEL_BITS = 0x0D50;
  const GLenum SYNC_CONDITION = 0x9113;
  const GLenum SYNC_FENCE = 0x9116;
  const GLenum SYNC_FLAGS = 0x9115;
  const GLenum SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
  const GLenum SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
  const GLenum SYNC_STATUS = 0x9114;
  const GLenum TEXTURE = 0x1702;
  const GLenum TEXTURE0 = 0x84C0;
  const GLenum TEXTURE1 = 0x84C1;
  const GLenum TEXTURE10 = 0x84CA;
  const GLenum TEXTURE11 = 0x84CB;
  const GLenum TEXTURE12 = 0x84CC;
  const GLenum TEXTURE13 = 0x84CD;
  const GLenum TEXTURE14 = 0x84CE;
  const GLenum TEXTURE15 = 0x84CF;
  const GLenum TEXTURE16 = 0x84D0;
  const GLenum TEXTURE17 = 0x84D1;
  const GLenum TEXTURE18 = 0x84D2;
  const GLenum TEXTURE19 = 0x84D3;
  const GLenum TEXTURE2 = 0x84C2;
  const GLenum TEXTURE20 = 0x84D4;
  const GLenum TEXTURE21 = 0x84D5;
  const GLenum TEXTURE22 = 0x84D6;
  const GLenum TEXTURE23 = 0x84D7;
  const GLenum TEXTURE24 = 0x84D8;
  const GLenum TEXTURE25 = 0x84D9;
  const GLenum TEXTURE26 = 0x84DA;
  const GLenum TEXTURE27 = 0x84DB;
  const GLenum TEXTURE28 = 0x84DC;
  const GLenum TEXTURE29 = 0x84DD;
  const GLenum TEXTURE3 = 0x84C3;
  const GLenum TEXTURE30 = 0x84DE;
  const GLenum TEXTURE31 = 0x84DF;
  const GLenum TEXTURE4 = 0x84C4;
  const GLenum TEXTURE5 = 0x84C5;
  const GLenum TEXTURE6 = 0x84C6;
  const GLenum TEXTURE7 = 0x84C7;
  const GLenum TEXTURE8 = 0x84C8;
  const GLenum TEXTURE9 = 0x84C9;
  const GLenum TEXTURE_2D = 0x0DE1;
  const GLenum TEXTURE_2D_ARRAY = 0x8C1A;
  const GLenum TEXTURE_3D = 0x806F;
  const GLenum TEXTURE_BASE_LEVEL = 0x813C;
  const GLenum TEXTURE_BINDING_2D = 0x8069;
  const GLenum TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
  const GLenum TEXTURE_BINDING_3D = 0x806A;
  const GLenum TEXTURE_BINDING_CUBE_MAP = 0x8514;
  const GLenum TEXTURE_COMPARE_FUNC = 0x884D;
  const GLenum TEXTURE_COMPARE_MODE = 0x884C;
  const GLenum TEXTURE_CUBE_MAP = 0x8513;
  const GLenum TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
  const GLenum TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
  const GLenum TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
  const GLenum TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
  const GLenum TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
  const GLenum TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
  const GLenum TEXTURE_IMMUTABLE_FORMAT = 0x912F;
  const GLenum TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
  const GLenum TEXTURE_MAG_FILTER = 0x2800;
  const GLenum TEXTURE_MAX_LEVEL = 0x813D;
  const GLenum TEXTURE_MAX_LOD = 0x813B;
  const GLenum TEXTURE_MIN_FILTER = 0x2801;
  const GLenum TEXTURE_MIN_LOD = 0x813A;
  const GLenum TEXTURE_WRAP_R = 0x8072;
  const GLenum TEXTURE_WRAP_S = 0x2802;
  const GLenum TEXTURE_WRAP_T = 0x2803;
  const GLenum TIMEOUT_EXPIRED = 0x911B;
  const GLint64 TIMEOUT_IGNORED = -1;
  const GLenum TRANSFORM_FEEDBACK = 0x8E22;
  const GLenum TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
  const GLenum TRANSFORM_FEEDBACK_BINDING = 0x8E25;
  const GLenum TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
  const GLenum TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
  const GLenum TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
  const GLenum TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
  const GLenum TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
  const GLenum TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
  const GLenum TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
  const GLenum TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
  const GLenum TRIANGLES = 0x0004;
  const GLenum TRIANGLE_FAN = 0x0006;
  const GLenum TRIANGLE_STRIP = 0x0005;
  const GLenum UNIFORM_ARRAY_STRIDE = 0x8A3C;
  const GLenum UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
  const GLenum UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
  const GLenum UNIFORM_BLOCK_BINDING = 0x8A3F;
  const GLenum UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
  const GLenum UNIFORM_BLOCK_INDEX = 0x8A3A;
  const GLenum UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
  const GLenum UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
  const GLenum UNIFORM_BUFFER = 0x8A11;
  const GLenum UNIFORM_BUFFER_BINDING = 0x8A28;
  const GLenum UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
  const GLenum UNIFORM_BUFFER_SIZE = 0x8A2A;
  const GLenum UNIFORM_BUFFER_START = 0x8A29;
  const GLenum UNIFORM_IS_ROW_MAJOR = 0x8A3E;
  const GLenum UNIFORM_MATRIX_STRIDE = 0x8A3D;
  const GLenum UNIFORM_OFFSET = 0x8A3B;
  const GLenum UNIFORM_SIZE = 0x8A38;
  const GLenum UNIFORM_TYPE = 0x8A37;
  const GLenum UNPACK_ALIGNMENT = 0x0CF5;
  const GLenum UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;
  const GLenum UNPACK_FLIP_Y_WEBGL = 0x9240;
  const GLenum UNPACK_IMAGE_HEIGHT = 0x806E;
  const GLenum UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;
  const GLenum UNPACK_ROW_LENGTH = 0x0CF2;
  const GLenum UNPACK_SKIP_IMAGES = 0x806D;
  const GLenum UNPACK_SKIP_PIXELS = 0x0CF4;
  const GLenum UNPACK_SKIP_ROWS = 0x0CF3;
  const GLenum UNSIGNALED = 0x9118;
  const GLenum UNSIGNED_BYTE = 0x1401;
  const GLenum UNSIGNED_INT = 0x1405;
  const GLenum UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
  const GLenum UNSIGNED_INT_24_8 = 0x84FA;
  const GLenum UNSIGNED_INT_2_10_10_10_REV = 0x8368;
  const GLenum UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
  const GLenum UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
  const GLenum UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
  const GLenum UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
  const GLenum UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
  const GLenum UNSIGNED_INT_VEC2 = 0x8DC6;
  const GLenum UNSIGNED_INT_VEC3 = 0x8DC7;
  const GLenum UNSIGNED_INT_VEC4 = 0x8DC8;
  const GLenum UNSIGNED_NORMALIZED = 0x8C17;
  const GLenum UNSIGNED_SHORT = 0x1403;
  const GLenum UNSIGNED_SHORT_4_4_4_4 = 0x8033;
  const GLenum UNSIGNED_SHORT_5_5_5_1 = 0x8034;
  const GLenum UNSIGNED_SHORT_5_6_5 = 0x8363;
  const GLenum VALIDATE_STATUS = 0x8B83;
  const GLenum VENDOR = 0x1F00;
  const GLenum VERSION = 0x1F02;
  const GLenum VERTEX_ARRAY_BINDING = 0x85B5;
  const GLenum VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
  const GLenum VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
  const GLenum VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
  const GLenum VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
  const GLenum VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
  const GLenum VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
  const GLenum VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
  const GLenum VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
  const GLenum VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
  const GLenum VERTEX_SHADER = 0x8B31;
  const GLenum VIEWPORT = 0x0BA2;
  const GLenum WAIT_FAILED = 0x911D;
  const GLenum ZERO = 0;
  readonly attribute GLsizei drawingBufferHeight;
  readonly attribute GLsizei drawingBufferWidth;
  void activeTexture( GLenum texture );
  void attachShader( WebGLProgram program, WebGLShader shader );
  void beginQuery( GLenum target, WebGLQuery query );
  void beginTransformFeedback( GLenum primitiveMode );
  void bindAttribLocation( WebGLProgram program, GLuint index, DOMString name );
  void bindBuffer( GLenum target, WebGLBuffer? buffer );
  void bindBufferBase( GLenum target, GLuint index, WebGLBuffer? buffer );
  void bindBufferRange( GLenum target, GLuint index, WebGLBuffer? buffer, GLintptr offset, GLsizeiptr size );
  void bindFramebuffer( GLenum target, WebGLFramebuffer? framebuffer );
  void bindRenderbuffer( GLenum target, WebGLRenderbuffer? renderbuffer );
  void bindSampler( GLuint unit, WebGLSampler? sampler );
  void bindTexture( GLenum target, WebGLTexture? texture );
  void bindTransformFeedback( GLenum target, WebGLTransformFeedback? tf );
  void bindVertexArray( WebGLVertexArrayObject? array );
  void blendColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
  void blendEquation( GLenum mode );
  void blendEquationSeparate( GLenum modeRGB, GLenum modeAlpha );
  void blendFunc( GLenum sfactor, GLenum dfactor );
  void blendFuncSeparate( GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha );
  void blitFramebuffer( GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
  void bufferData( GLenum target, GLsizeiptr size, GLenum usage );
  void bufferData( GLenum target, [AllowShared] BufferSource? srcData, GLenum usage );
  void bufferData( GLenum target, [AllowShared] ArrayBufferView srcData, GLenum usage, GLuint srcOffset, optional GLuint length = 0 );
  void bufferSubData( GLenum target, GLintptr dstByteOffset, [AllowShared] BufferSource srcData );
  void bufferSubData( GLenum target, GLintptr dstByteOffset, [AllowShared] ArrayBufferView srcData, GLuint srcOffset, optional GLuint length = 0 );
  [WebGLHandlesContextLoss]
  GLenum checkFramebufferStatus( GLenum target );
  void clear( GLbitfield mask );
  void clearBufferfi( GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil );
  void clearBufferfv( GLenum buffer, GLint drawbuffer, Float32List values, optional GLuint srcOffset = 0 );
  void clearBufferiv( GLenum buffer, GLint drawbuffer, Int32List values, optional GLuint srcOffset = 0 );
  void clearBufferuiv( GLenum buffer, GLint drawbuffer, Uint32List values, optional GLuint srcOffset = 0 );
  void clearColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
  void clearDepth( GLclampf depth );
  void clearStencil( GLint s );
  GLenum clientWaitSync( WebGLSync sync, GLbitfield flags, GLuint64 timeout );
  void colorMask( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
  void compileShader( WebGLShader shader );
  void compressedTexImage2D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, GLintptr offset );
  void compressedTexImage2D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, [AllowShared] ArrayBufferView srcData, optional GLuint srcOffset = 0, optional GLuint srcLengthOverride = 0 );
  void compressedTexImage3D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLintptr offset );
  void compressedTexImage3D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, [AllowShared] ArrayBufferView srcData, optional GLuint srcOffset = 0, optional GLuint srcLengthOverride = 0 );
  void compressedTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLintptr offset );
  void compressedTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, [AllowShared] ArrayBufferView srcData, optional GLuint srcOffset = 0, optional GLuint srcLengthOverride = 0 );
  void compressedTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, GLintptr offset );
  void compressedTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, [AllowShared] ArrayBufferView srcData, optional GLuint srcOffset = 0, optional GLuint srcLengthOverride = 0 );
  void copyBufferSubData( GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
  void copyTexImage2D( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
  void copyTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
  void copyTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
  WebGLBuffer? createBuffer();
  WebGLFramebuffer? createFramebuffer();
  WebGLProgram? createProgram();
  WebGLQuery? createQuery();
  WebGLRenderbuffer? createRenderbuffer();
  WebGLSampler? createSampler();
  WebGLShader? createShader( GLenum type );
  WebGLTexture? createTexture();
  WebGLTransformFeedback? createTransformFeedback();
  WebGLVertexArrayObject? createVertexArray();
  void cullFace( GLenum mode );
  void deleteBuffer( WebGLBuffer? buffer );
  void deleteFramebuffer( WebGLFramebuffer? framebuffer );
  void deleteProgram( WebGLProgram? program );
  void deleteQuery( WebGLQuery? query );
  void deleteRenderbuffer( WebGLRenderbuffer? renderbuffer );
  void deleteSampler( WebGLSampler? sampler );
  void deleteShader( WebGLShader? shader );
  void deleteSync( WebGLSync? sync );
  void deleteTexture( WebGLTexture? texture );
  void deleteTransformFeedback( WebGLTransformFeedback? tf );
  void deleteVertexArray( WebGLVertexArrayObject? vertexArray );
  void depthFunc( GLenum func );
  void depthMask( GLboolean flag );
  void depthRange( GLclampf zNear, GLclampf zFar );
  void detachShader( WebGLProgram program, WebGLShader shader );
  void disable( GLenum cap );
  void disableVertexAttribArray( GLuint index );
  void drawArrays( GLenum mode, GLint first, GLsizei count );
  void drawArraysInstanced( GLenum mode, GLint first, GLsizei count, GLsizei instanceCount );
  void drawBuffers( sequence<GLenum> buffers );
  void drawElements( GLenum mode, GLsizei count, GLenum type, GLintptr offset );
  void drawElementsInstanced( GLenum mode, GLsizei count, GLenum type, GLintptr offset, GLsizei instanceCount );
  void drawRangeElements( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLintptr offset );
  void enable( GLenum cap );
  void enableVertexAttribArray( GLuint index );
  void endQuery( GLenum target );
  void endTransformFeedback();
  WebGLSync? fenceSync( GLenum condition, GLbitfield flags );
  void finish();
  void flush();
  void framebufferRenderbuffer( GLenum target, GLenum attachment, GLenum renderbuffertarget, WebGLRenderbuffer? renderbuffer );
  void framebufferTexture2D( GLenum target, GLenum attachment, GLenum textarget, WebGLTexture? texture, GLint level );
  void framebufferTextureLayer( GLenum target, GLenum attachment, WebGLTexture? texture, GLint level, GLint layer );
  void frontFace( GLenum mode );
  void generateMipmap( GLenum target );
  WebGLActiveInfo? getActiveAttrib( WebGLProgram program, GLuint index );
  WebGLActiveInfo? getActiveUniform( WebGLProgram program, GLuint index );
  DOMString? getActiveUniformBlockName( WebGLProgram program, GLuint uniformBlockIndex );
  any getActiveUniformBlockParameter( WebGLProgram program, GLuint uniformBlockIndex, GLenum pname );
  any getActiveUniforms( WebGLProgram program, sequence<GLuint> uniformIndices, GLenum pname );
  sequence<WebGLShader>? getAttachedShaders( WebGLProgram program );
  [WebGLHandlesContextLoss]
  GLint getAttribLocation( WebGLProgram program, DOMString name );
  any getBufferParameter( GLenum target, GLenum pname );
  void getBufferSubData( GLenum target, GLintptr srcByteOffset, [AllowShared] ArrayBufferView dstBuffer, optional GLuint dstOffset = 0, optional GLuint length = 0 );
  [WebGLHandlesContextLoss]
  WebGLContextAttributes? getContextAttributes();
  [WebGLHandlesContextLoss]
  GLenum getError();
  object? getExtension( DOMString name );
  [WebGLHandlesContextLoss]
  GLint getFragDataLocation( WebGLProgram program, DOMString name );
  any getFramebufferAttachmentParameter( GLenum target, GLenum attachment, GLenum pname );
  any getIndexedParameter( GLenum target, GLuint index );
  any getInternalformatParameter( GLenum target, GLenum internalformat, GLenum pname );
  any getParameter( GLenum pname );
  DOMString? getProgramInfoLog( WebGLProgram program );
  any getProgramParameter( WebGLProgram program, GLenum pname );
  WebGLQuery? getQuery( GLenum target, GLenum pname );
  any getQueryParameter( WebGLQuery query, GLenum pname );
  any getRenderbufferParameter( GLenum target, GLenum pname );
  any getSamplerParameter( WebGLSampler sampler, GLenum pname );
  DOMString? getShaderInfoLog( WebGLShader shader );
  any getShaderParameter( WebGLShader shader, GLenum pname );
  WebGLShaderPrecisionFormat? getShaderPrecisionFormat( GLenum shadertype, GLenum precisiontype );
  DOMString? getShaderSource( WebGLShader shader );
  sequence<DOMString>? getSupportedExtensions();
  any getSyncParameter( WebGLSync sync, GLenum pname );
  any getTexParameter( GLenum target, GLenum pname );
  WebGLActiveInfo? getTransformFeedbackVarying( WebGLProgram program, GLuint index );
  any getUniform( WebGLProgram program, WebGLUniformLocation location );
  GLuint getUniformBlockIndex( WebGLProgram program, DOMString uniformBlockName );
  sequence<GLuint>? getUniformIndices( WebGLProgram program, sequence<DOMString> uniformNames );
  WebGLUniformLocation? getUniformLocation( WebGLProgram program, DOMString name );
  any getVertexAttrib( GLuint index, GLenum pname );
  [WebGLHandlesContextLoss]
  GLintptr getVertexAttribOffset( GLuint index, GLenum pname );
  void hint( GLenum target, GLenum mode );
  void invalidateFramebuffer( GLenum target, sequence<GLenum> attachments );
  void invalidateSubFramebuffer( GLenum target, sequence<GLenum> attachments, GLint x, GLint y, GLsizei width, GLsizei height );
  [WebGLHandlesContextLoss]
  GLboolean isBuffer( WebGLBuffer? buffer );
  [WebGLHandlesContextLoss]
  boolean isContextLost();
  [WebGLHandlesContextLoss]
  GLboolean isEnabled( GLenum cap );
  [WebGLHandlesContextLoss]
  GLboolean isFramebuffer( WebGLFramebuffer? framebuffer );
  [WebGLHandlesContextLoss]
  GLboolean isProgram( WebGLProgram? program );
  [WebGLHandlesContextLoss]
  GLboolean isQuery( WebGLQuery? query );
  [WebGLHandlesContextLoss]
  GLboolean isRenderbuffer( WebGLRenderbuffer? renderbuffer );
  [WebGLHandlesContextLoss]
  GLboolean isSampler( WebGLSampler? sampler );
  [WebGLHandlesContextLoss]
  GLboolean isShader( WebGLShader? shader );
  [WebGLHandlesContextLoss]
  GLboolean isSync( WebGLSync? sync );
  [WebGLHandlesContextLoss]
  GLboolean isTexture( WebGLTexture? texture );
  [WebGLHandlesContextLoss]
  GLboolean isTransformFeedback( WebGLTransformFeedback? tf );
  [WebGLHandlesContextLoss]
  GLboolean isVertexArray( WebGLVertexArrayObject? vertexArray );
  void lineWidth( GLfloat width );
  void linkProgram( WebGLProgram program );
  Promise<void> makeXRCompatible();
  void pauseTransformFeedback();
  void pixelStorei( GLenum pname, GLint param );
  void polygonOffset( GLfloat factor, GLfloat units );
  void readBuffer( GLenum src );
  void readPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, [AllowShared] ArrayBufferView? dstData );
  void readPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLintptr offset );
  void readPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, [AllowShared] ArrayBufferView dstData, GLuint dstOffset );
  void renderbufferStorage( GLenum target, GLenum internalformat, GLsizei width, GLsizei height );
  void renderbufferStorageMultisample( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
  void resumeTransformFeedback();
  void sampleCoverage( GLclampf value, GLboolean invert );
  void samplerParameterf( WebGLSampler sampler, GLenum pname, GLfloat param );
  void samplerParameteri( WebGLSampler sampler, GLenum pname, GLint param );
  void scissor( GLint x, GLint y, GLsizei width, GLsizei height );
  void shaderSource( WebGLShader shader, DOMString source );
  void stencilFunc( GLenum func, GLint ref, GLuint mask );
  void stencilFuncSeparate( GLenum face, GLenum func, GLint ref, GLuint mask );
  void stencilMask( GLuint mask );
  void stencilMaskSeparate( GLenum face, GLuint mask );
  void stencilOp( GLenum fail, GLenum zfail, GLenum zpass );
  void stencilOpSeparate( GLenum face, GLenum fail, GLenum zfail, GLenum zpass );
  void texImage2D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels );
  void texImage2D( GLenum target, GLint level, GLint internalformat, GLenum format, GLenum type, TexImageSource source );
  void texImage2D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, GLintptr pboOffset );
  void texImage2D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, TexImageSource source );
  void texImage2D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, [AllowShared] ArrayBufferView srcData, GLuint srcOffset );
  void texImage3D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLintptr pboOffset );
  void texImage3D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, TexImageSource source );
  void texImage3D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, [AllowShared] ArrayBufferView? srcData );
  void texImage3D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, [AllowShared] ArrayBufferView srcData, GLuint srcOffset );
  void texParameterf( GLenum target, GLenum pname, GLfloat param );
  void texParameteri( GLenum target, GLenum pname, GLint param );
  void texStorage2D( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height );
  void texStorage3D( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth );
  void texSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels );
  void texSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLenum format, GLenum type, TexImageSource source );
  void texSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLintptr pboOffset );
  void texSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, TexImageSource source );
  void texSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [AllowShared] ArrayBufferView srcData, GLuint srcOffset );
  void texSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLintptr pboOffset );
  void texSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, TexImageSource source );
  void texSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, [AllowShared] ArrayBufferView? srcData, optional GLuint srcOffset = 0 );
  void transformFeedbackVaryings( WebGLProgram program, sequence<DOMString> varyings, GLenum bufferMode );
  void uniform1f( WebGLUniformLocation? location, GLfloat x );
  void uniform1fv( WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniform1i( WebGLUniformLocation? location, GLint x );
  void uniform1iv( WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniform1ui( WebGLUniformLocation? location, GLuint v0 );
  void uniform1uiv( WebGLUniformLocation? location, Uint32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniform2f( WebGLUniformLocation? location, GLfloat x, GLfloat y );
  void uniform2fv( WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniform2i( WebGLUniformLocation? location, GLint x, GLint y );
  void uniform2iv( WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniform2ui( WebGLUniformLocation? location, GLuint v0, GLuint v1 );
  void uniform2uiv( WebGLUniformLocation? location, Uint32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniform3f( WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z );
  void uniform3fv( WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniform3i( WebGLUniformLocation? location, GLint x, GLint y, GLint z );
  void uniform3iv( WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniform3ui( WebGLUniformLocation? location, GLuint v0, GLuint v1, GLuint v2 );
  void uniform3uiv( WebGLUniformLocation? location, Uint32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniform4f( WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
  void uniform4fv( WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniform4i( WebGLUniformLocation? location, GLint x, GLint y, GLint z, GLint w );
  void uniform4iv( WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniform4ui( WebGLUniformLocation? location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
  void uniform4uiv( WebGLUniformLocation? location, Uint32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniformBlockBinding( WebGLProgram program, GLuint uniformBlockIndex, GLuint uniformBlockBinding );
  void uniformMatrix2fv( WebGLUniformLocation? location, GLboolean transpose, Float32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniformMatrix2x3fv( WebGLUniformLocation? location, GLboolean transpose, Float32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniformMatrix2x4fv( WebGLUniformLocation? location, GLboolean transpose, Float32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniformMatrix3fv( WebGLUniformLocation? location, GLboolean transpose, Float32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniformMatrix3x2fv( WebGLUniformLocation? location, GLboolean transpose, Float32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniformMatrix3x4fv( WebGLUniformLocation? location, GLboolean transpose, Float32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniformMatrix4fv( WebGLUniformLocation? location, GLboolean transpose, Float32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniformMatrix4x2fv( WebGLUniformLocation? location, GLboolean transpose, Float32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void uniformMatrix4x3fv( WebGLUniformLocation? location, GLboolean transpose, Float32List data, optional GLuint srcOffset = 0, optional GLuint srcLength = 0 );
  void useProgram( WebGLProgram? program );
  void validateProgram( WebGLProgram program );
  void vertexAttrib1f( GLuint index, GLfloat x );
  void vertexAttrib1fv( GLuint index, Float32List values );
  void vertexAttrib2f( GLuint index, GLfloat x, GLfloat y );
  void vertexAttrib2fv( GLuint index, Float32List values );
  void vertexAttrib3f( GLuint index, GLfloat x, GLfloat y, GLfloat z );
  void vertexAttrib3fv( GLuint index, Float32List values );
  void vertexAttrib4f( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
  void vertexAttrib4fv( GLuint index, Float32List values );
  void vertexAttribDivisor( GLuint index, GLuint divisor );
  void vertexAttribI4i( GLuint index, GLint x, GLint y, GLint z, GLint w );
  void vertexAttribI4iv( GLuint index, Int32List values );
  void vertexAttribI4ui( GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
  void vertexAttribI4uiv( GLuint index, Uint32List values );
  void vertexAttribIPointer( GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset );
  void vertexAttribPointer( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset );
  void viewport( GLint x, GLint y, GLsizei width, GLsizei height );
  void waitSync( WebGLSync sync, GLbitfield flags, GLint64 timeout );
};

/**
 * The WebGLActiveInfo interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo">WebGLActiveInfo - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLActiveInfo {
  /**
   * The read-only WebGLActiveInfo.name property represents the name of the requested data returned by calling the getActiveAttrib() or getActiveUniform() methods.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo/name">WebGLActiveInfo.name - MDN</a>
   */
  readonly attribute DOMString name;
  /**
   * The read-only WebGLActiveInfo.size property is a Number representing the size of the requested data returned by calling the getActiveAttrib() or getActiveUniform() methods.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo/size">WebGLActiveInfo.size - MDN</a>
   */
  readonly attribute GLint size;
  /**
   * The read-only WebGLActiveInfo.type property represents the type of the requested data returned by calling the getActiveAttrib() or getActiveUniform() methods.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo/type">WebGLActiveInfo.type - MDN</a>
   */
  readonly attribute GLenum type;
};

/**
 * The WebGLBuffer interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer">WebGLBuffer - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLBuffer : WebGLObject {
};

/**
 * The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent">WebGLContextEvent - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLContextEvent : Event {
  /**
   * The read-only WebGLContextEvent.statusMessage property contains additional event status information, or is an empty string if no additional information is available.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent/statusMessage">WebGLContextEvent.statusMessage - MDN</a>
   */
  readonly attribute DOMString statusMessage;
  constructor( DOMString type, optional WebGLContextEventInit eventInit );
};

/**
 * The WebGLFramebuffer interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer">WebGLFramebuffer - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLFramebuffer : WebGLObject {
};

[Exposed=(Window,Worker)]
interface WebGLObject {
};

/**
 * The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL).
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram">WebGLProgram - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLProgram : WebGLObject {
};

/**
 * The WebGLQuery interface is part of the WebGL 2 API and provides ways to asynchronously query for information. By default, occlusion queries and primitive queries are available.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery">WebGLQuery - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLQuery : WebGLObject {
};

/**
 * The WebGLRenderbuffer interface is part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer">WebGLRenderbuffer - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLRenderbuffer : WebGLObject {
};

/**
 * The WebGLRenderingContext interface provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML canvas element.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext">WebGLRenderingContext - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLRenderingContext {
  const GLenum ACTIVE_ATTRIBUTES = 0x8B89;
  const GLenum ACTIVE_TEXTURE = 0x84E0;
  const GLenum ACTIVE_UNIFORMS = 0x8B86;
  const GLenum ALIASED_LINE_WIDTH_RANGE = 0x846E;
  const GLenum ALIASED_POINT_SIZE_RANGE = 0x846D;
  const GLenum ALPHA = 0x1906;
  const GLenum ALPHA_BITS = 0x0D55;
  const GLenum ALWAYS = 0x0207;
  const GLenum ARRAY_BUFFER = 0x8892;
  const GLenum ARRAY_BUFFER_BINDING = 0x8894;
  const GLenum ATTACHED_SHADERS = 0x8B85;
  const GLenum BACK = 0x0405;
  const GLenum BLEND = 0x0BE2;
  const GLenum BLEND_COLOR = 0x8005;
  const GLenum BLEND_DST_ALPHA = 0x80CA;
  const GLenum BLEND_DST_RGB = 0x80C8;
  const GLenum BLEND_EQUATION = 0x8009;
  const GLenum BLEND_EQUATION_ALPHA = 0x883D;
  const GLenum BLEND_EQUATION_RGB = 0x8009;
  const GLenum BLEND_SRC_ALPHA = 0x80CB;
  const GLenum BLEND_SRC_RGB = 0x80C9;
  const GLenum BLUE_BITS = 0x0D54;
  const GLenum BOOL = 0x8B56;
  const GLenum BOOL_VEC2 = 0x8B57;
  const GLenum BOOL_VEC3 = 0x8B58;
  const GLenum BOOL_VEC4 = 0x8B59;
  const GLenum BROWSER_DEFAULT_WEBGL = 0x9244;
  const GLenum BUFFER_SIZE = 0x8764;
  const GLenum BUFFER_USAGE = 0x8765;
  const GLenum BYTE = 0x1400;
  const GLenum CCW = 0x0901;
  const GLenum CLAMP_TO_EDGE = 0x812F;
  const GLenum COLOR_ATTACHMENT0 = 0x8CE0;
  const GLenum COLOR_BUFFER_BIT = 0x00004000;
  const GLenum COLOR_CLEAR_VALUE = 0x0C22;
  const GLenum COLOR_WRITEMASK = 0x0C23;
  const GLenum COMPILE_STATUS = 0x8B81;
  const GLenum COMPRESSED_TEXTURE_FORMATS = 0x86A3;
  const GLenum CONSTANT_ALPHA = 0x8003;
  const GLenum CONSTANT_COLOR = 0x8001;
  const GLenum CONTEXT_LOST_WEBGL = 0x9242;
  const GLenum CULL_FACE = 0x0B44;
  const GLenum CULL_FACE_MODE = 0x0B45;
  const GLenum CURRENT_PROGRAM = 0x8B8D;
  const GLenum CURRENT_VERTEX_ATTRIB = 0x8626;
  const GLenum CW = 0x0900;
  const GLenum DECR = 0x1E03;
  const GLenum DECR_WRAP = 0x8508;
  const GLenum DELETE_STATUS = 0x8B80;
  const GLenum DEPTH_ATTACHMENT = 0x8D00;
  const GLenum DEPTH_BITS = 0x0D56;
  const GLenum DEPTH_BUFFER_BIT = 0x00000100;
  const GLenum DEPTH_CLEAR_VALUE = 0x0B73;
  const GLenum DEPTH_COMPONENT = 0x1902;
  const GLenum DEPTH_COMPONENT16 = 0x81A5;
  const GLenum DEPTH_FUNC = 0x0B74;
  const GLenum DEPTH_RANGE = 0x0B70;
  const GLenum DEPTH_STENCIL = 0x84F9;
  const GLenum DEPTH_STENCIL_ATTACHMENT = 0x821A;
  const GLenum DEPTH_TEST = 0x0B71;
  const GLenum DEPTH_WRITEMASK = 0x0B72;
  const GLenum DITHER = 0x0BD0;
  const GLenum DONT_CARE = 0x1100;
  const GLenum DST_ALPHA = 0x0304;
  const GLenum DST_COLOR = 0x0306;
  const GLenum DYNAMIC_DRAW = 0x88E8;
  const GLenum ELEMENT_ARRAY_BUFFER = 0x8893;
  const GLenum ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
  const GLenum EQUAL = 0x0202;
  const GLenum FASTEST = 0x1101;
  const GLenum FLOAT = 0x1406;
  const GLenum FLOAT_MAT2 = 0x8B5A;
  const GLenum FLOAT_MAT3 = 0x8B5B;
  const GLenum FLOAT_MAT4 = 0x8B5C;
  const GLenum FLOAT_VEC2 = 0x8B50;
  const GLenum FLOAT_VEC3 = 0x8B51;
  const GLenum FLOAT_VEC4 = 0x8B52;
  const GLenum FRAGMENT_SHADER = 0x8B30;
  const GLenum FRAMEBUFFER = 0x8D40;
  const GLenum FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
  const GLenum FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
  const GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
  const GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
  const GLenum FRAMEBUFFER_BINDING = 0x8CA6;
  const GLenum FRAMEBUFFER_COMPLETE = 0x8CD5;
  const GLenum FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
  const GLenum FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
  const GLenum FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
  const GLenum FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
  const GLenum FRONT = 0x0404;
  const GLenum FRONT_AND_BACK = 0x0408;
  const GLenum FRONT_FACE = 0x0B46;
  const GLenum FUNC_ADD = 0x8006;
  const GLenum FUNC_REVERSE_SUBTRACT = 0x800B;
  const GLenum FUNC_SUBTRACT = 0x800A;
  const GLenum GENERATE_MIPMAP_HINT = 0x8192;
  const GLenum GEQUAL = 0x0206;
  const GLenum GREATER = 0x0204;
  const GLenum GREEN_BITS = 0x0D53;
  const GLenum HIGH_FLOAT = 0x8DF2;
  const GLenum HIGH_INT = 0x8DF5;
  const GLenum IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
  const GLenum IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
  const GLenum INCR = 0x1E02;
  const GLenum INCR_WRAP = 0x8507;
  const GLenum INT = 0x1404;
  const GLenum INT_VEC2 = 0x8B53;
  const GLenum INT_VEC3 = 0x8B54;
  const GLenum INT_VEC4 = 0x8B55;
  const GLenum INVALID_ENUM = 0x0500;
  const GLenum INVALID_FRAMEBUFFER_OPERATION = 0x0506;
  const GLenum INVALID_OPERATION = 0x0502;
  const GLenum INVALID_VALUE = 0x0501;
  const GLenum INVERT = 0x150A;
  const GLenum KEEP = 0x1E00;
  const GLenum LEQUAL = 0x0203;
  const GLenum LESS = 0x0201;
  const GLenum LINEAR = 0x2601;
  const GLenum LINEAR_MIPMAP_LINEAR = 0x2703;
  const GLenum LINEAR_MIPMAP_NEAREST = 0x2701;
  const GLenum LINES = 0x0001;
  const GLenum LINE_LOOP = 0x0002;
  const GLenum LINE_STRIP = 0x0003;
  const GLenum LINE_WIDTH = 0x0B21;
  const GLenum LINK_STATUS = 0x8B82;
  const GLenum LOW_FLOAT = 0x8DF0;
  const GLenum LOW_INT = 0x8DF3;
  const GLenum LUMINANCE = 0x1909;
  const GLenum LUMINANCE_ALPHA = 0x190A;
  const GLenum MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
  const GLenum MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
  const GLenum MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
  const GLenum MAX_RENDERBUFFER_SIZE = 0x84E8;
  const GLenum MAX_TEXTURE_IMAGE_UNITS = 0x8872;
  const GLenum MAX_TEXTURE_SIZE = 0x0D33;
  const GLenum MAX_VARYING_VECTORS = 0x8DFC;
  const GLenum MAX_VERTEX_ATTRIBS = 0x8869;
  const GLenum MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
  const GLenum MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
  const GLenum MAX_VIEWPORT_DIMS = 0x0D3A;
  const GLenum MEDIUM_FLOAT = 0x8DF1;
  const GLenum MEDIUM_INT = 0x8DF4;
  const GLenum MIRRORED_REPEAT = 0x8370;
  const GLenum NEAREST = 0x2600;
  const GLenum NEAREST_MIPMAP_LINEAR = 0x2702;
  const GLenum NEAREST_MIPMAP_NEAREST = 0x2700;
  const GLenum NEVER = 0x0200;
  const GLenum NICEST = 0x1102;
  const GLenum NONE = 0;
  const GLenum NOTEQUAL = 0x0205;
  const GLenum NO_ERROR = 0;
  const GLenum ONE = 1;
  const GLenum ONE_MINUS_CONSTANT_ALPHA = 0x8004;
  const GLenum ONE_MINUS_CONSTANT_COLOR = 0x8002;
  const GLenum ONE_MINUS_DST_ALPHA = 0x0305;
  const GLenum ONE_MINUS_DST_COLOR = 0x0307;
  const GLenum ONE_MINUS_SRC_ALPHA = 0x0303;
  const GLenum ONE_MINUS_SRC_COLOR = 0x0301;
  const GLenum OUT_OF_MEMORY = 0x0505;
  const GLenum PACK_ALIGNMENT = 0x0D05;
  const GLenum POINTS = 0x0000;
  const GLenum POLYGON_OFFSET_FACTOR = 0x8038;
  const GLenum POLYGON_OFFSET_FILL = 0x8037;
  const GLenum POLYGON_OFFSET_UNITS = 0x2A00;
  const GLenum RED_BITS = 0x0D52;
  const GLenum RENDERBUFFER = 0x8D41;
  const GLenum RENDERBUFFER_ALPHA_SIZE = 0x8D53;
  const GLenum RENDERBUFFER_BINDING = 0x8CA7;
  const GLenum RENDERBUFFER_BLUE_SIZE = 0x8D52;
  const GLenum RENDERBUFFER_DEPTH_SIZE = 0x8D54;
  const GLenum RENDERBUFFER_GREEN_SIZE = 0x8D51;
  const GLenum RENDERBUFFER_HEIGHT = 0x8D43;
  const GLenum RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
  const GLenum RENDERBUFFER_RED_SIZE = 0x8D50;
  const GLenum RENDERBUFFER_STENCIL_SIZE = 0x8D55;
  const GLenum RENDERBUFFER_WIDTH = 0x8D42;
  const GLenum RENDERER = 0x1F01;
  const GLenum REPEAT = 0x2901;
  const GLenum REPLACE = 0x1E01;
  const GLenum RGB = 0x1907;
  const GLenum RGB565 = 0x8D62;
  const GLenum RGB5_A1 = 0x8057;
  const GLenum RGBA = 0x1908;
  const GLenum RGBA4 = 0x8056;
  const GLenum SAMPLER_2D = 0x8B5E;
  const GLenum SAMPLER_CUBE = 0x8B60;
  const GLenum SAMPLES = 0x80A9;
  const GLenum SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
  const GLenum SAMPLE_BUFFERS = 0x80A8;
  const GLenum SAMPLE_COVERAGE = 0x80A0;
  const GLenum SAMPLE_COVERAGE_INVERT = 0x80AB;
  const GLenum SAMPLE_COVERAGE_VALUE = 0x80AA;
  const GLenum SCISSOR_BOX = 0x0C10;
  const GLenum SCISSOR_TEST = 0x0C11;
  const GLenum SHADER_TYPE = 0x8B4F;
  const GLenum SHADING_LANGUAGE_VERSION = 0x8B8C;
  const GLenum SHORT = 0x1402;
  const GLenum SRC_ALPHA = 0x0302;
  const GLenum SRC_ALPHA_SATURATE = 0x0308;
  const GLenum SRC_COLOR = 0x0300;
  const GLenum STATIC_DRAW = 0x88E4;
  const GLenum STENCIL_ATTACHMENT = 0x8D20;
  const GLenum STENCIL_BACK_FAIL = 0x8801;
  const GLenum STENCIL_BACK_FUNC = 0x8800;
  const GLenum STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
  const GLenum STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
  const GLenum STENCIL_BACK_REF = 0x8CA3;
  const GLenum STENCIL_BACK_VALUE_MASK = 0x8CA4;
  const GLenum STENCIL_BACK_WRITEMASK = 0x8CA5;
  const GLenum STENCIL_BITS = 0x0D57;
  const GLenum STENCIL_BUFFER_BIT = 0x00000400;
  const GLenum STENCIL_CLEAR_VALUE = 0x0B91;
  const GLenum STENCIL_FAIL = 0x0B94;
  const GLenum STENCIL_FUNC = 0x0B92;
  const GLenum STENCIL_INDEX8 = 0x8D48;
  const GLenum STENCIL_PASS_DEPTH_FAIL = 0x0B95;
  const GLenum STENCIL_PASS_DEPTH_PASS = 0x0B96;
  const GLenum STENCIL_REF = 0x0B97;
  const GLenum STENCIL_TEST = 0x0B90;
  const GLenum STENCIL_VALUE_MASK = 0x0B93;
  const GLenum STENCIL_WRITEMASK = 0x0B98;
  const GLenum STREAM_DRAW = 0x88E0;
  const GLenum SUBPIXEL_BITS = 0x0D50;
  const GLenum TEXTURE = 0x1702;
  const GLenum TEXTURE0 = 0x84C0;
  const GLenum TEXTURE1 = 0x84C1;
  const GLenum TEXTURE10 = 0x84CA;
  const GLenum TEXTURE11 = 0x84CB;
  const GLenum TEXTURE12 = 0x84CC;
  const GLenum TEXTURE13 = 0x84CD;
  const GLenum TEXTURE14 = 0x84CE;
  const GLenum TEXTURE15 = 0x84CF;
  const GLenum TEXTURE16 = 0x84D0;
  const GLenum TEXTURE17 = 0x84D1;
  const GLenum TEXTURE18 = 0x84D2;
  const GLenum TEXTURE19 = 0x84D3;
  const GLenum TEXTURE2 = 0x84C2;
  const GLenum TEXTURE20 = 0x84D4;
  const GLenum TEXTURE21 = 0x84D5;
  const GLenum TEXTURE22 = 0x84D6;
  const GLenum TEXTURE23 = 0x84D7;
  const GLenum TEXTURE24 = 0x84D8;
  const GLenum TEXTURE25 = 0x84D9;
  const GLenum TEXTURE26 = 0x84DA;
  const GLenum TEXTURE27 = 0x84DB;
  const GLenum TEXTURE28 = 0x84DC;
  const GLenum TEXTURE29 = 0x84DD;
  const GLenum TEXTURE3 = 0x84C3;
  const GLenum TEXTURE30 = 0x84DE;
  const GLenum TEXTURE31 = 0x84DF;
  const GLenum TEXTURE4 = 0x84C4;
  const GLenum TEXTURE5 = 0x84C5;
  const GLenum TEXTURE6 = 0x84C6;
  const GLenum TEXTURE7 = 0x84C7;
  const GLenum TEXTURE8 = 0x84C8;
  const GLenum TEXTURE9 = 0x84C9;
  const GLenum TEXTURE_2D = 0x0DE1;
  const GLenum TEXTURE_BINDING_2D = 0x8069;
  const GLenum TEXTURE_BINDING_CUBE_MAP = 0x8514;
  const GLenum TEXTURE_CUBE_MAP = 0x8513;
  const GLenum TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
  const GLenum TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
  const GLenum TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
  const GLenum TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
  const GLenum TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
  const GLenum TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
  const GLenum TEXTURE_MAG_FILTER = 0x2800;
  const GLenum TEXTURE_MIN_FILTER = 0x2801;
  const GLenum TEXTURE_WRAP_S = 0x2802;
  const GLenum TEXTURE_WRAP_T = 0x2803;
  const GLenum TRIANGLES = 0x0004;
  const GLenum TRIANGLE_FAN = 0x0006;
  const GLenum TRIANGLE_STRIP = 0x0005;
  const GLenum UNPACK_ALIGNMENT = 0x0CF5;
  const GLenum UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;
  const GLenum UNPACK_FLIP_Y_WEBGL = 0x9240;
  const GLenum UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;
  const GLenum UNSIGNED_BYTE = 0x1401;
  const GLenum UNSIGNED_INT = 0x1405;
  const GLenum UNSIGNED_SHORT = 0x1403;
  const GLenum UNSIGNED_SHORT_4_4_4_4 = 0x8033;
  const GLenum UNSIGNED_SHORT_5_5_5_1 = 0x8034;
  const GLenum UNSIGNED_SHORT_5_6_5 = 0x8363;
  const GLenum VALIDATE_STATUS = 0x8B83;
  const GLenum VENDOR = 0x1F00;
  const GLenum VERSION = 0x1F02;
  const GLenum VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
  const GLenum VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
  const GLenum VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
  const GLenum VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
  const GLenum VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
  const GLenum VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
  const GLenum VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
  const GLenum VERTEX_SHADER = 0x8B31;
  const GLenum VIEWPORT = 0x0BA2;
  const GLenum ZERO = 0;
  readonly attribute GLsizei drawingBufferHeight;
  readonly attribute GLsizei drawingBufferWidth;
  void activeTexture( GLenum texture );
  void attachShader( WebGLProgram program, WebGLShader shader );
  void bindAttribLocation( WebGLProgram program, GLuint index, DOMString name );
  void bindBuffer( GLenum target, WebGLBuffer? buffer );
  void bindFramebuffer( GLenum target, WebGLFramebuffer? framebuffer );
  void bindRenderbuffer( GLenum target, WebGLRenderbuffer? renderbuffer );
  void bindTexture( GLenum target, WebGLTexture? texture );
  void blendColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
  void blendEquation( GLenum mode );
  void blendEquationSeparate( GLenum modeRGB, GLenum modeAlpha );
  void blendFunc( GLenum sfactor, GLenum dfactor );
  void blendFuncSeparate( GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha );
  void bufferData( GLenum target, GLsizeiptr size, GLenum usage );
  void bufferData( GLenum target, [AllowShared] BufferSource? data, GLenum usage );
  void bufferSubData( GLenum target, GLintptr offset, [AllowShared] BufferSource data );
  [WebGLHandlesContextLoss]
  GLenum checkFramebufferStatus( GLenum target );
  void clear( GLbitfield mask );
  void clearColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
  void clearDepth( GLclampf depth );
  void clearStencil( GLint s );
  void colorMask( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
  void compileShader( WebGLShader shader );
  void compressedTexImage2D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, [AllowShared] ArrayBufferView data );
  void compressedTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, [AllowShared] ArrayBufferView data );
  void copyTexImage2D( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
  void copyTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
  WebGLBuffer? createBuffer();
  WebGLFramebuffer? createFramebuffer();
  WebGLProgram? createProgram();
  WebGLRenderbuffer? createRenderbuffer();
  WebGLShader? createShader( GLenum type );
  WebGLTexture? createTexture();
  void cullFace( GLenum mode );
  void deleteBuffer( WebGLBuffer? buffer );
  void deleteFramebuffer( WebGLFramebuffer? framebuffer );
  void deleteProgram( WebGLProgram? program );
  void deleteRenderbuffer( WebGLRenderbuffer? renderbuffer );
  void deleteShader( WebGLShader? shader );
  void deleteTexture( WebGLTexture? texture );
  void depthFunc( GLenum func );
  void depthMask( GLboolean flag );
  void depthRange( GLclampf zNear, GLclampf zFar );
  void detachShader( WebGLProgram program, WebGLShader shader );
  void disable( GLenum cap );
  void disableVertexAttribArray( GLuint index );
  void drawArrays( GLenum mode, GLint first, GLsizei count );
  void drawElements( GLenum mode, GLsizei count, GLenum type, GLintptr offset );
  void enable( GLenum cap );
  void enableVertexAttribArray( GLuint index );
  void finish();
  void flush();
  void framebufferRenderbuffer( GLenum target, GLenum attachment, GLenum renderbuffertarget, WebGLRenderbuffer? renderbuffer );
  void framebufferTexture2D( GLenum target, GLenum attachment, GLenum textarget, WebGLTexture? texture, GLint level );
  void frontFace( GLenum mode );
  void generateMipmap( GLenum target );
  WebGLActiveInfo? getActiveAttrib( WebGLProgram program, GLuint index );
  WebGLActiveInfo? getActiveUniform( WebGLProgram program, GLuint index );
  sequence<WebGLShader>? getAttachedShaders( WebGLProgram program );
  [WebGLHandlesContextLoss]
  GLint getAttribLocation( WebGLProgram program, DOMString name );
  any getBufferParameter( GLenum target, GLenum pname );
  [WebGLHandlesContextLoss]
  WebGLContextAttributes? getContextAttributes();
  [WebGLHandlesContextLoss]
  GLenum getError();
  object? getExtension( DOMString name );
  any getFramebufferAttachmentParameter( GLenum target, GLenum attachment, GLenum pname );
  any getParameter( GLenum pname );
  DOMString? getProgramInfoLog( WebGLProgram program );
  any getProgramParameter( WebGLProgram program, GLenum pname );
  any getRenderbufferParameter( GLenum target, GLenum pname );
  DOMString? getShaderInfoLog( WebGLShader shader );
  any getShaderParameter( WebGLShader shader, GLenum pname );
  WebGLShaderPrecisionFormat? getShaderPrecisionFormat( GLenum shadertype, GLenum precisiontype );
  DOMString? getShaderSource( WebGLShader shader );
  sequence<DOMString>? getSupportedExtensions();
  any getTexParameter( GLenum target, GLenum pname );
  any getUniform( WebGLProgram program, WebGLUniformLocation location );
  WebGLUniformLocation? getUniformLocation( WebGLProgram program, DOMString name );
  any getVertexAttrib( GLuint index, GLenum pname );
  [WebGLHandlesContextLoss]
  GLintptr getVertexAttribOffset( GLuint index, GLenum pname );
  void hint( GLenum target, GLenum mode );
  [WebGLHandlesContextLoss]
  GLboolean isBuffer( WebGLBuffer? buffer );
  [WebGLHandlesContextLoss]
  boolean isContextLost();
  [WebGLHandlesContextLoss]
  GLboolean isEnabled( GLenum cap );
  [WebGLHandlesContextLoss]
  GLboolean isFramebuffer( WebGLFramebuffer? framebuffer );
  [WebGLHandlesContextLoss]
  GLboolean isProgram( WebGLProgram? program );
  [WebGLHandlesContextLoss]
  GLboolean isRenderbuffer( WebGLRenderbuffer? renderbuffer );
  [WebGLHandlesContextLoss]
  GLboolean isShader( WebGLShader? shader );
  [WebGLHandlesContextLoss]
  GLboolean isTexture( WebGLTexture? texture );
  void lineWidth( GLfloat width );
  void linkProgram( WebGLProgram program );
  Promise<void> makeXRCompatible();
  void pixelStorei( GLenum pname, GLint param );
  void polygonOffset( GLfloat factor, GLfloat units );
  void readPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels );
  void renderbufferStorage( GLenum target, GLenum internalformat, GLsizei width, GLsizei height );
  void sampleCoverage( GLclampf value, GLboolean invert );
  void scissor( GLint x, GLint y, GLsizei width, GLsizei height );
  void shaderSource( WebGLShader shader, DOMString source );
  void stencilFunc( GLenum func, GLint ref, GLuint mask );
  void stencilFuncSeparate( GLenum face, GLenum func, GLint ref, GLuint mask );
  void stencilMask( GLuint mask );
  void stencilMaskSeparate( GLenum face, GLuint mask );
  void stencilOp( GLenum fail, GLenum zfail, GLenum zpass );
  void stencilOpSeparate( GLenum face, GLenum fail, GLenum zfail, GLenum zpass );
  void texImage2D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels );
  void texImage2D( GLenum target, GLint level, GLint internalformat, GLenum format, GLenum type, TexImageSource source );
  void texParameterf( GLenum target, GLenum pname, GLfloat param );
  void texParameteri( GLenum target, GLenum pname, GLint param );
  void texSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels );
  void texSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLenum format, GLenum type, TexImageSource source );
  void uniform1f( WebGLUniformLocation? location, GLfloat x );
  void uniform1fv( WebGLUniformLocation? location, Float32List v );
  void uniform1i( WebGLUniformLocation? location, GLint x );
  void uniform1iv( WebGLUniformLocation? location, Int32List v );
  void uniform2f( WebGLUniformLocation? location, GLfloat x, GLfloat y );
  void uniform2fv( WebGLUniformLocation? location, Float32List v );
  void uniform2i( WebGLUniformLocation? location, GLint x, GLint y );
  void uniform2iv( WebGLUniformLocation? location, Int32List v );
  void uniform3f( WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z );
  void uniform3fv( WebGLUniformLocation? location, Float32List v );
  void uniform3i( WebGLUniformLocation? location, GLint x, GLint y, GLint z );
  void uniform3iv( WebGLUniformLocation? location, Int32List v );
  void uniform4f( WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
  void uniform4fv( WebGLUniformLocation? location, Float32List v );
  void uniform4i( WebGLUniformLocation? location, GLint x, GLint y, GLint z, GLint w );
  void uniform4iv( WebGLUniformLocation? location, Int32List v );
  void uniformMatrix2fv( WebGLUniformLocation? location, GLboolean transpose, Float32List value );
  void uniformMatrix3fv( WebGLUniformLocation? location, GLboolean transpose, Float32List value );
  void uniformMatrix4fv( WebGLUniformLocation? location, GLboolean transpose, Float32List value );
  void useProgram( WebGLProgram? program );
  void validateProgram( WebGLProgram program );
  void vertexAttrib1f( GLuint index, GLfloat x );
  void vertexAttrib1fv( GLuint index, Float32List values );
  void vertexAttrib2f( GLuint index, GLfloat x, GLfloat y );
  void vertexAttrib2fv( GLuint index, Float32List values );
  void vertexAttrib3f( GLuint index, GLfloat x, GLfloat y, GLfloat z );
  void vertexAttrib3fv( GLuint index, Float32List values );
  void vertexAttrib4f( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
  void vertexAttrib4fv( GLuint index, Float32List values );
  void vertexAttribPointer( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset );
  void viewport( GLint x, GLint y, GLsizei width, GLsizei height );
};

/**
 * The WebGLSampler interface is part of the WebGL 2 API and stores sampling parameters for WebGLTexture access inside of a shader.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler">WebGLSampler - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLSampler : WebGLObject {
};

/**
 * The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader">WebGLShader - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLShader : WebGLObject {
};

/**
 * The WebGLShaderPrecisionFormat interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat">WebGLShaderPrecisionFormat - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLShaderPrecisionFormat {
  /**
   * The read-only WebGLShaderPrecisionFormat.precision property returns the number of bits of precision that can be represented.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat/precision">WebGLShaderPrecisionFormat.precision - MDN</a>
   */
  readonly attribute GLint precision;
  /**
   * The read-only WebGLShaderPrecisionFormat.rangeMax property returns the base 2 log of the absolute value of the maximum value that can be represented.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat/rangeMax">WebGLShaderPrecisionFormat.rangeMax - MDN</a>
   */
  readonly attribute GLint rangeMax;
  /**
   * The read-only WebGLShaderPrecisionFormat.rangeMin property returns the base 2 log of the absolute value of the minimum value that can be represented.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat/rangeMin">WebGLShaderPrecisionFormat.rangeMin - MDN</a>
   */
  readonly attribute GLint rangeMin;
};

/**
 * The WebGLSync interface is part of the WebGL 2 API and is used to synchronize activities between the GPU and the application.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync">WebGLSync - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLSync : WebGLObject {
};

/**
 * The WebGLTexture interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture">WebGLTexture - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLTexture : WebGLObject {
};

/**
 * The WebGLTransformFeedback interface is part of the WebGL 2 API and enables transform feedback, which is the process of capturing primitives generated by vertex processing. It allows to preserve the post-transform rendering state of an object and resubmit this data multiple times.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback">WebGLTransformFeedback - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLTransformFeedback : WebGLObject {
};

/**
 * The WebGLUniformLocation interface is part of the WebGL API and represents the location of a uniform variable in a shader program.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation">WebGLUniformLocation - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLUniformLocation {
};

/**
 * The WebGLVertexArrayObject interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject">WebGLVertexArrayObject - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebGLVertexArrayObject : WebGLObject {
};

/**
 * The WebGLVertexArrayObject interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObjectOES">WebGLVertexArrayObjectOES - MDN</a>
 */
[LegacyNoInterfaceObject]
interface WebGLVertexArrayObjectOES : WebGLObject {
};

/**
 * The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket">WebSocket - MDN</a>
 */
[Exposed=(Window,Worker)]
interface WebSocket : EventTarget {
  const unsigned short CLOSED = 3;
  const unsigned short CLOSING = 2;
  const unsigned short CONNECTING = 0;
  const unsigned short OPEN = 1;
  /**
   * The WebSocket.bufferedAmount read-only property returns the number of bytes of data that have been queued using calls to send() but not yet transmitted to the network. This value resets to zero once all queued data has been sent. This value does not reset to zero when the connection is closed; if you keep calling send(), this will continue to climb.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/bufferedAmount">WebSocket.bufferedAmount - MDN</a>
   */
  readonly attribute unsigned long long bufferedAmount;
  /**
   * The WebSocket.extensions read-only property returns the extensions selected by the server. This is currently only the empty string or a list of extensions as negotiated by the connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/extensions">WebSocket.extensions - MDN</a>
   */
  readonly attribute DOMString extensions;
  /**
   * The WebSocket.protocol read-only property returns the name of the sub-protocol the server selected; this will be one of the strings specified in the protocols parameter when creating the WebSocket object, or the empty string if no connection is established.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/protocol">WebSocket.protocol - MDN</a>
   */
  readonly attribute DOMString protocol;
  /**
   * The WebSocket.readyState read-only property returns the current state of the WebSocket connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState">WebSocket.readyState - MDN</a>
   */
  readonly attribute unsigned short readyState;
  /**
   * The WebSocket.url read-only property returns the absolute URL of the WebSocket as resolved by the constructor.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/url">WebSocket.url - MDN</a>
   */
  readonly attribute USVString url;
  /**
   * The WebSocket.binaryType property returns the type of binary data being transmitted by the connection.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/binaryType">WebSocket.binaryType - MDN</a>
   */
  attribute BinaryType binaryType;
  /**
   * The WebSocket.onclose property is an EventHandler that is called when the WebSocket connection's readyState changes to CLOSED. It is called with a CloseEvent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onclose">WebSocket.onclose - MDN</a>
   */
  attribute NullableEventHandler onclose;
  /**
   * The WebSocket interface's onerror event handler property is a function which gets called when an error occurs on the WebSocket.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onerror">WebSocket.onerror - MDN</a>
   */
  attribute NullableEventHandler onerror;
  /**
   * The WebSocket.onmessage property is an EventHandler that is called when a message is received from the server. It is called with a MessageEvent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onmessage">WebSocket.onmessage - MDN</a>
   */
  attribute NullableEventHandler onmessage;
  /**
   * The WebSocket.onopen property is an EventHandler that is called when the WebSocket connection's readyState changes to 1; this indicates that the connection is ready to send and receive data. It is called with an Event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onopen">WebSocket.onopen - MDN</a>
   */
  attribute NullableEventHandler onopen;
  /**
   * The close event is fired when a connection with a WebSocket is closed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close_event">close event - MDN</a>
   */
  event CloseEvent close;
  /**
   * The error event is fired when a connection with a WebSocket has been closed due to an error (some data couldn't be sent for example).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/error_event">error event - MDN</a>
   */
  event Event error;
  /**
   * The message event is fired when data is received through a WebSocket.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/message_event">message event - MDN</a>
   */
  event MessageEvent message;
  /**
   * The open event is fired when a connection with a WebSocket is opened.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/open_event">open event - MDN</a>
   */
  event Event open;
  /**
   * The WebSocket() constructor returns a new WebSocket object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/WebSocket">WebSocket.WebSocket - MDN</a>
   */
  constructor( USVString url, optional ( DOMString or sequence<DOMString> ) protocols = [] );
  /**
   * The WebSocket.close() method closes the WebSocket connection or connection attempt, if any. If the connection is already CLOSED, this method does nothing.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close">WebSocket.close - MDN</a>
   */
  void close( optional [Clamp] unsigned short code, optional USVString reason );
  /**
   * The WebSocket.send() method enqueues the specified data to be transmitted to the server over the WebSocket connection, increasing the value of bufferedAmount by the number of bytes needed to contain the data. If the data can't be sent (for example, because it needs to be buffered but the buffer is full), the socket is closed automatically.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send">WebSocket.send - MDN</a>
   */
  void send( USVString data );
  /**
   * The WebSocket.send() method enqueues the specified data to be transmitted to the server over the WebSocket connection, increasing the value of bufferedAmount by the number of bytes needed to contain the data. If the data can't be sent (for example, because it needs to be buffered but the buffer is full), the socket is closed automatically.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send">WebSocket.send - MDN</a>
   */
  void send( Blob data );
  /**
   * The WebSocket.send() method enqueues the specified data to be transmitted to the server over the WebSocket connection, increasing the value of bufferedAmount by the number of bytes needed to contain the data. If the data can't be sent (for example, because it needs to be buffered but the buffer is full), the socket is closed automatically.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send">WebSocket.send - MDN</a>
   */
  void send( ArrayBuffer data );
  /**
   * The WebSocket.send() method enqueues the specified data to be transmitted to the server over the WebSocket connection, increasing the value of bufferedAmount by the number of bytes needed to contain the data. If the data can't be sent (for example, because it needs to be buffered but the buffer is full), the socket is closed automatically.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send">WebSocket.send - MDN</a>
   */
  void send( ArrayBufferView data );
};

/**
 * The WheelEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent">WheelEvent - MDN</a>
 */
[Exposed=Window]
interface WheelEvent : MouseEvent {
  const unsigned long DOM_DELTA_LINE = 0x01;
  const unsigned long DOM_DELTA_PAGE = 0x02;
  const unsigned long DOM_DELTA_PIXEL = 0x00;
  /**
   * The WheelEvent.deltaMode read-only property returns an unsigned long representing the unit of the delta values scroll amount. Permitted values are:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode">WheelEvent.deltaMode - MDN</a>
   */
  readonly attribute unsigned long deltaMode;
  /**
   * The WheelEvent.deltaX read-only property is a double representing the horizontal scroll amount in the WheelEvent.deltaMode unit.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaX">WheelEvent.deltaX - MDN</a>
   */
  readonly attribute double deltaX;
  /**
   * The WheelEvent.deltaY read-only property is a double representing the vertical scroll amount in the WheelEvent.deltaMode unit.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaY">WheelEvent.deltaY - MDN</a>
   */
  readonly attribute double deltaY;
  /**
   * The WheelEvent.deltaZ read-only property is a double representing the scroll amount along the z-axis, in the WheelEvent.deltaMode unit.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaZ">WheelEvent.deltaZ - MDN</a>
   */
  readonly attribute double deltaZ;
  /**
   * The WheelEvent() constructor returns a newly created WheelEvent object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent">WheelEvent.WheelEvent - MDN</a>
   */
  constructor( DOMString type, optional WheelEventInit eventInitDict );
};

/**
 * The Window interface represents a window containing a DOM document; the document property points to the DOM document loaded in that window.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window">Window - MDN</a>
 */
[Global=Window, Exposed=Window, LegacyUnenumerableNamedProperties]
interface Window : EventTarget {
  [SecureContext]
  readonly attribute ApplicationCache applicationCache;
  /**
   * The caches read-only property of the WindowOrWorkerGlobalScope interface returns the CacheStorage object associated with the current context. This object enables functionality such as storing assets for offline use, and generating custom responses to requests.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/caches">WindowOrWorkerGlobalScope.caches - MDN</a>
   */
  [SecureContext, SameObject]
  readonly attribute CacheStorage caches;
  readonly attribute boolean closed;
  /**
   * The crossOriginIsolated read-only property of the WindowOrWorkerGlobalScope interface returns a boolean value that indicates whether a SharedArrayBuffer can be sent via a Window.postMessage() call.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/crossOriginIsolated">WindowOrWorkerGlobalScope.crossOriginIsolated - MDN</a>
   */
  readonly attribute boolean crossOriginIsolated;
  [SameObject]
  readonly attribute Crypto crypto;
  readonly attribute CustomElementRegistry customElements;
  [Replaceable]
  readonly attribute double devicePixelRatio;
  [LegacyUnforgeable]
  readonly attribute Document document;
  [Replaceable]
  readonly attribute any event;
  [Replaceable, SameObject]
  readonly attribute External external;
  readonly attribute Element? frameElement;
  [Replaceable]
  readonly attribute WindowProxy frames;
  readonly attribute History history;
  /**
   * The indexedDB read-only property of the WindowOrWorkerGlobalScope mixin provides a mechanism for applications to asynchronously access the capabilities of indexed databases.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/indexedDB">WindowOrWorkerGlobalScope.indexedDB - MDN</a>
   */
  [SameObject]
  readonly attribute IDBFactory indexedDB;
  [Replaceable]
  readonly attribute long innerHeight;
  [Replaceable]
  readonly attribute long innerWidth;
  /**
   * The isSecureContext read-only property of the WindowOrWorkerGlobalScope interface returns a boolean indicating whether the current context is secure (true) or not (false).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/isSecureContext">WindowOrWorkerGlobalScope.isSecureContext - MDN</a>
   */
  readonly attribute boolean isSecureContext;
  [Replaceable]
  readonly attribute unsigned long length;
  readonly attribute Storage localStorage;
  [PutForwards=href, LegacyUnforgeable]
  readonly attribute Location location;
  [Replaceable]
  readonly attribute BarProp locationbar;
  [Replaceable]
  readonly attribute BarProp menubar;
  readonly attribute Navigator navigator;
  readonly attribute short orientation;
  /**
   * The origin read-only property of the WindowOrWorkerGlobalScope interface returns the origin of the global scope, serialized as a string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/origin">WindowOrWorkerGlobalScope.origin - MDN</a>
   */
  [Replaceable]
  readonly attribute USVString origin;
  [Replaceable]
  readonly attribute long outerHeight;
  [Replaceable]
  readonly attribute long outerWidth;
  [Replaceable]
  readonly attribute double pageXOffset;
  [Replaceable]
  readonly attribute double pageYOffset;
  [Replaceable]
  readonly attribute WindowProxy? parent;
  [Replaceable]
  readonly attribute Performance performance;
  [Replaceable]
  readonly attribute BarProp personalbar;
  [SameObject, Replaceable]
  readonly attribute Screen screen;
  [Replaceable]
  readonly attribute long screenLeft;
  [Replaceable]
  readonly attribute long screenTop;
  [Replaceable]
  readonly attribute long screenX;
  [Replaceable]
  readonly attribute long screenY;
  [Replaceable]
  readonly attribute double scrollX;
  [Replaceable]
  readonly attribute double scrollY;
  [Replaceable]
  readonly attribute BarProp scrollbars;
  [Replaceable]
  readonly attribute WindowProxy self;
  readonly attribute Storage sessionStorage;
  [SameObject]
  readonly attribute SpeechSynthesis speechSynthesis;
  [Replaceable]
  readonly attribute BarProp statusbar;
  [Replaceable]
  readonly attribute BarProp toolbar;
  [LegacyUnforgeable]
  readonly attribute WindowProxy? top;
  [SameObject, Replaceable]
  readonly attribute VisualViewport visualViewport;
  [LegacyUnforgeable]
  readonly attribute WindowProxy window;
  attribute DOMString name;
  /**
   * The onabort property of the GlobalEventHandlers mixin is the EventHandler for processing abort events sent to the window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort">GlobalEventHandlers.onabort - MDN</a>
   */
  attribute NullableEventHandler onabort;
  /**
   * The onafterprint property of the WindowEventHandlers mixin is the EventHandler for processing afterprint events for the current window. These events are raised after the user prints, or if they abort the print dialog.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint">WindowEventHandlers.onafterprint - MDN</a>
   */
  attribute NullableEventHandler onafterprint;
  /**
   * The onanimationcancel property of the GlobalEventHandlers mixin is the EventHandler for processing animationcancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationcancel">GlobalEventHandlers.onanimationcancel - MDN</a>
   */
  attribute NullableEventHandler onanimationcancel;
  /**
   * The onanimationend property of the GlobalEventHandlers mixin is the EventHandler for processing animationend events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend">GlobalEventHandlers.onanimationend - MDN</a>
   */
  attribute NullableEventHandler onanimationend;
  /**
   * The onanimationiteration property of the GlobalEventHandlers mixin is the EventHandler for processing animationiteration events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationiteration">GlobalEventHandlers.onanimationiteration - MDN</a>
   */
  attribute NullableEventHandler onanimationiteration;
  /**
   * An event handler for the animationstart event. This event is sent when a CSS Animation starts to play.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationstart">GlobalEventHandlers.onanimationstart - MDN</a>
   */
  attribute NullableEventHandler onanimationstart;
  /**
   * The onauxclick property of the GlobalEventHandlers mixin is an EventHandler for processing auxclick events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onauxclick">GlobalEventHandlers.onauxclick - MDN</a>
   */
  attribute NullableEventHandler onauxclick;
  /**
   * The onbeforeprint property of the WindowEventHandlers mixin is the EventHandler for processing beforeprint events for the current window. These events are raised before the print dialog window is opened.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeprint">WindowEventHandlers.onbeforeprint - MDN</a>
   */
  attribute NullableEventHandler onbeforeprint;
  /**
   * The onbeforeunload property of the WindowEventHandlers mixin is the EventHandler for processing beforeunload events. These events fire when a window is about to unload its resources. At this point, the document is still visible and the event is still cancelable.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload">WindowEventHandlers.onbeforeunload - MDN</a>
   */
  attribute NullableOnBeforeUnloadEventHandler onbeforeunload;
  /**
   * The onblur property of the GlobalEventHandlers mixin is the EventHandler for processing blur events. It's available on Element, Document, and Window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur">GlobalEventHandlers.onblur - MDN</a>
   */
  attribute NullableEventHandler onblur;
  /**
   * The oncancel property of the GlobalEventHandlers mixin is an EventHandler for processing cancel events sent to a dialog element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncancel">GlobalEventHandlers.oncancel - MDN</a>
   */
  attribute NullableEventHandler oncancel;
  /**
   * The oncanplay property of the GlobalEventHandlers mixin is the EventHandler for processing canplay events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplay">GlobalEventHandlers.oncanplay - MDN</a>
   */
  attribute NullableEventHandler oncanplay;
  /**
   * The oncanplaythrough property of the GlobalEventHandlers mixin is the EventHandler for processing canplaythrough events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough">GlobalEventHandlers.oncanplaythrough - MDN</a>
   */
  attribute NullableEventHandler oncanplaythrough;
  /**
   * The onchange property of the GlobalEventHandlers mixin is an EventHandler for processing change events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange">GlobalEventHandlers.onchange - MDN</a>
   */
  attribute NullableEventHandler onchange;
  /**
   * The onclick property of the GlobalEventHandlers mixin is the EventHandler for processing click events on a given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick">GlobalEventHandlers.onclick - MDN</a>
   */
  attribute NullableEventHandler onclick;
  /**
   * The onclose property of the GlobalEventHandlers mixin is an EventHandler for processing close events sent to a dialog element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose">GlobalEventHandlers.onclose - MDN</a>
   */
  attribute NullableEventHandler onclose;
  attribute NullableEventHandler oncompassneedscalibration;
  /**
   * The oncontextmenu property of the GlobalEventHandlers mixin is an EventHandler that processes contextmenu events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu">GlobalEventHandlers.oncontextmenu - MDN</a>
   */
  attribute NullableEventHandler oncontextmenu;
  /**
   * The oncuechange property of the GlobalEventHandlers mixin is the EventHandler for processing cuechange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncuechange">GlobalEventHandlers.oncuechange - MDN</a>
   */
  attribute NullableEventHandler oncuechange;
  /**
   * The ondblclick property of the GlobalEventHandlers mixin is an EventHandler that processes dblclick events on the given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick">GlobalEventHandlers.ondblclick - MDN</a>
   */
  attribute NullableEventHandler ondblclick;
  /**
   * An event handler for the devicemotion events sent to the window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/ondevicemotion">Window.ondevicemotion - MDN</a>
   */
  [SecureContext]
  attribute NullableEventHandler ondevicemotion;
  /**
   * An event handler for the deviceorientation event, which contains information about a relative device orientation change.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceorientation">Window.ondeviceorientation - MDN</a>
   */
  [SecureContext]
  attribute NullableEventHandler ondeviceorientation;
  [SecureContext]
  attribute NullableEventHandler ondeviceorientationabsolute;
  /**
   * A global event handler for the drag event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondrag">GlobalEventHandlers.ondrag - MDN</a>
   */
  attribute NullableEventHandler ondrag;
  /**
   * A global event handler for the dragend event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragend">GlobalEventHandlers.ondragend - MDN</a>
   */
  attribute NullableEventHandler ondragend;
  /**
   * A global event handler for the dragenter event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragenter">GlobalEventHandlers.ondragenter - MDN</a>
   */
  attribute NullableEventHandler ondragenter;
  /**
   * The GlobalEventHandler.ondragexit property is an event handler for the dragexit event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragexit">GlobalEventHandlers.ondragexit - MDN</a>
   */
  attribute NullableEventHandler ondragexit;
  /**
   * A global event handler for the dragleave event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragleave">GlobalEventHandlers.ondragleave - MDN</a>
   */
  attribute NullableEventHandler ondragleave;
  /**
   * A global event handler for the dragover event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragover">GlobalEventHandlers.ondragover - MDN</a>
   */
  attribute NullableEventHandler ondragover;
  /**
   * A global event handler for the dragstart event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragstart">GlobalEventHandlers.ondragstart - MDN</a>
   */
  attribute NullableEventHandler ondragstart;
  /**
   * A global event handler for the drop event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondrop">GlobalEventHandlers.ondrop - MDN</a>
   */
  attribute NullableEventHandler ondrop;
  /**
   * The ondurationchange property of the GlobalEventHandlers mixin is the EventHandler for processing durationchange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondurationchange">GlobalEventHandlers.ondurationchange - MDN</a>
   */
  attribute NullableEventHandler ondurationchange;
  /**
   * The onemptied property sets and returns the event handler for the emptied event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onemptied">GlobalEventHandlers.onemptied - MDN</a>
   */
  attribute NullableEventHandler onemptied;
  /**
   * The onended property of the GlobalEventHandlers mixin is the EventHandler for processing ended events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onended">GlobalEventHandlers.onended - MDN</a>
   */
  attribute NullableEventHandler onended;
  /**
   * The onerror property of the GlobalEventHandlers mixin is an EventHandler that processes error events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror">GlobalEventHandlers.onerror - MDN</a>
   */
  attribute NullableOnErrorEventHandler onerror;
  /**
   * The onfocus property of the GlobalEventHandlers mixin is an EventHandler that processes focus events on the given element.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus">GlobalEventHandlers.onfocus - MDN</a>
   */
  attribute NullableEventHandler onfocus;
  /**
   * The onformdata property of the GlobalEventHandlers mixin is the EventHandler for processing formdata events, fired after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a FormData() constructor. onformdata is available on HTMLFormElement.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onformdata">GlobalEventHandlers.onformdata - MDN</a>
   */
  attribute NullableEventHandler onformdata;
  /**
   * The ongotpointercapture property of the GlobalEventHandlers mixin is an EventHandler that processes gotpointercapture events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ongotpointercapture">GlobalEventHandlers.ongotpointercapture - MDN</a>
   */
  attribute NullableEventHandler ongotpointercapture;
  /**
   * The WindowEventHandlers.onhashchange property of the WindowEventHandlers mixin is the EventHandler for processing hashchange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange">WindowEventHandlers.onhashchange - MDN</a>
   */
  attribute NullableEventHandler onhashchange;
  /**
   * The oninput property of the GlobalEventHandlers mixin is an EventHandler that processes input events on the input, select, and textarea elements. It also handles these events on elements where contenteditable or designMode are turned on.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput">GlobalEventHandlers.oninput - MDN</a>
   */
  attribute NullableEventHandler oninput;
  /**
   * The oninvalid property of the GlobalEventHandlers mixin is an EventHandler that processes invalid events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninvalid">GlobalEventHandlers.oninvalid - MDN</a>
   */
  attribute NullableEventHandler oninvalid;
  /**
   * The onkeydown property of the GlobalEventHandlers mixin is an EventHandler that processes keydown events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown">GlobalEventHandlers.onkeydown - MDN</a>
   */
  attribute NullableEventHandler onkeydown;
  /**
   * The onkeypress property of the GlobalEventHandlers mixin is an EventHandler that processes keypress events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress">GlobalEventHandlers.onkeypress - MDN</a>
   */
  attribute NullableEventHandler onkeypress;
  /**
   * The onkeyup property of the GlobalEventHandlers mixin is an EventHandler that processes keyup events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup">GlobalEventHandlers.onkeyup - MDN</a>
   */
  attribute NullableEventHandler onkeyup;
  /**
   * The onlanguagechange property of the WindowEventHandlers mixin is the EventHandler for processing languagechange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange">WindowEventHandlers.onlanguagechange - MDN</a>
   */
  attribute NullableEventHandler onlanguagechange;
  /**
   * The onload property of the GlobalEventHandlers mixin is an EventHandler that processes load events on a Window, XMLHttpRequest, img element, etc.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload">GlobalEventHandlers.onload - MDN</a>
   */
  attribute NullableEventHandler onload;
  /**
   * The onloadeddata property of the GlobalEventHandlers mixin is the EventHandler for processing loadeddata events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadeddata">GlobalEventHandlers.onloadeddata - MDN</a>
   */
  attribute NullableEventHandler onloadeddata;
  /**
   * The onloadedmetadata property of the GlobalEventHandlers mixin is the EventHandler for processing loadedmetadata events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadedmetadata">GlobalEventHandlers.onloadedmetadata - MDN</a>
   */
  attribute NullableEventHandler onloadedmetadata;
  /**
   * The onloadstart property of the GlobalEventHandlers mixin is an EventHandler representing the code to be called when the loadstart event is raised (when progress has begun on the loading of a resource.)
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart">GlobalEventHandlers.onloadstart - MDN</a>
   */
  attribute NullableEventHandler onloadstart;
  /**
   * The onlostpointercapture property of the GlobalEventHandlers mixin is an EventHandler that processes lostpointercapture events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onlostpointercapture">GlobalEventHandlers.onlostpointercapture - MDN</a>
   */
  attribute NullableEventHandler onlostpointercapture;
  /**
   * The onmessage property of the WindowEventHandlers mixin is the EventHandler called whenever an object receives a message event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessage">WindowEventHandlers.onmessage - MDN</a>
   */
  attribute NullableEventHandler onmessage;
  /**
   * The onmessageerror event handler of the WindowEventHandlers interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on a window—that is, when it receives a message that cannot be deserialized.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessageerror">WindowEventHandlers.onmessageerror - MDN</a>
   */
  attribute NullableEventHandler onmessageerror;
  /**
   * The onmousedown property of the GlobalEventHandlers mixin is an EventHandler that processes mousedown events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown">GlobalEventHandlers.onmousedown - MDN</a>
   */
  attribute NullableEventHandler onmousedown;
  /**
   * The onmouseenter property of the GlobalEventHandlers mixin is the EventHandler for processing mouseenter events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseenter">GlobalEventHandlers.onmouseenter - MDN</a>
   */
  [LegacyLenientThis]
  attribute NullableEventHandler onmouseenter;
  /**
   * The onmouseleave property of the GlobalEventHandlers mixin is the EventHandler for processing mouseleave events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseleave">GlobalEventHandlers.onmouseleave - MDN</a>
   */
  [LegacyLenientThis]
  attribute NullableEventHandler onmouseleave;
  /**
   * The onmousemove property of the GlobalEventHandlers mixin is an EventHandler that processes mousemove events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove">GlobalEventHandlers.onmousemove - MDN</a>
   */
  attribute NullableEventHandler onmousemove;
  /**
   * The onmouseout property of the GlobalEventHandlers mixin is an EventHandler that processes mouseout events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout">GlobalEventHandlers.onmouseout - MDN</a>
   */
  attribute NullableEventHandler onmouseout;
  /**
   * The onmouseover property of the GlobalEventHandlers mixin is an EventHandler that processes mouseover events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover">GlobalEventHandlers.onmouseover - MDN</a>
   */
  attribute NullableEventHandler onmouseover;
  /**
   * The onmouseup property of the GlobalEventHandlers mixin is an EventHandler that processes mouseup events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup">GlobalEventHandlers.onmouseup - MDN</a>
   */
  attribute NullableEventHandler onmouseup;
  attribute NullableEventHandler onoffline;
  attribute NullableEventHandler ononline;
  attribute NullableEventHandler onorientationchange;
  attribute NullableEventHandler onpagehide;
  attribute NullableEventHandler onpageshow;
  /**
   * The onpause property of the GlobalEventHandlers mixin is the EventHandler for processing pause events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause">GlobalEventHandlers.onpause - MDN</a>
   */
  attribute NullableEventHandler onpause;
  /**
   * The onplay property of the GlobalEventHandlers mixin is the EventHandler for processing play events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay">GlobalEventHandlers.onplay - MDN</a>
   */
  attribute NullableEventHandler onplay;
  /**
   * The onplaying property of the GlobalEventHandlers mixin is the EventHandler for processing playing events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplaying">GlobalEventHandlers.onplaying - MDN</a>
   */
  attribute NullableEventHandler onplaying;
  /**
   * The onpointercancel property of the GlobalEventHandlers mixin is an EventHandler that processes pointercancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel">GlobalEventHandlers.onpointercancel - MDN</a>
   */
  attribute NullableEventHandler onpointercancel;
  /**
   * The GlobalEventHandlers event handler onpointerdown is used to specify the event handler for the pointerdown event, which is fired when the pointing device is initially pressed. This event can be sent to Window, Document, and Element objects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown">GlobalEventHandlers.onpointerdown - MDN</a>
   */
  attribute NullableEventHandler onpointerdown;
  /**
   * The onpointerenter property of the GlobalEventHandlers mixin is an EventHandler that processes pointerenter events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerenter">GlobalEventHandlers.onpointerenter - MDN</a>
   */
  attribute NullableEventHandler onpointerenter;
  /**
   * The global event handler for the pointerleave event, which is delivered to a Node when the pointer (mouse cursor, fingertip, etc.) exits its hit test area (for example, if the cursor exits an Element or Window's content area). This event is part of the Pointer Events API.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave">GlobalEventHandlers.onpointerleave - MDN</a>
   */
  attribute NullableEventHandler onpointerleave;
  /**
   * The onpointermove property of the GlobalEventHandlers mixin is an EventHandler that processes pointermove events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove">GlobalEventHandlers.onpointermove - MDN</a>
   */
  attribute NullableEventHandler onpointermove;
  /**
   * The onpointerout property of the GlobalEventHandlers mixin is an EventHandler that processes pointerout events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout">GlobalEventHandlers.onpointerout - MDN</a>
   */
  attribute NullableEventHandler onpointerout;
  /**
   * The onpointerover property of the GlobalEventHandlers mixin is an EventHandler that processes pointerover events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerover">GlobalEventHandlers.onpointerover - MDN</a>
   */
  attribute NullableEventHandler onpointerover;
  /**
   * The onpointerup property of the GlobalEventHandlers mixin is an EventHandler that processes pointerup events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerup">GlobalEventHandlers.onpointerup - MDN</a>
   */
  attribute NullableEventHandler onpointerup;
  /**
   * The onpopstate property of the WindowEventHandlers mixin is the EventHandler for processing popstate events on the window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate">WindowEventHandlers.onpopstate - MDN</a>
   */
  attribute NullableEventHandler onpopstate;
  attribute NullableEventHandler onprogress;
  attribute NullableEventHandler onratechange;
  /**
   * The onrejectionhandled property of the WindowEventHandlers mixin is the EventHandler for processing rejectionhandled events. These events are raised when Promises are rejected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/onrejectionhandled">Window.onrejectionhandled - MDN</a>
   */
  attribute NullableEventHandler onrejectionhandled;
  /**
   * The onreset property of the GlobalEventHandlers mixin is an EventHandler that processes reset events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset">GlobalEventHandlers.onreset - MDN</a>
   */
  attribute NullableEventHandler onreset;
  /**
   * The onresize property of the GlobalEventHandlers interface is an EventHandler that processes resize events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize">GlobalEventHandlers.onresize - MDN</a>
   */
  attribute NullableEventHandler onresize;
  /**
   * The onscroll property of the GlobalEventHandlers mixin is an EventHandler that processes scroll events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll">GlobalEventHandlers.onscroll - MDN</a>
   */
  attribute NullableEventHandler onscroll;
  attribute NullableEventHandler onsecuritypolicyviolation;
  attribute NullableEventHandler onseeked;
  attribute NullableEventHandler onseeking;
  /**
   * The onselect property of the GlobalEventHandlers mixin is an EventHandler that processes select events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect">GlobalEventHandlers.onselect - MDN</a>
   */
  attribute NullableEventHandler onselect;
  /**
   * The onselectionchange property of the GlobalEventHandlers mixin is an EventHandler that processes selectionchange events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange">GlobalEventHandlers.onselectionchange - MDN</a>
   */
  attribute NullableEventHandler onselectionchange;
  /**
   * The onselectstart property of the GlobalEventHandlers mixin is an EventHandler that processes selectstart events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart">GlobalEventHandlers.onselectstart - MDN</a>
   */
  attribute NullableEventHandler onselectstart;
  attribute NullableEventHandler onslotchange;
  attribute NullableEventHandler onstalled;
  /**
   * The onstorage property of the WindowEventHandlers mixin is an EventHandler for processing storage events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage">WindowEventHandlers.onstorage - MDN</a>
   */
  attribute NullableEventHandler onstorage;
  /**
   * The onsubmit property of the GlobalEventHandlers mixin is an EventHandler that processes submit events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit">GlobalEventHandlers.onsubmit - MDN</a>
   */
  attribute NullableEventHandler onsubmit;
  attribute NullableEventHandler onsuspend;
  attribute NullableEventHandler ontimeupdate;
  attribute NullableEventHandler ontoggle;
  /**
   * The ontouchcancel property of the GlobalEventHandlers mixin is an EventHandler that processes touchcancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel">GlobalEventHandlers.ontouchcancel - MDN</a>
   */
  attribute NullableEventHandler ontouchcancel;
  /**
   * A global event handler for the touchend event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchend">GlobalEventHandlers.ontouchend - MDN</a>
   */
  attribute NullableEventHandler ontouchend;
  /**
   * A global event handler for the touchmove event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchmove">GlobalEventHandlers.ontouchmove - MDN</a>
   */
  attribute NullableEventHandler ontouchmove;
  /**
   * The ontouchstart property of the GlobalEventHandlers mixin is an EventHandler that processes touchstart events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart">GlobalEventHandlers.ontouchstart - MDN</a>
   */
  attribute NullableEventHandler ontouchstart;
  /**
   * The ontransitioncancel property of the GlobalEventHandlers mixin is an EventHandler that processes transitioncancel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitioncancel">GlobalEventHandlers.ontransitioncancel - MDN</a>
   */
  attribute NullableEventHandler ontransitioncancel;
  /**
   * The ontransitionend property of the GlobalEventHandlers mixin is an EventHandler that processes transitionend events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitionend">GlobalEventHandlers.ontransitionend - MDN</a>
   */
  attribute NullableEventHandler ontransitionend;
  attribute NullableEventHandler ontransitionrun;
  attribute NullableEventHandler ontransitionstart;
  /**
   * The onunhandledrejection property of the WindowEventHandlers mixin is the EventHandler for processing unhandledrejection events. These events are raised for unhandled Promise rejections.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection">WindowEventHandlers.onunhandledrejection - MDN</a>
   */
  attribute NullableEventHandler onunhandledrejection;
  /**
   * The onunload property of the WindowEventHandlers mixin is the EventHandler for processing unload events. These events fire when the window is unloading its content and resources. The resource removal is processed after the unload event occurs.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload">WindowEventHandlers.onunload - MDN</a>
   */
  attribute NullableEventHandler onunload;
  attribute NullableEventHandler onvolumechange;
  attribute NullableEventHandler onwaiting;
  attribute NullableEventHandler onwebkitanimationend;
  attribute NullableEventHandler onwebkitanimationiteration;
  attribute NullableEventHandler onwebkitanimationstart;
  attribute NullableEventHandler onwebkittransitionend;
  /**
   * The onwheel property of the GlobalEventHandlers mixin is an EventHandler that processes wheel events.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel">GlobalEventHandlers.onwheel - MDN</a>
   */
  attribute NullableEventHandler onwheel;
  attribute any opener;
  attribute DOMString status;
  /**
   * The DOMContentLoaded event fires when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event">DOMContentLoaded event - MDN</a>
   */
  [NoBubble, NoCancel]
  event Event DOMContentLoaded;
  /**
   * The afterprint event is fired after the associated document has started printing or the print preview has been closed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/afterprint_event">afterprint event - MDN</a>
   */
  event Event afterprint;
  /**
   * The animationcancel event is fired when a CSS Animation unexpectedly aborts. In other words, any time it stops running without sending an animationend event. This might happen when the animation-name is changed such that the animation is removed, or when the animating node is hidden using CSS. Therefore, either directly or because any of its containing nodes are hidden.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/animationcancel_event">animationcancel event - MDN</a>
   */
  [NoBubble]
  event AnimationEvent animationcancel;
  /**
   * The animationend event is fired when a CSS Animation has completed. If the animation aborts before reaching completion, such as if the element is removed from the DOM or the animation is removed from the element, the animationend event is not fired.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/animationend_event">animationend event - MDN</a>
   */
  [NoBubble]
  event AnimationEvent animationend;
  /**
   * The animationiteration event is fired when an iteration of a CSS Animation ends, and another one begins. This event does not occur at the same time as the animationend event, and therefore does not occur for animations with an animation-iteration-count of one.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/animationiteration_event">animationiteration event - MDN</a>
   */
  [NoBubble]
  event AnimationEvent animationiteration;
  /**
   * The animationstart event is fired when a CSS Animation has started. If there is an animation-delay, this event will fire once the delay period has expired. A negative delay will cause the event to fire with an elapsedTime equal to the absolute value of the delay (and, correspondingly, the animation will begin playing at that time index into the sequence).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/animationstart_event">animationstart event - MDN</a>
   */
  [NoBubble]
  event AnimationEvent animationstart;
  /**
   * You can use the appinstalled event in an addEventListener method:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/appinstalled_event">appinstalled event - MDN</a>
   */
  event Event appinstalled;
  /**
   * The beforeprint event is fired when the associated document is about to be printed or previewed for printing.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeprint_event">beforeprint event - MDN</a>
   */
  event Event beforeprint;
  /**
   * The beforeunload event is fired when the window, the document and its resources are about to be unloaded.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event">beforeunload event - MDN</a>
   */
  [NoCancel]
  event Event beforeunload;
  /**
   * The blur event fires when an element has lost focus.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/blur_event">blur event - MDN</a>
   */
  event FocusEvent blur;
  /**
   * The clipboardchange event fires when the system clipboard content changes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/clipboardchange_event">clipboardchange event - MDN</a>
   */
  event ClipboardEvent clipboardchange;
  /**
   * The copy event fires when the user initiates a copy action through the browser's user interface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/copy_event">copy event - MDN</a>
   */
  [NoBubble, NoCancel]
  event ClipboardEvent copy;
  /**
   * The cut event is fired when the user has initiated a "cut" action through the browser's user interface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/cut_event">cut event - MDN</a>
   */
  [NoBubble, NoCancel]
  event ClipboardEvent cut;
  /**
   * The devicemotion event is fired at a regular interval and indicates the amount of physical force of acceleration the device is receiving at that time. It also provides information about the rate of rotation, if available.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/devicemotion_event">devicemotion event - MDN</a>
   */
  event DeviceMotionEvent devicemotion;
  /**
   * The deviceorientation event is fired when fresh data is available from an orientation sensor about the current orientation of the device as compared to the Earth coordinate frame. This data is gathered from a magnetometer inside the device.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/deviceorientation_event">deviceorientation event - MDN</a>
   */
  event DeviceOrientationEvent deviceorientation;
  /**
   * The focus event fires when an element has received focus.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/focus_event">focus event - MDN</a>
   */
  event FocusEvent focus;
  /**
   * The gamepadconnected event is fired when the browser detects that a gamepad has been connected or the first time a button/axis of the gamepad is used.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/gamepadconnected_event">gamepadconnected event - MDN</a>
   */
  event GamepadEvent gamepadconnected;
  /**
   * The gamepaddisconnected event is fired when the browser detects that a gamepad has been disconnected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/gamepaddisconnected_event">gamepaddisconnected event - MDN</a>
   */
  event GamepadEvent gamepaddisconnected;
  /**
   * The hashchange event is fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the # symbol).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event">hashchange event - MDN</a>
   */
  [NoBubble]
  event HashChangeEvent hashchange;
  /**
   * The languagechange event is fired at the global scope object when the user's preferred language changes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/languagechange_event">languagechange event - MDN</a>
   */
  event Event languagechange;
  /**
   * The load event is fired when the whole page has loaded, including all dependent resources such as stylesheets and images. This is in contrast to DOMContentLoaded, which is fired as soon as the page DOM has been loaded, without waiting for resources to finish loading.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event">load event - MDN</a>
   */
  event Event load;
  /**
   * The message event is fired on a Window object when the window receives a message, for example from a call to Window.postMessage() from another browsing context.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/message_event">message event - MDN</a>
   */
  event MessageEvent message;
  /**
   * The messageerror event is fired on a Window object when it receives a message that can't be deserialized.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/messageerror_event">messageerror event - MDN</a>
   */
  event MessageEvent messageerror;
  /**
   * The offline event of the Window interface is fired when the browser has lost access to the network and the value of Navigator.onLine switches to false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/offline_event">offline event - MDN</a>
   */
  event Event offline;
  /**
   * The online event of the Window interface is fired when the browser has gained access to the network and the value of Navigator.onLine switches to true.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event">online event - MDN</a>
   */
  event Event online;
  /**
   * The orientationchange event is fired when the orientation of the device has changed.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/orientationchange_event">orientationchange event - MDN</a>
   */
  event Event orientationchange;
  /**
   * The pagehide event is sent to a Window when the browser hides the current page in the process of presenting a different page from the session's history.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/pagehide_event">pagehide event - MDN</a>
   */
  event PageTransitionEvent pagehide;
  /**
   * The pageshow event is sent to a Window when the browser displays the window's document due to navigation.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/pageshow_event">pageshow event - MDN</a>
   */
  event PageTransitionEvent pageshow;
  /**
   * The paste event is fired when the user has initiated a "paste" action through the browser's user interface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/paste_event">paste event - MDN</a>
   */
  [NoBubble, NoCancel]
  event ClipboardEvent paste;
  /**
   * The rejectionhandled event is sent to the script's global scope (usually window but also Worker) whenever a JavaScript Promise is rejected but after the promise rejection has been handled.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/rejectionhandled_event">rejectionhandled event - MDN</a>
   */
  event PromiseRejectionEvent rejectionhandled;
  /**
   * The resize event fires when the document view (window) has been resized.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/resize_event">resize event - MDN</a>
   */
  event UIEvent resize;
  /**
   * The storage event of the Window interface fires when a storage area (localStorage) has been modified in the context of another document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/storage_event">storage event - MDN</a>
   */
  event StorageEvent storage;
  /**
   * The transitioncancel event is fired when a CSS transition is canceled.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/transitioncancel_event">transitioncancel event - MDN</a>
   */
  [NoBubble]
  event TransitionEvent transitioncancel;
  /**
   * The transitionend event is fired when a CSS transition has completed. In the case where a transition is removed before completion, such as if the transition-property is removed or display is set to none, then the event will not be generated.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/transitionend_event">transitionend event - MDN</a>
   */
  [NoBubble, NoCancel]
  event TransitionEvent transitionend;
  /**
   * The transitionrun event is fired when a CSS transition is first created, i.e. before any transition-delay has begun.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/transitionrun_event">transitionrun event - MDN</a>
   */
  [NoBubble]
  event TransitionEvent transitionrun;
  /**
   * The transitionstart event is fired when a CSS transition has actually started, i.e., after any transition-delay has ended.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/transitionstart_event">transitionstart event - MDN</a>
   */
  [NoBubble]
  event TransitionEvent transitionstart;
  /**
   * The unhandledrejection event is sent to the global scope of a script when a JavaScript Promise that has no rejection handler is rejected; typically, this is the window, but may also be a Worker.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/unhandledrejection_event">unhandledrejection event - MDN</a>
   */
  [NoCancel]
  event PromiseRejectionEvent unhandledrejection;
  /**
   * The unload event is fired when the document or a child resource is being unloaded.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/unload_event">unload event - MDN</a>
   */
  event Event unload;
  /**
   * The Window.alert() method displays an alert dialog with the optional specified content and an OK button.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/alert">Window.alert - MDN</a>
   */
  void alert();
  /**
   * The Window.alert() method displays an alert dialog with the optional specified content and an OK button.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/alert">Window.alert - MDN</a>
   */
  void alert( DOMString message );
  /**
   * The WindowOrWorkerGlobalScope.atob() function decodes a string of data which has been encoded using Base64 encoding. You can use the btoa() method to encode and transmit data which may otherwise cause communication problems, then transmit it and use the atob() method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values 0 through 31.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/atob">WindowOrWorkerGlobalScope.atob - MDN</a>
   */
  ByteString atob( DOMString data );
  /**
   * Shifts focus away from the window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/blur">Window.blur - MDN</a>
   */
  void blur();
  /**
   * The WindowOrWorkerGlobalScope.btoa() method creates a Base64-encoded ASCII string from a binary string (i.e., a String object in which each character in the string is treated as a byte of binary data).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/btoa">WindowOrWorkerGlobalScope.btoa - MDN</a>
   */
  DOMString btoa( DOMString data );
  /**
   * The window.cancelAnimationFrame() method cancels an animation frame request previously scheduled through a call to window.requestAnimationFrame().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame">Window.cancelAnimationFrame - MDN</a>
   */
  void cancelAnimationFrame( unsigned long handle );
  void captureEvents();
  /**
   * The clearInterval() method of the WindowOrWorkerGlobalScope mixin cancels a timed, repeating action which was previously established by a call to setInterval().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval">WindowOrWorkerGlobalScope.clearInterval - MDN</a>
   */
  void clearInterval( optional long handle = 0 );
  /**
   * The clearTimeout() method of the WindowOrWorkerGlobalScope mixin cancels a timeout previously established by calling setTimeout().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout">WindowOrWorkerGlobalScope.clearTimeout - MDN</a>
   */
  void clearTimeout( optional long handle = 0 );
  /**
   * The Window.close() method closes the current window, or the window on which it was called.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/close">Window.close - MDN</a>
   */
  void close();
  /**
   * The Window.confirm() method displays a modal dialog with an optional message and two buttons: OK and Cancel.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm">Window.confirm - MDN</a>
   */
  boolean confirm( optional DOMString message = "" );
  /**
   * The createImageBitmap() method creates a bitmap from a given source, optionally cropped to contain only a portion of that source. The method exists on the global scope in both windows and workers. It accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/createImageBitmap">WindowOrWorkerGlobalScope.createImageBitmap - MDN</a>
   */
  Promise<ImageBitmap> createImageBitmap( ImageBitmapSource image, optional ImageBitmapOptions options = {} );
  /**
   * The createImageBitmap() method creates a bitmap from a given source, optionally cropped to contain only a portion of that source. The method exists on the global scope in both windows and workers. It accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/createImageBitmap">WindowOrWorkerGlobalScope.createImageBitmap - MDN</a>
   */
  Promise<ImageBitmap> createImageBitmap( ImageBitmapSource image, long sx, long sy, long sw, long sh, optional ImageBitmapOptions options = {} );
  /**
   * The fetch() method of the WindowOrWorkerGlobalScope mixin starts the process of fetching a resource from the network, returning a promise which is fulfilled once the response is available.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch">WindowOrWorkerGlobalScope.fetch - MDN</a>
   */
  [NewObject]
  Promise<Response> fetch( RequestInfo input, optional RequestInit init = {} );
  /**
   * Makes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/focus">Window.focus - MDN</a>
   */
  void focus();
  /**
   * The Window.getComputedStyle() method returns an object containing the values of all CSS properties of an element, after applying active stylesheets and resolving any basic computation those values may contain.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle">Window.getComputedStyle - MDN</a>
   */
  [NewObject]
  CSSStyleDeclaration getComputedStyle( Element elt, optional CSSOMString? pseudoElt );
  /**
   * The Window.getSelection() method returns a Selection object representing the range of text selected by the user or the current position of the caret.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection">Window.getSelection - MDN</a>
   */
  Selection? getSelection();
  /**
   * The Window interface's matchMedia() method returns a new MediaQueryList object that can then be used to determine if the document matches the media query string, as well as to monitor the document to detect when it matches (or stops matching) that media query.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia">Window.matchMedia - MDN</a>
   */
  [NewObject]
  MediaQueryList matchMedia( CSSOMString query );
  /**
   * The moveBy() method of the Window interface moves the current window by a specified amount.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy">Window.moveBy - MDN</a>
   */
  void moveBy( long x, long y );
  /**
   * The moveTo() method of the Window interface moves the current window to the specified coordinates.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo">Window.moveTo - MDN</a>
   */
  void moveTo( long x, long y );
  /**
   * The Window interface's open() method loads the specified resource into the new or existing browsing context (window, iframe or tab) with the specified name. If the name doesn't exist, then a new browsing context is opened in a new tab or a new window, and the specified resource is loaded into it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/open">Window.open - MDN</a>
   */
  WindowProxy? open( optional USVString url = "", optional DOMString target = "_blank", optional [LegacyNullToEmptyString] DOMString features = "" );
  /**
   * The window.postMessage() method safely enables cross-origin communication between Window objects; e.g., between a page and a pop-up that it spawned, or between a page and an iframe embedded within it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage">Window.postMessage - MDN</a>
   */
  void postMessage( any message, USVString targetOrigin, optional sequence<object> transfer = [] );
  /**
   * The window.postMessage() method safely enables cross-origin communication between Window objects; e.g., between a page and a pop-up that it spawned, or between a page and an iframe embedded within it.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage">Window.postMessage - MDN</a>
   */
  void postMessage( any message, optional WindowPostMessageOptions options = {} );
  /**
   * Opens the Print Dialog to print the current document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/print">Window.print - MDN</a>
   */
  void print();
  /**
   * The Window.prompt() displays a dialog with an optional message prompting the user to input some text.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt">Window.prompt - MDN</a>
   */
  DOMString? prompt( optional DOMString message = "", optional DOMString default = "" );
  /**
   * The queueMicrotask() method, which is exposed on the Window or Worker interface, queues a microtask to be executed at a safe time prior to control returning to the browser's event loop.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/queueMicrotask">WindowOrWorkerGlobalScope.queueMicrotask - MDN</a>
   */
  void queueMicrotask( VoidFunction callback );
  void releaseEvents();
  /**
   * The window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser calls a specified function to update an animation before the next repaint. The method takes a callback as an argument to be invoked before the repaint.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame">Window.requestAnimationFrame - MDN</a>
   */
  unsigned long requestAnimationFrame( FrameRequestCallback callback );
  /**
   * The Window.resizeBy() method resizes the current window by a specified amount.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy">Window.resizeBy - MDN</a>
   */
  void resizeBy( long x, long y );
  /**
   * The Window.resizeTo() method dynamically resizes the window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo">Window.resizeTo - MDN</a>
   */
  void resizeTo( long width, long height );
  /**
   * The Window.scroll() method scrolls the window to a particular place in the document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll">Window.scroll - MDN</a>
   */
  void scroll( optional ScrollToOptions options = {} );
  /**
   * The Window.scroll() method scrolls the window to a particular place in the document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll">Window.scroll - MDN</a>
   */
  void scroll( unrestricted double x, unrestricted double y );
  /**
   * The Window.scrollBy() method scrolls the document in the window by the given amount.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy">Window.scrollBy - MDN</a>
   */
  void scrollBy( optional ScrollToOptions options = {} );
  /**
   * The Window.scrollBy() method scrolls the document in the window by the given amount.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy">Window.scrollBy - MDN</a>
   */
  void scrollBy( unrestricted double x, unrestricted double y );
  /**
   * Window.scrollTo() scrolls to a particular set of coordinates in the document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo">Window.scrollTo - MDN</a>
   */
  void scrollTo( optional ScrollToOptions options = {} );
  /**
   * Window.scrollTo() scrolls to a particular set of coordinates in the document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo">Window.scrollTo - MDN</a>
   */
  void scrollTo( unrestricted double x, unrestricted double y );
  /**
   * The setInterval() method, offered on the Window and Worker interfaces, repeatedly calls a function or executes a code snippet, with a fixed time delay between each call.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval">WindowOrWorkerGlobalScope.setInterval - MDN</a>
   */
  long setInterval( TimerHandler handler, optional long timeout = 0, any... arguments );
  /**
   * The setTimeout() method of the WindowOrWorkerGlobalScope mixin (and successor to Window.setTimeout()) sets a timer which executes a function or specified piece of code once the timer expires.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout">WindowOrWorkerGlobalScope.setTimeout - MDN</a>
   */
  long setTimeout( TimerHandler handler, optional long timeout = 0, any... arguments );
  /**
   * The window.stop() stops further resource loading in the current browsing context, equivalent to the stop button in the browser.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/stop">Window.stop - MDN</a>
   */
  void stop();
  /**
   * The Window interface represents a window containing a DOM document; the document property points to the DOM document loaded in that window.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window">Window - MDN</a>
   */
  getter object ( DOMString name );
};

/**
 * The Worker interface of the Web Workers API represents a background task that can be created via script, which can send messages back to its creator.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker">Worker - MDN</a>
 */
[Exposed=(Window,DedicatedWorker,SharedWorker)]
interface Worker : EventTarget {
  attribute NullableEventHandler onerror;
  /**
   * The onmessage property of the Worker interface represents an EventHandler, that is a function to be called when the message event occurs. These events are of type MessageEvent and will be called when the worker's parent receives a message (i.e. from the DedicatedWorkerGlobalScope.postMessage method).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage">Worker.onmessage - MDN</a>
   */
  attribute NullableEventHandler onmessage;
  /**
   * The onmessageerror event handler of the Worker interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the Worker instance — that is, when it receives a message that cannot be deserialized.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror">Worker.onmessageerror - MDN</a>
   */
  attribute NullableEventHandler onmessageerror;
  /**
   * The message event is fired on a Worker object when the worker's parent receives a message from its worker (i.e. when the worker sends a message using DedicatedWorkerGlobalScope.postMessage()).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/message_event">message event - MDN</a>
   */
  event MessageEvent message;
  /**
   * The messageerror event is fired on a Worker object when it receives a message that can't be deserialized.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/messageerror_event">messageerror event - MDN</a>
   */
  event MessageEvent messageerror;
  /**
   * The Worker() constructor creates a Worker object that executes the script at the specified URL. This script must obey the same-origin policy.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker">Worker.Worker - MDN</a>
   */
  constructor( USVString scriptURL, optional WorkerOptions options = {} );
  /**
   * The postMessage() method of the Worker interface sends a message to the worker's inner scope. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage">Worker.postMessage - MDN</a>
   */
  void postMessage( any message, sequence<object> transfer );
  /**
   * The postMessage() method of the Worker interface sends a message to the worker's inner scope. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage">Worker.postMessage - MDN</a>
   */
  void postMessage( any message, optional PostMessageOptions options = {} );
  /**
   * The terminate() method of the Worker interface immediately terminates the Worker. This does not offer the worker an opportunity to finish its operations; it is simply stopped at once.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate">Worker.terminate - MDN</a>
   */
  void terminate();
};

/**
 * The Worklet interface is a lightweight version of Web Workers and gives developers access to low-level parts of the rendering pipeline.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worklet">Worklet - MDN</a>
 */
[Exposed=Window]
interface Worklet {
  /**
   * The addModule() method of the Worklet interface loads the module in the given JavaScript file and adds it to the current Worklet.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worklet/addModule">Worklet.addModule - MDN</a>
   */
  [NewObject]
  Promise<void> addModule( USVString moduleURL, optional WorkletOptions options = {} );
};

/**
 * The WritableStream interface of the the Streams API provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WritableStream">WritableStream - MDN</a>
 */
[LegacyNoInterfaceObject, Exposed=(Window,Worker)]
interface WritableStream {
};

/**
 * The XMLDocument interface represents an XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument">XMLDocument - MDN</a>
 */
[Exposed=Window]
interface XMLDocument : Document {
};

/**
 * XMLHttpRequest (XHR) objects are used to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest - MDN</a>
 */
[Exposed=(Window,DedicatedWorker,SharedWorker)]
interface XMLHttpRequest : XMLHttpRequestEventTarget {
  const unsigned short DONE = 4;
  const unsigned short HEADERS_RECEIVED = 2;
  const unsigned short LOADING = 3;
  const unsigned short OPENED = 1;
  const unsigned short UNSENT = 0;
  /**
   * The XMLHttpRequest.readyState property returns the state an XMLHttpRequest client is in. An XHR client exists in one of the following states:
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState">XMLHttpRequest.readyState - MDN</a>
   */
  readonly attribute unsigned short readyState;
  /**
   * The XMLHttpRequest response property returns the response's body content as an ArrayBuffer, Blob, Document, JavaScript Object, or DOMString, depending on the value of the request's responseType property.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/response">XMLHttpRequest.response - MDN</a>
   */
  readonly attribute any response;
  /**
   * The read-only XMLHttpRequest property responseText returns the text received from a server following a request being sent.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText">XMLHttpRequest.responseText - MDN</a>
   */
  readonly attribute USVString responseText;
  /**
   * The read-only XMLHttpRequest.responseURL property returns the serialized URL of the response or the empty string if the URL is null. If the URL is returned, any URL fragment present in the URL will be stripped away. The value of responseURL will be the final URL obtained after any redirects.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL">XMLHttpRequest.responseURL - MDN</a>
   */
  readonly attribute USVString responseURL;
  /**
   * The XMLHttpRequest.responseXML read-only property returns a Document containing the HTML or XML retrieved by the request; or null if the request was unsuccessful, has not yet been sent, or if the data can't be parsed as XML or HTML.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML">XMLHttpRequest.responseXML - MDN</a>
   */
  [Exposed=Window]
  readonly attribute Document? responseXML;
  /**
   * The read-only XMLHttpRequest.status property returns the numerical HTTP status code of the XMLHttpRequest's response.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status">XMLHttpRequest.status - MDN</a>
   */
  readonly attribute unsigned short status;
  /**
   * The read-only XMLHttpRequest.statusText property returns a DOMString containing the response's status message as returned by the HTTP server. Unlike XMLHTTPRequest.status which indicates a numerical status code, this property contains the text of the response status, such as "OK" or "Not Found". If the request's readyState is in UNSENT or OPENED state, the value of statusText will be an empty string.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/statusText">XMLHttpRequest.statusText - MDN</a>
   */
  readonly attribute ByteString statusText;
  /**
   * The XMLHttpRequest upload property returns an XMLHttpRequestUpload object that can be observed to monitor an upload's progress.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/upload">XMLHttpRequest.upload - MDN</a>
   */
  [SameObject]
  readonly attribute XMLHttpRequestUpload upload;
  /**
   * An EventHandler that is called whenever the readyState attribute changes. The callback is called from the user interface thread. The XMLHttpRequest.onreadystatechange property contains the event handler to be called when the readystatechange event is fired, that is every time the readyState property of the XMLHttpRequest changes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange">XMLHttpRequest.onreadystatechange - MDN</a>
   */
  attribute NullableEventHandler onreadystatechange;
  /**
   * The XMLHttpRequest property responseType is an enumerated string value specifying the type of data contained in the response.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType">XMLHttpRequest.responseType - MDN</a>
   */
  attribute XMLHttpRequestResponseType responseType;
  /**
   * The XMLHttpRequest.timeout property is an unsigned long representing the number of milliseconds a request can take before automatically being terminated. The default value is 0, which means there is no timeout. Timeout shouldn't be used for synchronous XMLHttpRequests requests used in a document environment or it will throw an InvalidAccessError exception. When a timeout happens, a timeout event is fired.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout">XMLHttpRequest.timeout - MDN</a>
   */
  attribute unsigned long timeout;
  /**
   * The XMLHttpRequest.withCredentials property is a Boolean that indicates whether or not cross-site Access-Control requests should be made using credentials such as cookies, authorization headers or TLS client certificates. Setting withCredentials has no effect on same-site requests.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials">XMLHttpRequest.withCredentials - MDN</a>
   */
  attribute boolean withCredentials;
  /**
   * The abort event is fired when a request has been aborted, for example because the program called XMLHttpRequest.abort().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort_event">abort event - MDN</a>
   */
  event ProgressEvent abort;
  /**
   * The error event is fired when the request encountered an error.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/error_event">error event - MDN</a>
   */
  event ProgressEvent error;
  /**
   * The load event is fired when an XMLHttpRequest transaction completes successfully.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/load_event">load event - MDN</a>
   */
  event ProgressEvent load;
  /**
   * The loadend event is fired when a request has completed, whether successfully (after load) or unsuccessfully (after abort or error).
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/loadend_event">loadend event - MDN</a>
   */
  event ProgressEvent loadend;
  /**
   * The loadstart event is fired when a request has started to load data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/loadstart_event">loadstart event - MDN</a>
   */
  event ProgressEvent loadstart;
  /**
   * The progress event is fired periodically when a request receives more data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/progress_event">progress event - MDN</a>
   */
  event ProgressEvent progress;
  /**
   * The timeout event is fired when progression is terminated due to preset time expiring.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout_event">timeout event - MDN</a>
   */
  event ProgressEvent timeout;
  /**
   * The XMLHttpRequest() constructor creates a new XMLHttpRequest.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/XMLHttpRequest">XMLHttpRequest.XMLHttpRequest - MDN</a>
   */
  constructor();
  /**
   * The XMLHttpRequest.abort() method aborts the request if it has already been sent. When a request is aborted, its readyState is changed to XMLHttpRequest.UNSENT (0) and the request's status code is set to 0.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort">XMLHttpRequest.abort - MDN</a>
   */
  void abort();
  /**
   * The XMLHttpRequest method getAllResponseHeaders() returns all the response headers, separated by CRLF, as a string, or returns null if no response has been received.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders">XMLHttpRequest.getAllResponseHeaders - MDN</a>
   */
  ByteString getAllResponseHeaders();
  /**
   * The XMLHttpRequest method getResponseHeader() returns the string containing the text of a particular header's value.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getResponseHeader">XMLHttpRequest.getResponseHeader - MDN</a>
   */
  ByteString? getResponseHeader( ByteString name );
  /**
   * The XMLHttpRequest method open() initializes a newly-created request, or re-initializes an existing one.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open">XMLHttpRequest.open - MDN</a>
   */
  void open( ByteString method, USVString url );
  /**
   * The XMLHttpRequest method open() initializes a newly-created request, or re-initializes an existing one.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open">XMLHttpRequest.open - MDN</a>
   */
  void open( ByteString method, USVString url, boolean async, optional USVString? username = null, optional USVString? password = null );
  /**
   * The XMLHttpRequest method overrideMimeType() specifies a MIME type other than the one provided by the server to be used instead when interpreting the data being transferred in a request.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/overrideMimeType">XMLHttpRequest.overrideMimeType - MDN</a>
   */
  void overrideMimeType( DOMString mime );
  /**
   * The XMLHttpRequest method send() sends the request to the server.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send">XMLHttpRequest.send - MDN</a>
   */
  void send( optional ( Document or XMLHttpRequestBodyInit )? body = null );
  /**
   * The XMLHttpRequest method setRequestHeader() sets the value of an HTTP request header. When using setRequestHeader(), you must call it after calling open(), but before calling send(). If this method is called several times with the same header, the values are merged into one single request header.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader">XMLHttpRequest.setRequestHeader - MDN</a>
   */
  void setRequestHeader( ByteString name, ByteString value );
};

/**
 * XMLHttpRequestEventTarget is the interface that describes the event handlers you can implement in an object that will handle events for an XMLHttpRequest.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget">XMLHttpRequestEventTarget - MDN</a>
 */
[Exposed=(Window,DedicatedWorker,SharedWorker)]
interface XMLHttpRequestEventTarget : EventTarget {
  /**
   * The XMLHttpRequestEventTarget.onabort is the function called when an XMLHttpRequest transaction is aborted, such as when the XMLHttpRequest.abort() function is called.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onabort">XMLHttpRequestEventTarget.onabort - MDN</a>
   */
  attribute NullableEventHandler onabort;
  /**
   * The XMLHttpRequestEventTarget.onerror is the function called when an XMLHttpRequest transaction fails due to an error.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onerror">XMLHttpRequestEventTarget.onerror - MDN</a>
   */
  attribute NullableEventHandler onerror;
  /**
   * The XMLHttpRequestEventTarget.onload is the function called when an XMLHttpRequest transaction completes successfully.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onload">XMLHttpRequestEventTarget.onload - MDN</a>
   */
  attribute NullableEventHandler onload;
  attribute NullableEventHandler onloadend;
  /**
   * The XMLHttpRequestEventTarget.onloadstart is the function called when an XMLHttpRequest transaction starts transferring data.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onloadstart">XMLHttpRequestEventTarget.onloadstart - MDN</a>
   */
  attribute NullableEventHandler onloadstart;
  /**
   * The XMLHttpRequestEventTarget.onprogress is the function called periodically with information when an XMLHttpRequest before success completely.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onprogress">XMLHttpRequestEventTarget.onprogress - MDN</a>
   */
  attribute NullableEventHandler onprogress;
  attribute NullableEventHandler ontimeout;
};

[Exposed=(Window,DedicatedWorker,SharedWorker)]
interface XMLHttpRequestUpload : XMLHttpRequestEventTarget {
};

/**
 * The XMLSerializer interface provides the serializeToString() method to construct an XML string representing a DOM tree.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLSerializer">XMLSerializer - MDN</a>
 */
[Exposed=Window]
interface XMLSerializer {
  constructor();
  /**
   * The XMLSerializer method serializeToString() constructs a string representing the specified DOM tree in XML form.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLSerializer/serializeToString">XMLSerializer.serializeToString - MDN</a>
   */
  DOMString serializeToString( Node root );
};

/**
 * The XPathEvaluator interface allows to compile and evaluate XPath expressions.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator">XPathEvaluator - MDN</a>
 */
[Exposed=Window]
interface XPathEvaluator {
  constructor();
  /**
   * This method compiles an XPathExpression which can then be used for (repeated) evaluations of the XPath expression.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator/createExpression">XPathEvaluator.createExpression - MDN</a>
   */
  [NewObject]
  XPathExpression createExpression( DOMString expression, optional XPathNSResolver? resolver = null );
  /**
   * This method adapts any DOM node to resolve namespaces so that an XPath expression can be easily evaluated relative to the context of the node where it appeared within the document.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator/createNSResolver">XPathEvaluator.createNSResolver - MDN</a>
   */
  XPathNSResolver createNSResolver( Node nodeResolver );
  /**
   * The evaluate() method of the XPathEvaluator interface executes an XPath expression on the given node or document and returns an XPathResult.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator/evaluate">XPathEvaluator.evaluate - MDN</a>
   */
  XPathResult evaluate( DOMString expression, Node contextNode, optional XPathNSResolver? resolver = null, optional unsigned short type = 0, optional XPathResult? result = null );
};

/**
 * This interface is a compiled XPath expression that can be evaluated on a document or specific node to return information from its DOM tree.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression">XPathExpression - MDN</a>
 */
[Exposed=Window]
interface XPathExpression {
  /**
   * The evaluate() method of the XPathExpression interface executes an XPath expression on the given node or document and returns an XPathResult.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression/evaluate">XPathExpression.evaluate - MDN</a>
   */
  XPathResult evaluate( Node contextNode, optional unsigned short type = 0, optional XPathResult? result = null );
};

/**
 * The XPathResult interface represents the results generated by evaluating an XPath expression within the context of a given node.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathResult">XPathResult - MDN</a>
 */
[Exposed=Window]
interface XPathResult {
  const unsigned short ANY_TYPE = 0;
  const unsigned short ANY_UNORDERED_NODE_TYPE = 8;
  const unsigned short BOOLEAN_TYPE = 3;
  const unsigned short FIRST_ORDERED_NODE_TYPE = 9;
  const unsigned short NUMBER_TYPE = 1;
  const unsigned short ORDERED_NODE_ITERATOR_TYPE = 5;
  const unsigned short ORDERED_NODE_SNAPSHOT_TYPE = 7;
  const unsigned short STRING_TYPE = 2;
  const unsigned short UNORDERED_NODE_ITERATOR_TYPE = 4;
  const unsigned short UNORDERED_NODE_SNAPSHOT_TYPE = 6;
  /**
   * The read-only booleanValue property of the XPathResult interface returns the boolean value of a result with XPathResult.resultType being BOOLEAN_TYPE.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/booleanValue">XPathResult.booleanValue - MDN</a>
   */
  readonly attribute boolean booleanValue;
  /**
   * The read-only invalidIteratorState property of the XPathResult interface signifies that the iterator has become invalid. It is true if XPathResult.resultType is UNORDERED_NODE_ITERATOR_TYPE or ORDERED_NODE_ITERATOR_TYPE and the document has been modified since this result was returned.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/invalidIteratorState">XPathResult.invalidIteratorState - MDN</a>
   */
  readonly attribute boolean invalidIteratorState;
  /**
   * The read-only numberValue property of the XPathResult interface returns the numeric value of a result with XPathResult.resultType being NUMBER_TYPE.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/numberValue">XPathResult.numberValue - MDN</a>
   */
  readonly attribute unrestricted double numberValue;
  /**
   * The read-only resultType property of the XPathResult interface represents the type of the result, as defined by the type constants.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/resultType">XPathResult.resultType - MDN</a>
   */
  readonly attribute unsigned short resultType;
  /**
   * The read-only singleNodeValue property of the XPathResult interface returns a Node value or null in case no node was matched of a result with XPathResult.resultType being ANY_UNORDERED_NODE_TYPE or FIRST_ORDERED_NODE_TYPE.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/singleNodeValue">XPathResult.singleNodeValue - MDN</a>
   */
  readonly attribute Node? singleNodeValue;
  /**
   * The read-only snapshotLength property of the XPathResult interface represents the number of nodes in the result snapshot.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/snapshotLength">XPathResult.snapshotLength - MDN</a>
   */
  readonly attribute unsigned long snapshotLength;
  /**
   * The read-only stringValue property of the XPathResult interface returns the string value of a result with XPathResult.resultType being STRING_TYPE.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/stringValue">XPathResult.stringValue - MDN</a>
   */
  readonly attribute DOMString stringValue;
  /**
   * The iterateNext() method of the XPathResult interface iterates over a node set result and returns the next node from it or null if there are no more nodes.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/iterateNext">XPathResult.iterateNext - MDN</a>
   */
  Node? iterateNext();
  /**
   * The snapshotItem() method of the XPathResult interface returns an item of the snapshot collection or null in case the index is not within the range of nodes. Unlike the iterator result, the snapshot does not become invalid, but may not correspond to the current document if it is mutated.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/snapshotItem">XPathResult.snapshotItem - MDN</a>
   */
  Node? snapshotItem( unsigned long index );
};

/**
 * The WebXR Device API interface XRSystem provides methods which let you get access to an XRSession object representing a WebXR session. With that XRSession in hand, you can use it to interact with the Augmented Reality (AR) or Virtual Reality (VR) device.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XR">XR - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XR : EventTarget {
  /**
   * The ondevicechange property of the XRSystem interface is passed a devicechange event whenever availability of an immersive device changes. The event that is fired is a "simple event" that implements the Event interface.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XR/ondevicechange">XR.ondevicechange - MDN</a>
   */
  attribute NullableEventHandler ondevicechange;
  /**
   * A devicechange event is fired on an XRSystem object whenever the whenever the availability of immersive XR devices has changed; for example, a VR headset or AR goggles have been connected or disconnected.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XR/devicechange_event">devicechange event - MDN</a>
   */
  event Event devicechange;
  /**
   * The XRSystem method isSessionSupported() returns a promise which resolves to true if the specified WebXR session mode is supported by the user's WebXR device. Otherwise, the promise resolves with false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XR/isSessionSupported">XR.isSessionSupported - MDN</a>
   */
  Promise<boolean> isSessionSupported( XRSessionMode mode );
  /**
   * The XRSystem interface's requestSession() method returns a promise which resolves to an XRSession object through which you can manage the requested type of WebXR session.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XR/requestSession">XR.requestSession - MDN</a>
   */
  [NewObject]
  Promise<XRSession> requestSession( XRSessionMode mode, optional XRSessionInit options = {} );
};

/**
 * The WebXR Device API's XRBoundedReferenceSpace interface describes a virtual world reference space which has preset boundaries. This extends XRReferenceSpace, which describes an essentially unrestricted space around the viewer's position.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRBoundedReferenceSpace">XRBoundedReferenceSpace - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRBoundedReferenceSpace : XRReferenceSpace {
  /**
   * The read-only XRBoundedReferenceSpace property boundsGeometry is an array of DOMPointReadOnly objects which specifies the points making up a polygon inside which the viewer is allowed to move.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRBoundedReferenceSpace/boundsGeometry">XRBoundedReferenceSpace.boundsGeometry - MDN</a>
   */
  readonly attribute FrozenArray<DOMPointReadOnly> boundsGeometry;
};

/**
 * A WebXR Device API XRFrame object is passed into the requestAnimationFrame() callback function and provides access to the information needed in order to render a single frame of animation for an XRSession describing a VR or AR sccene.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRFrame">XRFrame - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRFrame {
  /**
   * An XRFrame object's read-only session property returns the XRSession object that generated the frame.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRFrame/session">XRFrame.session - MDN</a>
   */
  [SameObject]
  readonly attribute XRSession session;
  /**
   * The XRFrame method getPose() returns the relative position and orientation—the pose—of one XRSpace to that of another space.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRFrame/getPose">XRFrame.getPose - MDN</a>
   */
  XRPose? getPose( XRSpace space, XRSpace baseSpace );
  /**
   * The getViewerPose() method, a member of the XRFrame interface, returns a XRViewerPose object which describes the viewer's pose (position and orientation) relative to the specified reference space.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRFrame/getViewerPose">XRFrame.getViewerPose - MDN</a>
   */
  XRViewerPose? getViewerPose( XRReferenceSpace referenceSpace );
};

/**
 * The WebXR Device API's XRInputSource interface describes a single source of control input which is part of the user's WebXR-compatible virtual or augmented reality system.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource">XRInputSource - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRInputSource {
  /**
   * The read-only XRInputSource property gripSpace returns an XRSpace whose native origin tracks the pose used to render virtual objects so they appear to be held in (or part of) the user's hand.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/gripSpace">XRInputSource.gripSpace - MDN</a>
   */
  [SameObject]
  readonly attribute XRSpace? gripSpace;
  /**
   * The read-only XRInputSource property handedness indicates which of the user's hands the WebXR input source is associated with, or if it's not associated with a hand at all.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/handedness">XRInputSource.handedness - MDN</a>
   */
  readonly attribute XRHandedness handedness;
  /**
   * The read-only XRInputSource property profiles returns an array of strings, each describing a configuration profile for the input source.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/profiles">XRInputSource.profiles - MDN</a>
   */
  [SameObject]
  readonly attribute FrozenArray<DOMString> profiles;
  /**
   * The read-only XRInputSource property targetRayMode indicates the method by which the target ray for the input source should be generated and how it should be presented to the user.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/targetRayMode">XRInputSource.targetRayMode - MDN</a>
   */
  readonly attribute XRTargetRayMode targetRayMode;
  /**
   * The read-only XRInputSource property targetRaySpace returns an XRSpace (typically an XRReferenceSpace) representing the position and orientation of the target ray in the virtual space.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/targetRaySpace">XRInputSource.targetRaySpace - MDN</a>
   */
  [SameObject]
  readonly attribute XRSpace targetRaySpace;
};

/**
 * The interface XRInputSourceArray represents a live list of WebXR input sources, and is used as the return value of the XRSession property inputSources.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceArray">XRInputSourceArray - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRInputSourceArray {
  iterable<XRInputSource>;
  /**
   * The read-only length property returns an integer value indicating the number of items in the input source list represented by the XRInputSourceArray object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceArray/length">XRInputSourceArray.length - MDN</a>
   */
  readonly attribute unsigned long length;
  /**
   * The interface XRInputSourceArray represents a live list of WebXR input sources, and is used as the return value of the XRSession property inputSources.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceArray">XRInputSourceArray - MDN</a>
   */
  getter XRInputSource ( unsigned long index );
};

/**
 * The WebXR Device API's XRInputSourceEvent interface describes an event which has occurred on a WebXR user input device such as a hand controller, gaze tracking system, or motion tracking system.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent">XRInputSourceEvent - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRInputSourceEvent : Event {
  /**
   * The read-only XRInputSourceEvent property frame specifies an XRFrame object representing the event frame during which a WebXR user input occurred.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent/frame">XRInputSourceEvent.frame - MDN</a>
   */
  [SameObject]
  readonly attribute XRFrame frame;
  /**
   * The XRInputSourceEvent interface's read-only inputSource property specifies the XRInputSource which generated the input event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent/inputSource">XRInputSourceEvent.inputSource - MDN</a>
   */
  [SameObject]
  readonly attribute XRInputSource inputSource;
  /**
   * The XRInputSourceEvent() constructor creates and returns a new XRInputSourceEvent object describing an event (state change) which has occurred on a WebXR user input device represented by an XRInputSource.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent/XRInputSourceEvent">XRInputSourceEvent.XRInputSourceEvent - MDN</a>
   */
  constructor( DOMString type, XRInputSourceEventInit eventInitDict );
};

/**
 * The WebXR Device API interface XRInputSourcesChangeEvent is used to represent the inputsourceschange event sent to an XRSession when the set of available WebXR input controllers changes.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent">XRInputSourcesChangeEvent - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRInputSourcesChangeEvent : Event {
  /**
   * The read-only XRInputSourcesChangeEvent property added is a list of zero or more input sources, each identified using an XRInputSource object, which have been newly made available for use.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent/added">XRInputSourcesChangeEvent.added - MDN</a>
   */
  [SameObject]
  readonly attribute FrozenArray<XRInputSource> added;
  /**
   * The read-only XRInputSourcesChangeEvent property removed is an array of zero or more XRInputSource objects representing the input sources which have been removed from the XRSession.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent/removed">XRInputSourcesChangeEvent.removed - MDN</a>
   */
  [SameObject]
  readonly attribute FrozenArray<XRInputSource> removed;
  /**
   * The XRInputSourcesChangeEvent property session specifies the XRSession to which the input source list change event applies.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent/session">XRInputSourcesChangeEvent.session - MDN</a>
   */
  [SameObject]
  readonly attribute XRSession session;
  /**
   * The XRInputSourcesChangeEvent() constructor creates and returns a new XRInputSourcesChangeEvent object, representing an update to the list of available WebXR input devices.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent/XRInputSourcesChangeEvent">XRInputSourcesChangeEvent.XRInputSourcesChangeEvent - MDN</a>
   */
  constructor( DOMString type, XRInputSourcesChangeEventInit eventInitDict );
};

/**
 * XRPose is a WebXR API interface representing a position and orientation in the 3D space, relative to the XRSpace within which it resides.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRPose">XRPose - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRPose {
  /**
   * The emulatedPosition read-only attribute of the XRPose interface is a Boolean value indicating whether or not both the the position component of the pose's transform is directly taken from the XR device, or it's simulated or computed based on other sources.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRPose/emulatedPosition">XRPose.emulatedPosition - MDN</a>
   */
  readonly attribute boolean emulatedPosition;
  /**
   * The transform read-only attribute of the XRPose interface is a XRRigidTransform object providing the position and orientation of the pose relative to the base XRSpace as specified when the pose was obtained by calling XRFrame.getPose().
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRPose/transform">XRPose.transform - MDN</a>
   */
  [SameObject]
  readonly attribute XRRigidTransform transform;
};

/**
 * The WebXR Device API's XRReferenceSpace interface describes the coordinate system for a specific tracked entity or object within the virtual world using a specified tracking behavior.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace">XRReferenceSpace - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRReferenceSpace : XRSpace {
  /**
   * The XRReferenceSpace interface's onreset event handler property can be set to a function which is called when the XRReferenceSpace receives a reset event, signaling that the  XR device has experienced a discontinuity large enough to require that the position and/or orientation of the origin be significantly altered to compensate.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace/onreset">XRReferenceSpace.onreset - MDN</a>
   */
  attribute NullableEventHandler onreset;
  /**
   * The reset event is sent to an XRReferenceSpace object when a discontinuity is detected in either the native origin or the effective origin, causing a jump in the position or orientation of objects oriented using the reference space.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace/reset_event">reset event - MDN</a>
   */
  [NoBubble]
  event XRReferenceSpaceEvent reset;
  /**
   * The XRReferenceSpace interface's getOffsetReferenceSpace() method returns a new reference space object which describes the relative difference in position between the object on which the method is called and a given point in 3D space.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace/getOffsetReferenceSpace">XRReferenceSpace.getOffsetReferenceSpace - MDN</a>
   */
  [NewObject]
  XRReferenceSpace getOffsetReferenceSpace( XRRigidTransform originOffset );
};

/**
 * The WebXR Device API interface XRReferenceSpaceEvent represents an event sent to an XRReferenceSpace. Currently, the only event  that uses this type is the reset event.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceEvent">XRReferenceSpaceEvent - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRReferenceSpaceEvent : Event {
  /**
   * The read-only XRReferenceSpaceEvent property referenceSpace specifies the reference space which is the originator of the event.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceEvent/referenceSpace">XRReferenceSpaceEvent.referenceSpace - MDN</a>
   */
  [SameObject]
  readonly attribute XRReferenceSpace referenceSpace;
  /**
   * The read-only XRReferenceSpaceEvent property transform indicates the position and orientation of the affected referenceSpace's native origin after the changes the event represents are applied.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceEvent/transform">XRReferenceSpaceEvent.transform - MDN</a>
   */
  [SameObject]
  readonly attribute XRRigidTransform? transform;
  /**
   * The XRReferenceSpaceEvent() constructor is used to create a new XRReferenceSpaceEvent object, which represents an event regarding the state of a WebXR reference space object, XRReferenceSpace.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceEvent/XRReferenceSpaceEvent">XRReferenceSpaceEvent.XRReferenceSpaceEvent - MDN</a>
   */
  constructor( DOMString type, XRReferenceSpaceEventInit eventInitDict );
};

/**
 * The XRRenderState interface of the WebXR Device API contains configurable values which affect how the imagery generated by an XRSession gets composited.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRRenderState">XRRenderState - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRRenderState {
  /**
   * The read-only baseLayer property of the XRRenderState interface returns the XRWebGLLayer instance that is the source of bitmap images and a description of how the image is to be rendered in the device.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRRenderState/baseLayer">XRRenderState.baseLayer - MDN</a>
   */
  readonly attribute XRWebGLLayer? baseLayer;
  /**
   * The depthFar read-only property of the XRRenderState interface returns the distance in meters of the far clip plane from the viewer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRRenderState/depthFar">XRRenderState.depthFar - MDN</a>
   */
  readonly attribute double depthFar;
  /**
   * The depthNear read-only property of the XRRenderState interface returns the distance in meters of the near clip plane from the viewer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRRenderState/depthNear">XRRenderState.depthNear - MDN</a>
   */
  readonly attribute double depthNear;
  /**
   * The read-only inlineVerticalFieldOfView property of the XRRenderState interface returns the default vertical field of view for "inline" sessions and null for all immersive sessions.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRRenderState/inlineVerticalFieldOfView">XRRenderState.inlineVerticalFieldOfView - MDN</a>
   */
  readonly attribute double? inlineVerticalFieldOfView;
};

/**
 * The XRRigidTransform is a WebXR API interface that represents the 3D geometric transform described by a position and orientation.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRRigidTransform">XRRigidTransform - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRRigidTransform {
  [SameObject]
  readonly attribute XRRigidTransform inverse;
  readonly attribute Float32Array matrix;
  [SameObject]
  readonly attribute DOMPointReadOnly orientation;
  [SameObject]
  readonly attribute DOMPointReadOnly position;
  constructor( optional DOMPointInit position = {}, optional DOMPointInit orientation = {} );
};

/**
 * The WebXR Device API's XRSession interface represents an ongoing XR session, providing methods and properties used to interact with and control the session. To open a WebXR session, use the XRSystem interface's requestSession() method.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSession">XRSession - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRSession : EventTarget {
  /**
   * The read-only inputSources property of the XRSession interface returns an XRInputSourceArray object which lists all controllers and input devices which are expressly associated with the XR device and are currently available.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSession/inputSources">XRSession.inputSources - MDN</a>
   */
  [SameObject]
  readonly attribute XRInputSourceArray inputSources;
  /**
   * The read-only renderState property of an XRSession object indicates the returns a XRRenderState object describing how the user's environment which should be rendered.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSession/renderState">XRSession.renderState - MDN</a>
   */
  [SameObject]
  readonly attribute XRRenderState renderState;
  /**
   * The read-only visibilityState property of the XRSession interface is a string indicating whether the WebXR content is currently visible to the user, and if it is, whether it's the primary focus.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSession/visibilityState">XRSession.visibilityState - MDN</a>
   */
  readonly attribute XRVisibilityState visibilityState;
  attribute NullableEventHandler onend;
  attribute NullableEventHandler oninputsourceschange;
  attribute NullableEventHandler onselect;
  attribute NullableEventHandler onselectend;
  attribute NullableEventHandler onselectstart;
  attribute NullableEventHandler onvisibilitychange;
  /**
   * The cancelAnimationFrame() method of the XRSession interface cancels an animation frame which was previously requested by calling requestAnimationFrame.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSession/cancelAnimationFrame">XRSession.cancelAnimationFrame - MDN</a>
   */
  void cancelAnimationFrame( long handle );
  /**
   * The end() method shuts down the XRSession on which it's called, returning a promise which resolves once the session has fully shut down.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSession/end">XRSession.end - MDN</a>
   */
  Promise<void> end();
  /**
   * The XRSession method requestAnimationFrame(), much like the Window method of the same name, schedules a callback to be executed the next time the browser is ready to paint the session's virtual environment to the XR display.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSession/requestAnimationFrame">XRSession.requestAnimationFrame - MDN</a>
   */
  long requestAnimationFrame( XRFrameRequestCallback callback );
  /**
   * The requestReferenceSpace() method of the XRSession interface returns a promise that resolves with an instance of either XRReferenceSpace or XRBoundedReferenceSpace as appropriate given the type of reference space requested.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSession/requestReferenceSpace">XRSession.requestReferenceSpace - MDN</a>
   */
  [NewObject]
  Promise<XRReferenceSpace> requestReferenceSpace( XRReferenceSpaceType type );
  /**
   * The updateRenderState() method of the XRSession interface of WebXR API schedules changes to be applied to the active render state prior to rendering of the next frame.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSession/updateRenderState">XRSession.updateRenderState - MDN</a>
   */
  void updateRenderState( optional XRRenderStateInit state = {} );
};

/**
 * The WebXR Device API's XRSessionEvent interface describes an event which indicates the change of the state of an XRSession.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSessionEvent">XRSessionEvent - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRSessionEvent : Event {
  /**
   * The read-only XRSessionEvent interface's session property indicates which XRSession the event is about.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSessionEvent/session">XRSessionEvent.session - MDN</a>
   */
  [SameObject]
  readonly attribute XRSession session;
  /**
   * The WebXR Device API's XRSessionEvent() constructor creates and returns a new XRSessionEvent object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSessionEvent/XRSessionEvent">XRSessionEvent.XRSessionEvent - MDN</a>
   */
  constructor( DOMString type, XRSessionEventInit eventInitDict );
};

/**
 * The XRSpace interface of the WebXR Device API is an abstract interface providing a common basis for every class which represents a virtual coordinate system within the virtual world, in which its origin corresponds to a physical location.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRSpace">XRSpace - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRSpace : EventTarget {
};

/**
 * The WebXR Device API's XRView interface provides information describing a single view into the XR scene for a specific frame, providing orientation and position information for the viewpoint.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRView">XRView - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRView {
  /**
   * The XRView interface's read-only eye property is a string taken from the XREye enumerated type, indicating which eye's viewpoint the XRView represents: left or right. For views which represent neither eye, such as monoscopic views, this property's value is none.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRView/eye">XRView.eye - MDN</a>
   */
  readonly attribute XREye eye;
  /**
   * The XRView interface's read-only projectionMatrix property specifies the projection matrix to apply to the underlying view. This should be used to integrate perspective to everything in the scene, in order to ensure the result is consistent with what the eye expects to see.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRView/projectionMatrix">XRView.projectionMatrix - MDN</a>
   */
  readonly attribute Float32Array projectionMatrix;
  /**
   * The read-only transform property of the XRView interface is an XRRigidTransform object which provides the position and orientation of the viewpoint relative to the XRReferenceSpace specified when the XRFrame.getViewerPose() method was called to obtain the view object.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRView/transform">XRView.transform - MDN</a>
   */
  [SameObject]
  readonly attribute XRRigidTransform transform;
};

/**
 * The WebXR Device API interface XRViewerPose represents the pose (the position and orientation) of a viewer's point of view on the scene. Each XRViewerPose can have multiple views to represent, for example, the slight separation between the left and right eye.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRViewerPose">XRViewerPose - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRViewerPose : XRPose {
  /**
   * The read-only XRViewerPose property views returns an array which contains every XRView which must be rendered in order to fully represent the scene from the viewpoint defined by the viewer pose. For monoscopic devices, this array contains a single view.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRViewerPose/views">XRViewerPose.views - MDN</a>
   */
  [SameObject]
  readonly attribute FrozenArray<XRView> views;
};

/**
 * The WebXR Device API's XRViewport interface provides properties used to describe the size and position of the current viewport within the XRWebGLLayer being used to render the 3D scene.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRViewport">XRViewport - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRViewport {
  /**
   * The read-only XRViewport property height specifies the height, in pixels, of the viewport onto the drawing surface within which the WebXR view is to be rendered.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRViewport/height">XRViewport.height - MDN</a>
   */
  readonly attribute long height;
  /**
   * The read-only XRViewport property width specifies the width of the viewport, in pixels, onto the drawing surface the 3D scene is to be rendered into.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRViewport/width">XRViewport.width - MDN</a>
   */
  readonly attribute long width;
  /**
   * The read-only XRViewport interface's x property indicates the offset from the left edge of the destination surface (typically a XRWebGLLayer to the left edge of the viewport within the surface into which WebXR content is to be rendered.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRViewport/x">XRViewport.x - MDN</a>
   */
  readonly attribute long x;
  /**
   * The read-only XRViewport interface's y property indicates the offset from the bottom edge of the destination surface (typically a XRWebGLLayer to the bottom edge of the viewport within the surface into which WebXR content is to be rendered.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRViewport/y">XRViewport.y - MDN</a>
   */
  readonly attribute long y;
};

/**
 * The XRWebGLLayer interface of the WebXR Device API provides a linkage between the WebXR device (or simulated XR device, in the case of an inline session) and a WebGL context used to render the scene for display on the device.
 *
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer">XRWebGLLayer - MDN</a>
 */
[SecureContext, Exposed=Window]
interface XRWebGLLayer {
  /**
   * The read-only XRWebGLLayer property antialias is a Boolean value which is true if the rendering layer's frame buffer supports antialiasing.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer/antialias">XRWebGLLayer.antialias - MDN</a>
   */
  readonly attribute boolean antialias;
  /**
   * The read-only XRWebGLLayer property framebuffer is an opaque WebGLFramebuffer which is used to buffer the rendered image if the XR compositor is being used. Otherwise, this property's value is null.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer/framebuffer">XRWebGLLayer.framebuffer - MDN</a>
   */
  [SameObject]
  readonly attribute WebGLFramebuffer framebuffer;
  /**
   * The read-only XRWebGLLayer property framebufferHeight indicates the height of the framebuffer, in pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer/framebufferHeight">XRWebGLLayer.framebufferHeight - MDN</a>
   */
  readonly attribute unsigned long framebufferHeight;
  /**
   * The read-only XRWebGLLayer property framebufferWidth specifies the width of the framebuffer, in pixels.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer/framebufferWidth">XRWebGLLayer.framebufferWidth - MDN</a>
   */
  readonly attribute unsigned long framebufferWidth;
  /**
   * The read-only XRWebGLLayer property ignoreDepthValues is a Boolean value which is true if the session has been configured to ignore the values in the depth buffer while rendering the scene. If the depth buffer is being used to determine the position of vertices, this property is false.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer/ignoreDepthValues">XRWebGLLayer.ignoreDepthValues - MDN</a>
   */
  readonly attribute boolean ignoreDepthValues;
  /**
   * The static method XRWebGLLayer.getNativeFramebufferScaleFactor() returns a floating-point scaling factor by which one can multiply the specified XRSession's resolution to get the native resolution of the WebXR device's frame buffer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer/getNativeFramebufferScaleFactor">XRWebGLLayer.getNativeFramebufferScaleFactor - MDN</a>
   */
  static double getNativeFramebufferScaleFactor( XRSession session );
  constructor( XRSession session, XRWebGLRenderingContext context, optional XRWebGLLayerInit layerInit = {} );
  /**
   * The XRWebGLLayer interface's getViewport() method returns the XRViewport that should be used to render the specified XRView into the WebGL layer.
   *
   * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer/getViewport">XRWebGLLayer.getViewport - MDN</a>
   */
  XRViewport? getViewport( XRView view );
};
