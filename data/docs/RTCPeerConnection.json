
{
    "name": "RTCPeerConnection",
    "href": "https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection",
    "description": "The RTCPeerConnection interface represents a WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed.",
    "content": "The <strong><code>RTCPeerConnection</code></strong> interface represents a WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed.\n<div class=\"hidden\" id=\"inheritance_diagram\"> \n <pre class=\"brush: html notranslate\"> &lt;div id=\"interfaceDiagram\" style=\"display: inline-block; position: relative; width: 100%; padding-bottom: 11.666666666666666%; vertical-align: middle; overflow: hidden;\"&gt;&lt;svg style=\"display: inline-block; position: absolute; top: 0; left: 0;\" viewbox=\"-50 0 600 70\" preserveAspectRatio=\"xMinYMin meet\"&gt;&lt;a xlink:href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\" target=\"_top\"&gt;&lt;rect x=\"1\" y=\"1\" width=\"110\" height=\"50\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\" /&gt;&lt;text x=\"56\" y=\"30\" font-size=\"12px\" font-family=\"Consolas,Monaco,Andale Mono,monospace\" fill=\"#4D4E53\" text-anchor=\"middle\" alignment-baseline=\"middle\"&gt;EventTarget&lt;/text&gt;&lt;/a&gt;&lt;polyline points=\"111,25 121,20 121,30 111,25\" stroke=\"#D4DDE4\" fill=\"none\"/&gt;&lt;line x1=\"121\" y1=\"25\" x2=\"151\" y2=\"25\" stroke=\"#D4DDE4\"/&gt;&lt;a xlink:href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\" target=\"_top\"&gt;&lt;rect x=\"151\" y=\"1\" width=\"170\" height=\"50\" fill=\"#F4F7F8\" stroke=\"#D4DDE4\" stroke-width=\"2px\" /&gt;&lt;text x=\"236\" y=\"30\" font-size=\"12px\" font-family=\"Consolas,Monaco,Andale Mono,monospace\" fill=\"#4D4E53\" text-anchor=\"middle\" alignment-baseline=\"middle\"&gt;RTCPeerConnection&lt;/text&gt;&lt;/a&gt;&lt;/svg&gt;&lt;/div&gt;\n</pre> \n <pre class=\"brush: css notranslate\"> a:hover text { fill: #0095DD; pointer-events: all;}\n</pre> \n</div>\n<iframe class=\"live-sample-frame inheritance-diagram-frame\" frameborder=\"0\" height=\"70\" id=\"frame_inheritance_diagram\" src=\"https://mdn.mozillademos.org/en-US/docs/Web/API/RTCPeerConnection$samples/inheritance_diagram?revision=1637326\" width=\"600\"></iframe>\n<div>\n <h2 id=\"Constructor\">Constructor</h2>\n <dl>\n <dt>\n <code>RTCPeerConnection()</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <strong><code>RTCPeerConnection()</code></strong> constructor returns a newly-created <code>RTCPeerConnection</code>, which represents a connection between the local device and a remote peer.\n </dd>\n <h2 id=\"Properties\">Properties</h2>\n <p><em>Also inherits properties from: <code>EventTarget</code></em></p>\n <dl>\n <dt>\n <code>canTrickleIceCandidates</code>\n </dt>\n <dd>\n The read-only <strong><code>RTCPeerConnection</code></strong> property <code><strong>canTrickleIceCandidates</strong></code> returns a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> which indicates whether or not the remote peer can accept <a class=\"external\" href=\"https://tools.ietf.org/html/draft-ietf-mmusic-trickle-ice\" rel=\"noopener\">trickled ICE candidates</a>.\n </dd>\n <dt>\n <code>connectionState</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The read-only <strong><code>connectionState</code></strong> property of the <code>RTCPeerConnection</code> interface indicates the current state of the peer connection by returning one of the string values specified by the enum <code><a href=\"#RTCPeerConnectionState_enum\">RTCPeerConnectionState</a></code>.\n </dd>\n <dt>\n <code>currentLocalDescription</code> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only property <code><strong>RTCPeerConnection.currentLocalDescription</strong></code> returns an <code>RTCSessionDescription</code> object describing the local end of the connection as it was most recently successfully negotiated since the last time the <code>RTCPeerConnection</code> finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated.\n </dd>\n <dt>\n <code>currentRemoteDescription</code> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only property <code><strong>RTCPeerConnection.currentRemoteDescription</strong></code> returns an <code>RTCSessionDescription</code> object describing the remote end of the connection as it was most recently successfully negotiated since the last time the <code>RTCPeerConnection</code> finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated.\n </dd>\n <dt>\n <code>getDefaultIceServers()</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>getDefaultIceServers()</strong></code> method of the <code>RTCPeerConnection</code> interface returns an array of objects based on the <code>RTCIceServer</code> dictionary, which indicates what, if any, ICE servers the browser will use by default if none are provided to the <code>RTCPeerConnection</code> in its <code>RTCConfiguration</code>. However, browsers are <strong>not</strong> required to provide any default ICE servers at all.\n </dd>\n <dt>\n <code>iceConnectionState</code> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only property <code><strong>RTCPeerConnection.iceConnectionState</strong></code> returns an enum of type <code>RTCIceConnectionState</code> which state of the ICE agent associated with the <code>RTCPeerConnection</code>.\n </dd>\n <dt>\n <code>iceGatheringState</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only property <code><strong>RTCPeerConnection.iceGatheringState</strong></code> returns an enum of type <code>RTCIceGatheringState</code> that describes connection's ICE gathering state. This lets you detect, for example, when collection of ICE candidates has finished.\n </dd>\n <dt>\n <code>localDescription</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only property <code><strong>RTCPeerConnection.localDescription</strong></code> returns an <code>RTCSessionDescription</code> describing the session for the local end of the connection. If it has not yet been set, this is <font face=\"Consolas, Liberation Mono, Courier, monospace\"><strong>null</strong></font>.\n </dd>\n <dt>\n <code>peerIdentity</code> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only <code>RTCPeerConnection</code> property <code><strong>peerIdentity</strong></code> returns a JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that resolves to an <code>RTCIdentityAssertion</code> which contains a <code>DOMString</code> identifying the remote peer.\n </dd>\n <dt>\n <code>pendingLocalDescription</code> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only property <code><strong>RTCPeerConnection.pendingLocalDescription</strong></code> returns an <code>RTCSessionDescription</code> object describing a pending configuration change for the local end of the connection. This does not describe the connection as it currently stands, but as it may exist in the near future. Use <code>RTCPeerConnection.currentLocalDescription</code> or <code>RTCPeerConnection.localDescription</code> to get the current state of the endpoint. For details on the difference, see Pending and current descriptions in WebRTC connectivity.\n </dd>\n <dt>\n <code>pendingRemoteDescription</code> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only property <code><strong>RTCPeerConnection.pendingRemoteDescription</strong></code> returns an <code>RTCSessionDescription</code> object describing a pending configuration change for the remote end of the connection. This does not describe the connection as it currently stands, but as it may exist in the near future. Use <code>RTCPeerConnection.currentRemoteDescription</code> or <code>RTCPeerConnection.remoteDescription</code> to get the current session description for the remote endpoint. For details on the difference, see Pending and current descriptions in WebRTC connectivity.\n </dd>\n <dt>\n <code>remoteDescription</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only property <code><strong>RTCPeerConnection.remoteDescription</strong></code> returns a <code>RTCSessionDescription</code> describing the session (which includes configuration and media information) for the remote end of the connection. If this hasn't been set yet, this is <code>null</code>.\n </dd>\n <dt>\n <code>sctp</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The read-only <strong><code>sctp</code></strong> property on the <code>RTCPeerConnection</code> interface returns an <code>RTCSctpTransport</code> describing the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/SCTP\">SCTP</a> transport over which SCTP data is being sent and received. If SCTP hasn't been negotiated, this value is <code>null</code>.\n </dd>\n <dt>\n <code>signalingState</code> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only <strong><code>signalingState</code></strong> property on the <code>RTCPeerConnection</code> interface returns one of the string values specified by the <code>RTCSignalingState</code> enum; these values describe the state of the signaling process on the local end of the connection while connecting or reconnecting to another peer. See Signaling in Lifetime of a WebRTC session for more details about the signaling process.\n </dd>\n <h3 id=\"Event_handlers\">Event handlers</h3>\n <p><em>Also inherits event handlers from: <code>EventTarget</code></em></p>\n <dl>\n <dt>\n <code>onaddstream</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This deprecated API should no longer be used, but will probably still work.\"><i class=\"icon-thumbs-down-alt\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.onaddstream</strong></code> event handler is a property containing the code to execute whenthe <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/addstream\" title=\"/en-US/docs/Web/Events/addstream\">addstream</a></code> event, of type <code>MediaStreamEvent</code>, is received by this <code>RTCPeerConnection</code>. Such an event is sent when a <code>MediaStream</code> is added to this connection by the remote peer. The event is sent immediately after the call <code>setRemoteDescription()</code> and doesn't wait for the result of the SDP negotiation.\n </dd>\n <dt>\n <code>onconnectionstatechange</code>\n </dt>\n <dd>\n The <strong><code>RTCPeerConnection.onconnectionstatechange</code></strong> property specifies an <code>EventHandler</code> which is called to handle the <code><a class=\"new\" href=\"https://developer.mozilla.org/en-US/docs/Web/Events/connectionstatechange\" rel=\"nofollow\" title=\"/en-US/docs/Web/Events/connectionstatechange\">connectionstatechange</a></code> event when it occurs on an instance of <code>RTCPeerConnection</code>. This happens whenever the aggregate state of the connection changes.\n </dd>\n <dt>\n <code>ondatachannel</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.ondatachannel</strong></code> property is an <code>EventHandler</code> which specifies a function which is called when the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/datachannel\" title=\"/en-US/docs/Web/Events/datachannel\">datachannel</a></code> event occurs on an <code>RTCPeerConnection</code>. This event, of type <code>RTCDataChannelEvent</code>, is sent when an <code>RTCDataChannel</code> is added to the connection by the remote peer calling <code>createDataChannel()</code>.\n </dd>\n <dt>\n <code>onicecandidate</code>\n </dt>\n <dd>\n The <code>RTCPeerConnection</code> property <strong><code>onicecandidate</code></strong> property is an <code>EventHandler</code> which specifies a function to be called when the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/icecandidate\" title=\"/en-US/docs/Web/Events/icecandidate\">icecandidate</a></code> event occurs on an <code>RTCPeerConnection</code> instance. This happens whenever the local <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/ICE\">ICE</a> agent needs to deliver a message to the other peer through the signaling server.\n </dd>\n <dt>\n <code>oniceconnectionstatechange</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.oniceconnectionstatechange</strong></code> property is an event handler which specifies a function to be called when the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/iceconnectionstatechange\" title=\"/en-US/docs/Web/Events/iceconnectionstatechange\">iceconnectionstatechange</a></code> event is fired on an <code>RTCPeerConnection</code> instance. This happens when the state of the connection's ICE agent, as represented by the <code>iceConnectionState</code> property, changes.\n </dd>\n <dt>\n <code>onicegatheringstatechange</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.onicegatheringstatechange</strong></code> property is an <code>EventHandler</code> which specifies a function to be called when the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/icegatheringstatechange\" title=\"/en-US/docs/Web/Events/icegatheringstatechange\">icegatheringstatechange</a></code> event is sent to an <code>RTCPeerConnection</code> instance. This happens when the ICE gathering state—that is, whether or not the ICE agent is actively gathering candidates—changes.\n </dd>\n <dt>\n <code>onidentityresult</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.onidentityresult</strong></code> event handler is a property containing the code to execute when the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/identityresult\" title=\"/en-US/docs/Web/Events/identityresult\">identityresult</a></code> event, of type <code>RTCIdentityEvent</code>, is received by this <code>RTCPeerConnection</code>. Such an event is sent when an identity assertion is generated, via <code>getIdentityAssertion()</code> or during the creation of an offer or an answer.\n </dd><s class=\"obsoleteElement\"></s>\n <dt>\n <s class=\"obsoleteElement\"><code>onidpassertionerror</code></s> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an obsolete API and is no longer guaranteed to work.\"><i class=\"icon-trash\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.onidpassertionerror</strong></code> event handler is a property containing the code to execute whent the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/idpassertionerror\" title=\"/en-US/docs/Web/Events/idpassertionerror\">idpassertionerror</a></code> event, of type <code>RTCIdentityErrorEvent</code>, is received by this <code>RTCPeerConnection</code>. Such an event is sent when the associated identity provider (IdP) encounters an error while generating an identity assertion.\n </dd><s class=\"obsoleteElement\"></s>\n <dt>\n <s class=\"obsoleteElement\"><code>onidpvalidationerror</code></s> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an obsolete API and is no longer guaranteed to work.\"><i class=\"icon-trash\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.onidpvalidationerror</strong></code> event handler is a property containing the code to execute whent the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/idpvalidationerror\" title=\"/en-US/docs/Web/Events/idpvalidationerror\">idpvalidationerror</a></code> event, of type <code>RTCIdentityErrorEvent</code>, is received by this <code>RTCPeerConnection</code>. Such an event is sent when the associated identity provider (IdP) encounters an error while validating an identity assertion.\n </dd>\n <dt>\n <code>onnegotiationneeded</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code>RTCPeerConnection</code> interface's <strong><code>onnegotiationneeded</code></strong> property is an <code>EventListener</code> which specifies a function which is called to handle the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/negotiationneeded\" title=\"/en-US/docs/Web/Events/negotiationneeded\">negotiationneeded</a></code> event when it occurs on an <code>RTCPeerConnection</code> instance. This event is fired when a change has occurred which requires session negotiation. This negotiation should be carried out as the offerer, because some session changes cannot be negotiated as the answerer.\n </dd><s class=\"obsoleteElement\"></s>\n <dt>\n <s class=\"obsoleteElement\"><code>onpeeridentity</code></s> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an obsolete API and is no longer guaranteed to work.\"><i class=\"icon-trash\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.onpeeridentity</strong></code> event handler is a property containing the code to execute whent the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/peeridentity\" title=\"/en-US/docs/Web/Events/peeridentity\">peeridentity</a></code> event, of type <code>Event</code>, is received by this <code>RTCPeerConnection</code>. Such an event is sent when an identity assertion, received from a peer, has been successfully validated.\n </dd>\n <dt>\n <code>onremovestream</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.onremovestream</strong></code> event handler is a property containing the code to execute whenthe <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/removestream\" title=\"/en-US/docs/Web/Events/removestream\">removestream</a></code> event, of type <code>MediaStreamEvent</code>, is received by this <code>RTCPeerConnection</code>. Such an event is sent when a <code>MediaStream</code> is removed from this connection.\n </dd>\n <dt>\n <code>onsignalingstatechange</code>\n </dt>\n <dd>\n The <code><strong>onsignalingstatechange</strong></code> event handler property of the <strong><code>RTCPeerConnection</code></strong> interface specifies a function to be called when the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/signalingstatechange\" title=\"/en-US/docs/Web/Events/signalingstatechange\">signalingstatechange</a></code> event occurs on an <code>RTCPeerConnection</code> interface.\n </dd>\n <dt>\n <code>ontrack</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code>RTCPeerConnection</code> property <strong><code>ontrack</code></strong> is an <code>EventHandler</code> which specifies a function to be called when the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/track\" title=\"/en-US/docs/Web/Events/track\">track</a></code> event occurs, indicating that a track has been added to the <code>RTCPeerConnection</code>.\n </dd>\n <h2 id=\"Methods\">Methods</h2>\n <p><em>Also inherits methods from: <code>EventTarget</code></em></p>\n <dl>\n <dt>\n <code>addIceCandidate()</code>\n </dt>\n <dd>\n When a web site or app using <code>RTCPeerConnection</code> receives a new ICE candidate from the remote peer over its signaling channel, it delivers the newly-received candidate to the browser's <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/ICE\">ICE</a> agent by calling <code><strong>RTCPeerConnection.addIceCandidate()</strong></code>.\n </dd>\n <dt>\n <code>addStream()</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This deprecated API should no longer be used, but will probably still work.\"><i class=\"icon-thumbs-down-alt\"> </i></span></span>\n </dt>\n <dd>\n The <em>obsolete</em> <code>RTCPeerConnection</code> method <code><strong>addStream()</strong></code> adds a <code>MediaStream</code> as a local source of audio or video. Instead of using this obsolete method, you should instead use <code>addTrack()</code> once for each track you wish to send to the remote peer.\n </dd>\n <dt>\n <code>addTrack()</code>\n </dt>\n <dd>\n The <code>RTCPeerConnection</code> method <strong><code>addTrack()</code></strong> adds a new media track to the set of tracks which will be transmitted to the other peer.\n </dd>\n <dt>\n <code>close()</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.close()</strong></code> method closes the current peer connection.\n </dd>\n <dt>\n <code>createAnswer()</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <strong><code>createAnswer()</code></strong> method on the <code>RTCPeerConnection</code> interface creates an <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/SDP\">SDP</a> answer to an offer received from a remote peer during the offer/answer negotiation of a WebRTC connection. The answer contains information about any media already attached to the session, codecs and options supported by the browser, and any <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/ICE\">ICE</a> candidates already gathered. The answer is delivered to the returned <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>, and should then be sent to the source of the offer to continue the negotiation process.\n </dd>\n <dt>\n <code>createDataChannel()</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <strong><code>createDataChannel()</code></strong> method on the <code>RTCPeerConnection</code> interface creates a new channel linked with the remote peer, over which any kind of data may be transmitted.\n </dd>\n <dt>\n <code>createOffer()</code>\n </dt>\n <dd>\n The <strong><code>createOffer()</code></strong> method of the <code>RTCPeerConnection</code> interface initiates the creation of an <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/SDP\">SDP</a> offer for the purpose of starting a new WebRTC connection to a remote peer.\n </dd>\n <dt>\n <code>generateCertificate()</code>\n </dt>\n <dd>\n The <strong><code>generateCertificate()</code></strong> method of the <code>RTCPeerConnection</code> interface creates and stores an X.509 certificate and corresponding private key then returns an <code>RTCCertificate</code>, providing access to it.\n </dd>\n <dt>\n <code>getConfiguration()</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <strong><code>RTCPeerConnection.getConfiguration()</code></strong> method returns an <code>RTCConfiguration</code> object which indicates the current configuration of the <code>RTCPeerConnection</code> on which the method is called.\n </dd>\n <dt>\n <code>getIdentityAssertion()</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.getIdentityAssertion()</strong></code> method initiates the gathering of an identity assertion. This has an effect only if the <code>signalingState</code> is not <code>\"closed\"</code>.\n </dd>\n <dt>\n <code>getReceivers()</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.getReceivers()</strong></code> method returns an array of <code>RTCRtpReceiver</code> objects, each of which represents one RTP receiver. Each RTP receiver manages the reception and decoding of data for a<code>MediaStreamTrack</code> on an<code>RTCPeerConnection</code>\n </dd>\n <dt>\n <code>getSenders()</code>\n </dt>\n <dd>\n The <code>RTCPeerConnection</code> method <code><strong>getSenders()</strong></code> returns an array of <code>RTCRtpSender</code> objects, each of which represents the RTP sender responsible for transmitting one track's data.\n </dd>\n <dt>\n <code>getStats()</code>\n </dt>\n <dd>\n The <code>RTCPeerConnection</code> method <code><strong>getStats()</strong></code> returns a promise which resolves with data providing statistics about either the overall connection or about the specified <code>MediaStreamTrack</code>.\n </dd>\n <dt>\n <code>getStreamById()</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.getStreamById()</strong></code> method returns the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaStream\" title=\"The MediaStream interface represents a stream of media content. A stream consists of several tracks, like video or audio tracks.\"><code>MediaStream</code></a> with the given id that is associated with local or remote end of the connection. If no stream matches, it returns <code>null</code>.\n </dd>\n <dt>\n <code>getTransceivers()</code>\n </dt>\n <dd>\n The <code>RTCPeerConnection</code> interface's <code><strong>getTransceivers()</strong></code> method returns a list of the <code>RTCRtpTransceiver</code> objects being used to send and receive data on the connection.\n </dd>\n <dt>\n <code>removeStream()</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This deprecated API should no longer be used, but will probably still work.\"><i class=\"icon-thumbs-down-alt\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.removeStream()</strong></code> method removes a <code>MediaStream</code> as a local source of audio or video. If the negotiation already happened, a new one will be needed for the remote peer to be able to use it. Because this method has been deprecated, you should instead use <code>removeTrack()</code> if your target browser versions have implemented it.\n </dd>\n <dt>\n <code>removeTrack()</code>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.removeTrack()</strong></code> method tells the local end of the connection to stop sending media from the specified track, without actually removing the corresponding <code>RTCRtpSender</code> from the list of senders as reported by <code>RTCPeerConnection.getSenders()</code>.\n </dd>\n <dt>\n <code>restartIce()</code>\n </dt>\n <dd>\n The WebRTC API's <code>RTCPeerConnection</code> interface offers the <code><strong>restartIce()</strong></code> method to allow a web application to easily request that <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/ICE\">ICE</a> candidate gathering be redone on both ends of the connection.\n </dd>\n <dt>\n <code>setConfiguration()</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <strong><code>RTCPeerConnection.setConfiguration()</code></strong> method sets the current configuration of the <code>RTCPeerConnection</code> based on the values included in the specified <code>RTCConfiguration</code> object. This lets you change the ICE servers used by the connection and which transport policies to use.\n </dd>\n <dt>\n <code>setIdentityProvider()</code> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCPeerConnection.setIdentityProvider()</strong></code> method sets the Identity Provider (IdP) to the triplet given in parameter: its name, the protocol used to communicate with it (optional) and an optional username. The IdP will be used only when an assertion is needed.\n </dd>\n <dt>\n <code>setLocalDescription()</code>\n </dt>\n <dd>\n The <code>RTCPeerConnection</code> method <code>setLocalDescription()</code> changes the local description associated with the connection. This description specifies the properties of the local end of the connection, including the media format.\n </dd>\n <dt>\n <code>setRemoteDescription()</code>\n </dt>\n <dd>\n The <code>RTCPeerConnection</code> method<code><strong>setRemoteDescription()</strong></code>sets the specified session description as the remote peer's current offer or answer. The description specifies the properties of the remote end of the connection, including the media format.\n </dd>\n </dl>\n </dl>\n </dl>\n </dl>\n</div>\n<h3 id=\"Obsolete_method\">Obsolete method</h3>\n<p>The following method was obsoleted long ago and was never implemented in all major browsers.</p>\n<dl> \n <dt>\n <code>RTCPeerConnection.createDTMFSender()</code> <span class=\"icon-only-inline\" title=\"This is an obsolete API and is no longer guaranteed to work.\"><i class=\"icon-trash\"> </i></span>\n </dt> \n <dd>\n Creates a new <code>RTCDTMFSender</code>, associated to a specific <code>MediaStreamTrack</code>, that will be able to send <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/DTMF\">DTMF</a> phone signaling over the connection.\n </dd> \n</dl>",
    "properties": [
        "canTrickleIceCandidates",
        "connectionState",
        "currentLocalDescription",
        "currentRemoteDescription",
        "getDefaultIceServers()",
        "iceConnectionState",
        "iceGatheringState",
        "localDescription",
        "peerIdentity",
        "pendingLocalDescription",
        "pendingRemoteDescription",
        "remoteDescription",
        "sctp",
        "signalingState"
    ],
    "methods": [
        "addIceCandidate",
        "addStream",
        "addTrack",
        "close",
        "createAnswer",
        "createDataChannel",
        "createOffer",
        "generateCertificate",
        "getConfiguration",
        "getIdentityAssertion",
        "getReceivers",
        "getSenders",
        "getStats",
        "getStreamById",
        "getTransceivers",
        "removeStream",
        "removeTrack",
        "restartIce",
        "setConfiguration",
        "setIdentityProvider",
        "setLocalDescription",
        "setRemoteDescription"
    ]
}
