
{
    "name": "RTCDataChannel",
    "href": "https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel",
    "description": "The <strong><code>RTCDataChannel</code></strong> interface represents a network channel which can be used for bidirectional peer-to-peer transfers of arbitrary data. Every data channel is associated with an , and each peer connection can have up to a theoretical maximum of 65,534 data channels (the actual limit may vary from browser to browser).\n<p>To create a data channel and ask a remote peer to join you, call the 's method. The peer being invited to exchange data receives a <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/datachannel\" title=\"/en-US/docs/Web/Events/datachannel\">datachannel</a></code> event (which has type ) to let it know the data channel has been added to the connection.</p>\n<div>\n <h2 id=\"Properties\">Properties</h2>\n <p><em>Also inherits properties from: </em></p>\n <dl>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The property <code><strong>binaryType</strong></code> on the interface is a which specifies the type of JavaScript object which should be used to represent binary data received on the . Values allowed by the property are also permitted here: <code>\"blob\"</code>if objects are being used or <code>\"arraybuffer\"</code> if objects are being used. The default is <code>\"blob\"</code>.\n </dd>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only <code>RTCDataChannel</code> property <code><strong>bufferedAmount</strong></code> returns the number of bytes of data currently queued to be sent over the data channel.\n </dd>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code>RTCDataChannel</code> property <code><strong>bufferedAmountLowThreshold</strong></code> is used to specify the number of bytes of buffered outgoing data that is considered \"low.\" The default value is 0.\n </dd>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only <code>RTCDataChannel</code> property <code><strong>id</strong></code> returns an ID number (between 0 and 65,534) which uniquely identifies the .\n </dd>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only <code>RTCDataChannel</code> property <code><strong>label</strong></code> returns a containing a name describing the data channel. These labels are not required to be unique.\n </dd>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only <code>RTCDataChannel</code> property <code><strong>maxPacketLifeTime</strong></code> returns the amount of time, in milliseconds, the browser is allowed to take to attempt to transmit a message, as set when the data channel was created, or <code>null</code>.\n </dd>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only <code>RTCDataChannel</code> property <code><strong>maxRetransmits</strong></code> returns the maximum number of times the browser should try to retransmit a message before giving up, as set when the data channel was created, or <code>null</code>, which indicates that there is no maximum.\n </dd>\n <dt> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only <code>RTCDataChannel</code> property <code><strong>negotiated</strong></code> indicates whether the 's connection was negotiated by the Web app (<code>true</code>) or by the WebRTC layer (<code>false</code>).\n </dd>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only <code>RTCDataChannel</code> property <code><strong>ordered</strong></code> indicates whether or not the data channel guarantees in-order delivery of messages; the default is <code>true</code>, which indicates that the data channel is indeed ordered.\n </dd>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only <code>RTCDataChannel</code> property <code><strong>protocol</strong></code> returns a containing the name of the subprotocol in use. If no protocol was specified when the data channel was created, then this property's value is \"\" (the empty string).\n </dd>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only <code>RTCDataChannel</code> property <code><strong>readyState</strong></code> returns an enum of type <code>RTCDataChannelState</code> which indicates the state of the data channel's underlying data connection.\n </dd><s class=\"obsoleteElement\"></s>\n <dt>\n <s class=\"obsoleteElement\"></s> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an obsolete API and is no longer guaranteed to work.\"><i class=\"icon-trash\"> </i></span></span> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The read-only <code>RTCDataChannel</code> property <code><strong>reliable</strong></code> indicates whether or not the data channel is reliable.\n </dd><s class=\"obsoleteElement\"></s>\n <dt>\n <s class=\"obsoleteElement\"></s> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This API has not been standardized.\"><i class=\"icon-warning-sign\"> </i></span></span> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an obsolete API and is no longer guaranteed to work.\"><i class=\"icon-trash\"> </i></span></span> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span>\n </dt>\n <dd>\n The deprecated (and never part of the official specification) read-only <code>RTCDataChannel</code> property <code><strong>stream</strong></code> returns an ID number (between 0 and 65,535) which uniquely identifies the .\n </dd>\n <h3 id=\"Event_handlers\">Event handlers</h3>\n <p><em>Also inherits event handlers from: </em></p>\n <dl>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <strong><code>RTCDataChannel.onbufferedamountlow</code></strong> property is an which specifies a function the browser calls when the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/bufferedamountlow\" title=\"/en-US/docs/Web/Events/bufferedamountlow\">bufferedamountlow</a></code> event is sent to the . This event, which is represented by a simple object, is sent when the amount of data buffered to be sent falls to or below the threshold specified by the channel's .\n </dd>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCDataChannel.onclose</strong></code> property is an which specifies a function to be called by the browser when the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/close\" title=\"/en-US/docs/Web/Events/close\">close</a></code> event is received by the . This is a simple which indicates that the data channel has closed down.\n </dd>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCDataChannel.onclosing</strong></code> property is an which specifies a function to be called by the browser when the <code><a class=\"new\" href=\"https://developer.mozilla.org/en-US/docs/Web/Events/closing\" rel=\"nofollow\" title=\"/en-US/docs/Web/Events/closing\">closing</a></code> event is received by the . This is a simple which indicates that the data channel is being closed, that is, transitions to \"closing\" state. For example, after was called but the underlying data transport might not have been closed yet.\n </dd>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCDataChannel.onerror</strong></code> property is an which specifies a function to be called when the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/error\" title=\"/en-US/docs/Web/Events/error\">error</a></code> event is received. When an error occurs on the data channel, the function receives as input an object describing the error which occurred.\n </dd>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCDataChannel.onmessage</strong></code> property stores an which specifies a function to be called when the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/message\" title=\"/en-US/docs/Web/Events/message\">message</a></code> event is fired on the channel. This event is represented by the interface. This event is sent to the channel when a message is received from the other peer.\n </dd>\n <dt> <span class=\"sidebar-icon\"><span class=\"icon-only-inline\" title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></span>\n </dt>\n <dd>\n The <code><strong>RTCDataChannel.onopen</strong></code> property is an which specifies a function to be called when the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/open\" title=\"/en-US/docs/Web/Events/open\">open</a></code> event is fired; this is a simple which is sent when the data channel's underlying data transport—the link over which the 's messages flow—is established or re-established.\n </dd>\n <h2 id=\"Methods\">Methods</h2>\n <p><em>Also inherits methods from: </em></p>\n <dl>\n <dt></dt>\n <dd>\n The <code><strong>RTCDataChannel.close()</strong></code> method closes the . Either peer is permitted to call this method to initiate closure of the channel.\n </dd>\n <dt></dt>\n <dd>\n The <code><strong>send()</strong></code> method of the interface sends data across the data channel to the remote peer.\n </dd>\n </dl>\n </dl>\n </dl>\n</div>"
}
