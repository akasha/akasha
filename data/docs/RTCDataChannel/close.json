
{
    "kind": "Type",
    "name": "RTCDataChannel.close",
    "href": "https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/close",
    "description": "The RTCDataChannel.close() method closes the RTCDataChannel. Either peer is permitted to call this method to initiate closure of the channel.",
    "content": "The <code><strong>RTCDataChannel.close()</strong></code> method closes the <code>RTCDataChannel</code>. Either peer is permitted to call this method to initiate closure of the channel.\n<p>Closure of the data channel is not instantaneous. Most of the process of closing the connection is handled asynchronously; you can detect when the channel has finished closing by watching for a <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/close\" title=\"/en-US/docs/Web/Events/close\">close</a></code> event on the data channel.</p>\n<p>The sequence of events which occurs in response to this method being called:</p>\n<ol> \n <li><code>RTCDataChannel.readyState</code> is set to <code>\"closing\"</code>.</li> \n <li>A background task is established to handle the remainder of the steps below, and <code>close()</code> returns to the caller.</li> \n <li>The transport layer deals with any buffered messages; the protocol layer decides whether to send them or discard them.</li> \n <li>The underlying data transport is closed.</li> \n <li>The <code>RTCDataChannel.readyState</code> property is set to <code>\"closed\"</code>.</li> \n <li>If the transport was closed with an error, the <code>RTCDataChannel</code> is sent a <code><a class=\"new\" href=\"https://developer.mozilla.org/en-US/docs/Web/Events/NetworkError\" rel=\"nofollow\" title=\"/en-US/docs/Web/Events/NetworkError\">NetworkError</a></code> event.</li> \n <li>A <code>close</code> event is sent to the channel.</li> \n</ol>\n<div class=\"note\"> \n <p>In Firefox, the <code>RTCDataChannel</code> interface was implemented under the name <code>DataChannel</code> until Firefox 24, so this method was called <code>DataChannel.close()</code>.</p> \n</div>"
}
