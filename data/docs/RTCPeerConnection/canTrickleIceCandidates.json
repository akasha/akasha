
{
    "name": "RTCPeerConnection.canTrickleIceCandidates",
    "href": "https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates",
    "description": "The read-only RTCPeerConnection property canTrickleIceCandidates returns a Boolean which indicates whether or not the remote peer can accept trickled ICE candidates.",
    "content": "<p>The read-only <strong><code>RTCPeerConnection</code></strong> property <code><strong>canTrickleIceCandidates</strong></code> returns a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> which indicates whether or not the remote peer can accept <a class=\"external\" href=\"https://tools.ietf.org/html/draft-ietf-mmusic-trickle-ice\" rel=\"noopener\">trickled ICE candidates</a>.</p>\n<p><strong>ICE trickling</strong> is the process of continuing to send candidates after the initial offer or answer has already been sent to the other peer.</p>\n<p>This property is only set after having called <code>RTCPeerConnection.setRemoteDescription()</code>. Ideally, your signaling protocol provides a way to detect trickling support, so that you don't need to rely on this property. A WebRTC browser will always support trickle ICE. If trickling isn't supported, or you aren't able to tell, you can check for a falsy value for this property and then wait until the value of <code>iceGatheringState</code> changes to <code>\"completed\"</code> before creating and sending the initial offer. That way, the offer contains all of the candidates.</p>"
}
