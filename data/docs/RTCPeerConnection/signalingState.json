
{
    "kind": "Property",
    "name": "RTCPeerConnection.signalingState",
    "href": "https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/signalingState",
    "description": "The read-only signalingState property on the RTCPeerConnection interface returns one of the string values specified by the RTCSignalingState enum; these values describe the state of the signaling process on the local end of the connection while connecting or reconnecting to another peer. See Signaling in Lifetime of a WebRTC session for more details about the signaling process.",
    "content": "The read-only <strong><code>signalingState</code></strong> property on the <code>RTCPeerConnection</code> interface returns one of the string values specified by the <code>RTCSignalingState</code> enum; these values describe the state of the signaling process on the local end of the connection while connecting or reconnecting to another peer. See Signaling in Lifetime of a WebRTC session for more details about the signaling process.\n<p>Because the signaling process is a state machine, being able to verify that your code is in the expected state when messages arrive can help avoid unexpected and avoidable failures. For example, if you receive an answer while the <code>signalingState</code> isn't <code>\"have-local-offer\"</code>, you know that something is wrong, since you should only receive answers after creating an offer but before an answer has been received and passed into <code>RTCPeerConnection.setLocalDescription()</code>. Your code will be more reliable if you watch for mismatched states like this and handle them gracefully.</p>\n<p>This value may also be useful during debugging, for example.</p>\n<p>In addition, when the value of this property changes, a <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/signalingstatechange\" title=\"/en-US/docs/Web/Events/signalingstatechange\">signalingstatechange</a></code> event is sent to the <code>RTCPeerConnection</code> instance.</p>"
}
