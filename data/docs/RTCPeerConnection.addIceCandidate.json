
{
    "name": "RTCPeerConnection.addIceCandidate",
    "href": "https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addIceCandidate",
    "description": "When a web site or app using RTCPeerConnection receives a new ICE candidate from the remote peer over its signaling channel, it delivers the newly-received candidate to the browser's ICE agent by calling RTCPeerConnection.addIceCandidate().",
    "content": "<p>When a web site or app using <code>RTCPeerConnection</code> receives a new ICE candidate from the remote peer over its signaling channel, it delivers the newly-received candidate to the browser's <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/ICE\">ICE</a> agent by calling <code><strong>RTCPeerConnection.addIceCandidate()</strong></code>. This adds this new remote candidate to the <code>RTCPeerConnection</code>'s remote description, which describes the state of the remote end of the connection.</p>\n<p>If the <code>candidate</code> parameter is missing or a value of <code>null</code> is given when calling <code>addIceCandidate()</code>, the added ICE candidate is an \"end-of-candidates\" indicator. The same is the case if the value of the specified object's <code>candidate</code> is either missing or an empty string (<code>\"\"</code>), it signals that all remote candidates have been delivered.</p>\n<p>The end-of-candidates notification is transmitted to the remote peer using a candidate with an a-line value of <code>end-of-candidates</code>.</p>\n<p>During negotiation, your app will likely receive many candidates which you'll deliver to the ICE agent in this way, allowing it to build up a list of potential connection methods. This is covered in more detail in the articles WebRTC connectivity and Signaling and video calling.</p>"
}
