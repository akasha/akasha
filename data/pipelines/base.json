{
  "sourceSelector": "!name=minimal_events !name=minimal_webgpu_integration",
  "pre": ["base_webgpu", "base_common", "base_typedarray", "base_bluetooth", "base_speech_api", "base_indexdb"],
  "stages": [
    {
      "name": "RemoveMember",
      "description": "Remove member so we can apply patch to align with incorrect closure compiler representation",
      "sourceSelector": "name=atomics",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^Atomics$",
        "memberNamePattern": "^wait$"
      }
    },
    {
      "name": "RemoveMember",
      "description": "Remove member so we can apply patch to align with incorrect closure compiler representation",
      "sourceSelector": "name=date",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^Date$",
        "memberNamePattern": "^UTC$"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Convert ImageBufferSource into marker type",
      "sourceSelector": "name=webcodecs",
      "config": {
        "expectedAddCount": 1,
        "namePattern": "^ImageBufferSource$",
        "extendedAttribute": "MarkerType",
        "types": ["typedef"]
      }
    },
    {
      "name": "MergeDocs",
      "description": "Add documentation from doc repository. This needs to be done before Flatten and renames as some documentation applies to Mixins or to elements before they are renamed",
      "config": {
        "createEvents": true
      }
    },
    {
      "name": "RemoveIncludes",
      "description": "Remove include into MathMLElement as we are not importing MathML spec at this stage",
      "sourceSelector": "name=cssom",
      "config": {
        "expectedRemoveCount": 1,
        "interfacePattern": "^MathMLElement$",
        "mixinPattern": "^ElementCSSInlineStyle$"
      }
    },
    {
      "name": "RemoveExtendedAttribute",
      "description": "Remove Constructor attribute as one of the arguments 'newTarget' is of type 'Animatable' which is a mixin which is seemingly invalid. We will re-add an equivalent with a union for impls of Animatable in next step",
      "sourceSelector": "name=svg2",
      "config": {
        "expectedRemoveCount": 1,
        "namePattern": "^ShadowAnimation$",
        "extendedAttribute": "Constructor( Animation source, Animatable newTarget )"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "See previous step for explanation",
      "sourceSelector": "name=svg2",
      "config": {
        "namePattern": "^ShadowAnimation$",
        "extendedAttribute": "Constructor( Animation source, (CSSPseudoElement or Element) newTarget )"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Convert TexImageSource into a marker type",
      "sourceSelector": "name=webgl1",
      "config": {
        "expectedAddCount": 1,
        "namePattern": "^TexImageSource$",
        "extendedAttribute": "MarkerType"
      }
    },
    {
      "name": "RemoveMember",
      "description": "The spec defines two attributes with name name in two different exposure sets so we just remove them so it can be re-added",
      "sourceSelector": "name=webgl1",
      "config": {
        "expectedRemoveCount": 2,
        "elementNamePattern": "^WebGLRenderingContextBase$",
        "memberNamePattern": "^canvas$",
        "types": ["mixin"]
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Convert XRWebGLRenderingContext into a marker type",
      "sourceSelector": "name=webxr",
      "config": {
        "expectedAddCount": 1,
        "namePattern": "^XRWebGLRenderingContext$",
        "extendedAttribute": "MarkerType"
      }
    },
    {
      "name": "ConvertConstructorAttribute",
      "description": "Convert from historic constructor attributes"
    },
    {
      "name": "ConvertFactoryFunctionAttribute",
      "description": "Convert legacy factory functions into a form that is compatible with Closure/Java mapping",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedConvertCount": 3
      }
    },
    {
      "name": "RemoveHTMLConstructor",
      "description": "Remove constructors that are not invokable directly in Javascript binding",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedConvertCount": 3
      }
    },
    {
      "name": "RemoveMember",
      "description": "We remove the trailing parameters to make it more java-esque",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 2,
        "elementNamePattern": "^WindowOrWorkerGlobalScope$",
        "memberNamePattern": "^(setInterval|setTimeout)$"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "sourceSelector": "name=beacon",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^Navigator$",
        "memberNamePattern": "^sendBeacon$",
        "extendedAttribute": "OptionalSupport"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "sourceSelector": "name=clipboard_apis",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^Navigator$",
        "memberNamePattern": "^clipboard$",
        "extendedAttribute": "OptionalSupport"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "sourceSelector": "name=credential_management_1",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^Navigator$",
        "memberNamePattern": "^credentials$",
        "extendedAttribute": "OptionalSupport"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "sourceSelector": "name=encrypted_media",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^Navigator$",
        "memberNamePattern": "^requestMediaKeySystemAccess$",
        "extendedAttribute": "OptionalSupport"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "sourceSelector": "name=gamepad",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^Navigator$",
        "memberNamePattern": "^getGamepads$",
        "extendedAttribute": "OptionalSupport"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "sourceSelector": "name=geolocation_api",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^Navigator$",
        "memberNamePattern": "^geolocation$",
        "extendedAttribute": "OptionalSupport"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "sourceSelector": "name=mediacapture_main",
      "config": {
        "expectedAddCount": 2,
        "elementNamePattern": "^Navigator$",
        "memberNamePattern": "^(getUserMedia|mediaDevices)$",
        "extendedAttribute": "OptionalSupport"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "sourceSelector": "name=permissions",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^Navigator$",
        "memberNamePattern": "^permissions$",
        "extendedAttribute": "OptionalSupport"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "sourceSelector": "name=screen_wake_lock",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^Navigator$",
        "memberNamePattern": "^wakeLock$",
        "extendedAttribute": "OptionalSupport"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "sourceSelector": "name=serviceworker",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^Navigator$",
        "memberNamePattern": "^serviceWorker$",
        "extendedAttribute": "OptionalSupport"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "sourceSelector": "name=vibration",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^Navigator$",
        "memberNamePattern": "^vibrate$",
        "extendedAttribute": "OptionalSupport"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "sourceSelector": "name=web_share",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^Navigator$",
        "memberNamePattern": "^share$",
        "extendedAttribute": "OptionalSupport"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "sourceSelector": "name=webxr",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^Navigator$",
        "memberNamePattern": "^xr$",
        "extendedAttribute": "OptionalSupport"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^WindowSessionStorage$",
        "memberNamePattern": "^sessionStorage$",
        "extendedAttribute": "OptionalSupport"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^WindowLocalStorage$",
        "memberNamePattern": "^localStorage$",
        "extendedAttribute": "OptionalSupport"
      }
    },
    {
      "name": "RemoveElement",
      "description": "Remove the type so it can be replaced with a more java-friendly form",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "namePattern": "^TimerHandler$",
        "type": ["callback"]
      }
    },
    {
      "name": "RemoveElement",
      "description": "Remove the type that only contains methods that must do nothing according to the spec",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "namePattern": "^External$",
        "type": ["interface_type"]
      }
    },
    {
      "name": "RemoveMember",
      "description": "the spec defines as do nothing elements that exist for backwards compatibility",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 3,
        "elementNamePattern": "^Window$",
        "memberNamePattern": "^(external|captureEvents|releaseEvents)$",
        "types": ["interface_type"]
      }
    },
    {
      "name": "RemoveMember",
      "description": "the spec defines these as must do nothing elements that exist for backwards compatibility",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 4,
        "elementNamePattern": "^Document$",
        "memberNamePattern": "^(clear|captureEvents|releaseEvents|applets)$",
        "types": ["interface_type"]
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Package up the elements defined by ECMA into a separate package to model behaviour of elemental2-core",
      "sourceSelector": "name=atomics name=errors name=symbol name=json name=math name=basic_types",
      "config": {
        "namePattern": "^.*$",
        "extendedAttribute": "JavaSubPackage=core"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "sourceSelector": "name=webcrypto",
      "config": {
        "namePattern": "^.*$",
        "extendedAttribute": "JavaSubPackage=crypto"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Package up the webgl specific specs into a separate package",
      "sourceSelector": "name=webgl.*",
      "config": {
        "namePattern": "^.*$",
        "extendedAttribute": "JavaSubPackage=gl"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Package up the webrtc specific specs into a separate package",
      "sourceSelector": "name=webrtc.*",
      "config": {
        "namePattern": "^.*$",
        "extendedAttribute": "JavaSubPackage=rtc"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "sourceSelector": "name=clipboard_apis",
      "config": {
        "namePattern": "^.*$",
        "extendedAttribute": "JavaSubPackage=clipboard"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "sourceSelector": "name=hr_time_2 name=navigation_timing name=navigation_timing_patch name=performance_timeline name=resource_timing name=user_timing_2",
      "config": {
        "namePattern": "^.*$",
        "extendedAttribute": "JavaSubPackage=perf"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Package up the svg specific specs into a separate package",
      "sourceSelector": "name=svg2 name=css_masking_1 name=filter_effects_1",
      "config": {
        "namePattern": "^.*$",
        "extendedAttribute": "JavaSubPackage=svg"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Package up the audio specific specs into a separate package",
      "sourceSelector": "name=web_audio_api",
      "config": {
        "namePattern": "^.*$",
        "extendedAttribute": "JavaSubPackage=audio"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Package up the media specific specs into a separate package",
      "sourceSelector": "name=media_source name=mediacapture_main name=mediacapture_record name=screen_capture",
      "config": {
        "namePattern": "^.*$",
        "extendedAttribute": "JavaSubPackage=media"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Package up the notifications specific specs into a separate package",
      "sourceSelector": "name=whatwg_notifications",
      "config": {
        "namePattern": "^.*$",
        "extendedAttribute": "JavaSubPackage=notifications"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Package up the xr specific specs into a separate package",
      "sourceSelector": "name=webxr",
      "config": {
        "namePattern": "^.*$",
        "extendedAttribute": "JavaSubPackage=xr"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Package up the wasm specific specs into a separate package",
      "sourceSelector": "name=wasm.*",
      "config": {
        "namePattern": "^.*$",
        "extendedAttribute": "JavaSubPackage=wasm"
      }
    },
    {
      "name": "RenameType",
      "description": "Both permissions.webdidl and deviceorientation.webidl define PermissionState and they have different shapes",
      "sourceSelector": "name=deviceorientation",
      "config": {
        "expectedRenameCount": 1,
        "namePattern": "^PermissionState$",
        "replacement": "DevicePermissionState"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Add LegacyNoInterfaceObject as chrome is non-compliant wrt this. See https://bugs.chromium.org/p/chromium/issues/detail?id=674507",
      "sourceSelector": "name=web_animations_1",
      "config": {
        "namePattern": "^Animation$",
        "extendedAttribute": "LegacyNoInterfaceObject"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Add LegacyNoInterfaceObject as chrome is non-compliant wrt this. See https://bugs.chromium.org/p/chromium/issues/detail?id=674507",
      "sourceSelector": "name=web_audio_api",
      "config": {
        "namePattern": "^(AudioContext|OfflineAudioContext)$",
        "extendedAttribute": "LegacyNoInterfaceObject"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Add MarkerType to make conversion between types easier",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedAddCount": 8,
        "namePattern": "^(RenderingContext|OffscreenRenderingContext|CanvasImageSource|HTMLOrSVGImageElement|HTMLOrSVGScriptElement|ImageBitmapSource|MediaProvider|MessageEventSource)$",
        "extendedAttribute": "MarkerType"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Add MarkerType to make conversion between types easier",
      "sourceSelector": "name=credential_management_1",
      "config": {
        "expectedAddCount": 1,
        "namePattern": "^PasswordCredentialInit$",
        "extendedAttribute": "MarkerType"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Add MarkerType to make conversion between types easier",
      "sourceSelector": "name=streams",
      "config": {
        "expectedAddCount": 2,
        "namePattern": "^(ReadableStreamReader|ReadableStreamController)$",
        "extendedAttribute": "MarkerType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=geolocation_api",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^GeolocationPositionError$",
        "attributeNamePattern": "^code$",
        "type": "GeolocationPositionErrorCode"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=navigation_timing",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^PerformanceNavigation$",
        "attributeNamePattern": "^type$",
        "type": "PerformanceNavigationType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=cssom",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^CSSRule$",
        "attributeNamePattern": "^type$",
        "type": "CSSRuleType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Change transfer arg to the synthetic Transferable type",
      "sourceSelector": "name=whatwg_html name=serviceworker",
      "config": {
        "expectedChangeCount": 6,
        "elementNamePattern": "^.*$",
        "operationNamePattern": "^postMessage$",
        "argumentNamePattern": "^transfer$",
        "type": "sequence<Transferable>"
      }
    },
    {
      "name": "ChangeDictionaryMemberType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "dictionaryNamePattern": "^PostMessageOptions$",
        "dictionaryMemberNamePattern": "^transfer$",
        "type": "sequence<Transferable>"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^HTMLButtonElement$",
        "attributeNamePattern": "^type$",
        "type": "ButtonType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^HTMLFormElement$",
        "attributeNamePattern": "^method$",
        "type": "FormMethodType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^HTMLFormElement$",
        "attributeNamePattern": "^enctype$",
        "type": "FormEncodingType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 2,
        "elementNamePattern": "^(HTMLButtonElement|HTMLInputElement)$",
        "attributeNamePattern": "^formMethod$",
        "type": "FormMethodType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 2,
        "elementNamePattern": "^(HTMLButtonElement|HTMLInputElement)$",
        "attributeNamePattern": "^formEnctype$",
        "type": "FormEncodingType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^EventSource$",
        "attributeNamePattern": "^readyState$",
        "type": "EventSourceReadyState"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^HTMLTrackElement$",
        "attributeNamePattern": "^readyState$",
        "type": "HTMLTrackElementReadyState"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^MediaError$",
        "attributeNamePattern": "^code$",
        "type": "MediaErrorCode"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^HTMLMediaElement$",
        "attributeNamePattern": "^(readyState|networkState)$",
        "type": "HTMLMediaElementNetworkState"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^HTMLMediaElement$",
        "attributeNamePattern": "^readyState$",
        "type": "HTMLMediaElementReadyState"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^WebSocket$",
        "attributeNamePattern": "^readyState$",
        "type": "WebSocketReadyState"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 3,
        "elementNamePattern": "^(HTMLTextAreaElement|HTMLSelectElement|HTMLInputElement)$",
        "attributeNamePattern": "^autocomplete$",
        "type": "AutocompleteType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^HTMLFormElement$",
        "attributeNamePattern": "^autocomplete$",
        "type": "FormAutocompleteType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 4,
        "elementNamePattern": "^(HTMLMediaElement|HTMLLinkElement|HTMLImageElement|HTMLScriptElement)$",
        "attributeNamePattern": "^crossOrigin$",
        "type": "CrossOriginType?"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 6,
        "elementNamePattern": "^(HTMLAnchorElement|HTMLAreaElement|HTMLIFrameElement|HTMLImageElement|HTMLLinkElement|HTMLScriptElement)$",
        "attributeNamePattern": "^referrerPolicy$",
        "type": "ReferrerPolicy"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 2,
        "elementNamePattern": "^(HTMLIFrameElement|HTMLImageElement)$",
        "attributeNamePattern": "^loading$",
        "type": "LoadingType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^HTMLTrackElement$",
        "attributeNamePattern": "^kind$",
        "type": "TrackKind"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^HTMLTextAreaElement$",
        "attributeNamePattern": "^wrap$",
        "type": "WrapType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^HTMLTableCellElement$",
        "attributeNamePattern": "^scope$",
        "type": "ScopeType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^HTMLInputElement$",
        "attributeNamePattern": "^type$",
        "type": "InputType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^HTMLMediaElement$",
        "attributeNamePattern": "^preload$",
        "type": "MediaPreloadType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^ElementContentEditable$",
        "attributeNamePattern": "^inputMode$",
        "type": "InputModeType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^HTMLElement$",
        "attributeNamePattern": "^autocapitalize$",
        "type": "AutocapitalizeType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^HTMLElement$",
        "attributeNamePattern": "^dir$",
        "type": "DirType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^HTMLCanvasElement$",
        "operationNamePattern": "^getContext$",
        "argumentNamePattern": "^contextId$",
        "type": "RenderContextType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^HTMLCanvasElement$",
        "operationNamePattern": "^getContext$",
        "argumentNamePattern": "^options$",
        "type": "(CanvasRenderingContext2DSettings or ImageBitmapRenderingContextSettings or WebGLContextAttributes)"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_xhr",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^XMLHttpRequest$",
        "attributeNamePattern": "^readyState$",
        "type": "XMLHttpRequestReadyState"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "description": "Ensure empty enumeration value has a valid name when mapped to Java",
      "sourceSelector": "name=whatwg_xhr",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^XMLHttpRequestResponseType$",
        "memberNamePattern": "^$",
        "extendedAttribute": "JavaName=default_text"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "description": "Ensure empty enumeration value has a valid name when mapped to Java",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^CanPlayTypeResult$",
        "memberNamePattern": "^$",
        "extendedAttribute": "JavaName=negative"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "description": "Ensure empty enumeration value has a valid name when mapped to Java",
      "sourceSelector": "name=whatwg_fetch",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^RequestDestination$",
        "memberNamePattern": "^$",
        "extendedAttribute": "JavaName=other"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "description": "Ensure empty enumeration value has a valid name when mapped to Java",
      "sourceSelector": "name=gamepad",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^GamepadMappingType$",
        "memberNamePattern": "^$",
        "extendedAttribute": "JavaName=unknown"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "description": "Ensure empty enumeration value has a valid name when mapped to Java",
      "sourceSelector": "name=gamepad_extensions",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^GamepadHand$",
        "memberNamePattern": "^$",
        "extendedAttribute": "JavaName=other"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "description": "Ensure empty enumeration value has a valid name when mapped to Java",
      "sourceSelector": "name=webvtt1",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^DirectionSetting$",
        "memberNamePattern": "^$",
        "extendedAttribute": "JavaName=horizontal"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "description": "Ensure empty enumeration value has a valid name when mapped to Java",
      "sourceSelector": "name=webvtt1",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^ScrollSetting$",
        "memberNamePattern": "^$",
        "extendedAttribute": "JavaName=none"
      }
    },
    {
      "name": "RemoveMember",
      "description": "the cssom spec 'overrides' the definitions to be of type double",
      "sourceSelector": "name=uievents",
      "config": {
        "expectedRemoveCount": 8,
        "elementNamePattern": "^(MouseEvent|MouseEventInit)$",
        "memberNamePattern": "^(clientX|clientY|screenX|screenY)$",
        "types": ["interface_type", "dictionary"]
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=uievents",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^KeyboardEvent$",
        "attributeNamePattern": "^location$",
        "type": "KeyboardEventLocation"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=uievents",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^WheelEvent$",
        "attributeNamePattern": "^deltaMode$",
        "type": "WheelEventDeltaMode"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_dom",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^Event$",
        "attributeNamePattern": "^eventPhase$",
        "type": "EventPhase"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_dom",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^XPathResult$",
        "attributeNamePattern": "^resultType$",
        "type": "XPathResultResultType"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=whatwg_dom",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^Node$",
        "attributeNamePattern": "^nodeType$",
        "type": "NodeType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=whatwg_dom",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^Range$",
        "operationNamePattern": "^compareBoundaryPoints$",
        "argumentNamePattern": "^how$",
        "type": "RangeCompareType"
      }
    },
    {
      "name": "RemoveMember",
      "description": "this is a legacy API that was left for backwards compatibility but causes issues in GWT because the objects returned used prototypes from the top level page rather than the containing iframe",
      "sourceSelector": "name=mediacapture_main",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^Navigator$",
        "memberNamePattern": "^getUserMedia$",
        "types": ["interface_type"]
      }
    },
    {
      "name": "RemoveElement",
      "description": "The HTMLFormControlsCollection overrides HTMLCollection with incompatible method so we patch it. This is not strictly consistent with js but not sure how else to handle it",
      "sourceSelector": "name=whatwg_html",
      "config": {
        "expectedRemoveCount": 1,
        "namePattern": "^HTMLFormControlsCollection$",
        "type": ["interface_type"]
      }
    },
    {
      "name": "RemoveElement",
      "description": "These are no longer needed once Navigator.getUserMedia is removed",
      "sourceSelector": "name=mediacapture_main",
      "config": {
        "expectedRemoveCount": 2,
        "namePattern": "^(NavigatorUserMediaSuccessCallback|NavigatorUserMediaErrorCallback)$",
        "type": ["callback"]
      }
    },
    {
      "name": "RemoveElement",
      "description": "This defined in both webrtc_stats and webrtc so lets remove one",
      "sourceSelector": "name=webrtc_stats",
      "config": {
        "expectedRemoveCount": 1,
        "namePattern": "^RTCStats$",
        "type": ["dictionary"]
      }
    },
    {
      "name": "RemoveMember",
      "description": "the spec defines these members in RTCAudioHandlerStats which is the parent dictionary of RTCAudioReceiverStats",
      "sourceSelector": "name=webrtc_stats",
      "config": {
        "expectedRemoveCount": 3,
        "elementNamePattern": "^RTCAudioReceiverStats$",
        "memberNamePattern": "^(audioLevel|totalAudioEnergy|totalSamplesDuration)$",
        "types": ["dictionary"]
      }
    },
    {
      "name": "RemoveMember",
      "description": "the fileapi spec 'overrides' a operation on URL with a union of blob and the type defined in the mediasource spec. We re-add the blob variant in the fileapi_patch variant",
      "sourceSelector": "name=fileapi",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^URL$",
        "memberNamePattern": "^createObjectURL$",
        "types": ["interface_type"]
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=fileapi",
      "config": {
        "expectedRemoveCount": 1,
        "elementNamePattern": "^FileReader$",
        "attributeNamePattern": "^readyState$",
        "type": "FileReaderReadyState"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Change arguments to be more efficient type. Not strictly required but a good practie to enforce and cleans up the API",
      "sourceSelector": "name=webgl_multi_draw",
      "config": {
        "expectedChangeCount": 10,
        "elementNamePattern": "^.*$",
        "operationNamePattern": "^.*$",
        "argumentNamePattern": "^(firstsList|countsList|offsetsList|instanceCountsList)$",
        "type": "Int32Array"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl_multi_draw",
      "config": {
        "expectedChangeCount": 4,
        "elementNamePattern": "^.*$",
        "operationNamePattern": "^.*$",
        "argumentNamePattern": "^mode$",
        "type": "DrawMode"
      }
    },
    {
      "name": "Merge"
    },
    {
      "name": "AddNoSideEffectsExtendedAttribute",
      "description": "Source NoSideEffects attributes from central location",
      "config": {
        "file": "data/pipelines/no_side_effects.txt"
      }
    },
    {
      "name": "SynthesizeTransferable",
      "config": {
        "expectedTransferableCount": 7
      }
    },
    {
      "name": "RemoveIncludes",
      "description": "Both SVGURIReference and HTMLHyperlinkElementUtils mixin define the href attribute and they are defined as different types. USVString in HTMLHyperlinkElementUtils and SVGAnimatedString in SVGURIReference. This stage effectively selects the HTMLHyperlinkElementUtils variant which seems more authoritative",
      "config": {
        "expectedRemoveCount": 1,
        "interfacePattern": "^SVGAElement$",
        "mixinPattern": "^SVGURIReference$"
      }
    },
    {
      "name": "Flatten"
    },
    {
      "name": "Validate"
    },
    {
      "name": "DedupEventMember",
      "description": "Dedup required as Merge stage has merged mixins interfaces which may have resulted in duplicates"
    },
    {
      "name": "RenameType",
      "description": "Reworked naming convention of typedef so that the underlying type has a nicer name for the java interface",
      "config": {
        "expectedRenameCount": 1,
        "namePattern": "^EventHandler$",
        "replacement": "NullableEventHandler"
      }
    },
    {
      "name": "RenameType",
      "description": "Reworked naming convention of typedef so that the underlying type has a nicer name for the java interface",
      "config": {
        "expectedRenameCount": 1,
        "namePattern": "^EventHandlerNonNull$",
        "replacement": "EventHandler"
      }
    },
    {
      "name": "RenameType",
      "description": "Reworked naming convention of typedef so that the underlying type has a nicer name for the java interface",
      "config": {
        "expectedRenameCount": 1,
        "namePattern": "^OnBeforeUnloadEventHandler$",
        "replacement": "NullableOnBeforeUnloadEventHandler"
      }
    },
    {
      "name": "RenameType",
      "description": "Reworked naming convention of typedef so that the underlying type has a nicer name for the java interface",
      "config": {
        "expectedRenameCount": 1,
        "namePattern": "^OnBeforeUnloadEventHandlerNonNull$",
        "replacement": "OnBeforeUnloadEventHandler"
      }
    },
    {
      "name": "RenameType",
      "description": "Reworked naming convention of typedef so that the underlying type has a nicer name for the java interface",
      "config": {
        "expectedRenameCount": 1,
        "namePattern": "^OnErrorEventHandler$",
        "replacement": "NullableOnErrorEventHandler"
      }
    },
    {
      "name": "RenameType",
      "description": "Reworked naming convention of typedef so that the underlying type has a nicer name for the java interface",
      "config": {
        "expectedRenameCount": 1,
        "namePattern": "^OnErrorEventHandlerNonNull$",
        "replacement": "OnErrorEventHandler"
      }
    },
    {
      "name": "MergeDocs",
      "description": "Add documentation from doc repository. We need to this here again as some documentation is defined on interfaces when it comes form a mixin",
      "config": {
        "createEvents": true
      }
    },
    {
      "name": "DedupEventMember",
      "description": "Dedup required as MergeDocs stage may have created new events and new duplicates"
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^createShader$",
        "argumentNamePattern": "^type$",
        "type": "ShaderType"
      }
    },
    {
      "name": "ChangeReturnType",
      "description": "Tighten up the return types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^getError$",
        "type": "WebGLContextError"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 16,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^(texImage2D|texSubImage2D|compressedTexImage2D|compressedTexSubImage2D|copyTexImage2D|copyTexSubImage2D)$",
        "argumentNamePattern": "^target$",
        "type": "Texture2DSurfaceTargetType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^framebufferTexture2D$",
        "argumentNamePattern": "^textarget$",
        "type": "Texture2DSurfaceTargetType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 2,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^(framebufferTexture2D|framebufferRenderbuffer)$",
        "argumentNamePattern": "^attachment$",
        "type": "FramebufferAttachment"
      }
    },
    {
      "name": "AddExtendedAttributeToArgument",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedAddCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^framebufferTexture2D$",
        "argumentNamePattern": "^level$",
        "extendedAttribute": "JavaAnnotation=\"akasha.gl.FramebufferMipmapLevel\""
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^(texStorage2D)$",
        "argumentNamePattern": "^target$",
        "type": "Texture2DTargetType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 13,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^(texImage3D|texSubImage3D|compressedTexImage3D|compressedTexSubImage3D|copyTexImage3D|copyTexSubImage3D|texStorage3D)$",
        "argumentNamePattern": "^target$",
        "type": "Texture3DTargetType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 5,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^(bindTexture|generateMipmap|getTexParameter|texParameterf|texParameteri)$",
        "argumentNamePattern": "^target$",
        "type": "TextureTargetType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 2,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^(texParameterf|texParameteri)$",
        "argumentNamePattern": "^pname$",
        "type": "TextureParameter"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^getTexParameter$",
        "argumentNamePattern": "^pname$",
        "type": "ReadableTextureParameter"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 13,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^(texImage2D|texSubImage2D|readPixels)$",
        "argumentNamePattern": "^type$",
        "type": "TexelDataType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 3,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^(enable|disable|isEnabled)$",
        "argumentNamePattern": "^cap$",
        "type": "Capability"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 2,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^blendFunc$",
        "argumentNamePattern": "^(sfactor|dfactor)$",
        "type": "BlendFactor"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^frontFace$",
        "argumentNamePattern": "^mode$",
        "type": "Winding"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^pixelStorei$",
        "argumentNamePattern": "^pname$",
        "type": "PixelStorageParameter"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^getParameter$",
        "argumentNamePattern": "^pname$",
        "type": "WebGLParameterName"
      }
    },
    {
      "name": "ChangeArgumentType",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^getExtension$",
        "argumentNamePattern": "^name$",
        "type": "WebGLExtensionName"
      }
    },
    {
      "name": "ChangeReturnType",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^getExtension$",
        "type": "WebGLExtension?"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 3,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^(bindFramebuffer|framebufferTexture2D|framebufferRenderbuffer)$",
        "argumentNamePattern": "^target$",
        "type": "FramebufferTargetType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^bindRenderbuffer$",
        "argumentNamePattern": "^target$",
        "type": "RenderbufferTargetType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 3,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^bufferData$",
        "argumentNamePattern": "^usage$",
        "type": "UsageType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 5,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^texImage2D$",
        "argumentNamePattern": "^internalformat$",
        "type": "TextureInternalFormat"
      }
    },
    {
      "name": "ChangeAttributeType",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGLActiveInfo$",
        "attributeNamePattern": "^type$",
        "type": "ActiveInfoDataType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^renderbufferStorage$",
        "argumentNamePattern": "^internalformat$",
        "type": "RenderbufferStorageInternalFormat"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^renderbufferStorage$",
        "argumentNamePattern": "^target$",
        "type": "RenderbufferStorageTarget"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 5,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^texImage2D$",
        "argumentNamePattern": "^format$",
        "type": "TextureFormat"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 3,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^readPixels$",
        "argumentNamePattern": "^format$",
        "type": "WebGL2PixelFormat"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 5,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^(drawArrays|drawArraysInstanced|drawElements|drawElementsInstanced|drawRangeElements)$",
        "argumentNamePattern": "^mode$",
        "type": "DrawMode"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 8,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^(bindBuffer|bufferData|bufferSubData|getBufferParameter|getBufferSubData)$",
        "argumentNamePattern": "^target$",
        "type": "BufferTargetType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 3,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^(drawElements|drawElementsInstanced|drawRangeElements)$",
        "argumentNamePattern": "^type$",
        "type": "DrawElementsDataType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^vertexAttribPointer$",
        "argumentNamePattern": "^type$",
        "type": "AttributeComponentDataType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^vertexAttribIPointer$",
        "argumentNamePattern": "^type$",
        "type": "AttributeComponentIntegerDataType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^getShaderParameter$",
        "argumentNamePattern": "^pname$",
        "type": "ShaderParameterType"
      }
    },
    {
      "name": "ChangeArgumentType",
      "description": "Tighten up the parameter types",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^getProgramParameter$",
        "argumentNamePattern": "^pname$",
        "type": "ProgramParameterType"
      }
    },
    {
      "name": "AddExtendedAttributeToMember",
      "description": "Annotate a couple of methods that are expected to contain GLSL fragments",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedAddCount": 2,
        "elementNamePattern": "^(WebGL2RenderingContext|WebGLRenderingContext)$",
        "memberNamePattern": "^getShaderSource$",
        "extendedAttribute": "JavaAnnotation=\"akasha.gl.GLSL\""
      }
    },
    {
      "name": "AddExtendedAttributeToArgument",
      "description": "Specify vertex dimensions",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedAddCount": 2,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^(vertexAttribPointer|vertexAttribIPointer)$",
        "argumentNamePattern": "^size$",
        "extendedAttribute": "JavaAnnotation=\"akasha.gl.VertexDimensions\""
      }
    },
    {
      "name": "AddExtendedAttributeToArgument",
      "description": "Specify vertex dimensions",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedAddCount": 23,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^(getActiveAttrib|bindAttribLocation|disableVertexAttribArray|enableVertexAttribArray|getVertexAttrib|getVertexAttribOffset|vertexAttrib1f|vertexAttrib1fv|vertexAttrib2f|vertexAttrib2fv|vertexAttrib3f|vertexAttrib3fv|vertexAttrib4f|vertexAttrib4fv|vertexAttribPointer|bindBufferBase|bindBufferRange|vertexAttribDivisor|vertexAttribI4i|vertexAttribI4iv|vertexAttribI4ui|vertexAttribI4uiv|vertexAttribIPointer)$",
        "argumentNamePattern": "^index$",
        "extendedAttribute": "JavaAnnotation=\"akasha.gl.AttributeIndex\""
      }
    },
    {
      "name": "ChangeArgumentType",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedChangeCount": 1,
        "elementNamePattern": "^WebGL2RenderingContext$",
        "operationNamePattern": "^getVertexAttribOffset$",
        "argumentNamePattern": "^pname$",
        "type": "VertexAttribOffsetParameterName"
      }
    },
    {
      "name": "AddExtendedAttributeToArgument",
      "description": "Annotate a couple of method arguments that are expected to contain GLSL fragments",
      "sourceSelector": "name=webgl.*",
      "config": {
        "expectedAddCount": 2,
        "elementNamePattern": "^(WebGL2RenderingContext|WebGLRenderingContext)$",
        "operationNamePattern": "^shaderSource$",
        "argumentNamePattern": "^source$",
        "extendedAttribute": "JavaAnnotation=\"akasha.gl.GLSL\""
      }
    },
    {
      "name": "JavaizeEventHandlers"
    },
    {
      "name": "ExtendObject"
    },
    {
      "name": "JsSymbolDedup"
    },
    {
      "name": "AddExtendedAttribute",
      "description": "After JsSymbolDedup runs we move one of the synthesized unions to correct sub-package",
      "config": {
        "expectedAddCount": 1,
        "namePattern": "^AudioNodeOrUndefinedUnion$",
        "extendedAttribute": "JavaSubPackage=audio"
      }
    },
    {
      "name": "NameAnonymousUnions",
      "config": {
        "expectedChangeCount": 27
      }
    },
    {
      "name": "RenameType",
      "description": "Rename synthesized type",
      "config": {
        "expectedRenameCount": 1,
        "namePattern": "^ImageBitmapOrHTMLCanvasElementOrOffscreenCanvasUnion$",
        "replacement": "GPUImageCopyExternalImageSource"
      }
    },
    {
      "name": "RenameType",
      "description": "Rename synthesized type",
      "config": {
        "expectedRenameCount": 1,
        "namePattern": "^ClientOrServiceWorkerOrMessagePortUnion$",
        "replacement": "ExtendableMessageEventSource"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "description": "Convert synthetic union types into marker types",
      "config": {
        "expectedAddCount": 2,
        "namePattern": "^(GPUImageCopyExternalImageSource|ExtendableMessageEventSource)$",
        "extendedAttribute": "MarkerType"
      }
    },
    {
      "name": "RemoveExtendedAttribute",
      "description": "Extended attribute now no longer relevant as we have patched types",
      "config": {
        "expectedRemoveCount": 2,
        "namePattern": "^(GPUImageCopyExternalImageSource|ExtendableMessageEventSource)$",
        "extendedAttribute": "Synthetic"
      }
    },
    {
      "name": "AddExtendedAttribute",
      "config": {
        "namePattern": "^(GPUImageCopyExternalImageSource)$",
        "extendedAttribute": "JavaSubPackage=gpu"
      }
    }
  ]
}
